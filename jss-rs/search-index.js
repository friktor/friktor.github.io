var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["app_units"]={"doc":"An Au is an \"App Unit\" and represents 1/60th of a CSS pixel. It was originally proposed in 2002 as a standard unit of measure in Gecko. See https://bugzilla.mozilla.org/show_bug.cgi?id=177805 for more info.","items":[[3,"Au","app_units","An App Unit, the fundamental unit of length in Servo. Usually 1/60th of a pixel (see AU_PER_PX)",N,N],[12,"0","","",0,N],[11,"clone","","",0,[[["self"]],["au"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["au"]],["bool"]]],[11,"ne","","",0,[[["self"],["au"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["au"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["au"]],["bool"]]],[11,"le","","",0,[[["self"],["au"]],["bool"]]],[11,"gt","","",0,[[["self"],["au"]],["bool"]]],[11,"ge","","",0,[[["self"],["au"]],["bool"]]],[11,"cmp","","",0,[[["self"],["au"]],["ordering"]]],[11,"deserialize","","",0,[[["d"]],["result",["au"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"default","","",0,[[],["au"]]],[11,"zero","","",0,[[],["au"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"add","","",0,[[["self"],["au"]],["au"]]],[11,"sub","","",0,[[["self"],["au"]],["au"]]],[11,"mul","","",0,[[["self"],["i32"]],["au"]]],[11,"div","","",0,[[["self"],["au"]],["i32"]]],[11,"div","","",0,[[["self"],["i32"]],["au"]]],[11,"rem","","",0,[[["self"],["au"]],["au"]]],[11,"rem","","",0,[[["self"],["i32"]],["au"]]],[11,"neg","","",0,[[["self"]],["au"]]],[11,"add_assign","","",0,[[["self"],["au"]]]],[11,"sub_assign","","",0,[[["self"],["au"]]]],[11,"mul_assign","","",0,[[["self"],["i32"]]]],[11,"div_assign","","",0,[[["self"],["i32"]]]],[11,"new","","FIXME(pcwalton): Workaround for lack of cross crate inlining of newtype structs!",0,[[["i32"]],["au"]]],[11,"scale_by","","",0,[[["self"],["f32"]],["au"]]],[11,"scale_by_trunc","","Scale, but truncate (useful for viewport-relative units)",0,[[["self"],["f32"]],["au"]]],[11,"from_f64_au","","",0,[[["f64"]],["self"]]],[11,"from_px","","",0,[[["i32"]],["au"]]],[11,"to_px","","Rounds this app unit down to the pixel towards zero and returns it.",0,[[["self"]],["i32"]]],[11,"ceil_to_px","","Ceil this app unit to the appropriate pixel boundary and return it.",0,[[["self"]],["i32"]]],[11,"to_nearest_px","","",0,[[["self"]],["i32"]]],[11,"to_nearest_pixel","","",0,[[["self"],["f32"]],["f32"]]],[11,"to_f32_px","","",0,[[["self"]],["f32"]]],[11,"to_f64_px","","",0,[[["self"]],["f64"]]],[11,"from_f32_px","","",0,[[["f32"]],["au"]]],[11,"from_f64_px","","",0,[[["f64"]],["au"]]],[11,"abs","","",0,[[["self"]],["self"]]],[17,"MIN_AU","","",N,N],[17,"MAX_AU","","",N,N],[17,"AU_PER_PX","","The number of app units in a pixel.",N,N]],"paths":[[3,"Au"]]};
searchIndex["arrayvec"]={"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",N,N],[3,"CapacityError","","Error value indicating insufficient capacity",N,N],[3,"ArrayVec","","A vector with a fixed capacity.",N,N],[3,"IntoIter","","By-value iterator for `ArrayVec`.",N,N],[3,"Drain","","A draining iterator for `ArrayVec`.",N,N],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],["result",["capacityerror"]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],["result",["utf8error"]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],["result",["capacityerror"]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],["result",["capacityerror"]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],["option",["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["self"],["str"]],["result"]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["str"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["str"]],["bool"]]],[11,"le","","",0,[[["self"],["str"]],["bool"]]],[11,"gt","","",0,[[["self"],["str"]],["bool"]]],[11,"ge","","",0,[[["self"],["str"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"cmp","","",1,[[["self"],["capacityerror"]],["ordering"]]],[11,"eq","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["capacityerror"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"le","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"gt","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"ge","","",1,[[["self"],["capacityerror"]],["bool"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[["self"]],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,[[["self"]],["capacityerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Array","","Trait for fixed size arrays.",N,N],[16,"Item","","The array’s element type",2,N],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,N],[11,"try_push","","Push `element` to the end of the vector.",4,N],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,N],[11,"insert","","Insert `element` at position `index`.",4,N],[11,"try_insert","","Insert `element` at position `index`.",4,N],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,N],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,N],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,[[["self"],["r"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,[[["self"]],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,[[["self"]]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,N],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"from","","",4,[[["a"]],["self"]]],[11,"into_iter","","",4,[[["self"]],["intoiter"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"drop","","",6,[[["self"]]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"partial_cmp","","",4,[[["self"],["arrayvec"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["arrayvec"]],["ordering"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"start","","Start index (inclusive)",3,[[["self"]],["option",["usize"]]]],[11,"end","","End index (exclusive)",3,[[["self"]],["option",["usize"]]]]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"backtrace_state"]]};
searchIndex["binary_space_partition"]={"doc":"Binary Space Partitioning (BSP)","items":[[3,"BspNode","binary_space_partition","A node in the `BspTree`, which can be considered a tree itself.",N,N],[4,"PlaneCut","","The result of one plane being cut by another one. The \"cut\" here is an attempt to classify a plane as being in front or in the back of another one.",N,N],[13,"Sibling","","The planes are one the same geometrical plane.",0,N],[13,"Cut","","Planes are different, thus we can either determine that our plane is completely in front/back of another one, or split it into these sub-groups.",0,N],[12,"front","binary_space_partition::PlaneCut","Sub-planes in front of the base plane.",0,N],[12,"back","","Sub-planes in the back of the base plane.",0,N],[8,"Plane","binary_space_partition","A plane abstracted to the matter of partitioning.",N,N],[10,"cut","","Try to cut a different plane by this one.",1,[[["self"],["self"]],["planecut"]]],[10,"is_aligned","","Check if a different plane is aligned in the same direction as this one.",1,[[["self"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["bspnode"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new node.",2,[[],["self"]]],[11,"is_leaf","","Check if this node is a leaf of the tree.",2,[[["self"]],["bool"]]],[11,"get_depth","","Get the tree depth starting with this node.",2,[[["self"]],["usize"]]],[11,"insert","","Insert a value into the sub-tree starting with this node. This operation may spawn additional leafs/branches of the tree.",2,[[["self"],["t"]]]],[11,"order","","Build the draw order of this sub-tree into an `out` vector, so that the contained planes are sorted back to front according to the view vector defines as the `base` plane front direction.",2,[[["self"],["t"],["vec"]]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"PlaneCut"],[8,"Plane"],[3,"BspNode"]]};
searchIndex["bincode"]={"doc":"Bincode is a crate for encoding and decoding using a tiny binary serialization strategy.  Using it, you can easily go from having an object in memory, quickly serialize it to bytes, and then deserialize it back just as fast!","items":[[3,"Config","bincode","A configuration builder whose options Bincode will use while serializing and deserializing.",N,N],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",N,N],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",0,N],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",0,N],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",0,N],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",0,N],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",0,N],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",0,N],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",0,N],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",0,N],[13,"Custom","","A custom error message from Serde.",0,N],[5,"config","","Get a default configuration object.",N,[[],["config"]]],[5,"serialize_into","","Serializes an object directly into a `Writer` using the default configuration.",N,[[["w"],["t"]],["result"]]],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes using the default configuration.",N,[[["t"]],["result",["vec"]]]],[5,"deserialize_from","","Deserializes an object directly from a `Read`er using the default configuration.",N,[[["r"]],["result"]]],[5,"deserialize_from_custom","","Deserializes an object from a custom `BincodeRead`er using the default configuration. It is highly recommended to use `deserialize_from` unless you need to implement `BincodeRead` for performance reasons.",N,[[["r"]],["result"]]],[5,"deserialize","","Deserializes a slice of bytes into an instance of `T` using the default configuration.",N,N],[5,"serialized_size","","Returns the size that an object would be if serialized using Bincode with the default configuration.",N,[[["t"]],["result",["u64"]]]],[11,"no_limit","","Sets the byte limit to be unlimited. This is the default.",1,[[["self"]],["self"]]],[11,"limit","","Sets the byte limit to `limit`.",1,[[["self"],["u64"]],["self"]]],[11,"little_endian","","Sets the endianness to little-endian This is the default.",1,[[["self"]],["self"]]],[11,"big_endian","","Sets the endianness to big-endian",1,[[["self"]],["self"]]],[11,"native_endian","","Sets the endianness to the the machine-native endianness",1,[[["self"]],["self"]]],[11,"serialize","","Serializes a serializable object into a `Vec` of bytes using this configuration",1,[[["self"],["t"]],["result",["vec"]]]],[11,"serialized_size","","Returns the size that an object would be if serialized using Bincode with this configuration",1,[[["self"],["t"]],["result",["u64"]]]],[11,"serialize_into","","Serializes an object directly into a `Writer` using this configuration",1,[[["self"],["w"],["t"]],["result"]]],[11,"deserialize","","Deserializes a slice of bytes into an instance of `T` using this configuration",1,N],[11,"deserialize_from","","Deserializes an object directly from a `Read`er using this configuration",1,[[["self"],["r"]],["result"]]],[11,"deserialize_from_custom","","Deserializes an object from a custom `BincodeRead`er using the default configuration. It is highly recommended to use `deserialize_from` unless you need to implement `BincodeRead` for performance reasons.",1,[[["self"],["r"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[6,"Error","","An error that can be produced during (de)serializing.",N,N],[6,"Result","","The result of a serialization or deserialization operation.",N,N],[8,"BincodeRead","","An optional Read trait for advanced Bincode usage.",N,N],[10,"forward_read_str","","Forwards reading `length` bytes of a string on to the serde reader.",2,[[["self"],["usize"],["v"]],["result"]]],[10,"get_byte_buffer","","Return the first `length` bytes of the internal byte buffer.",2,[[["self"],["usize"]],["result",["vec"]]]],[10,"forward_read_bytes","","Forwards reading `length` bytes on to the serde reader.",2,[[["self"],["usize"],["v"]],["result"]]],[11,"from","","",3,[[["error"]],["error"]]],[11,"custom","","",3,[[["t"]],["error"]]],[11,"custom","","",3,[[["t"]],["self"]]]],"paths":[[4,"ErrorKind"],[3,"Config"],[8,"BincodeRead"],[6,"Error"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["crossbeam_deque"]={"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",N,N],[3,"Stealer","","A stealer that steals elements from the top of a deque.",N,N],[4,"Steal","","Possible outcomes of a steal operation.",N,N],[13,"Empty","","The deque was empty at the time of stealing.",0,N],[13,"Data","","Some data has been successfully stolen.",0,N],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["steal"]],["bool"]]],[11,"ne","","",0,[[["self"],["steal"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["steal"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["steal"]],["bool"]]],[11,"le","","",0,[[["self"],["steal"]],["bool"]]],[11,"gt","","",0,[[["self"],["steal"]],["bool"]]],[11,"ge","","",0,[[["self"],["steal"]],["bool"]]],[11,"cmp","","",0,[[["self"],["steal"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["steal"]]],[11,"new","","Returns a new deque.",1,[[],["deque"]]],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,[[["usize"]],["deque"]]],[11,"is_empty","","Returns `true` if the deque is empty.",1,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the deque.",1,[[["self"]],["usize"]]],[11,"push","","Pushes an element into the bottom of the deque.",1,[[["self"],["t"]]]],[11,"pop","","Pops an element from the bottom of the deque.",1,[[["self"]],["option"]]],[11,"steal","","Steals an element from the top of the deque.",1,[[["self"]],["steal"]]],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,[[["self"]],["stealer"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["deque"]]],[11,"is_empty","","Returns `true` if the deque is empty.",2,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the deque.",2,[[["self"]],["usize"]]],[11,"steal","","Steals an element from the top of the deque.",2,[[["self"]],["steal"]]],[11,"clone","","Creates another stealer.",2,[[["self"]],["stealer"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"]={"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",N,N],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",N,N],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,N],[12,"new","","The new value, which the operation failed to store.",0,N],[3,"Owned","","An owned heap-allocated object.",N,N],[3,"Shared","","A pointer to an object protected by the epoch GC.",N,N],[3,"Guard","","A guard that keeps the current thread pinned.",N,N],[3,"Collector","","An epoch-based garbage collector.",N,N],[3,"Handle","","A handle to a garbage collector.",N,N],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",N,[[],["guard"]]],[5,"default_handle","","Returns the default handle associated with the current thread.",N,[[],["handle"]]],[5,"is_pinned","","Returns `true` if the current thread is pinned.",N,[[],["bool"]]],[5,"pin","","Pins the current thread.",N,[[],["guard"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"null","","Returns a new null atomic pointer.",1,[[],["atomic"]]],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,[[["t"]],["atomic"]]],[11,"load","","Loads a `Shared` from the atomic pointer.",1,[[["self"],["ordering"],["guard"]],["shared"]]],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,[[["self"],["p"],["ordering"]]]],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,[[["self"],["p"],["ordering"],["guard"]],["shared"]]],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,[[["self"],["shared"],["p"],["o"],["guard"]],["result",["shared","compareandseterror"]]]],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,[[["self"],["usize"],["ordering"],["guard"]],["shared"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","Returns a copy of the atomic value.",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,[[["owned"]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,[[["shared"]],["self"]]],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,N],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,[[["t"]],["owned"]]],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,N],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,[[["self"],["guard"]],["shared"]]],[11,"into_box","","Converts the owned pointer into a `Box`.",2,[[["self"]],["box"]]],[11,"tag","","Returns the tag stored within the pointer.",2,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,[[["self"],["usize"]],["owned"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["self"]]],[11,"from","","Returns a new owned pointer pointing to `b`.",2,[[["box"]],["self"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"null","","Returns a new null pointer.",3,[[],["shared"]]],[11,"is_null","","Returns `true` if the pointer is null.",3,[[["self"]],["bool"]]],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,N],[11,"deref","","Dereferences the pointer.",3,[[["self"]],["t"]]],[11,"as_ref","","Converts the pointer to a reference.",3,[[["self"]],["option"]]],[11,"into_owned","","Takes ownership of the pointee.",3,[[["self"]],["owned"]]],[11,"tag","","Returns the tag stored within the pointer.",3,[[["self"]],["usize"]]],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,[[["self"],["usize"]],["shared"]]],[11,"from","","Returns a new pointer pointing to `raw`.",3,N],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"new","","Creates a new collector.",4,[[],["self"]]],[11,"handle","","Creates a new handle for the collector.",4,[[["self"]],["handle"]]],[11,"clone","","Creates another reference to the same garbage collector.",4,[[["self"]],["self"]]],[11,"pin","","Pins the handle.",5,[[["self"]],["guard"]]],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,[[["self"]],["bool"]]],[11,"drop","","",5,[[["self"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,[[["self"],["f"]]]],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,[[["self"]]]],[11,"repin","","Unpins and then immediately re-pins the thread.",6,[[["self"]]]],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,[[["self"],["f"]],["r"]]],[11,"drop","","",6,[[["self"]]]],[11,"clone","","",6,[[["self"]],["guard"]]],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",N,N],[10,"success","","The ordering of the operation when it succeeds.",7,[[["self"]],["ordering"]]],[10,"failure","","The ordering of the operation when it fails.",7,[[["self"]],["ordering"]]]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[0,"cache_padded","crossbeam_utils","",N,N],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",N,N],[11,"drop","","",0,[[["self"]]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"default","","",0,[[],["self"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"atomic_option","crossbeam_utils","",N,N],[3,"AtomicOption","crossbeam_utils::atomic_option","",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"new","","",1,[[],["self"]]],[11,"swap_box","","",1,[[["self"],["box"],["ordering"]],["option",["box"]]]],[11,"swap","","",1,[[["self"],["t"],["ordering"]],["option"]]],[11,"take","","",1,[[["self"],["ordering"]],["option"]]],[11,"default","","",1,[[],["self"]]],[0,"scoped","crossbeam_utils","",N,N],[3,"Scope","crossbeam_utils::scoped","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",2,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",2,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",4,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",3,[[["self"]],["t"]]],[11,"thread","","Get the underlying thread handle.",3,[[["self"]],["thread"]]],[11,"drop","","",2,[[["self"]]]],[11,"into","crossbeam_utils::cache_padded","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","crossbeam_utils::atomic_option","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","crossbeam_utils::scoped","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["css_color_parser"]={"doc":"Easy-to-use Rust parser for CSS3 color strings. Lightweight. Reliable (Provides tests, handles all errors to avoid panic!s).","items":[[3,"Color","css_color_parser","Color in rgba format, where {red,green,blue} in 0..255, alpha in 0.0..1.0",N,N],[12,"r","","red channel, ranges from 0 to 255",0,N],[12,"g","","green channel, ranges from 0 to 255",0,N],[12,"b","","blue channel, ranges from 0 to 255",0,N],[12,"a","","alpha channel, ranges from 0.0 to 1.0",0,N],[3,"ColorParseError","","",N,N],[3,"NAMED_COLORS","","List of CSS3 named colors from http://www.w3.org/TR/css3-color.",N,N],[11,"clone","","",0,[[["self"]],["color"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["color"]],["bool"]]],[11,"ne","","",0,[[["self"],["color"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["parseinterror"]],["colorparseerror"]]],[11,"from","","",1,[[["parsefloaterror"]],["colorparseerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["colorparseerror"]]]],[11,"deref","","",2,[[["self"]],["hashmap"]]]],"paths":[[3,"Color"],[3,"ColorParseError"],[3,"NAMED_COLORS"]]};
searchIndex["dtoa"]={"doc":"","items":[[5,"write","dtoa","",N,[[["w"],["v"]],["result",["usize"]]]],[8,"Floating","","",N,N],[10,"write","","",0,[[["self"],["w"]],["result",["usize"]]]],[14,"diyfp","","",N,N],[14,"dtoa","","",N,N]],"paths":[[8,"Floating"]]};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[["self"]],["t"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Either"]]};
searchIndex["enum_extract"]={"doc":"This crate provides 2 macros, `extract!` and `let_extract!`. See their individual macro-level documentation for more information.","items":[[14,"extract","enum_extract","Extract the fields of a single variant from an enum, returning an `Option<T>` where `T` is either the single field, or a tuple of each of the fields in the order they are written.",N,N],[14,"let_extract","","Extract the fields of a single variant from an enum, binding them into the current scope.",N,N]],"paths":[]};
searchIndex["euclid"]={"doc":"A collection of strongly typed math tools for computer graphics with an inclination towards 2d graphics and layout.","items":[[3,"Length","euclid","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.",N,N],[12,"0","","",0,N],[3,"TypedScale","","A scaling factor between two different units of measurement.",N,N],[12,"0","","",1,N],[3,"TypedTransform2D","","A 2d transform stored as a 3 by 2 matrix in row-major order in memory.",N,N],[12,"m11","","",2,N],[12,"m12","","",2,N],[12,"m21","","",2,N],[12,"m22","","",2,N],[12,"m31","","",2,N],[12,"m32","","",2,N],[3,"TypedTransform3D","","A 3d transform stored as a 4 by 4 matrix in row-major order in memory.",N,N],[12,"m11","","",3,N],[12,"m12","","",3,N],[12,"m13","","",3,N],[12,"m14","","",3,N],[12,"m21","","",3,N],[12,"m22","","",3,N],[12,"m23","","",3,N],[12,"m24","","",3,N],[12,"m31","","",3,N],[12,"m32","","",3,N],[12,"m33","","",3,N],[12,"m34","","",3,N],[12,"m41","","",3,N],[12,"m42","","",3,N],[12,"m43","","",3,N],[12,"m44","","",3,N],[3,"TypedPoint2D","","A 2d Point tagged with a unit.",N,N],[12,"x","","",4,N],[12,"y","","",4,N],[3,"TypedPoint3D","","A 3d Point tagged with a unit.",N,N],[12,"x","","",5,N],[12,"y","","",5,N],[12,"z","","",5,N],[3,"TypedVector2D","","A 2d Vector tagged with a unit.",N,N],[12,"x","","",6,N],[12,"y","","",6,N],[3,"TypedVector3D","","A 3d Vector tagged with a unit.",N,N],[12,"x","","",7,N],[12,"y","","",7,N],[12,"z","","",7,N],[3,"BoolVector2D","","",N,N],[12,"x","","",8,N],[12,"y","","",8,N],[3,"BoolVector3D","","",N,N],[12,"x","","",9,N],[12,"y","","",9,N],[12,"z","","",9,N],[3,"HomogeneousVector","","Homogeneous vector in 3D space.",N,N],[12,"x","","",10,N],[12,"y","","",10,N],[12,"z","","",10,N],[12,"w","","",10,N],[3,"TypedRect","","A 2d Rectangle optionally tagged with a unit.",N,N],[12,"origin","","",11,N],[12,"size","","",11,N],[3,"Angle","","An angle in radians",N,N],[12,"radians","","",12,N],[3,"TypedRotation2D","","A transform that can represent rotations in 2d, represented as an angle in radians.",N,N],[12,"angle","","",13,N],[3,"TypedRotation3D","","A transform that can represent rotations in 3d, represented as a quaternion.",N,N],[12,"i","","",14,N],[12,"j","","",14,N],[12,"k","","",14,N],[12,"r","","",14,N],[3,"TypedSideOffsets2D","","",N,N],[12,"top","","",15,N],[12,"right","","",15,N],[12,"bottom","","",15,N],[12,"left","","",15,N],[3,"TypedSize2D","","",N,N],[12,"width","","",16,N],[12,"height","","",16,N],[3,"UnknownUnit","","The default unit.",N,N],[3,"Radians","","An angle in radians",N,N],[12,"radians","","",12,N],[5,"point2","","",N,[[["t"],["t"]],["typedpoint2d"]]],[5,"point3","","",N,[[["t"],["t"],["t"]],["typedpoint3d"]]],[5,"vec2","","Convenience constructor.",N,[[["t"],["t"]],["typedvector2d"]]],[5,"vec3","","Convenience constructor.",N,[[["t"],["t"],["t"]],["typedvector3d"]]],[5,"bvec2","","",N,[[["bool"],["bool"]],["boolvector2d"]]],[5,"bvec3","","",N,[[["bool"],["bool"],["bool"]],["boolvector3d"]]],[5,"rect","","Shorthand for `TypedRect::new(TypedPoint2D::new(x, y), TypedSize2D::new(w, h))`.",N,[[["t"],["t"],["t"],["t"]],["typedrect"]]],[5,"size2","","Shorthand for `TypedSize2D::new(w, h)`.",N,[[["t"],["t"]],["typedsize2d"]]],[0,"approxeq","","",N,N],[8,"ApproxEq","euclid::approxeq","Trait for testing approximate equality",N,N],[10,"approx_epsilon","","",17,[[],["eps"]]],[10,"approx_eq","","",17,[[["self"],["self"]],["bool"]]],[10,"approx_eq_eps","","",17,[[["self"],["self"],["eps"]],["bool"]]],[11,"clone","euclid","",10,[[["self"]],["self"]]],[11,"deserialize","","",10,[[["d"]],["result"]]],[11,"serialize","","",10,[[["self"],["s"]],["result"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"new","","Constructor taking scalar values directly.",10,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"to_point2d","","Convert into Cartesian 2D point.",10,[[["self"]],["typedpoint2d"]]],[11,"to_point3d","","Convert into Cartesian 3D point.",10,[[["self"]],["typedpoint3d"]]],[11,"from","","",10,[[["typedvector2d"]],["self"]]],[11,"from","","",10,[[["typedvector3d"]],["self"]]],[11,"from","","",10,[[["typedpoint2d"]],["self"]]],[11,"from","","",10,[[["typedpoint3d"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[0,"num","","A one-dimensional length, tagged with its units.",N,N],[8,"Zero","euclid::num","",N,N],[10,"zero","","",18,[[],["self"]]],[8,"One","","",N,N],[10,"one","","",19,[[],["self"]]],[8,"Round","","",N,N],[10,"round","","",20,[[["self"]],["self"]]],[8,"Floor","","",N,N],[10,"floor","","",21,[[["self"]],["self"]]],[8,"Ceil","","",N,N],[10,"ceil","","",22,[[["self"]],["self"]]],[11,"clone","euclid","",0,[[["self"]],["self"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"new","","",0,[[["t"]],["self"]]],[11,"get","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"add","","",0,[[["self"],["length"]],["length"]]],[11,"add_assign","","",0,[[["self"],["length"]]]],[11,"sub","","",0,N],[11,"sub_assign","","",0,[[["self"],["length"]]]],[11,"saturating_add","","",0,[[["self"],["length"]],["length"]]],[11,"saturating_sub","","",0,[[["self"],["length"]],["length"]]],[11,"div","","",0,[[["self"],["length"]],["typedscale"]]],[11,"mul","","",0,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div","","",0,[[["self"],["t"]],["self"]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"mul","","",0,[[["self"],["typedscale"]],["length"]]],[11,"div","","",0,[[["self"],["typedscale"]],["length"]]],[11,"neg","","",0,[[["self"]],["length"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",0,[[["self"]],["option",["length"]]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"zero","","",0,[[],["self"]]],[11,"lerp","","Linearly interpolate between this length and another length.",0,[[["self"],["self"],["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"origin","","Constructor, setting all components to zero.",4,[[],["self"]]],[11,"zero","","",4,[[],["self"]]],[11,"to_3d","","Convert into a 3d point.",4,[[["self"]],["typedpoint3d"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",4,[[["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",4,[[["length"],["length"]],["self"]]],[11,"extend","","Create a 3d point from this one, using the specified z value.",4,[[["self"],["t"]],["typedpoint3d"]]],[11,"to_vector","","Cast this point into a vector.",4,[[["self"]],["typedvector2d"]]],[11,"yx","","Swap x and y.",4,[[["self"]],["self"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",4,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",4,[[["self"]],["length"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",4,[[["self"]],["point2d"]]],[11,"from_untyped","","Tag a unitless value with units.",4,[[["point2d"]],["self"]]],[11,"to_array","","",4,N],[11,"add_size","","",4,[[["self"],["typedsize2d"]],["self"]]],[11,"add","","",4,[[["self"],["typedsize2d"]],["self"]]],[11,"add_assign","","",4,[[["self"],["typedvector2d"]]]],[11,"sub_assign","","",4,[[["self"],["typedvector2d"]]]],[11,"add","","",4,[[["self"],["typedvector2d"]],["self"]]],[11,"sub","","",4,[[["self"],["self"]],["typedvector2d"]]],[11,"sub","","",4,[[["self"],["typedvector2d"]],["self"]]],[11,"min","","",4,[[["self"],["self"]],["self"]]],[11,"max","","",4,[[["self"],["self"]],["self"]]],[11,"mul","","",4,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",4,[[["self"],["t"]]]],[11,"div","","",4,[[["self"],["t"]],["self"]]],[11,"div_assign","","",4,[[["self"],["t"]]]],[11,"mul","","",4,[[["self"],["typedscale"]],["typedpoint2d"]]],[11,"div","","",4,[[["self"],["typedscale"]],["typedpoint2d"]]],[11,"round","","Rounds each component to the nearest integer value.",4,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",4,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",4,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",4,[[["self"]],["option",["typedpoint2d"]]]],[11,"to_f32","","Cast into an `f32` point.",4,[[["self"]],["typedpoint2d",["f32"]]]],[11,"to_f64","","Cast into an `f64` point.",4,[[["self"]],["typedpoint2d",["f64"]]]],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["usize"]]]],[11,"to_u32","","Cast into an `u32` point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["u32"]]]],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["i32"]]]],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["i64"]]]],[11,"lerp","","Linearly interpolate between this point and another point.",4,[[["self"],["self"],["t"]],["self"]]],[11,"approx_epsilon","","",4,[[],["self"]]],[11,"approx_eq","","",4,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",4,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",4,N],[11,"from","","",4,N],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"origin","","Constructor, setting all components to zero.",5,[[],["self"]]],[11,"to_array_4d","","",5,N],[11,"lerp","","Linearly interpolate between this point and another point.",5,[[["self"],["self"],["t"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",5,[[["t"],["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",5,[[["length"],["length"],["length"]],["self"]]],[11,"to_vector","","Cast this point into a vector.",5,[[["self"]],["typedvector3d"]]],[11,"xy","","Returns a 2d point using this point's x and y coordinates",5,[[["self"]],["typedpoint2d"]]],[11,"xz","","Returns a 2d point using this point's x and z coordinates",5,[[["self"]],["typedpoint2d"]]],[11,"yz","","Returns a 2d point using this point's x and z coordinates",5,[[["self"]],["typedpoint2d"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",5,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",5,[[["self"]],["length"]]],[11,"z_typed","","Returns self.z as a Length carrying the unit.",5,[[["self"]],["length"]]],[11,"to_array","","",5,N],[11,"to_untyped","","Drop the units, preserving only the numeric value.",5,[[["self"]],["point3d"]]],[11,"from_untyped","","Tag a unitless value with units.",5,[[["point3d"]],["self"]]],[11,"to_2d","","Convert into a 2d point.",5,[[["self"]],["typedpoint2d"]]],[11,"add_assign","","",5,[[["self"],["typedvector3d"]]]],[11,"sub_assign","","",5,[[["self"],["typedvector3d"]]]],[11,"add","","",5,[[["self"],["typedvector3d"]],["self"]]],[11,"sub","","",5,[[["self"],["self"]],["typedvector3d"]]],[11,"sub","","",5,[[["self"],["typedvector3d"]],["self"]]],[11,"mul","","",5,[[["self"],["t"]],["self"]]],[11,"div","","",5,[[["self"],["t"]],["self"]]],[11,"min","","",5,[[["self"],["self"]],["self"]]],[11,"max","","",5,[[["self"],["self"]],["self"]]],[11,"round","","Rounds each component to the nearest integer value.",5,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",5,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",5,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",5,[[["self"]],["option",["typedpoint3d"]]]],[11,"to_f32","","Cast into an `f32` point.",5,[[["self"]],["typedpoint3d",["f32"]]]],[11,"to_f64","","Cast into an `f64` point.",5,[[["self"]],["typedpoint3d",["f64"]]]],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["usize"]]]],[11,"to_u32","","Cast into an `u32` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["u32"]]]],[11,"to_i32","","Cast into an `i32` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["i32"]]]],[11,"to_i64","","Cast into an `i64` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["i64"]]]],[11,"approx_epsilon","","",5,[[],["self"]]],[11,"approx_eq","","",5,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",5,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",5,N],[11,"from","","",5,N],[11,"deserialize","","",11,[[["d"]],["result"]]],[11,"serialize","","",11,[[["self"],["s"]],["result"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor.",11,[[["typedpoint2d"],["typedsize2d"]],["self"]]],[11,"intersects","","",11,[[["self"],["self"]],["bool"]]],[11,"max_x","","",11,[[["self"]],["t"]]],[11,"min_x","","",11,[[["self"]],["t"]]],[11,"max_y","","",11,[[["self"]],["t"]]],[11,"min_y","","",11,[[["self"]],["t"]]],[11,"max_x_typed","","",11,[[["self"]],["length"]]],[11,"min_x_typed","","",11,[[["self"]],["length"]]],[11,"max_y_typed","","",11,[[["self"]],["length"]]],[11,"min_y_typed","","",11,[[["self"]],["length"]]],[11,"intersection","","",11,[[["self"],["self"]],["option"]]],[11,"translate","","Returns the same rectangle, translated by a vector.",11,[[["self"],["typedvector2d"]],["self"]]],[11,"contains","","Returns true if this rectangle contains the point. Points are considered in the rectangle if they are on the left or top edge, but outside if they are on the right or bottom edge.",11,[[["self"],["typedpoint2d"]],["bool"]]],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always returns true if rect is empty, and always returns false if rect is nonempty but this rectangle is empty.",11,[[["self"],["self"]],["bool"]]],[11,"inflate","","",11,[[["self"],["t"],["t"]],["self"]]],[11,"inflate_typed","","",11,[[["self"],["length"],["length"]],["self"]]],[11,"top_right","","",11,[[["self"]],["typedpoint2d"]]],[11,"bottom_left","","",11,[[["self"]],["typedpoint2d"]]],[11,"bottom_right","","",11,[[["self"]],["typedpoint2d"]]],[11,"translate_by_size","","",11,[[["self"],["typedsize2d"]],["self"]]],[11,"inner_rect","","Calculate the size and position of an inner rectangle.",11,[[["self"],["typedsideoffsets2d"]],["self"]]],[11,"outer_rect","","Calculate the size and position of an outer rectangle.",11,[[["self"],["typedsideoffsets2d"]],["self"]]],[11,"from_points","","Returns the smallest rectangle defined by the top/bottom/left/right-most points provided as parameter.",11,[[["i"]],["self"]]],[11,"lerp","","Linearly interpolate between this rectangle and another rectangle.",11,[[["self"],["self"],["t"]],["self"]]],[11,"union","","",11,[[["self"],["self"]],["self"]]],[11,"scale","","",11,[[["self"],["s"],["s"]],["self"]]],[11,"zero","","Constructor, setting all sides to zero.",11,[[],["self"]]],[11,"is_empty","","Returns true if the size is zero, regardless of the origin's value.",11,[[["self"]],["bool"]]],[11,"mul","","",11,[[["self"],["t"]],["self"]]],[11,"div","","",11,[[["self"],["t"]],["self"]]],[11,"mul","","",11,[[["self"],["typedscale"]],["typedrect"]]],[11,"div","","",11,[[["self"],["typedscale"]],["typedrect"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",11,[[["self"]],["rect"]]],[11,"from_untyped","","Tag a unitless value with units.",11,[[["rect"]],["typedrect"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",11,[[["self"]],["option",["typedrect"]]]],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that the returned rectangle has the same set of pixel centers as the original one. Edges at offset 0.5 round up. Suitable for most places where integral device coordinates are needed, but note that any translation should be applied first to avoid pixel rounding errors. Note that this is not rounding to nearest integer if the values are negative. They are always rounding as floor(n + 0.5).",11,[[["self"]],["self"]]],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle contains the resulting rectangle.",11,[[["self"]],["self"]]],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle is contained in the resulting rectangle.",11,[[["self"]],["self"]]],[11,"to_f32","","Cast into an `f32` rectangle.",11,[[["self"]],["typedrect",["f32"]]]],[11,"to_f64","","Cast into an `f64` rectangle.",11,[[["self"]],["typedrect",["f64"]]]],[11,"to_usize","","Cast into an `usize` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["usize"]]]],[11,"to_u32","","Cast into an `u32` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["u32"]]]],[11,"to_i32","","Cast into an `i32` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["i32"]]]],[11,"to_i64","","Cast into an `i64` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["i64"]]]],[11,"clone","","",12,[[["self"]],["angle"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["angle"]],["bool"]]],[11,"ne","","",12,[[["self"],["angle"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["angle"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["angle"]],["bool"]]],[11,"le","","",12,[[["self"],["angle"]],["bool"]]],[11,"gt","","",12,[[["self"],["angle"]],["bool"]]],[11,"ge","","",12,[[["self"],["angle"]],["bool"]]],[11,"hash","","",12,N],[11,"radians","","",12,[[["t"]],["self"]]],[11,"get","","",12,[[["self"]],["t"]]],[11,"degrees","","",12,[[["t"]],["self"]]],[11,"to_degrees","","",12,[[["self"]],["t"]]],[11,"positive","","Returns this angle in the [0..2*PI[ range.",12,[[["self"]],["self"]]],[11,"signed","","Returns this angle in the ]-PI..PI] range.",12,[[["self"]],["self"]]],[11,"sin_cos","","Returns (sin(self), cos(self)).",12,N],[11,"zero","","",12,[[],["self"]]],[11,"pi","","",12,[[],["self"]]],[11,"two_pi","","",12,[[],["self"]]],[11,"frac_pi_2","","",12,[[],["self"]]],[11,"frac_pi_3","","",12,[[],["self"]]],[11,"frac_pi_4","","",12,[[],["self"]]],[11,"add","","",12,[[["self"],["angle"]],["angle"]]],[11,"add_assign","","",12,[[["self"],["angle"]]]],[11,"sub","","",12,N],[11,"sub_assign","","",12,[[["self"],["angle"]]]],[11,"div","","",12,[[["self"],["angle"]],["t"]]],[11,"div","","",12,[[["self"],["t"]],["angle"]]],[11,"div_assign","","",12,[[["self"],["t"]]]],[11,"mul","","",12,[[["self"],["t"]],["angle"]]],[11,"mul_assign","","",12,[[["self"],["t"]]]],[11,"neg","","",12,[[["self"]],["self"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize","","",13,[[["d"]],["result"]]],[11,"serialize","","",13,[[["self"],["s"]],["result"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"new","","Creates a rotation from an angle in radians.",13,[[["angle"]],["self"]]],[11,"radians","","",13,[[["t"]],["self"]]],[11,"identity","","Creates the identity rotation.",13,[[],["self"]]],[11,"get_angle","","Returns self.angle as a strongly typed `Angle<T>`.",13,[[["self"]],["angle"]]],[11,"to_3d","","Creates a 3d rotation (around the z axis) from this 2d rotation.",13,[[["self"]],["typedrotation3d"]]],[11,"inverse","","Returns the inverse of this rotation.",13,[[["self"]],["typedrotation2d"]]],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",13,[[["self"],["typedrotation2d"]],["typedrotation2d"]]],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",13,[[["self"],["typedrotation2d"]],["typedrotation2d"]]],[11,"transform_point","","Returns the given 2d point transformed by this rotation.",13,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector","","Returns the given 2d vector transformed by this rotation.",13,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"to_transform","","Returns the matrix representation of this rotation.",13,[[["self"]],["typedtransform2d"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize","","",14,[[["d"]],["result"]]],[11,"serialize","","",14,[[["self"],["s"]],["result"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"hash","","",14,[[["self"],["h"]]]],[11,"quaternion","","Creates a rotation around from a quaternion representation.",14,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"vector_part","","Returns the vector part (i, j, k) of this quaternion.",14,[[["self"]],["vector3d"]]],[11,"identity","","Creates the identity rotation.",14,[[],["self"]]],[11,"unit_quaternion","","Creates a rotation around from a quaternion representation and normalizes it.",14,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"around_axis","","Creates a rotation around a given axis.",14,[[["typedvector3d"],["angle"]],["self"]]],[11,"around_x","","Creates a rotation around the x axis.",14,[[["angle"]],["self"]]],[11,"around_y","","Creates a rotation around the y axis.",14,[[["angle"]],["self"]]],[11,"around_z","","Creates a rotation around the z axis.",14,[[["angle"]],["self"]]],[11,"euler","","Creates a rotation from Euler angles.",14,[[["angle"],["angle"],["angle"]],["self"]]],[11,"inverse","","Returns the inverse of this rotation.",14,[[["self"]],["typedrotation3d"]]],[11,"norm","","Computes the norm of this quaternion",14,[[["self"]],["t"]]],[11,"square_norm","","",14,[[["self"]],["t"]]],[11,"normalize","","Returns a unit quaternion from this one.",14,[[["self"]],["self"]]],[11,"is_normalized","","",14,[[["self"]],["bool"]]],[11,"slerp","","Spherical linear interpolation between this rotation and another rotation.",14,[[["self"],["self"],["t"]],["self"]]],[11,"lerp","","Basic Linear interpolation between this rotation and another rotation.",14,[[["self"],["self"],["t"]],["self"]]],[11,"rotate_point3d","","Returns the given 3d point transformed by this rotation.",14,[[["self"],["typedpoint3d"]],["typedpoint3d"]]],[11,"rotate_point2d","","Returns the given 2d point transformed by this rotation then projected on the xy plane.",14,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"rotate_vector3d","","Returns the given 3d vector transformed by this rotation then projected on the xy plane.",14,[[["self"],["typedvector3d"]],["typedvector3d"]]],[11,"rotate_vector2d","","Returns the given 2d vector transformed by this rotation then projected on the xy plane.",14,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"to_transform","","Returns the matrix representation of this rotation.",14,[[["self"]],["typedtransform3d"]]],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",14,[[["self"],["typedrotation3d"]],["typedrotation3d"]]],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",14,[[["self"],["typedrotation3d"]],["typedrotation3d"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"approx_epsilon","","",14,[[],["t"]]],[11,"approx_eq","","",14,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",14,[[["self"],["self"],["t"]],["bool"]]],[11,"deserialize","","",1,[[["d"]],["result",["typedscale"]]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"new","","",1,[[["t"]],["self"]]],[11,"get","","",1,[[["self"]],["t"]]],[18,"ONE","","Identity scaling, could be used to safely transit from one space to another.",1,N],[11,"inv","","The inverse TypedScale (1.0 / self).",1,[[["self"]],["typedscale"]]],[11,"mul","","",1,[[["self"],["typedscale"]],["typedscale"]]],[11,"add","","",1,[[["self"],["typedscale"]],["typedscale"]]],[11,"sub","","",1,[[["self"],["typedscale"]],["typedscale"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,[[["self"]],["option",["typedscale"]]]],[11,"transform_point","","Returns the given point transformed by this scale.",1,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector","","Returns the given vector transformed by this scale.",1,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"transform_size","","Returns the given vector transformed by this scale.",1,[[["self"],["typedsize2d"]],["typedsize2d"]]],[11,"transform_rect","","Returns the given rect transformed by this scale.",1,[[["self"],["typedrect"]],["typedrect"]]],[11,"inverse","","Returns the inverse of this scale.",1,[[["self"]],["typedscale"]]],[11,"is_identity","","Returns true if this scale has no effect.",1,[[["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["typedscale"]],["bool"]]],[11,"clone","","",1,[[["self"]],["typedscale"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize","","",15,[[["d"]],["result"]]],[11,"serialize","","",15,[[["self"],["s"]],["result"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking a scalar for each side.",15,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking a typed Length for each side.",15,[[["length"],["length"],["length"],["length"]],["self"]]],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",15,[[["t"]],["self"]]],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",15,[[["length"]],["self"]]],[11,"horizontal","","",15,[[["self"]],["t"]]],[11,"vertical","","",15,[[["self"]],["t"]]],[11,"horizontal_typed","","",15,[[["self"]],["length"]]],[11,"vertical_typed","","",15,[[["self"]],["length"]]],[11,"add","","",15,[[["self"],["self"]],["self"]]],[11,"zero","","Constructor, setting all sides to zero.",15,[[],["self"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize","","",16,[[["d"]],["result"]]],[11,"serialize","","",16,[[["self"],["s"]],["result"]]],[11,"eq","","",16,[[["self"],["self"]],["bool"]]],[11,"hash","","",16,[[["self"],["h"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values.",16,[[["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking scalar strongly typed lengths.",16,[[["length"],["length"]],["self"]]],[11,"round","","Rounds each component to the nearest integer value.",16,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",16,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",16,[[["self"]],["self"]]],[11,"add","","",16,[[["self"],["self"]],["self"]]],[11,"sub","","",16,[[["self"],["self"]],["self"]]],[11,"area","","",16,N],[11,"lerp","","Linearly interpolate between this size and another size.",16,[[["self"],["self"],["t"]],["self"]]],[11,"is_empty_or_negative","","",16,[[["self"]],["bool"]]],[11,"zero","","",16,[[],["self"]]],[11,"zero","","",16,[[],["self"]]],[11,"mul","","",16,[[["self"],["t"]],["self"]]],[11,"div","","",16,[[["self"],["t"]],["self"]]],[11,"mul","","",16,[[["self"],["typedscale"]],["typedsize2d"]]],[11,"div","","",16,[[["self"],["typedscale"]],["typedsize2d"]]],[11,"width_typed","","Returns self.width as a Length carrying the unit.",16,[[["self"]],["length"]]],[11,"height_typed","","Returns self.height as a Length carrying the unit.",16,[[["self"]],["length"]]],[11,"to_array","","",16,N],[11,"to_vector","","",16,[[["self"]],["typedvector2d"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",16,[[["self"]],["size2d"]]],[11,"from_untyped","","Tag a unitless value with units.",16,[[["size2d"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",16,[[["self"]],["option",["typedsize2d"]]]],[11,"to_f32","","Cast into an `f32` size.",16,[[["self"]],["typedsize2d",["f32"]]]],[11,"to_f64","","Cast into an `f64` size.",16,[[["self"]],["typedsize2d",["f64"]]]],[11,"to_usize","","Cast into an `uint` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["usize"]]]],[11,"to_u32","","Cast into an `u32` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["u32"]]]],[11,"to_i32","","Cast into an `i32` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["i32"]]]],[11,"to_i64","","Cast into an `i64` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["i64"]]]],[11,"abs","","",16,[[["self"]],["self"]]],[11,"is_positive","","",16,[[["self"]],["bool"]]],[11,"greater_than","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"lower_than","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"equal","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"not_equal","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"row_major","","Create a transform specifying its matrix elements in row-major order.",2,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"column_major","","Create a transform specifying its matrix elements in column-major order.",2,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",2,N],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",2,N],[11,"to_row_arrays","","Returns an array containing this transform's 3 rows in (in row-major order) as arrays.",2,N],[11,"from_row_major_array","","Creates a transform from an array of 6 elements in row-major order.",2,N],[11,"from_row_arrays","","Creates a transform from 3 rows of 2 elements (row-major order).",2,N],[11,"to_untyped","","Drop the units, preserving only the numeric value.",2,[[["self"]],["transform2d"]]],[11,"from_untyped","","Tag a unitless value with units.",2,[[["transform2d"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",2,[[["self"]],["option",["typedtransform2d"]]]],[11,"identity","","",2,[[],["self"]]],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",2,[[["self"],["typedtransform2d"]],["typedtransform2d"]]],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",2,[[["self"],["typedtransform2d"]],["typedtransform2d"]]],[11,"create_translation","","Returns a translation transform.",2,[[["t"],["t"]],["self"]]],[11,"post_translate","","Applies a translation after self's transformation and returns the resulting transform.",2,[[["self"],["typedvector2d"]],["self"]]],[11,"pre_translate","","Applies a translation before self's transformation and returns the resulting transform.",2,[[["self"],["typedvector2d"]],["self"]]],[11,"create_scale","","Returns a scale transform.",2,[[["t"],["t"]],["self"]]],[11,"post_scale","","Applies a scale after self's transformation and returns the resulting transform.",2,[[["self"],["t"],["t"]],["self"]]],[11,"pre_scale","","Applies a scale before self's transformation and returns the resulting transform.",2,[[["self"],["t"],["t"]],["self"]]],[11,"create_rotation","","Returns a rotation transform.",2,[[["angle"]],["self"]]],[11,"post_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,[[["self"],["angle"]],["self"]]],[11,"pre_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,[[["self"],["angle"]],["self"]]],[11,"transform_point","","Returns the given point transformed by this transform.",2,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector","","Returns the given vector transformed by this matrix.",2,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",2,[[["self"],["typedrect"]],["typedrect"]]],[11,"determinant","","Computes and returns the determinant of this transform.",2,[[["self"]],["t"]]],[11,"inverse","","Returns the inverse transform if possible.",2,[[["self"]],["option",["typedtransform2d"]]]],[11,"with_destination","","Returns the same transform with a different destination unit.",2,[[["self"]],["typedtransform2d"]]],[11,"with_source","","Returns the same transform with a different source unit.",2,[[["self"]],["typedtransform2d"]]],[11,"to_3d","","Create a 3D transform from the current transform",2,[[["self"]],["typedtransform3d"]]],[11,"approx_eq","","",2,[[["self"],["self"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"row_major","","Create a transform specifying its components in row-major order.",3,[[["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"column_major","","Create a transform specifying its components in column-major order.",3,[[["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"identity","","",3,[[],["self"]]],[11,"row_major_2d","","Create a 4 by 4 transform representing a 2d transformation, specifying its components in row-major order.",3,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"ortho","","Create an orthogonal projection transform.",3,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"is_2d","","Returns true if this transform can be represented with a `TypedTransform2D`.",3,[[["self"]],["bool"]]],[11,"to_2d","","Create a 2D transform picking the relevant terms from this transform.",3,[[["self"]],["typedtransform2d"]]],[11,"is_backface_visible","","Check whether shapes on the XY plane with Z pointing towards the screen transformed by this matrix would be facing back.",3,[[["self"]],["bool"]]],[11,"approx_eq","","",3,[[["self"],["self"]],["bool"]]],[11,"with_destination","","Returns the same transform with a different destination unit.",3,[[["self"]],["typedtransform3d"]]],[11,"with_source","","Returns the same transform with a different source unit.",3,[[["self"]],["typedtransform3d"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",3,[[["self"]],["transform3d"]]],[11,"from_untyped","","Tag a unitless value with units.",3,[[["transform3d"]],["self"]]],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",3,[[["self"],["typedtransform3d"]],["typedtransform3d"]]],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",3,[[["self"],["typedtransform3d"]],["typedtransform3d"]]],[11,"inverse","","Returns the inverse transform if possible.",3,[[["self"]],["option",["typedtransform3d"]]]],[11,"determinant","","Compute the determinant of the transform.",3,[[["self"]],["t"]]],[11,"mul_s","","Multiplies all of the transform's component by a scalar and returns the result.",3,[[["self"],["t"]],["self"]]],[11,"from_scale","","Convenience function to create a scale transform from a `TypedScale`.",3,[[["typedscale"]],["self"]]],[11,"transform_point2d_homogeneous","","Returns the homogeneous vector corresponding to the transformed 2d point.",3,[[["self"],["typedpoint2d"]],["homogeneousvector"]]],[11,"transform_point2d","","Returns the given 2d point transformed by this transform.",3,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector2d","","Returns the given 2d vector transformed by this matrix.",3,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"transform_point3d_homogeneous","","Returns the homogeneous vector corresponding to the transformed 3d point.",3,[[["self"],["typedpoint3d"]],["homogeneousvector"]]],[11,"transform_point3d","","Returns the given 3d point transformed by this transform.",3,[[["self"],["typedpoint3d"]],["typedpoint3d"]]],[11,"transform_vector3d","","Returns the given 3d vector transformed by this matrix.",3,[[["self"],["typedvector3d"]],["typedvector3d"]]],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",3,[[["self"],["typedrect"]],["typedrect"]]],[11,"create_translation","","Create a 3d translation transform",3,[[["t"],["t"],["t"]],["self"]]],[11,"pre_translate","","Returns a transform with a translation applied before self's transformation.",3,[[["self"],["typedvector3d"]],["self"]]],[11,"post_translate","","Returns a transform with a translation applied after self's transformation.",3,[[["self"],["typedvector3d"]],["self"]]],[11,"create_scale","","Create a 3d scale transform",3,[[["t"],["t"],["t"]],["self"]]],[11,"pre_scale","","Returns a transform with a scale applied before self's transformation.",3,[[["self"],["t"],["t"],["t"]],["self"]]],[11,"post_scale","","Returns a transform with a scale applied after self's transformation.",3,[[["self"],["t"],["t"],["t"]],["self"]]],[11,"create_rotation","","Create a 3d rotation transform from an angle / axis. The supplied axis must be normalized.",3,[[["t"],["t"],["t"],["angle"]],["self"]]],[11,"post_rotate","","Returns a transform with a rotation applied after self's transformation.",3,[[["self"],["t"],["t"],["t"],["angle"]],["self"]]],[11,"pre_rotate","","Returns a transform with a rotation applied before self's transformation.",3,[[["self"],["t"],["t"],["t"],["angle"]],["self"]]],[11,"create_skew","","Create a 2d skew transform.",3,[[["angle"],["angle"]],["self"]]],[11,"create_perspective","","Create a simple perspective projection transform",3,[[["t"]],["self"]]],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",3,N],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",3,N],[11,"to_row_arrays","","Returns an array containing this transform's 4 rows in (in row-major order) as arrays.",3,N],[11,"to_column_arrays","","Returns an array containing this transform's 4 columns in (in row-major order, or 4 rows in column-major order) as arrays.",3,N],[11,"from_array","","Creates a transform from an array of 16 elements in row-major order.",3,N],[11,"from_row_arrays","","Creates a transform from 4 rows of 4 elements (row-major order).",3,N],[11,"cast","","Cast from one numeric representation to another, preserving the units.",3,[[["self"]],["option",["typedtransform3d"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize","","",6,[[["d"]],["result"]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"zero","","Constructor, setting all components to zero.",6,[[],["self"]]],[11,"to_3d","","Convert into a 3d vector.",6,[[["self"]],["typedvector3d"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",6,[[["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",6,[[["length"],["length"]],["self"]]],[11,"extend","","Create a 3d vector from this one, using the specified z value.",6,[[["self"],["t"]],["typedvector3d"]]],[11,"to_point","","Cast this vector into a point.",6,[[["self"]],["typedpoint2d"]]],[11,"yx","","Swap x and y.",6,[[["self"]],["self"]]],[11,"to_size","","Cast this vector into a size.",6,[[["self"]],["typedsize2d"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",6,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",6,[[["self"]],["length"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",6,[[["self"]],["vector2d"]]],[11,"from_untyped","","Tag a unit-less value with units.",6,[[["vector2d"]],["self"]]],[11,"to_array","","",6,N],[11,"angle_from_x_axis","","Returns the angle between this vector and the x axis between -PI and PI.",6,[[["self"]],["angle"]]],[11,"dot","","Dot product.",6,[[["self"],["self"]],["t"]]],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",6,[[["self"],["self"]],["t"]]],[11,"normalize","","",6,[[["self"]],["self"]]],[11,"square_length","","",6,[[["self"]],["t"]]],[11,"length","","",6,[[["self"]],["t"]]],[11,"lerp","","Linearly interpolate between this vector and another vector.",6,[[["self"],["self"],["t"]],["self"]]],[11,"add","","",6,[[["self"],["self"]],["self"]]],[11,"add_assign","","",6,[[["self"],["self"]]]],[11,"sub_assign","","",6,[[["self"],["self"]]]],[11,"sub","","",6,[[["self"],["self"]],["self"]]],[11,"neg","","",6,[[["self"]],["self"]]],[11,"min","","",6,[[["self"],["self"]],["self"]]],[11,"max","","",6,[[["self"],["self"]],["self"]]],[11,"mul","","",6,[[["self"],["t"]],["self"]]],[11,"div","","",6,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",6,[[["self"],["t"]]]],[11,"div_assign","","",6,[[["self"],["t"]]]],[11,"mul","","",6,N],[11,"div","","",6,N],[11,"round","","Rounds each component to the nearest integer value.",6,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",6,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",6,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6,[[["self"]],["option",["typedvector2d"]]]],[11,"to_f32","","Cast into an `f32` vector.",6,[[["self"]],["typedvector2d",["f32"]]]],[11,"to_f64","","Cast into an `f64` vector.",6,[[["self"]],["typedvector2d",["f64"]]]],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["usize"]]]],[11,"to_u32","","Cast into an `u32` vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["u32"]]]],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["i32"]]]],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["i64"]]]],[11,"approx_epsilon","","",6,[[],["self"]]],[11,"approx_eq","","",6,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",6,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",6,N],[11,"from","","",6,N],[11,"abs","","",6,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"zero","","Constructor, setting all components to zero.",7,[[],["self"]]],[11,"to_array_4d","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",7,[[["t"],["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",7,[[["length"],["length"],["length"]],["typedvector3d"]]],[11,"to_point","","Cast this vector into a point.",7,[[["self"]],["typedpoint3d"]]],[11,"xy","","Returns a 2d vector using this vector's x and y coordinates",7,[[["self"]],["typedvector2d"]]],[11,"xz","","Returns a 2d vector using this vector's x and z coordinates",7,[[["self"]],["typedvector2d"]]],[11,"yz","","Returns a 2d vector using this vector's x and z coordinates",7,[[["self"]],["typedvector2d"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",7,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",7,[[["self"]],["length"]]],[11,"z_typed","","Returns self.z as a Length carrying the unit.",7,[[["self"]],["length"]]],[11,"to_array","","",7,N],[11,"to_untyped","","Drop the units, preserving only the numeric value.",7,[[["self"]],["vector3d"]]],[11,"from_untyped","","Tag a unitless value with units.",7,[[["vector3d"]],["self"]]],[11,"to_2d","","Convert into a 2d vector.",7,[[["self"]],["typedvector2d"]]],[11,"dot","","",7,[[["self"],["self"]],["t"]]],[11,"cross","","",7,[[["self"],["self"]],["self"]]],[11,"normalize","","",7,[[["self"]],["self"]]],[11,"square_length","","",7,[[["self"]],["t"]]],[11,"length","","",7,[[["self"]],["t"]]],[11,"lerp","","Linearly interpolate between this vector and another vector.",7,[[["self"],["self"],["t"]],["self"]]],[11,"add","","",7,[[["self"],["self"]],["self"]]],[11,"sub","","",7,[[["self"],["self"]],["self"]]],[11,"add_assign","","",7,[[["self"],["self"]]]],[11,"sub_assign","","",7,[[["self"],["self"]]]],[11,"neg","","",7,[[["self"]],["self"]]],[11,"mul","","",7,[[["self"],["t"]],["self"]]],[11,"div","","",7,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",7,[[["self"],["t"]]]],[11,"div_assign","","",7,[[["self"],["t"]]]],[11,"min","","",7,[[["self"],["self"]],["self"]]],[11,"max","","",7,[[["self"],["self"]],["self"]]],[11,"mul","","",7,N],[11,"div","","",7,N],[11,"round","","Rounds each component to the nearest integer value.",7,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",7,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",7,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",7,[[["self"]],["option",["typedvector3d"]]]],[11,"to_f32","","Cast into an `f32` vector.",7,[[["self"]],["typedvector3d",["f32"]]]],[11,"to_f64","","Cast into an `f64` vector.",7,[[["self"]],["typedvector3d",["f64"]]]],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["usize"]]]],[11,"to_u32","","Cast into an `u32` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["u32"]]]],[11,"to_i32","","Cast into an `i32` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["i32"]]]],[11,"to_i64","","Cast into an `i64` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["i64"]]]],[11,"approx_epsilon","","",7,[[],["self"]]],[11,"approx_eq","","",7,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",7,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",7,N],[11,"from","","",7,N],[11,"abs","","",7,[[["self"]],["self"]]],[11,"clone","","",8,[[["self"]],["boolvector2d"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["boolvector2d"]],["bool"]]],[11,"ne","","",8,[[["self"],["boolvector2d"]],["bool"]]],[11,"hash","","",8,N],[11,"clone","","",9,[[["self"]],["boolvector3d"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["boolvector3d"]],["bool"]]],[11,"ne","","",9,[[["self"],["boolvector3d"]],["bool"]]],[11,"hash","","",9,N],[11,"all","","",8,[[["self"]],["bool"]]],[11,"any","","",8,[[["self"]],["bool"]]],[11,"none","","",8,[[["self"]],["bool"]]],[11,"and","","",8,[[["self"],["self"]],["self"]]],[11,"or","","",8,[[["self"],["self"]],["self"]]],[11,"not","","",8,[[["self"]],["self"]]],[11,"select_point","","",8,[[["self"],["typedpoint2d"],["typedpoint2d"]],["typedpoint2d"]]],[11,"select_vector","","",8,[[["self"],["typedvector2d"],["typedvector2d"]],["typedvector2d"]]],[11,"select_size","","",8,[[["self"],["typedsize2d"],["typedsize2d"]],["typedsize2d"]]],[11,"all","","",9,[[["self"]],["bool"]]],[11,"any","","",9,[[["self"]],["bool"]]],[11,"none","","",9,[[["self"]],["bool"]]],[11,"and","","",9,[[["self"],["self"]],["self"]]],[11,"or","","",9,[[["self"],["self"]],["self"]]],[11,"not","","",9,[[["self"]],["self"]]],[11,"select_point","","",9,[[["self"],["typedpoint3d"],["typedpoint3d"]],["typedpoint3d"]]],[11,"select_vector","","",9,[[["self"],["typedvector3d"],["typedvector3d"]],["typedvector3d"]]],[11,"xy","","",9,[[["self"]],["boolvector2d"]]],[11,"xz","","",9,[[["self"]],["boolvector2d"]]],[11,"yz","","",9,[[["self"]],["boolvector2d"]]],[11,"greater_than","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"lower_than","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"equal","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"not_equal","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"greater_than","","",7,[[["self"],["self"]],["boolvector3d"]]],[11,"lower_than","","",7,[[["self"],["self"]],["boolvector3d"]]],[11,"equal","","",7,[[["self"],["self"]],["boolvector3d"]]],[11,"not_equal","","",7,[[["self"],["self"]],["boolvector3d"]]],[6,"Transform2D","","The default 2d transform type with no units.",N,N],[6,"Transform3D","","The default 3d transform type with no units.",N,N],[6,"Point2D","","Default 2d point type with no unit.",N,N],[6,"Point3D","","Default 3d point type with no unit.",N,N],[6,"Vector2D","","Default 2d vector type with no unit.",N,N],[6,"Vector3D","","Default 3d vector type with no unit.",N,N],[6,"Rect","","The default rectangle type with no unit.",N,N],[6,"Rotation2D","","The default 2d rotation type with no units.",N,N],[6,"Rotation3D","","The default 3d rotation type with no units.",N,N],[6,"SideOffsets2D","","The default side offset type with no unit.",N,N],[6,"Size2D","","Default 2d size type with no unit.",N,N],[6,"Matrix2D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"TypedMatrix2D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"Matrix4D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"TypedMatrix4D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"ScaleFactor","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[8,"Trig","","Trait for basic trigonometry functions, so they can be used on generic numeric types",N,N],[10,"sin","","",23,[[["self"]],["self"]]],[10,"cos","","",23,[[["self"]],["self"]]],[10,"tan","","",23,[[["self"]],["self"]]],[10,"fast_atan2","","",23,[[["self"],["self"]],["self"]]],[10,"degrees_to_radians","","",23,[[["self"]],["self"]]],[10,"radians_to_degrees","","",23,[[["self"]],["self"]]],[11,"clone","","",24,[[["self"]],["unknownunit"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]]],"paths":[[3,"Length"],[3,"TypedScale"],[3,"TypedTransform2D"],[3,"TypedTransform3D"],[3,"TypedPoint2D"],[3,"TypedPoint3D"],[3,"TypedVector2D"],[3,"TypedVector3D"],[3,"BoolVector2D"],[3,"BoolVector3D"],[3,"HomogeneousVector"],[3,"TypedRect"],[3,"Angle"],[3,"TypedRotation2D"],[3,"TypedRotation3D"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[8,"ApproxEq"],[8,"Zero"],[8,"One"],[8,"Round"],[8,"Floor"],[8,"Ceil"],[8,"Trig"],[3,"UnknownUnit"]]};
searchIndex["failure"]={"doc":"An experimental new error-handling library. Guide-style introduction is available here.","items":[[3,"Backtrace","failure","A `Backtrace`.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Context","","An error with context around it.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,[[],["backtrace"]]],[11,"default","","",0,[[],["backtrace"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["compat"]]],[11,"eq","","",1,[[["self"],["compat"]],["bool"]]],[11,"ne","","",1,[[["self"],["compat"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["compat"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Unwraps this into the inner error.",1,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",1,[[["self"]],["e"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"new","","Creates a new context without an underlying error message.",2,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",2,[[["self"]],["d"]]],[11,"cause","","",2,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["d"]],["context"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,[[["e"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["f"]],["error"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,[[["box",["stderror"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",4,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",4,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",4,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",4,[[["self"]],["causes"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",4,[[["self"]],["fail"]]],[6,"Fallible","","A common result with an `Error`.",N,N],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",5,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,[[["self"],["f"]],["result",["context"]]]],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",6,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,[[["self"]],["compat"]]],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",6,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",6,[[["self"]],["causes"]]],[11,"next","","",7,[[["self"]],["option",["fail"]]]],[14,"bail","","Exits a function early with an `Error`.",N,N],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"]={"doc":"","items":[[5,"Fail","failure_derive","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["freetype"]={"doc":"","items":[[5,"succeeded","freetype","",N,[[["ft_error"]],["bool"]]],[0,"freetype","","",N,N],[3,"__BindgenUnionField","freetype::freetype","",N,N],[3,"FT_MemoryRec_","","",N,N],[12,"user","","",0,N],[12,"alloc","","",0,N],[12,"free","","",0,N],[12,"realloc","","",0,N],[3,"FT_StreamRec_","","",N,N],[12,"base","","",1,N],[12,"size","","",1,N],[12,"pos","","",1,N],[12,"descriptor","","",1,N],[12,"pathname","","",1,N],[12,"read","","",1,N],[12,"close","","",1,N],[12,"memory","","",1,N],[12,"cursor","","",1,N],[12,"limit","","",1,N],[3,"FT_StreamDesc_","","",N,N],[12,"value","","",2,N],[12,"pointer","","",2,N],[12,"bindgen_union_field","","",2,N],[3,"FT_Vector_","","",N,N],[12,"x","","",3,N],[12,"y","","",3,N],[3,"FT_BBox_","","",N,N],[12,"xMin","","",4,N],[12,"yMin","","",4,N],[12,"xMax","","",4,N],[12,"yMax","","",4,N],[3,"FT_Bitmap_","","",N,N],[12,"rows","","",5,N],[12,"width","","",5,N],[12,"pitch","","",5,N],[12,"buffer","","",5,N],[12,"num_grays","","",5,N],[12,"pixel_mode","","",5,N],[12,"palette_mode","","",5,N],[12,"palette","","",5,N],[3,"FT_Outline_","","",N,N],[12,"n_contours","","",6,N],[12,"n_points","","",6,N],[12,"points","","",6,N],[12,"tags","","",6,N],[12,"contours","","",6,N],[12,"flags","","",6,N],[3,"FT_Outline_Funcs_","","",N,N],[12,"move_to","","",7,N],[12,"line_to","","",7,N],[12,"conic_to","","",7,N],[12,"cubic_to","","",7,N],[12,"shift","","",7,N],[12,"delta","","",7,N],[3,"FT_RasterRec_","","",N,N],[3,"FT_Span_","","",N,N],[12,"x","","",8,N],[12,"len","","",8,N],[12,"coverage","","",8,N],[3,"FT_Raster_Params_","","",N,N],[12,"target","","",9,N],[12,"source","","",9,N],[12,"flags","","",9,N],[12,"gray_spans","","",9,N],[12,"black_spans","","",9,N],[12,"bit_test","","",9,N],[12,"bit_set","","",9,N],[12,"user","","",9,N],[12,"clip_box","","",9,N],[3,"FT_Raster_Funcs_","","",N,N],[12,"glyph_format","","",10,N],[12,"raster_new","","",10,N],[12,"raster_reset","","",10,N],[12,"raster_set_mode","","",10,N],[12,"raster_render","","",10,N],[12,"raster_done","","",10,N],[3,"FT_UnitVector_","","",N,N],[12,"x","","",11,N],[12,"y","","",11,N],[3,"FT_Matrix_","","",N,N],[12,"xx","","",12,N],[12,"xy","","",12,N],[12,"yx","","",12,N],[12,"yy","","",12,N],[3,"FT_Data_","","",N,N],[12,"pointer","","",13,N],[12,"length","","",13,N],[3,"FT_Generic_","","",N,N],[12,"data","","",14,N],[12,"finalizer","","",14,N],[3,"FT_ListNodeRec_","","",N,N],[12,"prev","","",15,N],[12,"next","","",15,N],[12,"data","","",15,N],[3,"FT_ListRec_","","",N,N],[12,"head","","",16,N],[12,"tail","","",16,N],[3,"FT_Glyph_Metrics_","","",N,N],[12,"width","","",17,N],[12,"height","","",17,N],[12,"horiBearingX","","",17,N],[12,"horiBearingY","","",17,N],[12,"horiAdvance","","",17,N],[12,"vertBearingX","","",17,N],[12,"vertBearingY","","",17,N],[12,"vertAdvance","","",17,N],[3,"FT_Bitmap_Size_","","",N,N],[12,"height","","",18,N],[12,"width","","",18,N],[12,"size","","",18,N],[12,"x_ppem","","",18,N],[12,"y_ppem","","",18,N],[3,"FT_LibraryRec_","","",N,N],[3,"FT_ModuleRec_","","",N,N],[3,"FT_DriverRec_","","",N,N],[3,"FT_RendererRec_","","",N,N],[3,"FT_FaceRec_","","",N,N],[12,"num_faces","","",19,N],[12,"face_index","","",19,N],[12,"face_flags","","",19,N],[12,"style_flags","","",19,N],[12,"num_glyphs","","",19,N],[12,"family_name","","",19,N],[12,"style_name","","",19,N],[12,"num_fixed_sizes","","",19,N],[12,"available_sizes","","",19,N],[12,"num_charmaps","","",19,N],[12,"charmaps","","",19,N],[12,"generic","","",19,N],[12,"bbox","","",19,N],[12,"units_per_EM","","",19,N],[12,"ascender","","",19,N],[12,"descender","","",19,N],[12,"height","","",19,N],[12,"max_advance_width","","",19,N],[12,"max_advance_height","","",19,N],[12,"underline_position","","",19,N],[12,"underline_thickness","","",19,N],[12,"glyph","","",19,N],[12,"size","","",19,N],[12,"charmap","","",19,N],[12,"driver","","",19,N],[12,"memory","","",19,N],[12,"stream","","",19,N],[12,"sizes_list","","",19,N],[12,"autohint","","",19,N],[12,"extensions","","",19,N],[12,"internal","","",19,N],[3,"FT_SizeRec_","","",N,N],[12,"face","","",20,N],[12,"generic","","",20,N],[12,"metrics","","",20,N],[12,"internal","","",20,N],[3,"FT_GlyphSlotRec_","","",N,N],[12,"library","","",21,N],[12,"face","","",21,N],[12,"next","","",21,N],[12,"reserved","","",21,N],[12,"generic","","",21,N],[12,"metrics","","",21,N],[12,"linearHoriAdvance","","",21,N],[12,"linearVertAdvance","","",21,N],[12,"advance","","",21,N],[12,"format","","",21,N],[12,"bitmap","","",21,N],[12,"bitmap_left","","",21,N],[12,"bitmap_top","","",21,N],[12,"outline","","",21,N],[12,"num_subglyphs","","",21,N],[12,"subglyphs","","",21,N],[12,"control_data","","",21,N],[12,"control_len","","",21,N],[12,"lsb_delta","","",21,N],[12,"rsb_delta","","",21,N],[12,"other","","",21,N],[12,"internal","","",21,N],[3,"FT_CharMapRec_","","",N,N],[12,"face","","",22,N],[12,"encoding","","",22,N],[12,"platform_id","","",22,N],[12,"encoding_id","","",22,N],[3,"FT_Face_InternalRec_","","",N,N],[3,"FT_Size_InternalRec_","","",N,N],[3,"FT_Size_Metrics_","","",N,N],[12,"x_ppem","","",23,N],[12,"y_ppem","","",23,N],[12,"x_scale","","",23,N],[12,"y_scale","","",23,N],[12,"ascender","","",23,N],[12,"descender","","",23,N],[12,"height","","",23,N],[12,"max_advance","","",23,N],[3,"FT_SubGlyphRec_","","",N,N],[3,"FT_Slot_InternalRec_","","",N,N],[3,"FT_Parameter_","","",N,N],[12,"tag","","",24,N],[12,"data","","",24,N],[3,"FT_Open_Args_","","",N,N],[12,"flags","","",25,N],[12,"memory_base","","",25,N],[12,"memory_size","","",25,N],[12,"pathname","","",25,N],[12,"stream","","",25,N],[12,"driver","","",25,N],[12,"num_params","","",25,N],[12,"params","","",25,N],[3,"FT_Size_RequestRec_","","",N,N],[12,"type_","","",26,N],[12,"width","","",26,N],[12,"height","","",26,N],[12,"horiResolution","","",26,N],[12,"vertResolution","","",26,N],[3,"FT_Module_Class_","","",N,N],[12,"module_flags","","",27,N],[12,"module_size","","",27,N],[12,"module_name","","",27,N],[12,"module_version","","",27,N],[12,"module_requires","","",27,N],[12,"module_interface","","",27,N],[12,"module_init","","",27,N],[12,"module_done","","",27,N],[12,"get_interface","","",27,N],[4,"FT_Pixel_Mode_","","",N,N],[13,"FT_PIXEL_MODE_NONE","","",28,N],[13,"FT_PIXEL_MODE_MONO","","",28,N],[13,"FT_PIXEL_MODE_GRAY","","",28,N],[13,"FT_PIXEL_MODE_GRAY2","","",28,N],[13,"FT_PIXEL_MODE_GRAY4","","",28,N],[13,"FT_PIXEL_MODE_LCD","","",28,N],[13,"FT_PIXEL_MODE_LCD_V","","",28,N],[13,"FT_PIXEL_MODE_BGRA","","",28,N],[13,"FT_PIXEL_MODE_MAX","","",28,N],[4,"FT_Glyph_Format_","","",N,N],[13,"FT_GLYPH_FORMAT_NONE","","",29,N],[13,"FT_GLYPH_FORMAT_COMPOSITE","","",29,N],[13,"FT_GLYPH_FORMAT_BITMAP","","",29,N],[13,"FT_GLYPH_FORMAT_OUTLINE","","",29,N],[13,"FT_GLYPH_FORMAT_PLOTTER","","",29,N],[4,"_bindgen_ty_1","","",N,N],[13,"FT_Mod_Err_Base","","",30,N],[13,"FT_Mod_Err_Max","","",30,N],[4,"_bindgen_ty_2","","",N,N],[13,"FT_Err_Ok","","",31,N],[13,"FT_Err_Cannot_Open_Resource","","",31,N],[13,"FT_Err_Unknown_File_Format","","",31,N],[13,"FT_Err_Invalid_File_Format","","",31,N],[13,"FT_Err_Invalid_Version","","",31,N],[13,"FT_Err_Lower_Module_Version","","",31,N],[13,"FT_Err_Invalid_Argument","","",31,N],[13,"FT_Err_Unimplemented_Feature","","",31,N],[13,"FT_Err_Invalid_Table","","",31,N],[13,"FT_Err_Invalid_Offset","","",31,N],[13,"FT_Err_Array_Too_Large","","",31,N],[13,"FT_Err_Missing_Module","","",31,N],[13,"FT_Err_Missing_Property","","",31,N],[13,"FT_Err_Invalid_Glyph_Index","","",31,N],[13,"FT_Err_Invalid_Character_Code","","",31,N],[13,"FT_Err_Invalid_Glyph_Format","","",31,N],[13,"FT_Err_Cannot_Render_Glyph","","",31,N],[13,"FT_Err_Invalid_Outline","","",31,N],[13,"FT_Err_Invalid_Composite","","",31,N],[13,"FT_Err_Too_Many_Hints","","",31,N],[13,"FT_Err_Invalid_Pixel_Size","","",31,N],[13,"FT_Err_Invalid_Handle","","",31,N],[13,"FT_Err_Invalid_Library_Handle","","",31,N],[13,"FT_Err_Invalid_Driver_Handle","","",31,N],[13,"FT_Err_Invalid_Face_Handle","","",31,N],[13,"FT_Err_Invalid_Size_Handle","","",31,N],[13,"FT_Err_Invalid_Slot_Handle","","",31,N],[13,"FT_Err_Invalid_CharMap_Handle","","",31,N],[13,"FT_Err_Invalid_Cache_Handle","","",31,N],[13,"FT_Err_Invalid_Stream_Handle","","",31,N],[13,"FT_Err_Too_Many_Drivers","","",31,N],[13,"FT_Err_Too_Many_Extensions","","",31,N],[13,"FT_Err_Out_Of_Memory","","",31,N],[13,"FT_Err_Unlisted_Object","","",31,N],[13,"FT_Err_Cannot_Open_Stream","","",31,N],[13,"FT_Err_Invalid_Stream_Seek","","",31,N],[13,"FT_Err_Invalid_Stream_Skip","","",31,N],[13,"FT_Err_Invalid_Stream_Read","","",31,N],[13,"FT_Err_Invalid_Stream_Operation","","",31,N],[13,"FT_Err_Invalid_Frame_Operation","","",31,N],[13,"FT_Err_Nested_Frame_Access","","",31,N],[13,"FT_Err_Invalid_Frame_Read","","",31,N],[13,"FT_Err_Raster_Uninitialized","","",31,N],[13,"FT_Err_Raster_Corrupted","","",31,N],[13,"FT_Err_Raster_Overflow","","",31,N],[13,"FT_Err_Raster_Negative_Height","","",31,N],[13,"FT_Err_Too_Many_Caches","","",31,N],[13,"FT_Err_Invalid_Opcode","","",31,N],[13,"FT_Err_Too_Few_Arguments","","",31,N],[13,"FT_Err_Stack_Overflow","","",31,N],[13,"FT_Err_Code_Overflow","","",31,N],[13,"FT_Err_Bad_Argument","","",31,N],[13,"FT_Err_Divide_By_Zero","","",31,N],[13,"FT_Err_Invalid_Reference","","",31,N],[13,"FT_Err_Debug_OpCode","","",31,N],[13,"FT_Err_ENDF_In_Exec_Stream","","",31,N],[13,"FT_Err_Nested_DEFS","","",31,N],[13,"FT_Err_Invalid_CodeRange","","",31,N],[13,"FT_Err_Execution_Too_Long","","",31,N],[13,"FT_Err_Too_Many_Function_Defs","","",31,N],[13,"FT_Err_Too_Many_Instruction_Defs","","",31,N],[13,"FT_Err_Table_Missing","","",31,N],[13,"FT_Err_Horiz_Header_Missing","","",31,N],[13,"FT_Err_Locations_Missing","","",31,N],[13,"FT_Err_Name_Table_Missing","","",31,N],[13,"FT_Err_CMap_Table_Missing","","",31,N],[13,"FT_Err_Hmtx_Table_Missing","","",31,N],[13,"FT_Err_Post_Table_Missing","","",31,N],[13,"FT_Err_Invalid_Horiz_Metrics","","",31,N],[13,"FT_Err_Invalid_CharMap_Format","","",31,N],[13,"FT_Err_Invalid_PPem","","",31,N],[13,"FT_Err_Invalid_Vert_Metrics","","",31,N],[13,"FT_Err_Could_Not_Find_Context","","",31,N],[13,"FT_Err_Invalid_Post_Table_Format","","",31,N],[13,"FT_Err_Invalid_Post_Table","","",31,N],[13,"FT_Err_Syntax_Error","","",31,N],[13,"FT_Err_Stack_Underflow","","",31,N],[13,"FT_Err_Ignore","","",31,N],[13,"FT_Err_No_Unicode_Glyph_Name","","",31,N],[13,"FT_Err_Glyph_Too_Big","","",31,N],[13,"FT_Err_Missing_Startfont_Field","","",31,N],[13,"FT_Err_Missing_Font_Field","","",31,N],[13,"FT_Err_Missing_Size_Field","","",31,N],[13,"FT_Err_Missing_Fontboundingbox_Field","","",31,N],[13,"FT_Err_Missing_Chars_Field","","",31,N],[13,"FT_Err_Missing_Startchar_Field","","",31,N],[13,"FT_Err_Missing_Encoding_Field","","",31,N],[13,"FT_Err_Missing_Bbx_Field","","",31,N],[13,"FT_Err_Bbx_Too_Big","","",31,N],[13,"FT_Err_Corrupted_Font_Header","","",31,N],[13,"FT_Err_Corrupted_Font_Glyphs","","",31,N],[13,"FT_Err_Max","","",31,N],[4,"FT_Encoding_","","",N,N],[13,"FT_ENCODING_NONE","","",32,N],[13,"FT_ENCODING_MS_SYMBOL","","",32,N],[13,"FT_ENCODING_UNICODE","","",32,N],[13,"FT_ENCODING_SJIS","","",32,N],[13,"FT_ENCODING_GB2312","","",32,N],[13,"FT_ENCODING_BIG5","","",32,N],[13,"FT_ENCODING_WANSUNG","","",32,N],[13,"FT_ENCODING_JOHAB","","",32,N],[13,"FT_ENCODING_ADOBE_STANDARD","","",32,N],[13,"FT_ENCODING_ADOBE_EXPERT","","",32,N],[13,"FT_ENCODING_ADOBE_CUSTOM","","",32,N],[13,"FT_ENCODING_ADOBE_LATIN_1","","",32,N],[13,"FT_ENCODING_OLD_LATIN_2","","",32,N],[13,"FT_ENCODING_APPLE_ROMAN","","",32,N],[4,"FT_Size_Request_Type_","","",N,N],[13,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",33,N],[13,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",33,N],[13,"FT_SIZE_REQUEST_TYPE_BBOX","","",33,N],[13,"FT_SIZE_REQUEST_TYPE_CELL","","",33,N],[13,"FT_SIZE_REQUEST_TYPE_SCALES","","",33,N],[13,"FT_SIZE_REQUEST_TYPE_MAX","","",33,N],[4,"FT_Render_Mode_","","",N,N],[13,"FT_RENDER_MODE_NORMAL","","",34,N],[13,"FT_RENDER_MODE_LIGHT","","",34,N],[13,"FT_RENDER_MODE_MONO","","",34,N],[13,"FT_RENDER_MODE_LCD","","",34,N],[13,"FT_RENDER_MODE_LCD_V","","",34,N],[13,"FT_RENDER_MODE_MAX","","",34,N],[4,"FT_Kerning_Mode_","","",N,N],[13,"FT_KERNING_DEFAULT","","",35,N],[13,"FT_KERNING_UNFITTED","","",35,N],[13,"FT_KERNING_UNSCALED","","",35,N],[4,"FT_LcdFilter_","","",N,N],[13,"FT_LCD_FILTER_NONE","","",36,N],[13,"FT_LCD_FILTER_DEFAULT","","",36,N],[13,"FT_LCD_FILTER_LIGHT","","",36,N],[13,"FT_LCD_FILTER_LEGACY1","","",36,N],[13,"FT_LCD_FILTER_LEGACY","","",36,N],[13,"FT_LCD_FILTER_MAX","","",36,N],[4,"FT_Sfnt_Tag_","","",N,N],[13,"FT_SFNT_HEAD","","",37,N],[13,"FT_SFNT_MAXP","","",37,N],[13,"FT_SFNT_OS2","","",37,N],[13,"FT_SFNT_HHEA","","",37,N],[13,"FT_SFNT_VHEA","","",37,N],[13,"FT_SFNT_POST","","",37,N],[13,"FT_SFNT_PCLT","","",37,N],[13,"FT_SFNT_MAX","","",37,N],[4,"FT_TrueTypeEngineType_","","",N,N],[13,"FT_TRUETYPE_ENGINE_TYPE_NONE","","",38,N],[13,"FT_TRUETYPE_ENGINE_TYPE_UNPATENTED","","",38,N],[13,"FT_TRUETYPE_ENGINE_TYPE_PATENTED","","",38,N],[4,"FT_Orientation_","","",N,N],[13,"FT_ORIENTATION_TRUETYPE","","",39,N],[13,"FT_ORIENTATION_POSTSCRIPT","","",39,N],[13,"FT_ORIENTATION_NONE","","",39,N],[5,"FT_Init_FreeType","","",N,N],[5,"FT_Done_FreeType","","",N,N],[5,"FT_New_Face","","",N,N],[5,"FT_New_Memory_Face","","",N,N],[5,"FT_Open_Face","","",N,N],[5,"FT_Attach_File","","",N,N],[5,"FT_Attach_Stream","","",N,N],[5,"FT_Reference_Face","","",N,N],[5,"FT_Done_Face","","",N,N],[5,"FT_Select_Size","","",N,N],[5,"FT_Request_Size","","",N,N],[5,"FT_Set_Char_Size","","",N,N],[5,"FT_Set_Pixel_Sizes","","",N,N],[5,"FT_Load_Glyph","","",N,N],[5,"FT_Load_Char","","",N,N],[5,"FT_Set_Transform","","",N,N],[5,"FT_Render_Glyph","","",N,N],[5,"FT_Get_Kerning","","",N,N],[5,"FT_Get_Track_Kerning","","",N,N],[5,"FT_Get_Glyph_Name","","",N,N],[5,"FT_Get_Postscript_Name","","",N,N],[5,"FT_Select_Charmap","","",N,N],[5,"FT_Set_Charmap","","",N,N],[5,"FT_Get_Charmap_Index","","",N,N],[5,"FT_Get_Char_Index","","",N,N],[5,"FT_Get_First_Char","","",N,N],[5,"FT_Get_Next_Char","","",N,N],[5,"FT_Get_Name_Index","","",N,N],[5,"FT_Get_SubGlyph_Info","","",N,N],[5,"FT_Get_FSType_Flags","","",N,N],[5,"FT_Face_GetCharVariantIndex","","",N,N],[5,"FT_Face_GetCharVariantIsDefault","","",N,N],[5,"FT_Face_GetVariantSelectors","","",N,N],[5,"FT_Face_GetVariantsOfChar","","",N,N],[5,"FT_Face_GetCharsOfVariant","","",N,N],[5,"FT_MulDiv","","",N,N],[5,"FT_MulFix","","",N,N],[5,"FT_DivFix","","",N,N],[5,"FT_RoundFix","","",N,N],[5,"FT_CeilFix","","",N,N],[5,"FT_FloorFix","","",N,N],[5,"FT_Vector_Transform","","",N,N],[5,"FT_Library_Version","","",N,N],[5,"FT_Face_CheckTrueTypePatents","","",N,N],[5,"FT_Face_SetUnpatentedHinting","","",N,N],[5,"FT_Library_SetLcdFilter","","",N,N],[5,"FT_Library_SetLcdFilterWeights","","",N,N],[5,"FT_Get_Sfnt_Table","","",N,N],[5,"FT_Load_Sfnt_Table","","",N,N],[5,"FT_Sfnt_Table_Info","","",N,N],[5,"FT_Get_CMap_Language_ID","","",N,N],[5,"FT_Get_CMap_Format","","",N,N],[5,"FT_Add_Module","","",N,N],[5,"FT_Get_Module","","",N,N],[5,"FT_Remove_Module","","",N,N],[5,"FT_Property_Set","","",N,N],[5,"FT_Property_Get","","",N,N],[5,"FT_Reference_Library","","",N,N],[5,"FT_New_Library","","",N,N],[5,"FT_Done_Library","","",N,N],[5,"FT_Set_Debug_Hook","","",N,N],[5,"FT_Add_Default_Modules","","",N,N],[5,"FT_Get_TrueType_Engine_Type","","",N,N],[5,"FT_Outline_Decompose","","",N,N],[5,"FT_Outline_New","","",N,N],[5,"FT_Outline_New_Internal","","",N,N],[5,"FT_Outline_Done","","",N,N],[5,"FT_Outline_Done_Internal","","",N,N],[5,"FT_Outline_Check","","",N,N],[5,"FT_Outline_Get_CBox","","",N,N],[5,"FT_Outline_Translate","","",N,N],[5,"FT_Outline_Copy","","",N,N],[5,"FT_Outline_Transform","","",N,N],[5,"FT_Outline_Embolden","","",N,N],[5,"FT_Outline_EmboldenXY","","",N,N],[5,"FT_Outline_Reverse","","",N,N],[5,"FT_Outline_Get_Bitmap","","",N,N],[5,"FT_Outline_Render","","",N,N],[5,"FT_Outline_Get_Orientation","","",N,N],[6,"FT_Int16","","",N,N],[6,"FT_UInt16","","",N,N],[6,"FT_Int32","","",N,N],[6,"FT_UInt32","","",N,N],[6,"FT_Int64","","",N,N],[6,"FT_UInt64","","",N,N],[6,"FT_Fast","","",N,N],[6,"FT_UFast","","",N,N],[6,"FT_Memory","","",N,N],[6,"FT_Alloc_Func","","",N,N],[6,"FT_Free_Func","","",N,N],[6,"FT_Realloc_Func","","",N,N],[6,"FT_Stream","","",N,N],[6,"FT_StreamDesc","","",N,N],[6,"FT_Stream_IoFunc","","",N,N],[6,"FT_Stream_CloseFunc","","",N,N],[6,"FT_StreamRec","","",N,N],[6,"FT_Pos","","",N,N],[6,"FT_Vector","","",N,N],[6,"FT_BBox","","",N,N],[6,"FT_Bitmap","","",N,N],[6,"FT_Outline","","",N,N],[6,"FT_Outline_MoveToFunc","","",N,N],[6,"FT_Outline_LineToFunc","","",N,N],[6,"FT_Outline_ConicToFunc","","",N,N],[6,"FT_Outline_CubicToFunc","","",N,N],[6,"FT_Outline_Funcs","","",N,N],[6,"FT_Raster","","",N,N],[6,"FT_Span","","",N,N],[6,"FT_SpanFunc","","",N,N],[6,"FT_Raster_BitTest_Func","","",N,N],[6,"FT_Raster_BitSet_Func","","",N,N],[6,"FT_Raster_Params","","",N,N],[6,"FT_Raster_NewFunc","","",N,N],[6,"FT_Raster_DoneFunc","","",N,N],[6,"FT_Raster_ResetFunc","","",N,N],[6,"FT_Raster_SetModeFunc","","",N,N],[6,"FT_Raster_RenderFunc","","",N,N],[6,"FT_Raster_Funcs","","",N,N],[6,"FT_Bool","","",N,N],[6,"FT_FWord","","",N,N],[6,"FT_UFWord","","",N,N],[6,"FT_Char","","",N,N],[6,"FT_Byte","","",N,N],[6,"FT_Bytes","","",N,N],[6,"FT_Tag","","",N,N],[6,"FT_String","","",N,N],[6,"FT_Short","","",N,N],[6,"FT_UShort","","",N,N],[6,"FT_Int","","",N,N],[6,"FT_UInt","","",N,N],[6,"FT_Long","","",N,N],[6,"FT_ULong","","",N,N],[6,"FT_F2Dot14","","",N,N],[6,"FT_F26Dot6","","",N,N],[6,"FT_Fixed","","",N,N],[6,"FT_Pointer","","",N,N],[6,"FT_Offset","","",N,N],[6,"FT_PtrDist","","",N,N],[6,"FT_UnitVector","","",N,N],[6,"FT_Matrix","","",N,N],[6,"FT_Data","","",N,N],[6,"FT_Generic_Finalizer","","",N,N],[6,"FT_Generic","","",N,N],[6,"FT_ListNode","","",N,N],[6,"FT_List","","",N,N],[6,"FT_ListNodeRec","","",N,N],[6,"FT_ListRec","","",N,N],[6,"FT_Glyph_Metrics","","",N,N],[6,"FT_Bitmap_Size","","",N,N],[6,"FT_Library","","",N,N],[6,"FT_Module","","",N,N],[6,"FT_Driver","","",N,N],[6,"FT_Renderer","","",N,N],[6,"FT_Face","","",N,N],[6,"FT_Size","","",N,N],[6,"FT_GlyphSlot","","",N,N],[6,"FT_CharMap","","",N,N],[6,"FT_CharMapRec","","",N,N],[6,"FT_Face_Internal","","",N,N],[6,"FT_FaceRec","","",N,N],[6,"FT_Size_Internal","","",N,N],[6,"FT_Size_Metrics","","",N,N],[6,"FT_SizeRec","","",N,N],[6,"FT_SubGlyph","","",N,N],[6,"FT_Slot_Internal","","",N,N],[6,"FT_GlyphSlotRec","","",N,N],[6,"FT_Parameter","","",N,N],[6,"FT_Open_Args","","",N,N],[6,"FT_Size_RequestRec","","",N,N],[6,"FT_Size_Request","","",N,N],[6,"FT_Module_Interface","","",N,N],[6,"FT_Module_Constructor","","",N,N],[6,"FT_Module_Destructor","","",N,N],[6,"FT_Module_Requester","","",N,N],[6,"FT_Module_Class","","",N,N],[6,"FT_DebugHook_Func","","",N,N],[17,"FT_RENDER_POOL_SIZE","","",N,N],[17,"FT_MAX_MODULES","","",N,N],[17,"FT_OUTLINE_NONE","","",N,N],[17,"FT_OUTLINE_OWNER","","",N,N],[17,"FT_OUTLINE_EVEN_ODD_FILL","","",N,N],[17,"FT_OUTLINE_REVERSE_FILL","","",N,N],[17,"FT_OUTLINE_IGNORE_DROPOUTS","","",N,N],[17,"FT_OUTLINE_SMART_DROPOUTS","","",N,N],[17,"FT_OUTLINE_INCLUDE_STUBS","","",N,N],[17,"FT_OUTLINE_HIGH_PRECISION","","",N,N],[17,"FT_OUTLINE_SINGLE_PASS","","",N,N],[17,"FT_CURVE_TAG_ON","","",N,N],[17,"FT_CURVE_TAG_CONIC","","",N,N],[17,"FT_CURVE_TAG_CUBIC","","",N,N],[17,"FT_CURVE_TAG_HAS_SCANMODE","","",N,N],[17,"FT_CURVE_TAG_TOUCH_X","","",N,N],[17,"FT_CURVE_TAG_TOUCH_Y","","",N,N],[17,"FT_CURVE_TAG_TOUCH_BOTH","","",N,N],[17,"FT_Curve_Tag_On","","",N,N],[17,"FT_Curve_Tag_Conic","","",N,N],[17,"FT_Curve_Tag_Cubic","","",N,N],[17,"FT_Curve_Tag_Touch_X","","",N,N],[17,"FT_Curve_Tag_Touch_Y","","",N,N],[17,"FT_RASTER_FLAG_DEFAULT","","",N,N],[17,"FT_RASTER_FLAG_AA","","",N,N],[17,"FT_RASTER_FLAG_DIRECT","","",N,N],[17,"FT_RASTER_FLAG_CLIP","","",N,N],[17,"FT_ERR_BASE","","",N,N],[17,"FT_FACE_FLAG_SCALABLE","","",N,N],[17,"FT_FACE_FLAG_FIXED_SIZES","","",N,N],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",N,N],[17,"FT_FACE_FLAG_SFNT","","",N,N],[17,"FT_FACE_FLAG_HORIZONTAL","","",N,N],[17,"FT_FACE_FLAG_VERTICAL","","",N,N],[17,"FT_FACE_FLAG_KERNING","","",N,N],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",N,N],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",N,N],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",N,N],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",N,N],[17,"FT_FACE_FLAG_HINTER","","",N,N],[17,"FT_FACE_FLAG_CID_KEYED","","",N,N],[17,"FT_FACE_FLAG_TRICKY","","",N,N],[17,"FT_FACE_FLAG_COLOR","","",N,N],[17,"FT_STYLE_FLAG_ITALIC","","",N,N],[17,"FT_STYLE_FLAG_BOLD","","",N,N],[17,"FT_OPEN_MEMORY","","",N,N],[17,"FT_OPEN_STREAM","","",N,N],[17,"FT_OPEN_PATHNAME","","",N,N],[17,"FT_OPEN_DRIVER","","",N,N],[17,"FT_OPEN_PARAMS","","",N,N],[17,"FT_LOAD_DEFAULT","","",N,N],[17,"FT_LOAD_NO_SCALE","","",N,N],[17,"FT_LOAD_NO_HINTING","","",N,N],[17,"FT_LOAD_RENDER","","",N,N],[17,"FT_LOAD_NO_BITMAP","","",N,N],[17,"FT_LOAD_VERTICAL_LAYOUT","","",N,N],[17,"FT_LOAD_FORCE_AUTOHINT","","",N,N],[17,"FT_LOAD_CROP_BITMAP","","",N,N],[17,"FT_LOAD_PEDANTIC","","",N,N],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",N,N],[17,"FT_LOAD_NO_RECURSE","","",N,N],[17,"FT_LOAD_IGNORE_TRANSFORM","","",N,N],[17,"FT_LOAD_MONOCHROME","","",N,N],[17,"FT_LOAD_LINEAR_DESIGN","","",N,N],[17,"FT_LOAD_NO_AUTOHINT","","",N,N],[17,"FT_LOAD_COLOR","","",N,N],[17,"FT_LOAD_COMPUTE_METRICS","","",N,N],[17,"FT_LOAD_ADVANCE_ONLY","","",N,N],[17,"FT_LOAD_SBITS_ONLY","","",N,N],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",N,N],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",N,N],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",N,N],[17,"FT_SUBGLYPH_FLAG_SCALE","","",N,N],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",N,N],[17,"FT_SUBGLYPH_FLAG_2X2","","",N,N],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",N,N],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",N,N],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",N,N],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",N,N],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",N,N],[17,"FT_FSTYPE_NO_SUBSETTING","","",N,N],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",N,N],[17,"FT_MODULE_FONT_DRIVER","","",N,N],[17,"FT_MODULE_RENDERER","","",N,N],[17,"FT_MODULE_HINTER","","",N,N],[17,"FT_MODULE_STYLER","","",N,N],[17,"FT_MODULE_DRIVER_SCALABLE","","",N,N],[17,"FT_MODULE_DRIVER_NO_OUTLINES","","",N,N],[17,"FT_MODULE_DRIVER_HAS_HINTER","","",N,N],[17,"FT_MODULE_DRIVER_HINTS_LIGHTLY","","",N,N],[17,"FT_Mod_Err_Base","","",N,N],[17,"FT_Mod_Err_Autofit","","",N,N],[17,"FT_Mod_Err_BDF","","",N,N],[17,"FT_Mod_Err_Bzip2","","",N,N],[17,"FT_Mod_Err_Cache","","",N,N],[17,"FT_Mod_Err_CFF","","",N,N],[17,"FT_Mod_Err_CID","","",N,N],[17,"FT_Mod_Err_Gzip","","",N,N],[17,"FT_Mod_Err_LZW","","",N,N],[17,"FT_Mod_Err_OTvalid","","",N,N],[17,"FT_Mod_Err_PCF","","",N,N],[17,"FT_Mod_Err_PFR","","",N,N],[17,"FT_Mod_Err_PSaux","","",N,N],[17,"FT_Mod_Err_PShinter","","",N,N],[17,"FT_Mod_Err_PSnames","","",N,N],[17,"FT_Mod_Err_Raster","","",N,N],[17,"FT_Mod_Err_SFNT","","",N,N],[17,"FT_Mod_Err_Smooth","","",N,N],[17,"FT_Mod_Err_TrueType","","",N,N],[17,"FT_Mod_Err_Type1","","",N,N],[17,"FT_Mod_Err_Type42","","",N,N],[17,"FT_Mod_Err_Winfonts","","",N,N],[17,"FT_Mod_Err_GXvalid","","",N,N],[17,"FT_Mod_Err_Max","","",N,N],[17,"FT_Err_Ok","","",N,N],[17,"FT_Err_Cannot_Open_Resource","","",N,N],[17,"FT_Err_Unknown_File_Format","","",N,N],[17,"FT_Err_Invalid_File_Format","","",N,N],[17,"FT_Err_Invalid_Version","","",N,N],[17,"FT_Err_Lower_Module_Version","","",N,N],[17,"FT_Err_Invalid_Argument","","",N,N],[17,"FT_Err_Unimplemented_Feature","","",N,N],[17,"FT_Err_Invalid_Table","","",N,N],[17,"FT_Err_Invalid_Offset","","",N,N],[17,"FT_Err_Array_Too_Large","","",N,N],[17,"FT_Err_Missing_Module","","",N,N],[17,"FT_Err_Missing_Property","","",N,N],[17,"FT_Err_Invalid_Glyph_Index","","",N,N],[17,"FT_Err_Invalid_Character_Code","","",N,N],[17,"FT_Err_Invalid_Glyph_Format","","",N,N],[17,"FT_Err_Cannot_Render_Glyph","","",N,N],[17,"FT_Err_Invalid_Outline","","",N,N],[17,"FT_Err_Invalid_Composite","","",N,N],[17,"FT_Err_Too_Many_Hints","","",N,N],[17,"FT_Err_Invalid_Pixel_Size","","",N,N],[17,"FT_Err_Invalid_Handle","","",N,N],[17,"FT_Err_Invalid_Library_Handle","","",N,N],[17,"FT_Err_Invalid_Driver_Handle","","",N,N],[17,"FT_Err_Invalid_Face_Handle","","",N,N],[17,"FT_Err_Invalid_Size_Handle","","",N,N],[17,"FT_Err_Invalid_Slot_Handle","","",N,N],[17,"FT_Err_Invalid_CharMap_Handle","","",N,N],[17,"FT_Err_Invalid_Cache_Handle","","",N,N],[17,"FT_Err_Invalid_Stream_Handle","","",N,N],[17,"FT_Err_Too_Many_Drivers","","",N,N],[17,"FT_Err_Too_Many_Extensions","","",N,N],[17,"FT_Err_Out_Of_Memory","","",N,N],[17,"FT_Err_Unlisted_Object","","",N,N],[17,"FT_Err_Cannot_Open_Stream","","",N,N],[17,"FT_Err_Invalid_Stream_Seek","","",N,N],[17,"FT_Err_Invalid_Stream_Skip","","",N,N],[17,"FT_Err_Invalid_Stream_Read","","",N,N],[17,"FT_Err_Invalid_Stream_Operation","","",N,N],[17,"FT_Err_Invalid_Frame_Operation","","",N,N],[17,"FT_Err_Nested_Frame_Access","","",N,N],[17,"FT_Err_Invalid_Frame_Read","","",N,N],[17,"FT_Err_Raster_Uninitialized","","",N,N],[17,"FT_Err_Raster_Corrupted","","",N,N],[17,"FT_Err_Raster_Overflow","","",N,N],[17,"FT_Err_Raster_Negative_Height","","",N,N],[17,"FT_Err_Too_Many_Caches","","",N,N],[17,"FT_Err_Invalid_Opcode","","",N,N],[17,"FT_Err_Too_Few_Arguments","","",N,N],[17,"FT_Err_Stack_Overflow","","",N,N],[17,"FT_Err_Code_Overflow","","",N,N],[17,"FT_Err_Bad_Argument","","",N,N],[17,"FT_Err_Divide_By_Zero","","",N,N],[17,"FT_Err_Invalid_Reference","","",N,N],[17,"FT_Err_Debug_OpCode","","",N,N],[17,"FT_Err_ENDF_In_Exec_Stream","","",N,N],[17,"FT_Err_Nested_DEFS","","",N,N],[17,"FT_Err_Invalid_CodeRange","","",N,N],[17,"FT_Err_Execution_Too_Long","","",N,N],[17,"FT_Err_Too_Many_Function_Defs","","",N,N],[17,"FT_Err_Too_Many_Instruction_Defs","","",N,N],[17,"FT_Err_Table_Missing","","",N,N],[17,"FT_Err_Horiz_Header_Missing","","",N,N],[17,"FT_Err_Locations_Missing","","",N,N],[17,"FT_Err_Name_Table_Missing","","",N,N],[17,"FT_Err_CMap_Table_Missing","","",N,N],[17,"FT_Err_Hmtx_Table_Missing","","",N,N],[17,"FT_Err_Post_Table_Missing","","",N,N],[17,"FT_Err_Invalid_Horiz_Metrics","","",N,N],[17,"FT_Err_Invalid_CharMap_Format","","",N,N],[17,"FT_Err_Invalid_PPem","","",N,N],[17,"FT_Err_Invalid_Vert_Metrics","","",N,N],[17,"FT_Err_Could_Not_Find_Context","","",N,N],[17,"FT_Err_Invalid_Post_Table_Format","","",N,N],[17,"FT_Err_Invalid_Post_Table","","",N,N],[17,"FT_Err_Syntax_Error","","",N,N],[17,"FT_Err_Stack_Underflow","","",N,N],[17,"FT_Err_Ignore","","",N,N],[17,"FT_Err_No_Unicode_Glyph_Name","","",N,N],[17,"FT_Err_Glyph_Too_Big","","",N,N],[17,"FT_Err_Missing_Startfont_Field","","",N,N],[17,"FT_Err_Missing_Font_Field","","",N,N],[17,"FT_Err_Missing_Size_Field","","",N,N],[17,"FT_Err_Missing_Fontboundingbox_Field","","",N,N],[17,"FT_Err_Missing_Chars_Field","","",N,N],[17,"FT_Err_Missing_Startchar_Field","","",N,N],[17,"FT_Err_Missing_Encoding_Field","","",N,N],[17,"FT_Err_Missing_Bbx_Field","","",N,N],[17,"FT_Err_Bbx_Too_Big","","",N,N],[17,"FT_Err_Corrupted_Font_Header","","",N,N],[17,"FT_Err_Corrupted_Font_Glyphs","","",N,N],[17,"FT_Err_Max","","",N,N],[17,"FT_Encoding__FT_ENCODING_MS_SJIS","","",N,N],[17,"FT_Encoding__FT_ENCODING_MS_GB2312","","",N,N],[17,"FT_Encoding__FT_ENCODING_MS_BIG5","","",N,N],[17,"FT_Encoding__FT_ENCODING_MS_WANSUNG","","",N,N],[17,"FT_Encoding__FT_ENCODING_MS_JOHAB","","",N,N],[17,"FT_Orientation__FT_ORIENTATION_FILL_RIGHT","","",N,N],[17,"FT_Orientation__FT_ORIENTATION_FILL_LEFT","","",N,N],[11,"new","","",40,[[],["self"]]],[11,"as_ref","","",40,[[["self"]],["t"]]],[11,"as_mut","","",40,[[["self"]],["t"]]],[11,"default","","",40,[[],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["ft_pixel_mode_"]]],[11,"eq","","",28,[[["self"],["ft_pixel_mode_"]],["bool"]]],[11,"hash","","",28,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["ft_glyph_format_"]]],[11,"eq","","",29,[[["self"],["ft_glyph_format_"]],["bool"]]],[11,"hash","","",29,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["ft_rasterrec_"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["_bindgen_ty_1"]]],[11,"eq","","",30,[[["self"],["_bindgen_ty_1"]],["bool"]]],[11,"hash","","",30,N],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["_bindgen_ty_2"]]],[11,"eq","","",31,[[["self"],["_bindgen_ty_2"]],["bool"]]],[11,"hash","","",31,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["ft_libraryrec_"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["ft_modulerec_"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["ft_driverrec_"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["ft_rendererrec_"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["ft_encoding_"]]],[11,"eq","","",32,[[["self"],["ft_encoding_"]],["bool"]]],[11,"hash","","",32,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["ft_face_internalrec_"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["ft_size_internalrec_"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["ft_subglyphrec_"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["ft_slot_internalrec_"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["self"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["self"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["ft_size_request_type_"]]],[11,"eq","","",33,[[["self"],["ft_size_request_type_"]],["bool"]]],[11,"hash","","",33,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["ft_render_mode_"]]],[11,"eq","","",34,[[["self"],["ft_render_mode_"]],["bool"]]],[11,"hash","","",34,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["ft_kerning_mode_"]]],[11,"eq","","",35,[[["self"],["ft_kerning_mode_"]],["bool"]]],[11,"hash","","",35,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["ft_lcdfilter_"]]],[11,"eq","","",36,[[["self"],["ft_lcdfilter_"]],["bool"]]],[11,"hash","","",36,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["ft_sfnt_tag_"]]],[11,"eq","","",37,[[["self"],["ft_sfnt_tag_"]],["bool"]]],[11,"hash","","",37,N],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["self"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["ft_truetypeenginetype_"]]],[11,"eq","","",38,[[["self"],["ft_truetypeenginetype_"]],["bool"]]],[11,"hash","","",38,N],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["ft_orientation_"]]],[11,"eq","","",39,[[["self"],["ft_orientation_"]],["bool"]]],[11,"hash","","",39,N],[0,"tt_os2","freetype","",N,N],[3,"TT_OS2","freetype::tt_os2","",N,N],[12,"version","","",50,N],[12,"xAvgCharWidth","","",50,N],[12,"usWeightClass","","",50,N],[12,"usWidthClass","","",50,N],[12,"fsType","","",50,N],[12,"ySubscriptXSize","","",50,N],[12,"ySubscriptYSize","","",50,N],[12,"ySubscriptXOffset","","",50,N],[12,"ySubscriptYOffset","","",50,N],[12,"ySuperscriptXSize","","",50,N],[12,"ySuperscriptYSize","","",50,N],[12,"ySuperscriptXOffset","","",50,N],[12,"ySuperscriptYOffset","","",50,N],[12,"yStrikeoutSize","","",50,N],[12,"yStrikeoutPosition","","",50,N],[12,"sFamilyClass","","",50,N],[12,"panose","","",50,N],[12,"ulUnicodeRange1","","",50,N],[12,"ulUnicodeRange2","","",50,N],[12,"ulUnicodeRange3","","",50,N],[12,"ulUnicodeRange4","","",50,N],[12,"ulCodePageRange1","","",50,N],[12,"ulCodePageRange2","","",50,N],[12,"sxHeight","","",50,N],[12,"sCapHeight","","",50,N],[12,"usDefaultChar","","",50,N],[12,"usBreakChar","","",50,N],[12,"usMaxContext","","",50,N],[6,"FT_Error","freetype","",N,N],[11,"into","freetype::freetype","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"into","freetype::tt_os2","",50,[[["self"]],["u"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]]],"paths":[[3,"FT_MemoryRec_"],[3,"FT_StreamRec_"],[3,"FT_StreamDesc_"],[3,"FT_Vector_"],[3,"FT_BBox_"],[3,"FT_Bitmap_"],[3,"FT_Outline_"],[3,"FT_Outline_Funcs_"],[3,"FT_Span_"],[3,"FT_Raster_Params_"],[3,"FT_Raster_Funcs_"],[3,"FT_UnitVector_"],[3,"FT_Matrix_"],[3,"FT_Data_"],[3,"FT_Generic_"],[3,"FT_ListNodeRec_"],[3,"FT_ListRec_"],[3,"FT_Glyph_Metrics_"],[3,"FT_Bitmap_Size_"],[3,"FT_FaceRec_"],[3,"FT_SizeRec_"],[3,"FT_GlyphSlotRec_"],[3,"FT_CharMapRec_"],[3,"FT_Size_Metrics_"],[3,"FT_Parameter_"],[3,"FT_Open_Args_"],[3,"FT_Size_RequestRec_"],[3,"FT_Module_Class_"],[4,"FT_Pixel_Mode_"],[4,"FT_Glyph_Format_"],[4,"_bindgen_ty_1"],[4,"_bindgen_ty_2"],[4,"FT_Encoding_"],[4,"FT_Size_Request_Type_"],[4,"FT_Render_Mode_"],[4,"FT_Kerning_Mode_"],[4,"FT_LcdFilter_"],[4,"FT_Sfnt_Tag_"],[4,"FT_TrueTypeEngineType_"],[4,"FT_Orientation_"],[3,"__BindgenUnionField"],[3,"FT_RasterRec_"],[3,"FT_LibraryRec_"],[3,"FT_ModuleRec_"],[3,"FT_DriverRec_"],[3,"FT_RendererRec_"],[3,"FT_Face_InternalRec_"],[3,"FT_Size_InternalRec_"],[3,"FT_SubGlyphRec_"],[3,"FT_Slot_InternalRec_"],[3,"TT_OS2"]]};
searchIndex["freetype_sys"]={"doc":"","items":[],"paths":[]};
searchIndex["fxhash"]={"doc":"Fx Hash","items":[[3,"FxHasher","fxhash","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.",N,N],[3,"FxHasher64","","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.",N,N],[3,"FxHasher32","","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.",N,N],[5,"hash64","","A convenience function for when you need a quick 64-bit hash.",N,[[["t"]],["u64"]]],[5,"hash32","","A convenience function for when you need a quick 32-bit hash.",N,[[["t"]],["u32"]]],[5,"hash","","A convenience function for when you need a quick usize hash.",N,[[["t"]],["usize"]]],[6,"FxBuildHasher","","A builder for default Fx hashers.",N,N],[6,"FxHashMap","","A `HashMap` using a default Fx hasher.",N,N],[6,"FxHashSet","","A `HashSet` using a default Fx hasher.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["fxhasher"]]],[11,"default","","",0,[[],["fxhasher"]]],[11,"write","","",0,N],[11,"write_u8","","",0,[[["self"],["u8"]]]],[11,"write_u16","","",0,[[["self"],["u16"]]]],[11,"write_u32","","",0,[[["self"],["u32"]]]],[11,"write_u64","","",0,[[["self"],["u64"]]]],[11,"write_usize","","",0,[[["self"],["usize"]]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["fxhasher64"]]],[11,"default","","",1,[[],["fxhasher64"]]],[11,"write","","",1,N],[11,"write_u8","","",1,[[["self"],["u8"]]]],[11,"write_u16","","",1,[[["self"],["u16"]]]],[11,"write_u32","","",1,[[["self"],["u32"]]]],[11,"write_u64","","",1,[[["self"],["u64"]]]],[11,"write_usize","","",1,[[["self"],["usize"]]]],[11,"finish","","",1,[[["self"]],["u64"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["fxhasher32"]]],[11,"default","","",2,[[],["fxhasher32"]]],[11,"write","","",2,N],[11,"write_u8","","",2,[[["self"],["u8"]]]],[11,"write_u16","","",2,[[["self"],["u16"]]]],[11,"write_u32","","",2,[[["self"],["u32"]]]],[11,"write_u64","","",2,[[["self"],["u64"]]]],[11,"write_usize","","",2,[[["self"],["usize"]]]],[11,"finish","","",2,[[["self"]],["u64"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"FxHasher"],[3,"FxHasher64"],[3,"FxHasher32"]]};
searchIndex["gleam"]={"doc":"","items":[[0,"gl","gleam","",N,N],[3,"FnPtr","gleam::gl","",N,N],[3,"GlFfi","","",N,N],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",0,N],[12,"AttachShader","","Fallbacks: AttachObjectARB",0,N],[12,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",0,N],[12,"BeginQuery","","Fallbacks: BeginQueryARB",0,N],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",0,N],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",0,N],[12,"BindBuffer","","Fallbacks: BindBufferARB",0,N],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",0,N],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",0,N],[12,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",0,N],[12,"BindFragDataLocationIndexed","","Fallbacks: BindFragDataLocationIndexedEXT",0,N],[12,"BindFramebuffer","","",0,N],[12,"BindRenderbuffer","","",0,N],[12,"BindSampler","","",0,N],[12,"BindTexture","","Fallbacks: BindTextureEXT",0,N],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",0,N],[12,"BlendColor","","Fallbacks: BlendColorEXT",0,N],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",0,N],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",0,N],[12,"BlendFunc","","",0,N],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",0,N],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",0,N],[12,"BufferData","","Fallbacks: BufferDataARB",0,N],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",0,N],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",0,N],[12,"ClampColor","","Fallbacks: ClampColorARB",0,N],[12,"Clear","","",0,N],[12,"ClearBufferfi","","",0,N],[12,"ClearBufferfv","","",0,N],[12,"ClearBufferiv","","",0,N],[12,"ClearBufferuiv","","",0,N],[12,"ClearColor","","",0,N],[12,"ClearDepth","","",0,N],[12,"ClearStencil","","",0,N],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",0,N],[12,"ColorMask","","",0,N],[12,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",0,N],[12,"ColorP3ui","","",0,N],[12,"ColorP3uiv","","",0,N],[12,"ColorP4ui","","",0,N],[12,"ColorP4uiv","","",0,N],[12,"CompileShader","","Fallbacks: CompileShaderARB",0,N],[12,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",0,N],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",0,N],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB",0,N],[12,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",0,N],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",0,N],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB",0,N],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",0,N],[12,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",0,N],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",0,N],[12,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",0,N],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",0,N],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT",0,N],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",0,N],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",0,N],[12,"CullFace","","",0,N],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",0,N],[12,"DebugMessageCallbackKHR","","",0,N],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",0,N],[12,"DebugMessageControlKHR","","",0,N],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",0,N],[12,"DebugMessageInsertKHR","","",0,N],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",0,N],[12,"DeleteFencesAPPLE","","",0,N],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",0,N],[12,"DeleteProgram","","",0,N],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",0,N],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",0,N],[12,"DeleteSamplers","","",0,N],[12,"DeleteShader","","",0,N],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",0,N],[12,"DeleteTextures","","",0,N],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",0,N],[12,"DepthFunc","","",0,N],[12,"DepthMask","","",0,N],[12,"DepthRange","","",0,N],[12,"DetachShader","","Fallbacks: DetachObjectARB",0,N],[12,"Disable","","",0,N],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",0,N],[12,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",0,N],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",0,N],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",0,N],[12,"DrawBuffer","","",0,N],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",0,N],[12,"DrawElements","","",0,N],[12,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",0,N],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",0,N],[12,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",0,N],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",0,N],[12,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",0,N],[12,"Enable","","",0,N],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",0,N],[12,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",0,N],[12,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",0,N],[12,"EndQuery","","Fallbacks: EndQueryARB",0,N],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",0,N],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",0,N],[12,"Finish","","",0,N],[12,"FinishFenceAPPLE","","",0,N],[12,"FinishObjectAPPLE","","",0,N],[12,"Flush","","",0,N],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",0,N],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",0,N],[12,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",0,N],[12,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",0,N],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",0,N],[12,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT",0,N],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",0,N],[12,"FrontFace","","",0,N],[12,"GenBuffers","","Fallbacks: GenBuffersARB",0,N],[12,"GenFencesAPPLE","","",0,N],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",0,N],[12,"GenQueries","","Fallbacks: GenQueriesARB",0,N],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",0,N],[12,"GenSamplers","","",0,N],[12,"GenTextures","","",0,N],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",0,N],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",0,N],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",0,N],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",0,N],[12,"GetActiveUniformBlockName","","",0,N],[12,"GetActiveUniformBlockiv","","",0,N],[12,"GetActiveUniformName","","",0,N],[12,"GetActiveUniformsiv","","",0,N],[12,"GetAttachedShaders","","",0,N],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",0,N],[12,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",0,N],[12,"GetBooleanv","","",0,N],[12,"GetBufferParameteri64v","","",0,N],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",0,N],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",0,N],[12,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",0,N],[12,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",0,N],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",0,N],[12,"GetDebugMessageLogKHR","","",0,N],[12,"GetDoublev","","",0,N],[12,"GetError","","",0,N],[12,"GetFloatv","","",0,N],[12,"GetFragDataIndex","","Fallbacks: GetFragDataIndexEXT",0,N],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",0,N],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",0,N],[12,"GetInteger64i_v","","",0,N],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",0,N],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",0,N],[12,"GetIntegerv","","",0,N],[12,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",0,N],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",0,N],[12,"GetObjectLabelKHR","","",0,N],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",0,N],[12,"GetObjectPtrLabelKHR","","",0,N],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",0,N],[12,"GetPointervKHR","","",0,N],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",0,N],[12,"GetProgramInfoLog","","",0,N],[12,"GetProgramiv","","",0,N],[12,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",0,N],[12,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",0,N],[12,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",0,N],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",0,N],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",0,N],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",0,N],[12,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",0,N],[12,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",0,N],[12,"GetSamplerParameterfv","","",0,N],[12,"GetSamplerParameteriv","","",0,N],[12,"GetShaderInfoLog","","",0,N],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",0,N],[12,"GetShaderiv","","",0,N],[12,"GetString","","",0,N],[12,"GetStringi","","",0,N],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",0,N],[12,"GetTexImage","","",0,N],[12,"GetTexLevelParameterfv","","",0,N],[12,"GetTexLevelParameteriv","","",0,N],[12,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",0,N],[12,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",0,N],[12,"GetTexParameterPointervAPPLE","","",0,N],[12,"GetTexParameterfv","","",0,N],[12,"GetTexParameteriv","","",0,N],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",0,N],[12,"GetUniformBlockIndex","","",0,N],[12,"GetUniformIndices","","",0,N],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",0,N],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",0,N],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",0,N],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",0,N],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",0,N],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",0,N],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",0,N],[12,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",0,N],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",0,N],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",0,N],[12,"Hint","","",0,N],[12,"InsertEventMarkerEXT","","",0,N],[12,"IsBuffer","","Fallbacks: IsBufferARB",0,N],[12,"IsEnabled","","",0,N],[12,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",0,N],[12,"IsFenceAPPLE","","",0,N],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",0,N],[12,"IsProgram","","",0,N],[12,"IsQuery","","Fallbacks: IsQueryARB",0,N],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",0,N],[12,"IsSampler","","",0,N],[12,"IsShader","","",0,N],[12,"IsSync","","Fallbacks: IsSyncAPPLE",0,N],[12,"IsTexture","","",0,N],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",0,N],[12,"LineWidth","","",0,N],[12,"LinkProgram","","Fallbacks: LinkProgramARB",0,N],[12,"LogicOp","","",0,N],[12,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",0,N],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",0,N],[12,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",0,N],[12,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",0,N],[12,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT",0,N],[12,"MultiTexCoordP1ui","","",0,N],[12,"MultiTexCoordP1uiv","","",0,N],[12,"MultiTexCoordP2ui","","",0,N],[12,"MultiTexCoordP2uiv","","",0,N],[12,"MultiTexCoordP3ui","","",0,N],[12,"MultiTexCoordP3uiv","","",0,N],[12,"MultiTexCoordP4ui","","",0,N],[12,"MultiTexCoordP4uiv","","",0,N],[12,"NormalP3ui","","",0,N],[12,"NormalP3uiv","","",0,N],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",0,N],[12,"ObjectLabelKHR","","",0,N],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",0,N],[12,"ObjectPtrLabelKHR","","",0,N],[12,"PixelStoref","","",0,N],[12,"PixelStorei","","",0,N],[12,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",0,N],[12,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",0,N],[12,"PointParameteri","","Fallbacks: PointParameteriNV",0,N],[12,"PointParameteriv","","Fallbacks: PointParameterivNV",0,N],[12,"PointSize","","",0,N],[12,"PolygonMode","","Fallbacks: PolygonModeNV",0,N],[12,"PolygonOffset","","",0,N],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",0,N],[12,"PopDebugGroupKHR","","",0,N],[12,"PopGroupMarkerEXT","","",0,N],[12,"PrimitiveRestartIndex","","",0,N],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",0,N],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",0,N],[12,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",0,N],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",0,N],[12,"PushDebugGroupKHR","","",0,N],[12,"PushGroupMarkerEXT","","",0,N],[12,"QueryCounter","","Fallbacks: QueryCounterEXT",0,N],[12,"ReadBuffer","","",0,N],[12,"ReadPixels","","",0,N],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",0,N],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",0,N],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",0,N],[12,"SampleMaski","","",0,N],[12,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",0,N],[12,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",0,N],[12,"SamplerParameterf","","",0,N],[12,"SamplerParameterfv","","",0,N],[12,"SamplerParameteri","","",0,N],[12,"SamplerParameteriv","","",0,N],[12,"Scissor","","",0,N],[12,"SecondaryColorP3ui","","",0,N],[12,"SecondaryColorP3uiv","","",0,N],[12,"SetFenceAPPLE","","",0,N],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",0,N],[12,"StencilFunc","","",0,N],[12,"StencilFuncSeparate","","",0,N],[12,"StencilMask","","",0,N],[12,"StencilMaskSeparate","","",0,N],[12,"StencilOp","","",0,N],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",0,N],[12,"TestFenceAPPLE","","",0,N],[12,"TestObjectAPPLE","","",0,N],[12,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",0,N],[12,"TexCoordP1ui","","",0,N],[12,"TexCoordP1uiv","","",0,N],[12,"TexCoordP2ui","","",0,N],[12,"TexCoordP2uiv","","",0,N],[12,"TexCoordP3ui","","",0,N],[12,"TexCoordP3uiv","","",0,N],[12,"TexCoordP4ui","","",0,N],[12,"TexCoordP4uiv","","",0,N],[12,"TexImage1D","","",0,N],[12,"TexImage2D","","",0,N],[12,"TexImage2DMultisample","","",0,N],[12,"TexImage3D","","Fallbacks: TexImage3DEXT",0,N],[12,"TexImage3DMultisample","","",0,N],[12,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",0,N],[12,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",0,N],[12,"TexParameterf","","",0,N],[12,"TexParameterfv","","",0,N],[12,"TexParameteri","","",0,N],[12,"TexParameteriv","","",0,N],[12,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",0,N],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",0,N],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT",0,N],[12,"TextureRangeAPPLE","","",0,N],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",0,N],[12,"Uniform1f","","Fallbacks: Uniform1fARB",0,N],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",0,N],[12,"Uniform1i","","Fallbacks: Uniform1iARB",0,N],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",0,N],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",0,N],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",0,N],[12,"Uniform2f","","Fallbacks: Uniform2fARB",0,N],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",0,N],[12,"Uniform2i","","Fallbacks: Uniform2iARB",0,N],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",0,N],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",0,N],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",0,N],[12,"Uniform3f","","Fallbacks: Uniform3fARB",0,N],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",0,N],[12,"Uniform3i","","Fallbacks: Uniform3iARB",0,N],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",0,N],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",0,N],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",0,N],[12,"Uniform4f","","Fallbacks: Uniform4fARB",0,N],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",0,N],[12,"Uniform4i","","Fallbacks: Uniform4iARB",0,N],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",0,N],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",0,N],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",0,N],[12,"UniformBlockBinding","","",0,N],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",0,N],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",0,N],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",0,N],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",0,N],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",0,N],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",0,N],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",0,N],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",0,N],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",0,N],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",0,N],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",0,N],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",0,N],[12,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",0,N],[12,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",0,N],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",0,N],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",0,N],[12,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",0,N],[12,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",0,N],[12,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",0,N],[12,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",0,N],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",0,N],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",0,N],[12,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",0,N],[12,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",0,N],[12,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",0,N],[12,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",0,N],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",0,N],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",0,N],[12,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",0,N],[12,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",0,N],[12,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",0,N],[12,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",0,N],[12,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",0,N],[12,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",0,N],[12,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",0,N],[12,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",0,N],[12,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",0,N],[12,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",0,N],[12,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",0,N],[12,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",0,N],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",0,N],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",0,N],[12,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",0,N],[12,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",0,N],[12,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",0,N],[12,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",0,N],[12,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",0,N],[12,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",0,N],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",0,N],[12,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",0,N],[12,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",0,N],[12,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",0,N],[12,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",0,N],[12,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",0,N],[12,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",0,N],[12,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",0,N],[12,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",0,N],[12,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",0,N],[12,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",0,N],[12,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",0,N],[12,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",0,N],[12,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",0,N],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",0,N],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",0,N],[12,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",0,N],[12,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",0,N],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",0,N],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",0,N],[12,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",0,N],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",0,N],[12,"VertexAttribP1ui","","",0,N],[12,"VertexAttribP1uiv","","",0,N],[12,"VertexAttribP2ui","","",0,N],[12,"VertexAttribP2uiv","","",0,N],[12,"VertexAttribP3ui","","",0,N],[12,"VertexAttribP3uiv","","",0,N],[12,"VertexAttribP4ui","","",0,N],[12,"VertexAttribP4uiv","","",0,N],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",0,N],[12,"VertexP2ui","","",0,N],[12,"VertexP2uiv","","",0,N],[12,"VertexP3ui","","",0,N],[12,"VertexP3uiv","","",0,N],[12,"VertexP4ui","","",0,N],[12,"VertexP4uiv","","",0,N],[12,"Viewport","","",0,N],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",0,N],[3,"GlesFfi","","",N,N],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",1,N],[12,"AttachShader","","Fallbacks: AttachObjectARB",1,N],[12,"BeginQuery","","Fallbacks: BeginQueryARB",1,N],[12,"BeginQueryEXT","","",1,N],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",1,N],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",1,N],[12,"BindBuffer","","Fallbacks: BindBufferARB",1,N],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",1,N],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",1,N],[12,"BindFramebuffer","","",1,N],[12,"BindRenderbuffer","","",1,N],[12,"BindSampler","","",1,N],[12,"BindTexture","","Fallbacks: BindTextureEXT",1,N],[12,"BindTransformFeedback","","",1,N],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",1,N],[12,"BlendColor","","Fallbacks: BlendColorEXT",1,N],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",1,N],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",1,N],[12,"BlendFunc","","",1,N],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",1,N],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",1,N],[12,"BufferData","","Fallbacks: BufferDataARB",1,N],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",1,N],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",1,N],[12,"Clear","","",1,N],[12,"ClearBufferfi","","",1,N],[12,"ClearBufferfv","","",1,N],[12,"ClearBufferiv","","",1,N],[12,"ClearBufferuiv","","",1,N],[12,"ClearColor","","",1,N],[12,"ClearDepthf","","Fallbacks: ClearDepthfOES",1,N],[12,"ClearStencil","","",1,N],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",1,N],[12,"ColorMask","","",1,N],[12,"CompileShader","","Fallbacks: CompileShaderARB",1,N],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",1,N],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB",1,N],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",1,N],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB",1,N],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",1,N],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",1,N],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",1,N],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT",1,N],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",1,N],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",1,N],[12,"CullFace","","",1,N],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",1,N],[12,"DebugMessageCallbackKHR","","",1,N],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",1,N],[12,"DebugMessageControlKHR","","",1,N],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",1,N],[12,"DebugMessageInsertKHR","","",1,N],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",1,N],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",1,N],[12,"DeleteProgram","","",1,N],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",1,N],[12,"DeleteQueriesEXT","","",1,N],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",1,N],[12,"DeleteSamplers","","",1,N],[12,"DeleteShader","","",1,N],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",1,N],[12,"DeleteTextures","","",1,N],[12,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",1,N],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",1,N],[12,"DepthFunc","","",1,N],[12,"DepthMask","","",1,N],[12,"DepthRangef","","Fallbacks: DepthRangefOES",1,N],[12,"DetachShader","","Fallbacks: DetachObjectARB",1,N],[12,"Disable","","",1,N],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",1,N],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",1,N],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",1,N],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",1,N],[12,"DrawElements","","",1,N],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",1,N],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",1,N],[12,"EGLImageTargetRenderbufferStorageOES","","",1,N],[12,"EGLImageTargetTexture2DOES","","",1,N],[12,"Enable","","",1,N],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",1,N],[12,"EndQuery","","Fallbacks: EndQueryARB",1,N],[12,"EndQueryEXT","","",1,N],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",1,N],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",1,N],[12,"Finish","","",1,N],[12,"Flush","","",1,N],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",1,N],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",1,N],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",1,N],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",1,N],[12,"FrontFace","","",1,N],[12,"GenBuffers","","Fallbacks: GenBuffersARB",1,N],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",1,N],[12,"GenQueries","","Fallbacks: GenQueriesARB",1,N],[12,"GenQueriesEXT","","",1,N],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",1,N],[12,"GenSamplers","","",1,N],[12,"GenTextures","","",1,N],[12,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",1,N],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",1,N],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",1,N],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",1,N],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",1,N],[12,"GetActiveUniformBlockName","","",1,N],[12,"GetActiveUniformBlockiv","","",1,N],[12,"GetActiveUniformsiv","","",1,N],[12,"GetAttachedShaders","","",1,N],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",1,N],[12,"GetBooleanv","","",1,N],[12,"GetBufferParameteri64v","","",1,N],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",1,N],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",1,N],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",1,N],[12,"GetDebugMessageLogKHR","","",1,N],[12,"GetError","","",1,N],[12,"GetFloatv","","",1,N],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",1,N],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",1,N],[12,"GetInteger64i_v","","",1,N],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",1,N],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",1,N],[12,"GetIntegerv","","",1,N],[12,"GetInternalformativ","","",1,N],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",1,N],[12,"GetObjectLabelKHR","","",1,N],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",1,N],[12,"GetObjectPtrLabelKHR","","",1,N],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",1,N],[12,"GetPointervKHR","","",1,N],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",1,N],[12,"GetProgramInfoLog","","",1,N],[12,"GetProgramiv","","",1,N],[12,"GetQueryObjecti64vEXT","","",1,N],[12,"GetQueryObjectivEXT","","",1,N],[12,"GetQueryObjectui64vEXT","","",1,N],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",1,N],[12,"GetQueryObjectuivEXT","","",1,N],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",1,N],[12,"GetQueryivEXT","","",1,N],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",1,N],[12,"GetSamplerParameterfv","","",1,N],[12,"GetSamplerParameteriv","","",1,N],[12,"GetShaderInfoLog","","",1,N],[12,"GetShaderPrecisionFormat","","",1,N],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",1,N],[12,"GetShaderiv","","",1,N],[12,"GetString","","",1,N],[12,"GetStringi","","",1,N],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",1,N],[12,"GetTexParameterfv","","",1,N],[12,"GetTexParameteriv","","",1,N],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",1,N],[12,"GetUniformBlockIndex","","",1,N],[12,"GetUniformIndices","","",1,N],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",1,N],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",1,N],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",1,N],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",1,N],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",1,N],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",1,N],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",1,N],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",1,N],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",1,N],[12,"Hint","","",1,N],[12,"InsertEventMarkerEXT","","",1,N],[12,"InvalidateFramebuffer","","",1,N],[12,"InvalidateSubFramebuffer","","",1,N],[12,"IsBuffer","","Fallbacks: IsBufferARB",1,N],[12,"IsEnabled","","",1,N],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",1,N],[12,"IsProgram","","",1,N],[12,"IsQuery","","Fallbacks: IsQueryARB",1,N],[12,"IsQueryEXT","","",1,N],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",1,N],[12,"IsSampler","","",1,N],[12,"IsShader","","",1,N],[12,"IsSync","","Fallbacks: IsSyncAPPLE",1,N],[12,"IsTexture","","",1,N],[12,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",1,N],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",1,N],[12,"LineWidth","","",1,N],[12,"LinkProgram","","Fallbacks: LinkProgramARB",1,N],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",1,N],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",1,N],[12,"ObjectLabelKHR","","",1,N],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",1,N],[12,"ObjectPtrLabelKHR","","",1,N],[12,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",1,N],[12,"PixelStorei","","",1,N],[12,"PolygonOffset","","",1,N],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",1,N],[12,"PopDebugGroupKHR","","",1,N],[12,"PopGroupMarkerEXT","","",1,N],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",1,N],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",1,N],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",1,N],[12,"PushDebugGroupKHR","","",1,N],[12,"PushGroupMarkerEXT","","",1,N],[12,"QueryCounterEXT","","",1,N],[12,"ReadBuffer","","",1,N],[12,"ReadPixels","","",1,N],[12,"ReleaseShaderCompiler","","",1,N],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",1,N],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",1,N],[12,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",1,N],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",1,N],[12,"SamplerParameterf","","",1,N],[12,"SamplerParameterfv","","",1,N],[12,"SamplerParameteri","","",1,N],[12,"SamplerParameteriv","","",1,N],[12,"Scissor","","",1,N],[12,"ShaderBinary","","",1,N],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",1,N],[12,"StencilFunc","","",1,N],[12,"StencilFuncSeparate","","",1,N],[12,"StencilMask","","",1,N],[12,"StencilMaskSeparate","","",1,N],[12,"StencilOp","","",1,N],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",1,N],[12,"TexImage2D","","",1,N],[12,"TexImage3D","","Fallbacks: TexImage3DEXT",1,N],[12,"TexParameterf","","",1,N],[12,"TexParameterfv","","",1,N],[12,"TexParameteri","","",1,N],[12,"TexParameteriv","","",1,N],[12,"TexStorage2D","","Fallbacks: TexStorage2DEXT",1,N],[12,"TexStorage3D","","Fallbacks: TexStorage3DEXT",1,N],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",1,N],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT",1,N],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",1,N],[12,"Uniform1f","","Fallbacks: Uniform1fARB",1,N],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",1,N],[12,"Uniform1i","","Fallbacks: Uniform1iARB",1,N],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",1,N],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",1,N],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",1,N],[12,"Uniform2f","","Fallbacks: Uniform2fARB",1,N],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",1,N],[12,"Uniform2i","","Fallbacks: Uniform2iARB",1,N],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",1,N],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",1,N],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",1,N],[12,"Uniform3f","","Fallbacks: Uniform3fARB",1,N],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",1,N],[12,"Uniform3i","","Fallbacks: Uniform3iARB",1,N],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",1,N],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",1,N],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",1,N],[12,"Uniform4f","","Fallbacks: Uniform4fARB",1,N],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",1,N],[12,"Uniform4i","","Fallbacks: Uniform4iARB",1,N],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",1,N],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",1,N],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",1,N],[12,"UniformBlockBinding","","",1,N],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",1,N],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",1,N],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",1,N],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",1,N],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",1,N],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",1,N],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",1,N],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",1,N],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",1,N],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",1,N],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",1,N],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",1,N],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",1,N],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",1,N],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",1,N],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",1,N],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",1,N],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",1,N],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",1,N],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",1,N],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",1,N],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",1,N],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",1,N],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",1,N],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",1,N],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",1,N],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",1,N],[12,"Viewport","","",1,N],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",1,N],[3,"DebugMessage","","",N,N],[12,"message","","",2,N],[12,"source","","",2,N],[12,"ty","","",2,N],[12,"id","","",2,N],[12,"severity","","",2,N],[3,"ErrorCheckingGl","","",N,N],[3,"GlFns","","",N,N],[3,"GlesFns","","",N,N],[4,"__GLsync","","",N,N],[4,"_cl_context","","",N,N],[4,"_cl_event","","",N,N],[4,"GlType","","",N,N],[13,"Gl","","",3,N],[13,"Gles","","",3,N],[5,"buffer_data","","",N,N],[5,"buffer_data_raw","","",N,[[["gl"],["glenum"],["t"],["glenum"]]]],[5,"buffer_sub_data","","",N,N],[0,"types","","",N,N],[4,"__GLsync","gleam::gl::types","",N,N],[4,"_cl_context","","",N,N],[4,"_cl_event","","",N,N],[6,"GLenum","","",N,N],[6,"GLboolean","","",N,N],[6,"GLbitfield","","",N,N],[6,"GLvoid","","",N,N],[6,"GLbyte","","",N,N],[6,"GLshort","","",N,N],[6,"GLint","","",N,N],[6,"GLclampx","","",N,N],[6,"GLubyte","","",N,N],[6,"GLushort","","",N,N],[6,"GLuint","","",N,N],[6,"GLsizei","","",N,N],[6,"GLfloat","","",N,N],[6,"GLclampf","","",N,N],[6,"GLdouble","","",N,N],[6,"GLclampd","","",N,N],[6,"GLeglImageOES","","",N,N],[6,"GLchar","","",N,N],[6,"GLcharARB","","",N,N],[6,"GLhandleARB","","",N,N],[6,"GLhalfARB","","",N,N],[6,"GLhalf","","",N,N],[6,"GLfixed","","",N,N],[6,"GLintptr","","",N,N],[6,"GLsizeiptr","","",N,N],[6,"GLint64","","",N,N],[6,"GLuint64","","",N,N],[6,"GLintptrARB","","",N,N],[6,"GLsizeiptrARB","","",N,N],[6,"GLint64EXT","","",N,N],[6,"GLuint64EXT","","",N,N],[6,"GLsync","","",N,N],[6,"GLDEBUGPROC","","",N,N],[6,"GLDEBUGPROCARB","","",N,N],[6,"GLDEBUGPROCKHR","","",N,N],[6,"GLDEBUGPROCAMD","","",N,N],[6,"GLhalfNV","","",N,N],[6,"GLvdpauSurfaceNV","","",N,N],[6,"GLenum","gleam::gl","",N,N],[6,"GLboolean","","",N,N],[6,"GLbitfield","","",N,N],[6,"GLvoid","","",N,N],[6,"GLbyte","","",N,N],[6,"GLshort","","",N,N],[6,"GLint","","",N,N],[6,"GLclampx","","",N,N],[6,"GLubyte","","",N,N],[6,"GLushort","","",N,N],[6,"GLuint","","",N,N],[6,"GLsizei","","",N,N],[6,"GLfloat","","",N,N],[6,"GLclampf","","",N,N],[6,"GLdouble","","",N,N],[6,"GLclampd","","",N,N],[6,"GLeglImageOES","","",N,N],[6,"GLchar","","",N,N],[6,"GLcharARB","","",N,N],[6,"GLhandleARB","","",N,N],[6,"GLhalfARB","","",N,N],[6,"GLhalf","","",N,N],[6,"GLfixed","","",N,N],[6,"GLintptr","","",N,N],[6,"GLsizeiptr","","",N,N],[6,"GLint64","","",N,N],[6,"GLuint64","","",N,N],[6,"GLintptrARB","","",N,N],[6,"GLsizeiptrARB","","",N,N],[6,"GLint64EXT","","",N,N],[6,"GLuint64EXT","","",N,N],[6,"GLsync","","",N,N],[6,"GLDEBUGPROC","","",N,N],[6,"GLDEBUGPROCARB","","",N,N],[6,"GLDEBUGPROCKHR","","",N,N],[6,"GLDEBUGPROCAMD","","",N,N],[6,"GLhalfNV","","",N,N],[6,"GLvdpauSurfaceNV","","",N,N],[17,"ACTIVE_ATTRIBUTES","","",N,N],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",N,N],[17,"ACTIVE_TEXTURE","","",N,N],[17,"ACTIVE_UNIFORMS","","",N,N],[17,"ACTIVE_UNIFORM_BLOCKS","","",N,N],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",N,N],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",N,N],[17,"ALIASED_LINE_WIDTH_RANGE","","",N,N],[17,"ALIASED_POINT_SIZE_RANGE","","",N,N],[17,"ALPHA","","",N,N],[17,"ALPHA_BITS","","",N,N],[17,"ALREADY_SIGNALED","","",N,N],[17,"ALWAYS","","",N,N],[17,"AND","","",N,N],[17,"AND_INVERTED","","",N,N],[17,"AND_REVERSE","","",N,N],[17,"ANY_SAMPLES_PASSED","","",N,N],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",N,N],[17,"ARRAY_BUFFER","","",N,N],[17,"ARRAY_BUFFER_BINDING","","",N,N],[17,"ATTACHED_SHADERS","","",N,N],[17,"BACK","","",N,N],[17,"BACK_LEFT","","",N,N],[17,"BACK_RIGHT","","",N,N],[17,"BGR","","",N,N],[17,"BGRA","","",N,N],[17,"BGRA_EXT","","",N,N],[17,"BGRA_INTEGER","","",N,N],[17,"BGR_INTEGER","","",N,N],[17,"BLEND","","",N,N],[17,"BLEND_COLOR","","",N,N],[17,"BLEND_DST","","",N,N],[17,"BLEND_DST_ALPHA","","",N,N],[17,"BLEND_DST_RGB","","",N,N],[17,"BLEND_EQUATION","","",N,N],[17,"BLEND_EQUATION_ALPHA","","",N,N],[17,"BLEND_EQUATION_RGB","","",N,N],[17,"BLEND_SRC","","",N,N],[17,"BLEND_SRC_ALPHA","","",N,N],[17,"BLEND_SRC_RGB","","",N,N],[17,"BLUE","","",N,N],[17,"BLUE_BITS","","",N,N],[17,"BLUE_INTEGER","","",N,N],[17,"BOOL","","",N,N],[17,"BOOL_VEC2","","",N,N],[17,"BOOL_VEC3","","",N,N],[17,"BOOL_VEC4","","",N,N],[17,"BUFFER","","",N,N],[17,"BUFFER_ACCESS","","",N,N],[17,"BUFFER_ACCESS_FLAGS","","",N,N],[17,"BUFFER_KHR","","",N,N],[17,"BUFFER_MAPPED","","",N,N],[17,"BUFFER_MAP_LENGTH","","",N,N],[17,"BUFFER_MAP_OFFSET","","",N,N],[17,"BUFFER_MAP_POINTER","","",N,N],[17,"BUFFER_SIZE","","",N,N],[17,"BUFFER_USAGE","","",N,N],[17,"BYTE","","",N,N],[17,"CCW","","",N,N],[17,"CLAMP_READ_COLOR","","",N,N],[17,"CLAMP_TO_BORDER","","",N,N],[17,"CLAMP_TO_EDGE","","",N,N],[17,"CLEAR","","",N,N],[17,"CLIP_DISTANCE0","","",N,N],[17,"CLIP_DISTANCE1","","",N,N],[17,"CLIP_DISTANCE2","","",N,N],[17,"CLIP_DISTANCE3","","",N,N],[17,"CLIP_DISTANCE4","","",N,N],[17,"CLIP_DISTANCE5","","",N,N],[17,"CLIP_DISTANCE6","","",N,N],[17,"CLIP_DISTANCE7","","",N,N],[17,"COLOR","","",N,N],[17,"COLOR_ATTACHMENT0","","",N,N],[17,"COLOR_ATTACHMENT1","","",N,N],[17,"COLOR_ATTACHMENT10","","",N,N],[17,"COLOR_ATTACHMENT11","","",N,N],[17,"COLOR_ATTACHMENT12","","",N,N],[17,"COLOR_ATTACHMENT13","","",N,N],[17,"COLOR_ATTACHMENT14","","",N,N],[17,"COLOR_ATTACHMENT15","","",N,N],[17,"COLOR_ATTACHMENT16","","",N,N],[17,"COLOR_ATTACHMENT17","","",N,N],[17,"COLOR_ATTACHMENT18","","",N,N],[17,"COLOR_ATTACHMENT19","","",N,N],[17,"COLOR_ATTACHMENT2","","",N,N],[17,"COLOR_ATTACHMENT20","","",N,N],[17,"COLOR_ATTACHMENT21","","",N,N],[17,"COLOR_ATTACHMENT22","","",N,N],[17,"COLOR_ATTACHMENT23","","",N,N],[17,"COLOR_ATTACHMENT24","","",N,N],[17,"COLOR_ATTACHMENT25","","",N,N],[17,"COLOR_ATTACHMENT26","","",N,N],[17,"COLOR_ATTACHMENT27","","",N,N],[17,"COLOR_ATTACHMENT28","","",N,N],[17,"COLOR_ATTACHMENT29","","",N,N],[17,"COLOR_ATTACHMENT3","","",N,N],[17,"COLOR_ATTACHMENT30","","",N,N],[17,"COLOR_ATTACHMENT31","","",N,N],[17,"COLOR_ATTACHMENT4","","",N,N],[17,"COLOR_ATTACHMENT5","","",N,N],[17,"COLOR_ATTACHMENT6","","",N,N],[17,"COLOR_ATTACHMENT7","","",N,N],[17,"COLOR_ATTACHMENT8","","",N,N],[17,"COLOR_ATTACHMENT9","","",N,N],[17,"COLOR_BUFFER_BIT","","",N,N],[17,"COLOR_CLEAR_VALUE","","",N,N],[17,"COLOR_LOGIC_OP","","",N,N],[17,"COLOR_WRITEMASK","","",N,N],[17,"COMPARE_REF_TO_TEXTURE","","",N,N],[17,"COMPILE_STATUS","","",N,N],[17,"COMPRESSED_R11_EAC","","",N,N],[17,"COMPRESSED_RED","","",N,N],[17,"COMPRESSED_RED_RGTC1","","",N,N],[17,"COMPRESSED_RG","","",N,N],[17,"COMPRESSED_RG11_EAC","","",N,N],[17,"COMPRESSED_RGB","","",N,N],[17,"COMPRESSED_RGB8_ETC2","","",N,N],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",N,N],[17,"COMPRESSED_RGBA","","",N,N],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",N,N],[17,"COMPRESSED_RG_RGTC2","","",N,N],[17,"COMPRESSED_SIGNED_R11_EAC","","",N,N],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",N,N],[17,"COMPRESSED_SIGNED_RG11_EAC","","",N,N],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",N,N],[17,"COMPRESSED_SRGB","","",N,N],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",N,N],[17,"COMPRESSED_SRGB8_ETC2","","",N,N],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",N,N],[17,"COMPRESSED_SRGB_ALPHA","","",N,N],[17,"COMPRESSED_TEXTURE_FORMATS","","",N,N],[17,"CONDITION_SATISFIED","","",N,N],[17,"CONSTANT_ALPHA","","",N,N],[17,"CONSTANT_COLOR","","",N,N],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",N,N],[17,"CONTEXT_CORE_PROFILE_BIT","","",N,N],[17,"CONTEXT_FLAGS","","",N,N],[17,"CONTEXT_FLAG_DEBUG_BIT","","",N,N],[17,"CONTEXT_FLAG_DEBUG_BIT_KHR","","",N,N],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",N,N],[17,"CONTEXT_PROFILE_MASK","","",N,N],[17,"COPY","","",N,N],[17,"COPY_INVERTED","","",N,N],[17,"COPY_READ_BUFFER","","",N,N],[17,"COPY_READ_BUFFER_BINDING","","",N,N],[17,"COPY_WRITE_BUFFER","","",N,N],[17,"COPY_WRITE_BUFFER_BINDING","","",N,N],[17,"CULL_FACE","","",N,N],[17,"CULL_FACE_MODE","","",N,N],[17,"CURRENT_PROGRAM","","",N,N],[17,"CURRENT_QUERY","","",N,N],[17,"CURRENT_QUERY_EXT","","",N,N],[17,"CURRENT_VERTEX_ATTRIB","","",N,N],[17,"CW","","",N,N],[17,"DEBUG_CALLBACK_FUNCTION","","",N,N],[17,"DEBUG_CALLBACK_FUNCTION_KHR","","",N,N],[17,"DEBUG_CALLBACK_USER_PARAM","","",N,N],[17,"DEBUG_CALLBACK_USER_PARAM_KHR","","",N,N],[17,"DEBUG_GROUP_STACK_DEPTH","","",N,N],[17,"DEBUG_GROUP_STACK_DEPTH_KHR","","",N,N],[17,"DEBUG_LOGGED_MESSAGES","","",N,N],[17,"DEBUG_LOGGED_MESSAGES_KHR","","",N,N],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH","","",N,N],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR","","",N,N],[17,"DEBUG_OUTPUT","","",N,N],[17,"DEBUG_OUTPUT_KHR","","",N,N],[17,"DEBUG_OUTPUT_SYNCHRONOUS","","",N,N],[17,"DEBUG_OUTPUT_SYNCHRONOUS_KHR","","",N,N],[17,"DEBUG_SEVERITY_HIGH","","",N,N],[17,"DEBUG_SEVERITY_HIGH_KHR","","",N,N],[17,"DEBUG_SEVERITY_LOW","","",N,N],[17,"DEBUG_SEVERITY_LOW_KHR","","",N,N],[17,"DEBUG_SEVERITY_MEDIUM","","",N,N],[17,"DEBUG_SEVERITY_MEDIUM_KHR","","",N,N],[17,"DEBUG_SEVERITY_NOTIFICATION","","",N,N],[17,"DEBUG_SEVERITY_NOTIFICATION_KHR","","",N,N],[17,"DEBUG_SOURCE_API","","",N,N],[17,"DEBUG_SOURCE_API_KHR","","",N,N],[17,"DEBUG_SOURCE_APPLICATION","","",N,N],[17,"DEBUG_SOURCE_APPLICATION_KHR","","",N,N],[17,"DEBUG_SOURCE_OTHER","","",N,N],[17,"DEBUG_SOURCE_OTHER_KHR","","",N,N],[17,"DEBUG_SOURCE_SHADER_COMPILER","","",N,N],[17,"DEBUG_SOURCE_SHADER_COMPILER_KHR","","",N,N],[17,"DEBUG_SOURCE_THIRD_PARTY","","",N,N],[17,"DEBUG_SOURCE_THIRD_PARTY_KHR","","",N,N],[17,"DEBUG_SOURCE_WINDOW_SYSTEM","","",N,N],[17,"DEBUG_SOURCE_WINDOW_SYSTEM_KHR","","",N,N],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR","","",N,N],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR","","",N,N],[17,"DEBUG_TYPE_ERROR","","",N,N],[17,"DEBUG_TYPE_ERROR_KHR","","",N,N],[17,"DEBUG_TYPE_MARKER","","",N,N],[17,"DEBUG_TYPE_MARKER_KHR","","",N,N],[17,"DEBUG_TYPE_OTHER","","",N,N],[17,"DEBUG_TYPE_OTHER_KHR","","",N,N],[17,"DEBUG_TYPE_PERFORMANCE","","",N,N],[17,"DEBUG_TYPE_PERFORMANCE_KHR","","",N,N],[17,"DEBUG_TYPE_POP_GROUP","","",N,N],[17,"DEBUG_TYPE_POP_GROUP_KHR","","",N,N],[17,"DEBUG_TYPE_PORTABILITY","","",N,N],[17,"DEBUG_TYPE_PORTABILITY_KHR","","",N,N],[17,"DEBUG_TYPE_PUSH_GROUP","","",N,N],[17,"DEBUG_TYPE_PUSH_GROUP_KHR","","",N,N],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR","","",N,N],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR","","",N,N],[17,"DECR","","",N,N],[17,"DECR_WRAP","","",N,N],[17,"DELETE_STATUS","","",N,N],[17,"DEPTH","","",N,N],[17,"DEPTH24_STENCIL8","","",N,N],[17,"DEPTH32F_STENCIL8","","",N,N],[17,"DEPTH_ATTACHMENT","","",N,N],[17,"DEPTH_BITS","","",N,N],[17,"DEPTH_BUFFER_BIT","","",N,N],[17,"DEPTH_CLAMP","","",N,N],[17,"DEPTH_CLEAR_VALUE","","",N,N],[17,"DEPTH_COMPONENT","","",N,N],[17,"DEPTH_COMPONENT16","","",N,N],[17,"DEPTH_COMPONENT24","","",N,N],[17,"DEPTH_COMPONENT32","","",N,N],[17,"DEPTH_COMPONENT32F","","",N,N],[17,"DEPTH_FUNC","","",N,N],[17,"DEPTH_RANGE","","",N,N],[17,"DEPTH_STENCIL","","",N,N],[17,"DEPTH_STENCIL_ATTACHMENT","","",N,N],[17,"DEPTH_TEST","","",N,N],[17,"DEPTH_WRITEMASK","","",N,N],[17,"DISPLAY_LIST","","",N,N],[17,"DITHER","","",N,N],[17,"DONT_CARE","","",N,N],[17,"DOUBLE","","",N,N],[17,"DOUBLEBUFFER","","",N,N],[17,"DRAW_BUFFER","","",N,N],[17,"DRAW_BUFFER0","","",N,N],[17,"DRAW_BUFFER1","","",N,N],[17,"DRAW_BUFFER10","","",N,N],[17,"DRAW_BUFFER11","","",N,N],[17,"DRAW_BUFFER12","","",N,N],[17,"DRAW_BUFFER13","","",N,N],[17,"DRAW_BUFFER14","","",N,N],[17,"DRAW_BUFFER15","","",N,N],[17,"DRAW_BUFFER2","","",N,N],[17,"DRAW_BUFFER3","","",N,N],[17,"DRAW_BUFFER4","","",N,N],[17,"DRAW_BUFFER5","","",N,N],[17,"DRAW_BUFFER6","","",N,N],[17,"DRAW_BUFFER7","","",N,N],[17,"DRAW_BUFFER8","","",N,N],[17,"DRAW_BUFFER9","","",N,N],[17,"DRAW_FRAMEBUFFER","","",N,N],[17,"DRAW_FRAMEBUFFER_BINDING","","",N,N],[17,"DRAW_PIXELS_APPLE","","",N,N],[17,"DST_ALPHA","","",N,N],[17,"DST_COLOR","","",N,N],[17,"DYNAMIC_COPY","","",N,N],[17,"DYNAMIC_DRAW","","",N,N],[17,"DYNAMIC_READ","","",N,N],[17,"ELEMENT_ARRAY_BUFFER","","",N,N],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",N,N],[17,"EQUAL","","",N,N],[17,"EQUIV","","",N,N],[17,"EXTENSIONS","","",N,N],[17,"FALSE","","",N,N],[17,"FASTEST","","",N,N],[17,"FENCE_APPLE","","",N,N],[17,"FILL","","",N,N],[17,"FIRST_VERTEX_CONVENTION","","",N,N],[17,"FIXED","","",N,N],[17,"FIXED_ONLY","","",N,N],[17,"FLOAT","","",N,N],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",N,N],[17,"FLOAT_MAT2","","",N,N],[17,"FLOAT_MAT2x3","","",N,N],[17,"FLOAT_MAT2x4","","",N,N],[17,"FLOAT_MAT3","","",N,N],[17,"FLOAT_MAT3x2","","",N,N],[17,"FLOAT_MAT3x4","","",N,N],[17,"FLOAT_MAT4","","",N,N],[17,"FLOAT_MAT4x2","","",N,N],[17,"FLOAT_MAT4x3","","",N,N],[17,"FLOAT_VEC2","","",N,N],[17,"FLOAT_VEC3","","",N,N],[17,"FLOAT_VEC4","","",N,N],[17,"FRAGMENT_SHADER","","",N,N],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",N,N],[17,"FRAMEBUFFER","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",N,N],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",N,N],[17,"FRAMEBUFFER_BINDING","","",N,N],[17,"FRAMEBUFFER_COMPLETE","","",N,N],[17,"FRAMEBUFFER_DEFAULT","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",N,N],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",N,N],[17,"FRAMEBUFFER_SRGB","","",N,N],[17,"FRAMEBUFFER_UNDEFINED","","",N,N],[17,"FRAMEBUFFER_UNSUPPORTED","","",N,N],[17,"FRONT","","",N,N],[17,"FRONT_AND_BACK","","",N,N],[17,"FRONT_FACE","","",N,N],[17,"FRONT_LEFT","","",N,N],[17,"FRONT_RIGHT","","",N,N],[17,"FUNC_ADD","","",N,N],[17,"FUNC_REVERSE_SUBTRACT","","",N,N],[17,"FUNC_SUBTRACT","","",N,N],[17,"GENERATE_MIPMAP_HINT","","",N,N],[17,"GEOMETRY_INPUT_TYPE","","",N,N],[17,"GEOMETRY_OUTPUT_TYPE","","",N,N],[17,"GEOMETRY_SHADER","","",N,N],[17,"GEOMETRY_VERTICES_OUT","","",N,N],[17,"GEQUAL","","",N,N],[17,"GPU_DISJOINT_EXT","","",N,N],[17,"GREATER","","",N,N],[17,"GREEN","","",N,N],[17,"GREEN_BITS","","",N,N],[17,"GREEN_INTEGER","","",N,N],[17,"HALF_FLOAT","","",N,N],[17,"HIGH_FLOAT","","",N,N],[17,"HIGH_INT","","",N,N],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",N,N],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",N,N],[17,"INCR","","",N,N],[17,"INCR_WRAP","","",N,N],[17,"INDEX","","",N,N],[17,"INFO_LOG_LENGTH","","",N,N],[17,"INT","","",N,N],[17,"INTERLEAVED_ATTRIBS","","",N,N],[17,"INT_2_10_10_10_REV","","",N,N],[17,"INT_SAMPLER_1D","","",N,N],[17,"INT_SAMPLER_1D_ARRAY","","",N,N],[17,"INT_SAMPLER_2D","","",N,N],[17,"INT_SAMPLER_2D_ARRAY","","",N,N],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",N,N],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"INT_SAMPLER_2D_RECT","","",N,N],[17,"INT_SAMPLER_3D","","",N,N],[17,"INT_SAMPLER_BUFFER","","",N,N],[17,"INT_SAMPLER_CUBE","","",N,N],[17,"INT_VEC2","","",N,N],[17,"INT_VEC3","","",N,N],[17,"INT_VEC4","","",N,N],[17,"INVALID_ENUM","","",N,N],[17,"INVALID_FRAMEBUFFER_OPERATION","","",N,N],[17,"INVALID_INDEX","","",N,N],[17,"INVALID_OPERATION","","",N,N],[17,"INVALID_VALUE","","",N,N],[17,"INVERT","","",N,N],[17,"KEEP","","",N,N],[17,"LAST_VERTEX_CONVENTION","","",N,N],[17,"LEFT","","",N,N],[17,"LEQUAL","","",N,N],[17,"LESS","","",N,N],[17,"LINE","","",N,N],[17,"LINEAR","","",N,N],[17,"LINEAR_MIPMAP_LINEAR","","",N,N],[17,"LINEAR_MIPMAP_NEAREST","","",N,N],[17,"LINES","","",N,N],[17,"LINES_ADJACENCY","","",N,N],[17,"LINE_LOOP","","",N,N],[17,"LINE_SMOOTH","","",N,N],[17,"LINE_SMOOTH_HINT","","",N,N],[17,"LINE_STRIP","","",N,N],[17,"LINE_STRIP_ADJACENCY","","",N,N],[17,"LINE_WIDTH","","",N,N],[17,"LINE_WIDTH_GRANULARITY","","",N,N],[17,"LINE_WIDTH_RANGE","","",N,N],[17,"LINK_STATUS","","",N,N],[17,"LOGIC_OP_MODE","","",N,N],[17,"LOWER_LEFT","","",N,N],[17,"LOW_FLOAT","","",N,N],[17,"LOW_INT","","",N,N],[17,"LUMINANCE","","",N,N],[17,"LUMINANCE_ALPHA","","",N,N],[17,"MAJOR_VERSION","","",N,N],[17,"MAP_FLUSH_EXPLICIT_BIT","","",N,N],[17,"MAP_INVALIDATE_BUFFER_BIT","","",N,N],[17,"MAP_INVALIDATE_RANGE_BIT","","",N,N],[17,"MAP_READ_BIT","","",N,N],[17,"MAP_UNSYNCHRONIZED_BIT","","",N,N],[17,"MAP_WRITE_BIT","","",N,N],[17,"MAX","","",N,N],[17,"MAX_3D_TEXTURE_SIZE","","",N,N],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",N,N],[17,"MAX_CLIP_DISTANCES","","",N,N],[17,"MAX_COLOR_ATTACHMENTS","","",N,N],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",N,N],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",N,N],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",N,N],[17,"MAX_DEBUG_GROUP_STACK_DEPTH","","",N,N],[17,"MAX_DEBUG_GROUP_STACK_DEPTH_KHR","","",N,N],[17,"MAX_DEBUG_LOGGED_MESSAGES","","",N,N],[17,"MAX_DEBUG_LOGGED_MESSAGES_KHR","","",N,N],[17,"MAX_DEBUG_MESSAGE_LENGTH","","",N,N],[17,"MAX_DEBUG_MESSAGE_LENGTH_KHR","","",N,N],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",N,N],[17,"MAX_DRAW_BUFFERS","","",N,N],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",N,N],[17,"MAX_ELEMENTS_INDICES","","",N,N],[17,"MAX_ELEMENTS_VERTICES","","",N,N],[17,"MAX_ELEMENT_INDEX","","",N,N],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",N,N],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",N,N],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",N,N],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",N,N],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",N,N],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",N,N],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_INTEGER_SAMPLES","","",N,N],[17,"MAX_LABEL_LENGTH","","",N,N],[17,"MAX_LABEL_LENGTH_KHR","","",N,N],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",N,N],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",N,N],[17,"MAX_RECTANGLE_TEXTURE_SIZE_ARB","","",N,N],[17,"MAX_RENDERBUFFER_SIZE","","",N,N],[17,"MAX_SAMPLES","","",N,N],[17,"MAX_SAMPLE_MASK_WORDS","","",N,N],[17,"MAX_SERVER_WAIT_TIMEOUT","","",N,N],[17,"MAX_TEXTURE_BUFFER_SIZE","","",N,N],[17,"MAX_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_TEXTURE_LOD_BIAS","","",N,N],[17,"MAX_TEXTURE_MAX_ANISOTROPY_EXT","","",N,N],[17,"MAX_TEXTURE_SIZE","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",N,N],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",N,N],[17,"MAX_UNIFORM_BLOCK_SIZE","","",N,N],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",N,N],[17,"MAX_VARYING_COMPONENTS","","",N,N],[17,"MAX_VARYING_FLOATS","","",N,N],[17,"MAX_VARYING_VECTORS","","",N,N],[17,"MAX_VERTEX_ATTRIBS","","",N,N],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",N,N],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",N,N],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",N,N],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",N,N],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",N,N],[17,"MAX_VIEWPORT_DIMS","","",N,N],[17,"MEDIUM_FLOAT","","",N,N],[17,"MEDIUM_INT","","",N,N],[17,"MIN","","",N,N],[17,"MINOR_VERSION","","",N,N],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",N,N],[17,"MIRRORED_REPEAT","","",N,N],[17,"MULTISAMPLE","","",N,N],[17,"NAND","","",N,N],[17,"NEAREST","","",N,N],[17,"NEAREST_MIPMAP_LINEAR","","",N,N],[17,"NEAREST_MIPMAP_NEAREST","","",N,N],[17,"NEVER","","",N,N],[17,"NICEST","","",N,N],[17,"NONE","","",N,N],[17,"NOOP","","",N,N],[17,"NOR","","",N,N],[17,"NOTEQUAL","","",N,N],[17,"NO_ERROR","","",N,N],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",N,N],[17,"NUM_EXTENSIONS","","",N,N],[17,"NUM_PROGRAM_BINARY_FORMATS","","",N,N],[17,"NUM_SAMPLE_COUNTS","","",N,N],[17,"NUM_SHADER_BINARY_FORMATS","","",N,N],[17,"OBJECT_TYPE","","",N,N],[17,"ONE","","",N,N],[17,"ONE_MINUS_CONSTANT_ALPHA","","",N,N],[17,"ONE_MINUS_CONSTANT_COLOR","","",N,N],[17,"ONE_MINUS_DST_ALPHA","","",N,N],[17,"ONE_MINUS_DST_COLOR","","",N,N],[17,"ONE_MINUS_SRC1_ALPHA","","",N,N],[17,"ONE_MINUS_SRC1_COLOR","","",N,N],[17,"ONE_MINUS_SRC_ALPHA","","",N,N],[17,"ONE_MINUS_SRC_COLOR","","",N,N],[17,"OR","","",N,N],[17,"OR_INVERTED","","",N,N],[17,"OR_REVERSE","","",N,N],[17,"OUT_OF_MEMORY","","",N,N],[17,"PACK_ALIGNMENT","","",N,N],[17,"PACK_IMAGE_HEIGHT","","",N,N],[17,"PACK_LSB_FIRST","","",N,N],[17,"PACK_ROW_LENGTH","","",N,N],[17,"PACK_SKIP_IMAGES","","",N,N],[17,"PACK_SKIP_PIXELS","","",N,N],[17,"PACK_SKIP_ROWS","","",N,N],[17,"PACK_SWAP_BYTES","","",N,N],[17,"PIXEL_PACK_BUFFER","","",N,N],[17,"PIXEL_PACK_BUFFER_BINDING","","",N,N],[17,"PIXEL_UNPACK_BUFFER","","",N,N],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",N,N],[17,"POINT","","",N,N],[17,"POINTS","","",N,N],[17,"POINT_FADE_THRESHOLD_SIZE","","",N,N],[17,"POINT_SIZE","","",N,N],[17,"POINT_SIZE_GRANULARITY","","",N,N],[17,"POINT_SIZE_RANGE","","",N,N],[17,"POINT_SPRITE_COORD_ORIGIN","","",N,N],[17,"POLYGON_MODE","","",N,N],[17,"POLYGON_OFFSET_FACTOR","","",N,N],[17,"POLYGON_OFFSET_FILL","","",N,N],[17,"POLYGON_OFFSET_LINE","","",N,N],[17,"POLYGON_OFFSET_POINT","","",N,N],[17,"POLYGON_OFFSET_UNITS","","",N,N],[17,"POLYGON_SMOOTH","","",N,N],[17,"POLYGON_SMOOTH_HINT","","",N,N],[17,"PRIMITIVES_GENERATED","","",N,N],[17,"PRIMITIVE_RESTART","","",N,N],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",N,N],[17,"PRIMITIVE_RESTART_INDEX","","",N,N],[17,"PROGRAM","","",N,N],[17,"PROGRAM_BINARY_FORMATS","","",N,N],[17,"PROGRAM_BINARY_LENGTH","","",N,N],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",N,N],[17,"PROGRAM_KHR","","",N,N],[17,"PROGRAM_PIPELINE","","",N,N],[17,"PROGRAM_PIPELINE_KHR","","",N,N],[17,"PROGRAM_POINT_SIZE","","",N,N],[17,"PROVOKING_VERTEX","","",N,N],[17,"PROXY_TEXTURE_1D","","",N,N],[17,"PROXY_TEXTURE_1D_ARRAY","","",N,N],[17,"PROXY_TEXTURE_2D","","",N,N],[17,"PROXY_TEXTURE_2D_ARRAY","","",N,N],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",N,N],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"PROXY_TEXTURE_3D","","",N,N],[17,"PROXY_TEXTURE_CUBE_MAP","","",N,N],[17,"PROXY_TEXTURE_RECTANGLE","","",N,N],[17,"PROXY_TEXTURE_RECTANGLE_ARB","","",N,N],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",N,N],[17,"QUERY","","",N,N],[17,"QUERY_BY_REGION_NO_WAIT","","",N,N],[17,"QUERY_BY_REGION_WAIT","","",N,N],[17,"QUERY_COUNTER_BITS","","",N,N],[17,"QUERY_COUNTER_BITS_EXT","","",N,N],[17,"QUERY_KHR","","",N,N],[17,"QUERY_NO_WAIT","","",N,N],[17,"QUERY_RESULT","","",N,N],[17,"QUERY_RESULT_AVAILABLE","","",N,N],[17,"QUERY_RESULT_AVAILABLE_EXT","","",N,N],[17,"QUERY_RESULT_EXT","","",N,N],[17,"QUERY_WAIT","","",N,N],[17,"R11F_G11F_B10F","","",N,N],[17,"R16","","",N,N],[17,"R16F","","",N,N],[17,"R16I","","",N,N],[17,"R16UI","","",N,N],[17,"R16_SNORM","","",N,N],[17,"R32F","","",N,N],[17,"R32I","","",N,N],[17,"R32UI","","",N,N],[17,"R3_G3_B2","","",N,N],[17,"R8","","",N,N],[17,"R8I","","",N,N],[17,"R8UI","","",N,N],[17,"R8_SNORM","","",N,N],[17,"RASTERIZER_DISCARD","","",N,N],[17,"READ_BUFFER","","",N,N],[17,"READ_FRAMEBUFFER","","",N,N],[17,"READ_FRAMEBUFFER_BINDING","","",N,N],[17,"READ_ONLY","","",N,N],[17,"READ_WRITE","","",N,N],[17,"RED","","",N,N],[17,"RED_BITS","","",N,N],[17,"RED_INTEGER","","",N,N],[17,"RENDERBUFFER","","",N,N],[17,"RENDERBUFFER_ALPHA_SIZE","","",N,N],[17,"RENDERBUFFER_BINDING","","",N,N],[17,"RENDERBUFFER_BLUE_SIZE","","",N,N],[17,"RENDERBUFFER_DEPTH_SIZE","","",N,N],[17,"RENDERBUFFER_GREEN_SIZE","","",N,N],[17,"RENDERBUFFER_HEIGHT","","",N,N],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",N,N],[17,"RENDERBUFFER_RED_SIZE","","",N,N],[17,"RENDERBUFFER_SAMPLES","","",N,N],[17,"RENDERBUFFER_STENCIL_SIZE","","",N,N],[17,"RENDERBUFFER_WIDTH","","",N,N],[17,"RENDERER","","",N,N],[17,"REPEAT","","",N,N],[17,"REPLACE","","",N,N],[17,"REQUIRED_TEXTURE_IMAGE_UNITS_OES","","",N,N],[17,"RG","","",N,N],[17,"RG16","","",N,N],[17,"RG16F","","",N,N],[17,"RG16I","","",N,N],[17,"RG16UI","","",N,N],[17,"RG16_SNORM","","",N,N],[17,"RG32F","","",N,N],[17,"RG32I","","",N,N],[17,"RG32UI","","",N,N],[17,"RG8","","",N,N],[17,"RG8I","","",N,N],[17,"RG8UI","","",N,N],[17,"RG8_SNORM","","",N,N],[17,"RGB","","",N,N],[17,"RGB10","","",N,N],[17,"RGB10_A2","","",N,N],[17,"RGB10_A2UI","","",N,N],[17,"RGB12","","",N,N],[17,"RGB16","","",N,N],[17,"RGB16F","","",N,N],[17,"RGB16I","","",N,N],[17,"RGB16UI","","",N,N],[17,"RGB16_SNORM","","",N,N],[17,"RGB32F","","",N,N],[17,"RGB32I","","",N,N],[17,"RGB32UI","","",N,N],[17,"RGB4","","",N,N],[17,"RGB5","","",N,N],[17,"RGB565","","",N,N],[17,"RGB5_A1","","",N,N],[17,"RGB8","","",N,N],[17,"RGB8I","","",N,N],[17,"RGB8UI","","",N,N],[17,"RGB8_SNORM","","",N,N],[17,"RGB9_E5","","",N,N],[17,"RGBA","","",N,N],[17,"RGBA12","","",N,N],[17,"RGBA16","","",N,N],[17,"RGBA16F","","",N,N],[17,"RGBA16I","","",N,N],[17,"RGBA16UI","","",N,N],[17,"RGBA16_SNORM","","",N,N],[17,"RGBA2","","",N,N],[17,"RGBA32F","","",N,N],[17,"RGBA32I","","",N,N],[17,"RGBA32UI","","",N,N],[17,"RGBA4","","",N,N],[17,"RGBA8","","",N,N],[17,"RGBA8I","","",N,N],[17,"RGBA8UI","","",N,N],[17,"RGBA8_SNORM","","",N,N],[17,"RGBA_INTEGER","","",N,N],[17,"RGB_INTEGER","","",N,N],[17,"RG_INTEGER","","",N,N],[17,"RIGHT","","",N,N],[17,"SAMPLER","","",N,N],[17,"SAMPLER_1D","","",N,N],[17,"SAMPLER_1D_ARRAY","","",N,N],[17,"SAMPLER_1D_ARRAY_SHADOW","","",N,N],[17,"SAMPLER_1D_SHADOW","","",N,N],[17,"SAMPLER_2D","","",N,N],[17,"SAMPLER_2D_ARRAY","","",N,N],[17,"SAMPLER_2D_ARRAY_SHADOW","","",N,N],[17,"SAMPLER_2D_MULTISAMPLE","","",N,N],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"SAMPLER_2D_RECT","","",N,N],[17,"SAMPLER_2D_RECT_SHADOW","","",N,N],[17,"SAMPLER_2D_SHADOW","","",N,N],[17,"SAMPLER_3D","","",N,N],[17,"SAMPLER_BINDING","","",N,N],[17,"SAMPLER_BUFFER","","",N,N],[17,"SAMPLER_CUBE","","",N,N],[17,"SAMPLER_CUBE_SHADOW","","",N,N],[17,"SAMPLER_EXTERNAL_OES","","",N,N],[17,"SAMPLER_KHR","","",N,N],[17,"SAMPLES","","",N,N],[17,"SAMPLES_PASSED","","",N,N],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",N,N],[17,"SAMPLE_ALPHA_TO_ONE","","",N,N],[17,"SAMPLE_BUFFERS","","",N,N],[17,"SAMPLE_COVERAGE","","",N,N],[17,"SAMPLE_COVERAGE_INVERT","","",N,N],[17,"SAMPLE_COVERAGE_VALUE","","",N,N],[17,"SAMPLE_MASK","","",N,N],[17,"SAMPLE_MASK_VALUE","","",N,N],[17,"SAMPLE_POSITION","","",N,N],[17,"SCISSOR_BOX","","",N,N],[17,"SCISSOR_TEST","","",N,N],[17,"SEPARATE_ATTRIBS","","",N,N],[17,"SET","","",N,N],[17,"SHADER","","",N,N],[17,"SHADER_BINARY_FORMATS","","",N,N],[17,"SHADER_COMPILER","","",N,N],[17,"SHADER_KHR","","",N,N],[17,"SHADER_SOURCE_LENGTH","","",N,N],[17,"SHADER_TYPE","","",N,N],[17,"SHADING_LANGUAGE_VERSION","","",N,N],[17,"SHORT","","",N,N],[17,"SIGNALED","","",N,N],[17,"SIGNED_NORMALIZED","","",N,N],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",N,N],[17,"SMOOTH_LINE_WIDTH_RANGE","","",N,N],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",N,N],[17,"SMOOTH_POINT_SIZE_RANGE","","",N,N],[17,"SRC1_ALPHA","","",N,N],[17,"SRC1_COLOR","","",N,N],[17,"SRC_ALPHA","","",N,N],[17,"SRC_ALPHA_SATURATE","","",N,N],[17,"SRC_COLOR","","",N,N],[17,"SRGB","","",N,N],[17,"SRGB8","","",N,N],[17,"SRGB8_ALPHA8","","",N,N],[17,"SRGB_ALPHA","","",N,N],[17,"STACK_OVERFLOW","","",N,N],[17,"STACK_OVERFLOW_KHR","","",N,N],[17,"STACK_UNDERFLOW","","",N,N],[17,"STACK_UNDERFLOW_KHR","","",N,N],[17,"STATIC_COPY","","",N,N],[17,"STATIC_DRAW","","",N,N],[17,"STATIC_READ","","",N,N],[17,"STENCIL","","",N,N],[17,"STENCIL_ATTACHMENT","","",N,N],[17,"STENCIL_BACK_FAIL","","",N,N],[17,"STENCIL_BACK_FUNC","","",N,N],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",N,N],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",N,N],[17,"STENCIL_BACK_REF","","",N,N],[17,"STENCIL_BACK_VALUE_MASK","","",N,N],[17,"STENCIL_BACK_WRITEMASK","","",N,N],[17,"STENCIL_BITS","","",N,N],[17,"STENCIL_BUFFER_BIT","","",N,N],[17,"STENCIL_CLEAR_VALUE","","",N,N],[17,"STENCIL_FAIL","","",N,N],[17,"STENCIL_FUNC","","",N,N],[17,"STENCIL_INDEX","","",N,N],[17,"STENCIL_INDEX1","","",N,N],[17,"STENCIL_INDEX16","","",N,N],[17,"STENCIL_INDEX4","","",N,N],[17,"STENCIL_INDEX8","","",N,N],[17,"STENCIL_PASS_DEPTH_FAIL","","",N,N],[17,"STENCIL_PASS_DEPTH_PASS","","",N,N],[17,"STENCIL_REF","","",N,N],[17,"STENCIL_TEST","","",N,N],[17,"STENCIL_VALUE_MASK","","",N,N],[17,"STENCIL_WRITEMASK","","",N,N],[17,"STEREO","","",N,N],[17,"STORAGE_CACHED_APPLE","","",N,N],[17,"STORAGE_PRIVATE_APPLE","","",N,N],[17,"STORAGE_SHARED_APPLE","","",N,N],[17,"STREAM_COPY","","",N,N],[17,"STREAM_DRAW","","",N,N],[17,"STREAM_READ","","",N,N],[17,"SUBPIXEL_BITS","","",N,N],[17,"SYNC_CONDITION","","",N,N],[17,"SYNC_FENCE","","",N,N],[17,"SYNC_FLAGS","","",N,N],[17,"SYNC_FLUSH_COMMANDS_BIT","","",N,N],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",N,N],[17,"SYNC_STATUS","","",N,N],[17,"TEXTURE","","",N,N],[17,"TEXTURE0","","",N,N],[17,"TEXTURE1","","",N,N],[17,"TEXTURE10","","",N,N],[17,"TEXTURE11","","",N,N],[17,"TEXTURE12","","",N,N],[17,"TEXTURE13","","",N,N],[17,"TEXTURE14","","",N,N],[17,"TEXTURE15","","",N,N],[17,"TEXTURE16","","",N,N],[17,"TEXTURE17","","",N,N],[17,"TEXTURE18","","",N,N],[17,"TEXTURE19","","",N,N],[17,"TEXTURE2","","",N,N],[17,"TEXTURE20","","",N,N],[17,"TEXTURE21","","",N,N],[17,"TEXTURE22","","",N,N],[17,"TEXTURE23","","",N,N],[17,"TEXTURE24","","",N,N],[17,"TEXTURE25","","",N,N],[17,"TEXTURE26","","",N,N],[17,"TEXTURE27","","",N,N],[17,"TEXTURE28","","",N,N],[17,"TEXTURE29","","",N,N],[17,"TEXTURE3","","",N,N],[17,"TEXTURE30","","",N,N],[17,"TEXTURE31","","",N,N],[17,"TEXTURE4","","",N,N],[17,"TEXTURE5","","",N,N],[17,"TEXTURE6","","",N,N],[17,"TEXTURE7","","",N,N],[17,"TEXTURE8","","",N,N],[17,"TEXTURE9","","",N,N],[17,"TEXTURE_1D","","",N,N],[17,"TEXTURE_1D_ARRAY","","",N,N],[17,"TEXTURE_2D","","",N,N],[17,"TEXTURE_2D_ARRAY","","",N,N],[17,"TEXTURE_2D_MULTISAMPLE","","",N,N],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"TEXTURE_3D","","",N,N],[17,"TEXTURE_ALPHA_SIZE","","",N,N],[17,"TEXTURE_ALPHA_TYPE","","",N,N],[17,"TEXTURE_BASE_LEVEL","","",N,N],[17,"TEXTURE_BINDING_1D","","",N,N],[17,"TEXTURE_BINDING_1D_ARRAY","","",N,N],[17,"TEXTURE_BINDING_2D","","",N,N],[17,"TEXTURE_BINDING_2D_ARRAY","","",N,N],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",N,N],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"TEXTURE_BINDING_3D","","",N,N],[17,"TEXTURE_BINDING_BUFFER","","",N,N],[17,"TEXTURE_BINDING_CUBE_MAP","","",N,N],[17,"TEXTURE_BINDING_EXTERNAL_OES","","",N,N],[17,"TEXTURE_BINDING_RECTANGLE","","",N,N],[17,"TEXTURE_BINDING_RECTANGLE_ARB","","",N,N],[17,"TEXTURE_BLUE_SIZE","","",N,N],[17,"TEXTURE_BLUE_TYPE","","",N,N],[17,"TEXTURE_BORDER_COLOR","","",N,N],[17,"TEXTURE_BUFFER","","",N,N],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",N,N],[17,"TEXTURE_COMPARE_FUNC","","",N,N],[17,"TEXTURE_COMPARE_MODE","","",N,N],[17,"TEXTURE_COMPRESSED","","",N,N],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",N,N],[17,"TEXTURE_COMPRESSION_HINT","","",N,N],[17,"TEXTURE_CUBE_MAP","","",N,N],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",N,N],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",N,N],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",N,N],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",N,N],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",N,N],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",N,N],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",N,N],[17,"TEXTURE_DEPTH","","",N,N],[17,"TEXTURE_DEPTH_SIZE","","",N,N],[17,"TEXTURE_DEPTH_TYPE","","",N,N],[17,"TEXTURE_EXTERNAL_OES","","",N,N],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",N,N],[17,"TEXTURE_GREEN_SIZE","","",N,N],[17,"TEXTURE_GREEN_TYPE","","",N,N],[17,"TEXTURE_HEIGHT","","",N,N],[17,"TEXTURE_IMMUTABLE_FORMAT","","",N,N],[17,"TEXTURE_IMMUTABLE_LEVELS","","",N,N],[17,"TEXTURE_INTERNAL_FORMAT","","",N,N],[17,"TEXTURE_LOD_BIAS","","",N,N],[17,"TEXTURE_MAG_FILTER","","",N,N],[17,"TEXTURE_MAX_ANISOTROPY_EXT","","",N,N],[17,"TEXTURE_MAX_LEVEL","","",N,N],[17,"TEXTURE_MAX_LOD","","",N,N],[17,"TEXTURE_MIN_FILTER","","",N,N],[17,"TEXTURE_MIN_LOD","","",N,N],[17,"TEXTURE_RANGE_LENGTH_APPLE","","",N,N],[17,"TEXTURE_RANGE_POINTER_APPLE","","",N,N],[17,"TEXTURE_RECTANGLE","","",N,N],[17,"TEXTURE_RECTANGLE_ARB","","",N,N],[17,"TEXTURE_RED_SIZE","","",N,N],[17,"TEXTURE_RED_TYPE","","",N,N],[17,"TEXTURE_SAMPLES","","",N,N],[17,"TEXTURE_SHARED_SIZE","","",N,N],[17,"TEXTURE_STENCIL_SIZE","","",N,N],[17,"TEXTURE_STORAGE_HINT_APPLE","","",N,N],[17,"TEXTURE_SWIZZLE_A","","",N,N],[17,"TEXTURE_SWIZZLE_B","","",N,N],[17,"TEXTURE_SWIZZLE_G","","",N,N],[17,"TEXTURE_SWIZZLE_R","","",N,N],[17,"TEXTURE_SWIZZLE_RGBA","","",N,N],[17,"TEXTURE_WIDTH","","",N,N],[17,"TEXTURE_WRAP_R","","",N,N],[17,"TEXTURE_WRAP_S","","",N,N],[17,"TEXTURE_WRAP_T","","",N,N],[17,"TIMEOUT_EXPIRED","","",N,N],[17,"TIMEOUT_IGNORED","","",N,N],[17,"TIMESTAMP","","",N,N],[17,"TIMESTAMP_EXT","","",N,N],[17,"TIME_ELAPSED","","",N,N],[17,"TIME_ELAPSED_EXT","","",N,N],[17,"TRANSFORM_FEEDBACK","","",N,N],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",N,N],[17,"TRANSFORM_FEEDBACK_BINDING","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",N,N],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",N,N],[17,"TRANSFORM_FEEDBACK_PAUSED","","",N,N],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",N,N],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",N,N],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",N,N],[17,"TRIANGLES","","",N,N],[17,"TRIANGLES_ADJACENCY","","",N,N],[17,"TRIANGLE_FAN","","",N,N],[17,"TRIANGLE_STRIP","","",N,N],[17,"TRIANGLE_STRIP_ADJACENCY","","",N,N],[17,"TRUE","","",N,N],[17,"UNIFORM_ARRAY_STRIDE","","",N,N],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",N,N],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",N,N],[17,"UNIFORM_BLOCK_BINDING","","",N,N],[17,"UNIFORM_BLOCK_DATA_SIZE","","",N,N],[17,"UNIFORM_BLOCK_INDEX","","",N,N],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",N,N],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",N,N],[17,"UNIFORM_BUFFER","","",N,N],[17,"UNIFORM_BUFFER_BINDING","","",N,N],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",N,N],[17,"UNIFORM_BUFFER_SIZE","","",N,N],[17,"UNIFORM_BUFFER_START","","",N,N],[17,"UNIFORM_IS_ROW_MAJOR","","",N,N],[17,"UNIFORM_MATRIX_STRIDE","","",N,N],[17,"UNIFORM_NAME_LENGTH","","",N,N],[17,"UNIFORM_OFFSET","","",N,N],[17,"UNIFORM_SIZE","","",N,N],[17,"UNIFORM_TYPE","","",N,N],[17,"UNPACK_ALIGNMENT","","",N,N],[17,"UNPACK_CLIENT_STORAGE_APPLE","","",N,N],[17,"UNPACK_IMAGE_HEIGHT","","",N,N],[17,"UNPACK_LSB_FIRST","","",N,N],[17,"UNPACK_ROW_LENGTH","","",N,N],[17,"UNPACK_SKIP_IMAGES","","",N,N],[17,"UNPACK_SKIP_PIXELS","","",N,N],[17,"UNPACK_SKIP_ROWS","","",N,N],[17,"UNPACK_SWAP_BYTES","","",N,N],[17,"UNSIGNALED","","",N,N],[17,"UNSIGNED_BYTE","","",N,N],[17,"UNSIGNED_BYTE_2_3_3_REV","","",N,N],[17,"UNSIGNED_BYTE_3_3_2","","",N,N],[17,"UNSIGNED_INT","","",N,N],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",N,N],[17,"UNSIGNED_INT_10_10_10_2","","",N,N],[17,"UNSIGNED_INT_24_8","","",N,N],[17,"UNSIGNED_INT_2_10_10_10_REV","","",N,N],[17,"UNSIGNED_INT_5_9_9_9_REV","","",N,N],[17,"UNSIGNED_INT_8_8_8_8","","",N,N],[17,"UNSIGNED_INT_8_8_8_8_REV","","",N,N],[17,"UNSIGNED_INT_SAMPLER_1D","","",N,N],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",N,N],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",N,N],[17,"UNSIGNED_INT_SAMPLER_3D","","",N,N],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",N,N],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",N,N],[17,"UNSIGNED_INT_VEC2","","",N,N],[17,"UNSIGNED_INT_VEC3","","",N,N],[17,"UNSIGNED_INT_VEC4","","",N,N],[17,"UNSIGNED_NORMALIZED","","",N,N],[17,"UNSIGNED_SHORT","","",N,N],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",N,N],[17,"UNSIGNED_SHORT_4_4_4_4","","",N,N],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",N,N],[17,"UNSIGNED_SHORT_5_5_5_1","","",N,N],[17,"UNSIGNED_SHORT_5_6_5","","",N,N],[17,"UNSIGNED_SHORT_5_6_5_REV","","",N,N],[17,"UPPER_LEFT","","",N,N],[17,"VALIDATE_STATUS","","",N,N],[17,"VENDOR","","",N,N],[17,"VERSION","","",N,N],[17,"VERTEX_ARRAY","","",N,N],[17,"VERTEX_ARRAY_BINDING","","",N,N],[17,"VERTEX_ARRAY_KHR","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",N,N],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",N,N],[17,"VERTEX_PROGRAM_POINT_SIZE","","",N,N],[17,"VERTEX_SHADER","","",N,N],[17,"VIEWPORT","","",N,N],[17,"WAIT_FAILED","","",N,N],[17,"WRITE_ONLY","","",N,N],[17,"XOR","","",N,N],[17,"ZERO","","",N,N],[8,"Gl","","",N,N],[10,"get_type","","",4,[[["self"]],["gltype"]]],[10,"buffer_data_untyped","","",4,N],[10,"buffer_sub_data_untyped","","",4,N],[10,"tex_buffer","","",4,[[["self"],["glenum"],["glenum"],["gluint"]]]],[10,"shader_source","","",4,N],[10,"read_buffer","","",4,[[["self"],["glenum"]]]],[10,"read_pixels_into_buffer","","",4,N],[10,"read_pixels","","",4,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"]],["vec",["u8"]]]],[10,"sample_coverage","","",4,[[["self"],["glclampf"],["bool"]]]],[10,"polygon_offset","","",4,[[["self"],["glfloat"],["glfloat"]]]],[10,"pixel_store_i","","",4,[[["self"],["glenum"],["glint"]]]],[10,"gen_buffers","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"gen_renderbuffers","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"gen_framebuffers","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"gen_textures","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"gen_vertex_arrays","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"gen_queries","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"begin_query","","",4,[[["self"],["glenum"],["gluint"]]]],[10,"end_query","","",4,[[["self"],["glenum"]]]],[10,"query_counter","","",4,[[["self"],["gluint"],["glenum"]]]],[10,"get_query_object_iv","","",4,[[["self"],["gluint"],["glenum"]],["i32"]]],[10,"get_query_object_uiv","","",4,[[["self"],["gluint"],["glenum"]],["u32"]]],[10,"get_query_object_i64v","","",4,[[["self"],["gluint"],["glenum"]],["i64"]]],[10,"get_query_object_ui64v","","",4,[[["self"],["gluint"],["glenum"]],["u64"]]],[10,"delete_queries","","",4,N],[10,"delete_vertex_arrays","","",4,N],[10,"delete_buffers","","",4,N],[10,"delete_renderbuffers","","",4,N],[10,"delete_framebuffers","","",4,N],[10,"delete_textures","","",4,N],[10,"framebuffer_renderbuffer","","",4,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"]]]],[10,"renderbuffer_storage","","",4,[[["self"],["glenum"],["glenum"],["glsizei"],["glsizei"]]]],[10,"depth_func","","",4,[[["self"],["glenum"]]]],[10,"active_texture","","",4,[[["self"],["glenum"]]]],[10,"attach_shader","","",4,[[["self"],["gluint"],["gluint"]]]],[10,"bind_attrib_location","","",4,[[["self"],["gluint"],["gluint"],["str"]]]],[10,"get_uniform_iv","","",4,[[["self"],["gluint"],["glint"]],["vec",["glint"]]]],[10,"get_uniform_fv","","",4,[[["self"],["gluint"],["glint"]],["vec",["glfloat"]]]],[10,"get_uniform_block_index","","",4,[[["self"],["gluint"],["str"]],["gluint"]]],[10,"get_uniform_indices","","",4,N],[10,"bind_buffer_base","","",4,[[["self"],["glenum"],["gluint"],["gluint"]]]],[10,"bind_buffer_range","","",4,[[["self"],["glenum"],["gluint"],["gluint"],["glintptr"],["glsizeiptr"]]]],[10,"uniform_block_binding","","",4,[[["self"],["gluint"],["gluint"],["gluint"]]]],[10,"bind_buffer","","",4,[[["self"],["glenum"],["gluint"]]]],[10,"bind_vertex_array","","",4,[[["self"],["gluint"]]]],[10,"bind_renderbuffer","","",4,[[["self"],["glenum"],["gluint"]]]],[10,"bind_framebuffer","","",4,[[["self"],["glenum"],["gluint"]]]],[10,"bind_texture","","",4,[[["self"],["glenum"],["gluint"]]]],[10,"draw_buffers","","",4,N],[10,"tex_image_2d","","",4,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[10,"compressed_tex_image_2d","","",4,N],[10,"compressed_tex_sub_image_2d","","",4,N],[10,"tex_image_3d","","",4,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[10,"copy_tex_image_2d","","",4,[[["self"],["glenum"],["glint"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"]]]],[10,"copy_tex_sub_image_2d","","",4,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[10,"copy_tex_sub_image_3d","","",4,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[10,"tex_sub_image_2d","","",4,N],[10,"tex_sub_image_2d_pbo","","",4,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[10,"tex_sub_image_3d","","",4,N],[10,"tex_sub_image_3d_pbo","","",4,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[10,"get_tex_image_into_buffer","","",4,N],[10,"get_integer_v","","",4,N],[10,"get_integer_64v","","",4,N],[10,"get_integer_iv","","",4,N],[10,"get_integer_64iv","","",4,N],[10,"get_boolean_v","","",4,N],[10,"get_float_v","","",4,N],[10,"get_framebuffer_attachment_parameter_iv","","",4,[[["self"],["glenum"],["glenum"],["glenum"]],["glint"]]],[10,"get_renderbuffer_parameter_iv","","",4,[[["self"],["glenum"],["glenum"]],["glint"]]],[10,"get_tex_parameter_iv","","",4,[[["self"],["glenum"],["glenum"]],["glint"]]],[10,"get_tex_parameter_fv","","",4,[[["self"],["glenum"],["glenum"]],["glfloat"]]],[10,"tex_parameter_i","","",4,[[["self"],["glenum"],["glenum"],["glint"]]]],[10,"tex_parameter_f","","",4,[[["self"],["glenum"],["glenum"],["glfloat"]]]],[10,"framebuffer_texture_2d","","",4,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"],["glint"]]]],[10,"framebuffer_texture_layer","","",4,[[["self"],["glenum"],["glenum"],["gluint"],["glint"],["glint"]]]],[10,"blit_framebuffer","","",4,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glbitfield"],["glenum"]]]],[10,"vertex_attrib_4f","","",4,[[["self"],["gluint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[10,"vertex_attrib_pointer_f32","","",4,[[["self"],["gluint"],["glint"],["bool"],["glsizei"],["gluint"]]]],[10,"vertex_attrib_pointer","","",4,[[["self"],["gluint"],["glint"],["glenum"],["bool"],["glsizei"],["gluint"]]]],[10,"vertex_attrib_i_pointer","","",4,[[["self"],["gluint"],["glint"],["glenum"],["glsizei"],["gluint"]]]],[10,"vertex_attrib_divisor","","",4,[[["self"],["gluint"],["gluint"]]]],[10,"viewport","","",4,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[10,"scissor","","",4,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[10,"line_width","","",4,[[["self"],["glfloat"]]]],[10,"use_program","","",4,[[["self"],["gluint"]]]],[10,"validate_program","","",4,[[["self"],["gluint"]]]],[10,"draw_arrays","","",4,[[["self"],["glenum"],["glint"],["glsizei"]]]],[10,"draw_arrays_instanced","","",4,[[["self"],["glenum"],["glint"],["glsizei"],["glsizei"]]]],[10,"draw_elements","","",4,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"]]]],[10,"draw_elements_instanced","","",4,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"],["glsizei"]]]],[10,"blend_color","","",4,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[10,"blend_func","","",4,[[["self"],["glenum"],["glenum"]]]],[10,"blend_func_separate","","",4,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[10,"blend_equation","","",4,[[["self"],["glenum"]]]],[10,"blend_equation_separate","","",4,[[["self"],["glenum"],["glenum"]]]],[10,"color_mask","","",4,[[["self"],["bool"],["bool"],["bool"],["bool"]]]],[10,"cull_face","","",4,[[["self"],["glenum"]]]],[10,"front_face","","",4,[[["self"],["glenum"]]]],[10,"enable","","",4,[[["self"],["glenum"]]]],[10,"disable","","",4,[[["self"],["glenum"]]]],[10,"hint","","",4,[[["self"],["glenum"],["glenum"]]]],[10,"is_enabled","","",4,[[["self"],["glenum"]],["glboolean"]]],[10,"is_shader","","",4,[[["self"],["gluint"]],["glboolean"]]],[10,"is_texture","","",4,[[["self"],["glenum"]],["glboolean"]]],[10,"is_framebuffer","","",4,[[["self"],["glenum"]],["glboolean"]]],[10,"is_renderbuffer","","",4,[[["self"],["glenum"]],["glboolean"]]],[10,"check_frame_buffer_status","","",4,[[["self"],["glenum"]],["glenum"]]],[10,"enable_vertex_attrib_array","","",4,[[["self"],["gluint"]]]],[10,"disable_vertex_attrib_array","","",4,[[["self"],["gluint"]]]],[10,"uniform_1f","","",4,[[["self"],["glint"],["glfloat"]]]],[10,"uniform_1fv","","",4,N],[10,"uniform_1i","","",4,[[["self"],["glint"],["glint"]]]],[10,"uniform_1iv","","",4,N],[10,"uniform_1ui","","",4,[[["self"],["glint"],["gluint"]]]],[10,"uniform_2f","","",4,[[["self"],["glint"],["glfloat"],["glfloat"]]]],[10,"uniform_2fv","","",4,N],[10,"uniform_2i","","",4,[[["self"],["glint"],["glint"],["glint"]]]],[10,"uniform_2iv","","",4,N],[10,"uniform_2ui","","",4,[[["self"],["glint"],["gluint"],["gluint"]]]],[10,"uniform_3f","","",4,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"]]]],[10,"uniform_3fv","","",4,N],[10,"uniform_3i","","",4,[[["self"],["glint"],["glint"],["glint"],["glint"]]]],[10,"uniform_3iv","","",4,N],[10,"uniform_3ui","","",4,[[["self"],["glint"],["gluint"],["gluint"],["gluint"]]]],[10,"uniform_4f","","",4,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[10,"uniform_4i","","",4,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"]]]],[10,"uniform_4iv","","",4,N],[10,"uniform_4ui","","",4,[[["self"],["glint"],["gluint"],["gluint"],["gluint"],["gluint"]]]],[10,"uniform_4fv","","",4,N],[10,"uniform_matrix_2fv","","",4,N],[10,"uniform_matrix_3fv","","",4,N],[10,"uniform_matrix_4fv","","",4,N],[10,"depth_mask","","",4,[[["self"],["bool"]]]],[10,"depth_range","","",4,[[["self"],["f64"],["f64"]]]],[10,"get_active_attrib","","",4,N],[10,"get_active_uniform","","",4,N],[10,"get_active_uniforms_iv","","",4,[[["self"],["gluint"],["vec",["gluint"]],["glenum"]],["vec",["glint"]]]],[10,"get_active_uniform_block_i","","",4,[[["self"],["gluint"],["gluint"],["glenum"]],["glint"]]],[10,"get_active_uniform_block_iv","","",4,[[["self"],["gluint"],["gluint"],["glenum"]],["vec",["glint"]]]],[10,"get_active_uniform_block_name","","",4,[[["self"],["gluint"],["gluint"]],["string"]]],[10,"get_attrib_location","","",4,[[["self"],["gluint"],["str"]],["c_int"]]],[10,"get_frag_data_location","","",4,[[["self"],["gluint"],["str"]],["c_int"]]],[10,"get_uniform_location","","",4,[[["self"],["gluint"],["str"]],["c_int"]]],[10,"get_program_info_log","","",4,[[["self"],["gluint"]],["string"]]],[10,"get_program_iv","","",4,N],[10,"get_program_binary","","",4,N],[10,"program_binary","","",4,N],[10,"program_parameter_i","","",4,[[["self"],["gluint"],["glenum"],["glint"]]]],[10,"get_vertex_attrib_iv","","",4,N],[10,"get_vertex_attrib_fv","","",4,N],[10,"get_vertex_attrib_pointer_v","","",4,[[["self"],["gluint"],["glenum"]],["glsizeiptr"]]],[10,"get_buffer_parameter_iv","","",4,[[["self"],["gluint"],["glenum"]],["glint"]]],[10,"get_shader_info_log","","",4,[[["self"],["gluint"]],["string"]]],[10,"get_string","","",4,[[["self"],["glenum"]],["string"]]],[10,"get_string_i","","",4,[[["self"],["glenum"],["gluint"]],["string"]]],[10,"get_shader_iv","","",4,N],[10,"get_shader_precision_format","","",4,N],[10,"compile_shader","","",4,[[["self"],["gluint"]]]],[10,"create_program","","",4,[[["self"]],["gluint"]]],[10,"delete_program","","",4,[[["self"],["gluint"]]]],[10,"create_shader","","",4,[[["self"],["glenum"]],["gluint"]]],[10,"delete_shader","","",4,[[["self"],["gluint"]]]],[10,"detach_shader","","",4,[[["self"],["gluint"],["gluint"]]]],[10,"link_program","","",4,[[["self"],["gluint"]]]],[10,"clear_color","","",4,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[10,"clear","","",4,[[["self"],["glbitfield"]]]],[10,"clear_depth","","",4,[[["self"],["f64"]]]],[10,"clear_stencil","","",4,[[["self"],["glint"]]]],[10,"flush","","",4,[[["self"]]]],[10,"finish","","",4,[[["self"]]]],[10,"get_error","","",4,[[["self"]],["glenum"]]],[10,"stencil_mask","","",4,[[["self"],["gluint"]]]],[10,"stencil_mask_separate","","",4,[[["self"],["glenum"],["gluint"]]]],[10,"stencil_func","","",4,[[["self"],["glenum"],["glint"],["gluint"]]]],[10,"stencil_func_separate","","",4,[[["self"],["glenum"],["glenum"],["glint"],["gluint"]]]],[10,"stencil_op","","",4,[[["self"],["glenum"],["glenum"],["glenum"]]]],[10,"stencil_op_separate","","",4,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[10,"egl_image_target_texture2d_oes","","",4,[[["self"],["glenum"],["gleglimageoes"]]]],[10,"generate_mipmap","","",4,[[["self"],["glenum"]]]],[10,"insert_event_marker_ext","","",4,[[["self"],["str"]]]],[10,"push_group_marker_ext","","",4,[[["self"],["str"]]]],[10,"pop_group_marker_ext","","",4,[[["self"]]]],[10,"fence_sync","","",4,[[["self"],["glenum"],["glbitfield"]],["glsync"]]],[10,"client_wait_sync","","",4,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[10,"wait_sync","","",4,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[10,"delete_sync","","",4,[[["self"],["glsync"]]]],[10,"texture_range_apple","","",4,N],[10,"gen_fences_apple","","",4,[[["self"],["glsizei"]],["vec",["gluint"]]]],[10,"delete_fences_apple","","",4,N],[10,"set_fence_apple","","",4,[[["self"],["gluint"]]]],[10,"finish_fence_apple","","",4,[[["self"],["gluint"]]]],[10,"test_fence_apple","","",4,[[["self"],["gluint"]]]],[10,"bind_frag_data_location_indexed","","",4,[[["self"],["gluint"],["gluint"],["gluint"],["str"]]]],[10,"get_frag_data_index","","",4,[[["self"],["gluint"],["str"]],["glint"]]],[10,"get_debug_messages","","",4,[[["self"]],["vec",["debugmessage"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["gltype"]],["bool"]]],[11,"default","","",3,[[],["gltype"]]],[11,"get_type","","",5,[[["self"]],["gltype"]]],[11,"buffer_data_untyped","","",5,N],[11,"buffer_sub_data_untyped","","",5,N],[11,"tex_buffer","","",5,[[["self"],["glenum"],["glenum"],["gluint"]]]],[11,"shader_source","","",5,N],[11,"read_buffer","","",5,[[["self"],["glenum"]]]],[11,"read_pixels_into_buffer","","",5,N],[11,"read_pixels","","",5,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"]],["vec",["u8"]]]],[11,"sample_coverage","","",5,[[["self"],["glclampf"],["bool"]]]],[11,"polygon_offset","","",5,[[["self"],["glfloat"],["glfloat"]]]],[11,"pixel_store_i","","",5,[[["self"],["glenum"],["glint"]]]],[11,"gen_buffers","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_renderbuffers","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_framebuffers","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_textures","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_vertex_arrays","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_queries","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"begin_query","","",5,[[["self"],["glenum"],["gluint"]]]],[11,"end_query","","",5,[[["self"],["glenum"]]]],[11,"query_counter","","",5,[[["self"],["gluint"],["glenum"]]]],[11,"get_query_object_iv","","",5,[[["self"],["gluint"],["glenum"]],["i32"]]],[11,"get_query_object_uiv","","",5,[[["self"],["gluint"],["glenum"]],["u32"]]],[11,"get_query_object_i64v","","",5,[[["self"],["gluint"],["glenum"]],["i64"]]],[11,"get_query_object_ui64v","","",5,[[["self"],["gluint"],["glenum"]],["u64"]]],[11,"delete_queries","","",5,N],[11,"delete_vertex_arrays","","",5,N],[11,"delete_buffers","","",5,N],[11,"delete_renderbuffers","","",5,N],[11,"delete_framebuffers","","",5,N],[11,"delete_textures","","",5,N],[11,"framebuffer_renderbuffer","","",5,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"]]]],[11,"renderbuffer_storage","","",5,[[["self"],["glenum"],["glenum"],["glsizei"],["glsizei"]]]],[11,"depth_func","","",5,[[["self"],["glenum"]]]],[11,"active_texture","","",5,[[["self"],["glenum"]]]],[11,"attach_shader","","",5,[[["self"],["gluint"],["gluint"]]]],[11,"bind_attrib_location","","",5,[[["self"],["gluint"],["gluint"],["str"]]]],[11,"get_uniform_iv","","",5,[[["self"],["gluint"],["glint"]],["vec",["glint"]]]],[11,"get_uniform_fv","","",5,[[["self"],["gluint"],["glint"]],["vec",["glfloat"]]]],[11,"get_uniform_block_index","","",5,[[["self"],["gluint"],["str"]],["gluint"]]],[11,"get_uniform_indices","","",5,N],[11,"bind_buffer_base","","",5,[[["self"],["glenum"],["gluint"],["gluint"]]]],[11,"bind_buffer_range","","",5,[[["self"],["glenum"],["gluint"],["gluint"],["glintptr"],["glsizeiptr"]]]],[11,"uniform_block_binding","","",5,[[["self"],["gluint"],["gluint"],["gluint"]]]],[11,"bind_buffer","","",5,[[["self"],["glenum"],["gluint"]]]],[11,"bind_vertex_array","","",5,[[["self"],["gluint"]]]],[11,"bind_renderbuffer","","",5,[[["self"],["glenum"],["gluint"]]]],[11,"bind_framebuffer","","",5,[[["self"],["glenum"],["gluint"]]]],[11,"bind_texture","","",5,[[["self"],["glenum"],["gluint"]]]],[11,"draw_buffers","","",5,N],[11,"tex_image_2d","","",5,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[11,"compressed_tex_image_2d","","",5,N],[11,"compressed_tex_sub_image_2d","","",5,N],[11,"tex_image_3d","","",5,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[11,"copy_tex_image_2d","","",5,[[["self"],["glenum"],["glint"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"]]]],[11,"copy_tex_sub_image_2d","","",5,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"copy_tex_sub_image_3d","","",5,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"tex_sub_image_2d","","",5,N],[11,"tex_sub_image_2d_pbo","","",5,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[11,"tex_sub_image_3d","","",5,N],[11,"tex_sub_image_3d_pbo","","",5,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[11,"get_tex_image_into_buffer","","",5,N],[11,"get_integer_v","","",5,N],[11,"get_integer_64v","","",5,N],[11,"get_integer_iv","","",5,N],[11,"get_integer_64iv","","",5,N],[11,"get_boolean_v","","",5,N],[11,"get_float_v","","",5,N],[11,"get_framebuffer_attachment_parameter_iv","","",5,[[["self"],["glenum"],["glenum"],["glenum"]],["glint"]]],[11,"get_renderbuffer_parameter_iv","","",5,[[["self"],["glenum"],["glenum"]],["glint"]]],[11,"get_tex_parameter_iv","","",5,[[["self"],["glenum"],["glenum"]],["glint"]]],[11,"get_tex_parameter_fv","","",5,[[["self"],["glenum"],["glenum"]],["glfloat"]]],[11,"tex_parameter_i","","",5,[[["self"],["glenum"],["glenum"],["glint"]]]],[11,"tex_parameter_f","","",5,[[["self"],["glenum"],["glenum"],["glfloat"]]]],[11,"framebuffer_texture_2d","","",5,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"],["glint"]]]],[11,"framebuffer_texture_layer","","",5,[[["self"],["glenum"],["glenum"],["gluint"],["glint"],["glint"]]]],[11,"blit_framebuffer","","",5,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glbitfield"],["glenum"]]]],[11,"vertex_attrib_4f","","",5,[[["self"],["gluint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"vertex_attrib_pointer_f32","","",5,[[["self"],["gluint"],["glint"],["bool"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_pointer","","",5,[[["self"],["gluint"],["glint"],["glenum"],["bool"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_i_pointer","","",5,[[["self"],["gluint"],["glint"],["glenum"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_divisor","","",5,[[["self"],["gluint"],["gluint"]]]],[11,"viewport","","",5,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"scissor","","",5,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"line_width","","",5,[[["self"],["glfloat"]]]],[11,"use_program","","",5,[[["self"],["gluint"]]]],[11,"validate_program","","",5,[[["self"],["gluint"]]]],[11,"draw_arrays","","",5,[[["self"],["glenum"],["glint"],["glsizei"]]]],[11,"draw_arrays_instanced","","",5,[[["self"],["glenum"],["glint"],["glsizei"],["glsizei"]]]],[11,"draw_elements","","",5,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"]]]],[11,"draw_elements_instanced","","",5,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"],["glsizei"]]]],[11,"blend_color","","",5,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[11,"blend_func","","",5,[[["self"],["glenum"],["glenum"]]]],[11,"blend_func_separate","","",5,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[11,"blend_equation","","",5,[[["self"],["glenum"]]]],[11,"blend_equation_separate","","",5,[[["self"],["glenum"],["glenum"]]]],[11,"color_mask","","",5,[[["self"],["bool"],["bool"],["bool"],["bool"]]]],[11,"cull_face","","",5,[[["self"],["glenum"]]]],[11,"front_face","","",5,[[["self"],["glenum"]]]],[11,"enable","","",5,[[["self"],["glenum"]]]],[11,"disable","","",5,[[["self"],["glenum"]]]],[11,"hint","","",5,[[["self"],["glenum"],["glenum"]]]],[11,"is_enabled","","",5,[[["self"],["glenum"]],["glboolean"]]],[11,"is_shader","","",5,[[["self"],["gluint"]],["glboolean"]]],[11,"is_texture","","",5,[[["self"],["glenum"]],["glboolean"]]],[11,"is_framebuffer","","",5,[[["self"],["glenum"]],["glboolean"]]],[11,"is_renderbuffer","","",5,[[["self"],["glenum"]],["glboolean"]]],[11,"check_frame_buffer_status","","",5,[[["self"],["glenum"]],["glenum"]]],[11,"enable_vertex_attrib_array","","",5,[[["self"],["gluint"]]]],[11,"disable_vertex_attrib_array","","",5,[[["self"],["gluint"]]]],[11,"uniform_1f","","",5,[[["self"],["glint"],["glfloat"]]]],[11,"uniform_1fv","","",5,N],[11,"uniform_1i","","",5,[[["self"],["glint"],["glint"]]]],[11,"uniform_1iv","","",5,N],[11,"uniform_1ui","","",5,[[["self"],["glint"],["gluint"]]]],[11,"uniform_2f","","",5,[[["self"],["glint"],["glfloat"],["glfloat"]]]],[11,"uniform_2fv","","",5,N],[11,"uniform_2i","","",5,[[["self"],["glint"],["glint"],["glint"]]]],[11,"uniform_2iv","","",5,N],[11,"uniform_2ui","","",5,[[["self"],["glint"],["gluint"],["gluint"]]]],[11,"uniform_3f","","",5,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"uniform_3fv","","",5,N],[11,"uniform_3i","","",5,[[["self"],["glint"],["glint"],["glint"],["glint"]]]],[11,"uniform_3iv","","",5,N],[11,"uniform_3ui","","",5,[[["self"],["glint"],["gluint"],["gluint"],["gluint"]]]],[11,"uniform_4f","","",5,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"uniform_4i","","",5,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"]]]],[11,"uniform_4iv","","",5,N],[11,"uniform_4ui","","",5,[[["self"],["glint"],["gluint"],["gluint"],["gluint"],["gluint"]]]],[11,"uniform_4fv","","",5,N],[11,"uniform_matrix_2fv","","",5,N],[11,"uniform_matrix_3fv","","",5,N],[11,"uniform_matrix_4fv","","",5,N],[11,"depth_mask","","",5,[[["self"],["bool"]]]],[11,"depth_range","","",5,[[["self"],["f64"],["f64"]]]],[11,"get_active_attrib","","",5,N],[11,"get_active_uniform","","",5,N],[11,"get_active_uniforms_iv","","",5,[[["self"],["gluint"],["vec",["gluint"]],["glenum"]],["vec",["glint"]]]],[11,"get_active_uniform_block_i","","",5,[[["self"],["gluint"],["gluint"],["glenum"]],["glint"]]],[11,"get_active_uniform_block_iv","","",5,[[["self"],["gluint"],["gluint"],["glenum"]],["vec",["glint"]]]],[11,"get_active_uniform_block_name","","",5,[[["self"],["gluint"],["gluint"]],["string"]]],[11,"get_attrib_location","","",5,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_frag_data_location","","",5,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_uniform_location","","",5,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_program_info_log","","",5,[[["self"],["gluint"]],["string"]]],[11,"get_program_iv","","",5,N],[11,"get_program_binary","","",5,N],[11,"program_binary","","",5,N],[11,"program_parameter_i","","",5,[[["self"],["gluint"],["glenum"],["glint"]]]],[11,"get_vertex_attrib_iv","","",5,N],[11,"get_vertex_attrib_fv","","",5,N],[11,"get_vertex_attrib_pointer_v","","",5,[[["self"],["gluint"],["glenum"]],["glsizeiptr"]]],[11,"get_buffer_parameter_iv","","",5,[[["self"],["gluint"],["glenum"]],["glint"]]],[11,"get_shader_info_log","","",5,[[["self"],["gluint"]],["string"]]],[11,"get_string","","",5,[[["self"],["glenum"]],["string"]]],[11,"get_string_i","","",5,[[["self"],["glenum"],["gluint"]],["string"]]],[11,"get_shader_iv","","",5,N],[11,"get_shader_precision_format","","",5,N],[11,"compile_shader","","",5,[[["self"],["gluint"]]]],[11,"create_program","","",5,[[["self"]],["gluint"]]],[11,"delete_program","","",5,[[["self"],["gluint"]]]],[11,"create_shader","","",5,[[["self"],["glenum"]],["gluint"]]],[11,"delete_shader","","",5,[[["self"],["gluint"]]]],[11,"detach_shader","","",5,[[["self"],["gluint"],["gluint"]]]],[11,"link_program","","",5,[[["self"],["gluint"]]]],[11,"clear_color","","",5,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[11,"clear","","",5,[[["self"],["glbitfield"]]]],[11,"clear_depth","","",5,[[["self"],["f64"]]]],[11,"clear_stencil","","",5,[[["self"],["glint"]]]],[11,"flush","","",5,[[["self"]]]],[11,"finish","","",5,[[["self"]]]],[11,"get_error","","",5,[[["self"]],["glenum"]]],[11,"stencil_mask","","",5,[[["self"],["gluint"]]]],[11,"stencil_mask_separate","","",5,[[["self"],["glenum"],["gluint"]]]],[11,"stencil_func","","",5,[[["self"],["glenum"],["glint"],["gluint"]]]],[11,"stencil_func_separate","","",5,[[["self"],["glenum"],["glenum"],["glint"],["gluint"]]]],[11,"stencil_op","","",5,[[["self"],["glenum"],["glenum"],["glenum"]]]],[11,"stencil_op_separate","","",5,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[11,"egl_image_target_texture2d_oes","","",5,[[["self"],["glenum"],["gleglimageoes"]]]],[11,"generate_mipmap","","",5,[[["self"],["glenum"]]]],[11,"insert_event_marker_ext","","",5,[[["self"],["str"]]]],[11,"push_group_marker_ext","","",5,[[["self"],["str"]]]],[11,"pop_group_marker_ext","","",5,[[["self"]]]],[11,"fence_sync","","",5,[[["self"],["glenum"],["glbitfield"]],["glsync"]]],[11,"client_wait_sync","","",5,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[11,"wait_sync","","",5,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[11,"delete_sync","","",5,[[["self"],["glsync"]]]],[11,"texture_range_apple","","",5,N],[11,"gen_fences_apple","","",5,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"delete_fences_apple","","",5,N],[11,"set_fence_apple","","",5,[[["self"],["gluint"]]]],[11,"finish_fence_apple","","",5,[[["self"],["gluint"]]]],[11,"test_fence_apple","","",5,[[["self"],["gluint"]]]],[11,"bind_frag_data_location_indexed","","",5,[[["self"],["gluint"],["gluint"],["gluint"],["str"]]]],[11,"get_frag_data_index","","",5,[[["self"],["gluint"],["str"]],["glint"]]],[11,"get_debug_messages","","",5,[[["self"]],["vec",["debugmessage"]]]],[11,"wrap","","",5,[[["rc",["gl"]]],["rc",["gl"]]]],[11,"load_with","","",6,[[["f"]],["rc",["gl"]]]],[11,"get_type","","",6,[[["self"]],["gltype"]]],[11,"buffer_data_untyped","","",6,N],[11,"buffer_sub_data_untyped","","",6,N],[11,"shader_source","","",6,N],[11,"tex_buffer","","",6,[[["self"],["glenum"],["glenum"],["gluint"]]]],[11,"read_buffer","","",6,[[["self"],["glenum"]]]],[11,"read_pixels_into_buffer","","",6,N],[11,"read_pixels","","",6,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"]],["vec",["u8"]]]],[11,"sample_coverage","","",6,[[["self"],["glclampf"],["bool"]]]],[11,"polygon_offset","","",6,[[["self"],["glfloat"],["glfloat"]]]],[11,"pixel_store_i","","",6,[[["self"],["glenum"],["glint"]]]],[11,"gen_buffers","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_renderbuffers","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_framebuffers","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_textures","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_vertex_arrays","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_queries","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"begin_query","","",6,[[["self"],["glenum"],["gluint"]]]],[11,"end_query","","",6,[[["self"],["glenum"]]]],[11,"query_counter","","",6,[[["self"],["gluint"],["glenum"]]]],[11,"get_query_object_iv","","",6,[[["self"],["gluint"],["glenum"]],["i32"]]],[11,"get_query_object_uiv","","",6,[[["self"],["gluint"],["glenum"]],["u32"]]],[11,"get_query_object_i64v","","",6,[[["self"],["gluint"],["glenum"]],["i64"]]],[11,"get_query_object_ui64v","","",6,[[["self"],["gluint"],["glenum"]],["u64"]]],[11,"delete_queries","","",6,N],[11,"delete_vertex_arrays","","",6,N],[11,"delete_buffers","","",6,N],[11,"delete_renderbuffers","","",6,N],[11,"delete_framebuffers","","",6,N],[11,"delete_textures","","",6,N],[11,"framebuffer_renderbuffer","","",6,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"]]]],[11,"renderbuffer_storage","","",6,[[["self"],["glenum"],["glenum"],["glsizei"],["glsizei"]]]],[11,"depth_func","","",6,[[["self"],["glenum"]]]],[11,"active_texture","","",6,[[["self"],["glenum"]]]],[11,"attach_shader","","",6,[[["self"],["gluint"],["gluint"]]]],[11,"bind_attrib_location","","",6,[[["self"],["gluint"],["gluint"],["str"]]]],[11,"get_uniform_iv","","",6,[[["self"],["gluint"],["glint"]],["vec",["glint"]]]],[11,"get_uniform_fv","","",6,[[["self"],["gluint"],["glint"]],["vec",["glfloat"]]]],[11,"get_uniform_block_index","","",6,[[["self"],["gluint"],["str"]],["gluint"]]],[11,"get_uniform_indices","","",6,N],[11,"bind_buffer_base","","",6,[[["self"],["glenum"],["gluint"],["gluint"]]]],[11,"bind_buffer_range","","",6,[[["self"],["glenum"],["gluint"],["gluint"],["glintptr"],["glsizeiptr"]]]],[11,"uniform_block_binding","","",6,[[["self"],["gluint"],["gluint"],["gluint"]]]],[11,"bind_buffer","","",6,[[["self"],["glenum"],["gluint"]]]],[11,"bind_vertex_array","","",6,[[["self"],["gluint"]]]],[11,"bind_renderbuffer","","",6,[[["self"],["glenum"],["gluint"]]]],[11,"bind_framebuffer","","",6,[[["self"],["glenum"],["gluint"]]]],[11,"bind_texture","","",6,[[["self"],["glenum"],["gluint"]]]],[11,"draw_buffers","","",6,N],[11,"tex_image_2d","","",6,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[11,"compressed_tex_image_2d","","",6,N],[11,"compressed_tex_sub_image_2d","","",6,N],[11,"tex_image_3d","","",6,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[11,"copy_tex_image_2d","","",6,[[["self"],["glenum"],["glint"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"]]]],[11,"copy_tex_sub_image_2d","","",6,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"copy_tex_sub_image_3d","","",6,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"tex_sub_image_2d","","",6,N],[11,"tex_sub_image_2d_pbo","","",6,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[11,"tex_sub_image_3d","","",6,N],[11,"tex_sub_image_3d_pbo","","",6,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[11,"get_tex_image_into_buffer","","",6,N],[11,"get_integer_v","","",6,N],[11,"get_integer_64v","","",6,N],[11,"get_integer_iv","","",6,N],[11,"get_integer_64iv","","",6,N],[11,"get_boolean_v","","",6,N],[11,"get_float_v","","",6,N],[11,"get_framebuffer_attachment_parameter_iv","","",6,[[["self"],["glenum"],["glenum"],["glenum"]],["glint"]]],[11,"get_renderbuffer_parameter_iv","","",6,[[["self"],["glenum"],["glenum"]],["glint"]]],[11,"get_tex_parameter_iv","","",6,[[["self"],["glenum"],["glenum"]],["glint"]]],[11,"get_tex_parameter_fv","","",6,[[["self"],["glenum"],["glenum"]],["glfloat"]]],[11,"tex_parameter_i","","",6,[[["self"],["glenum"],["glenum"],["glint"]]]],[11,"tex_parameter_f","","",6,[[["self"],["glenum"],["glenum"],["glfloat"]]]],[11,"framebuffer_texture_2d","","",6,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"],["glint"]]]],[11,"framebuffer_texture_layer","","",6,[[["self"],["glenum"],["glenum"],["gluint"],["glint"],["glint"]]]],[11,"blit_framebuffer","","",6,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glbitfield"],["glenum"]]]],[11,"vertex_attrib_4f","","",6,[[["self"],["gluint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"vertex_attrib_pointer_f32","","",6,[[["self"],["gluint"],["glint"],["bool"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_pointer","","",6,[[["self"],["gluint"],["glint"],["glenum"],["bool"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_i_pointer","","",6,[[["self"],["gluint"],["glint"],["glenum"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_divisor","","",6,[[["self"],["gluint"],["gluint"]]]],[11,"viewport","","",6,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"scissor","","",6,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"line_width","","",6,[[["self"],["glfloat"]]]],[11,"use_program","","",6,[[["self"],["gluint"]]]],[11,"validate_program","","",6,[[["self"],["gluint"]]]],[11,"draw_arrays","","",6,[[["self"],["glenum"],["glint"],["glsizei"]]]],[11,"draw_arrays_instanced","","",6,[[["self"],["glenum"],["glint"],["glsizei"],["glsizei"]]]],[11,"draw_elements","","",6,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"]]]],[11,"draw_elements_instanced","","",6,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"],["glsizei"]]]],[11,"blend_color","","",6,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[11,"blend_func","","",6,[[["self"],["glenum"],["glenum"]]]],[11,"blend_func_separate","","",6,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[11,"blend_equation","","",6,[[["self"],["glenum"]]]],[11,"blend_equation_separate","","",6,[[["self"],["glenum"],["glenum"]]]],[11,"color_mask","","",6,[[["self"],["bool"],["bool"],["bool"],["bool"]]]],[11,"cull_face","","",6,[[["self"],["glenum"]]]],[11,"front_face","","",6,[[["self"],["glenum"]]]],[11,"enable","","",6,[[["self"],["glenum"]]]],[11,"disable","","",6,[[["self"],["glenum"]]]],[11,"hint","","",6,[[["self"],["glenum"],["glenum"]]]],[11,"is_enabled","","",6,[[["self"],["glenum"]],["glboolean"]]],[11,"is_shader","","",6,[[["self"],["gluint"]],["glboolean"]]],[11,"is_texture","","",6,[[["self"],["glenum"]],["glboolean"]]],[11,"is_framebuffer","","",6,[[["self"],["glenum"]],["glboolean"]]],[11,"is_renderbuffer","","",6,[[["self"],["glenum"]],["glboolean"]]],[11,"check_frame_buffer_status","","",6,[[["self"],["glenum"]],["glenum"]]],[11,"enable_vertex_attrib_array","","",6,[[["self"],["gluint"]]]],[11,"disable_vertex_attrib_array","","",6,[[["self"],["gluint"]]]],[11,"uniform_1f","","",6,[[["self"],["glint"],["glfloat"]]]],[11,"uniform_1fv","","",6,N],[11,"uniform_1i","","",6,[[["self"],["glint"],["glint"]]]],[11,"uniform_1iv","","",6,N],[11,"uniform_1ui","","",6,[[["self"],["glint"],["gluint"]]]],[11,"uniform_2f","","",6,[[["self"],["glint"],["glfloat"],["glfloat"]]]],[11,"uniform_2fv","","",6,N],[11,"uniform_2i","","",6,[[["self"],["glint"],["glint"],["glint"]]]],[11,"uniform_2iv","","",6,N],[11,"uniform_2ui","","",6,[[["self"],["glint"],["gluint"],["gluint"]]]],[11,"uniform_3f","","",6,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"uniform_3fv","","",6,N],[11,"uniform_3i","","",6,[[["self"],["glint"],["glint"],["glint"],["glint"]]]],[11,"uniform_3iv","","",6,N],[11,"uniform_3ui","","",6,[[["self"],["glint"],["gluint"],["gluint"],["gluint"]]]],[11,"uniform_4f","","",6,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"uniform_4i","","",6,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"]]]],[11,"uniform_4iv","","",6,N],[11,"uniform_4ui","","",6,[[["self"],["glint"],["gluint"],["gluint"],["gluint"],["gluint"]]]],[11,"uniform_4fv","","",6,N],[11,"uniform_matrix_2fv","","",6,N],[11,"uniform_matrix_3fv","","",6,N],[11,"uniform_matrix_4fv","","",6,N],[11,"depth_mask","","",6,[[["self"],["bool"]]]],[11,"depth_range","","",6,[[["self"],["f64"],["f64"]]]],[11,"get_active_attrib","","",6,N],[11,"get_active_uniform","","",6,N],[11,"get_active_uniforms_iv","","",6,[[["self"],["gluint"],["vec",["gluint"]],["glenum"]],["vec",["glint"]]]],[11,"get_active_uniform_block_i","","",6,[[["self"],["gluint"],["gluint"],["glenum"]],["glint"]]],[11,"get_active_uniform_block_iv","","",6,[[["self"],["gluint"],["gluint"],["glenum"]],["vec",["glint"]]]],[11,"get_active_uniform_block_name","","",6,[[["self"],["gluint"],["gluint"]],["string"]]],[11,"get_attrib_location","","",6,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_frag_data_location","","",6,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_uniform_location","","",6,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_program_info_log","","",6,[[["self"],["gluint"]],["string"]]],[11,"get_program_iv","","",6,N],[11,"get_program_binary","","",6,N],[11,"program_binary","","",6,N],[11,"program_parameter_i","","",6,[[["self"],["gluint"],["glenum"],["glint"]]]],[11,"get_vertex_attrib_iv","","",6,N],[11,"get_vertex_attrib_fv","","",6,N],[11,"get_vertex_attrib_pointer_v","","",6,[[["self"],["gluint"],["glenum"]],["glsizeiptr"]]],[11,"get_buffer_parameter_iv","","",6,[[["self"],["gluint"],["glenum"]],["glint"]]],[11,"get_shader_info_log","","",6,[[["self"],["gluint"]],["string"]]],[11,"get_string","","",6,[[["self"],["glenum"]],["string"]]],[11,"get_string_i","","",6,[[["self"],["glenum"],["gluint"]],["string"]]],[11,"get_shader_iv","","",6,N],[11,"get_shader_precision_format","","",6,N],[11,"compile_shader","","",6,[[["self"],["gluint"]]]],[11,"create_program","","",6,[[["self"]],["gluint"]]],[11,"delete_program","","",6,[[["self"],["gluint"]]]],[11,"create_shader","","",6,[[["self"],["glenum"]],["gluint"]]],[11,"delete_shader","","",6,[[["self"],["gluint"]]]],[11,"detach_shader","","",6,[[["self"],["gluint"],["gluint"]]]],[11,"link_program","","",6,[[["self"],["gluint"]]]],[11,"clear_color","","",6,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[11,"clear","","",6,[[["self"],["glbitfield"]]]],[11,"clear_depth","","",6,[[["self"],["f64"]]]],[11,"clear_stencil","","",6,[[["self"],["glint"]]]],[11,"flush","","",6,[[["self"]]]],[11,"finish","","",6,[[["self"]]]],[11,"get_error","","",6,[[["self"]],["glenum"]]],[11,"stencil_mask","","",6,[[["self"],["gluint"]]]],[11,"stencil_mask_separate","","",6,[[["self"],["glenum"],["gluint"]]]],[11,"stencil_func","","",6,[[["self"],["glenum"],["glint"],["gluint"]]]],[11,"stencil_func_separate","","",6,[[["self"],["glenum"],["glenum"],["glint"],["gluint"]]]],[11,"stencil_op","","",6,[[["self"],["glenum"],["glenum"],["glenum"]]]],[11,"stencil_op_separate","","",6,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[11,"egl_image_target_texture2d_oes","","",6,[[["self"],["glenum"],["gleglimageoes"]]]],[11,"generate_mipmap","","",6,[[["self"],["glenum"]]]],[11,"insert_event_marker_ext","","",6,[[["self"],["str"]]]],[11,"push_group_marker_ext","","",6,[[["self"],["str"]]]],[11,"pop_group_marker_ext","","",6,[[["self"]]]],[11,"fence_sync","","",6,[[["self"],["glenum"],["glbitfield"]],["glsync"]]],[11,"client_wait_sync","","",6,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[11,"wait_sync","","",6,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[11,"texture_range_apple","","",6,N],[11,"delete_sync","","",6,[[["self"],["glsync"]]]],[11,"gen_fences_apple","","",6,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"delete_fences_apple","","",6,N],[11,"set_fence_apple","","",6,[[["self"],["gluint"]]]],[11,"finish_fence_apple","","",6,[[["self"],["gluint"]]]],[11,"test_fence_apple","","",6,[[["self"],["gluint"]]]],[11,"bind_frag_data_location_indexed","","",6,[[["self"],["gluint"],["gluint"],["gluint"],["str"]]]],[11,"get_frag_data_index","","",6,[[["self"],["gluint"],["str"]],["glint"]]],[11,"get_debug_messages","","",6,[[["self"]],["vec",["debugmessage"]]]],[11,"load_with","","",7,[[["f"]],["rc",["gl"]]]],[11,"get_type","","",7,[[["self"]],["gltype"]]],[11,"buffer_data_untyped","","",7,N],[11,"tex_buffer","","",7,[[["self"],["glenum"],["glenum"],["gluint"]]]],[11,"buffer_sub_data_untyped","","",7,N],[11,"shader_source","","",7,N],[11,"read_buffer","","",7,[[["self"],["glenum"]]]],[11,"read_pixels_into_buffer","","",7,N],[11,"read_pixels","","",7,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"]],["vec",["u8"]]]],[11,"sample_coverage","","",7,[[["self"],["glclampf"],["bool"]]]],[11,"polygon_offset","","",7,[[["self"],["glfloat"],["glfloat"]]]],[11,"pixel_store_i","","",7,[[["self"],["glenum"],["glint"]]]],[11,"gen_buffers","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_renderbuffers","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_framebuffers","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_textures","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_vertex_arrays","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"gen_queries","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"begin_query","","",7,[[["self"],["glenum"],["gluint"]]]],[11,"end_query","","",7,[[["self"],["glenum"]]]],[11,"query_counter","","",7,[[["self"],["gluint"],["glenum"]]]],[11,"get_query_object_iv","","",7,[[["self"],["gluint"],["glenum"]],["i32"]]],[11,"get_query_object_uiv","","",7,[[["self"],["gluint"],["glenum"]],["u32"]]],[11,"get_query_object_i64v","","",7,[[["self"],["gluint"],["glenum"]],["i64"]]],[11,"get_query_object_ui64v","","",7,[[["self"],["gluint"],["glenum"]],["u64"]]],[11,"delete_queries","","",7,N],[11,"delete_vertex_arrays","","",7,N],[11,"delete_buffers","","",7,N],[11,"delete_renderbuffers","","",7,N],[11,"delete_framebuffers","","",7,N],[11,"delete_textures","","",7,N],[11,"framebuffer_renderbuffer","","",7,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"]]]],[11,"renderbuffer_storage","","",7,[[["self"],["glenum"],["glenum"],["glsizei"],["glsizei"]]]],[11,"depth_func","","",7,[[["self"],["glenum"]]]],[11,"active_texture","","",7,[[["self"],["glenum"]]]],[11,"attach_shader","","",7,[[["self"],["gluint"],["gluint"]]]],[11,"bind_attrib_location","","",7,[[["self"],["gluint"],["gluint"],["str"]]]],[11,"get_uniform_iv","","",7,[[["self"],["gluint"],["glint"]],["vec",["glint"]]]],[11,"get_uniform_fv","","",7,[[["self"],["gluint"],["glint"]],["vec",["glfloat"]]]],[11,"get_uniform_block_index","","",7,[[["self"],["gluint"],["str"]],["gluint"]]],[11,"get_uniform_indices","","",7,N],[11,"bind_buffer_base","","",7,[[["self"],["glenum"],["gluint"],["gluint"]]]],[11,"bind_buffer_range","","",7,[[["self"],["glenum"],["gluint"],["gluint"],["glintptr"],["glsizeiptr"]]]],[11,"uniform_block_binding","","",7,[[["self"],["gluint"],["gluint"],["gluint"]]]],[11,"bind_buffer","","",7,[[["self"],["glenum"],["gluint"]]]],[11,"bind_vertex_array","","",7,[[["self"],["gluint"]]]],[11,"bind_renderbuffer","","",7,[[["self"],["glenum"],["gluint"]]]],[11,"bind_framebuffer","","",7,[[["self"],["glenum"],["gluint"]]]],[11,"bind_texture","","",7,[[["self"],["glenum"],["gluint"]]]],[11,"draw_buffers","","",7,N],[11,"tex_image_2d","","",7,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[11,"compressed_tex_image_2d","","",7,N],[11,"compressed_tex_sub_image_2d","","",7,N],[11,"tex_image_3d","","",7,[[["self"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glint"],["glenum"],["glenum"],["option"]]]],[11,"copy_tex_image_2d","","",7,[[["self"],["glenum"],["glint"],["glenum"],["glint"],["glint"],["glsizei"],["glsizei"],["glint"]]]],[11,"copy_tex_sub_image_2d","","",7,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"copy_tex_sub_image_3d","","",7,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"tex_sub_image_2d","","",7,N],[11,"tex_sub_image_2d_pbo","","",7,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[11,"tex_sub_image_3d","","",7,N],[11,"tex_sub_image_3d_pbo","","",7,[[["self"],["glenum"],["glint"],["glint"],["glint"],["glint"],["glsizei"],["glsizei"],["glsizei"],["glenum"],["glenum"],["usize"]]]],[11,"get_tex_image_into_buffer","","",7,N],[11,"get_integer_v","","",7,N],[11,"get_integer_64v","","",7,N],[11,"get_integer_iv","","",7,N],[11,"get_integer_64iv","","",7,N],[11,"get_boolean_v","","",7,N],[11,"get_float_v","","",7,N],[11,"get_renderbuffer_parameter_iv","","",7,[[["self"],["glenum"],["glenum"]],["glint"]]],[11,"get_framebuffer_attachment_parameter_iv","","",7,[[["self"],["glenum"],["glenum"],["glenum"]],["glint"]]],[11,"get_tex_parameter_iv","","",7,[[["self"],["glenum"],["glenum"]],["glint"]]],[11,"get_tex_parameter_fv","","",7,[[["self"],["glenum"],["glenum"]],["glfloat"]]],[11,"tex_parameter_i","","",7,[[["self"],["glenum"],["glenum"],["glint"]]]],[11,"tex_parameter_f","","",7,[[["self"],["glenum"],["glenum"],["glfloat"]]]],[11,"framebuffer_texture_2d","","",7,[[["self"],["glenum"],["glenum"],["glenum"],["gluint"],["glint"]]]],[11,"framebuffer_texture_layer","","",7,[[["self"],["glenum"],["glenum"],["gluint"],["glint"],["glint"]]]],[11,"blit_framebuffer","","",7,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glint"],["glbitfield"],["glenum"]]]],[11,"vertex_attrib_4f","","",7,[[["self"],["gluint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"vertex_attrib_pointer_f32","","",7,[[["self"],["gluint"],["glint"],["bool"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_pointer","","",7,[[["self"],["gluint"],["glint"],["glenum"],["bool"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_i_pointer","","",7,[[["self"],["gluint"],["glint"],["glenum"],["glsizei"],["gluint"]]]],[11,"vertex_attrib_divisor","","",7,[[["self"],["gluint"],["gluint"]]]],[11,"viewport","","",7,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"scissor","","",7,[[["self"],["glint"],["glint"],["glsizei"],["glsizei"]]]],[11,"line_width","","",7,[[["self"],["glfloat"]]]],[11,"use_program","","",7,[[["self"],["gluint"]]]],[11,"validate_program","","",7,[[["self"],["gluint"]]]],[11,"draw_arrays","","",7,[[["self"],["glenum"],["glint"],["glsizei"]]]],[11,"draw_arrays_instanced","","",7,[[["self"],["glenum"],["glint"],["glsizei"],["glsizei"]]]],[11,"draw_elements","","",7,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"]]]],[11,"draw_elements_instanced","","",7,[[["self"],["glenum"],["glsizei"],["glenum"],["gluint"],["glsizei"]]]],[11,"blend_color","","",7,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[11,"blend_func","","",7,[[["self"],["glenum"],["glenum"]]]],[11,"blend_func_separate","","",7,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[11,"blend_equation","","",7,[[["self"],["glenum"]]]],[11,"blend_equation_separate","","",7,[[["self"],["glenum"],["glenum"]]]],[11,"color_mask","","",7,[[["self"],["bool"],["bool"],["bool"],["bool"]]]],[11,"cull_face","","",7,[[["self"],["glenum"]]]],[11,"front_face","","",7,[[["self"],["glenum"]]]],[11,"enable","","",7,[[["self"],["glenum"]]]],[11,"disable","","",7,[[["self"],["glenum"]]]],[11,"hint","","",7,[[["self"],["glenum"],["glenum"]]]],[11,"is_enabled","","",7,[[["self"],["glenum"]],["glboolean"]]],[11,"is_shader","","",7,[[["self"],["gluint"]],["glboolean"]]],[11,"is_texture","","",7,[[["self"],["glenum"]],["glboolean"]]],[11,"is_framebuffer","","",7,[[["self"],["glenum"]],["glboolean"]]],[11,"is_renderbuffer","","",7,[[["self"],["glenum"]],["glboolean"]]],[11,"check_frame_buffer_status","","",7,[[["self"],["glenum"]],["glenum"]]],[11,"enable_vertex_attrib_array","","",7,[[["self"],["gluint"]]]],[11,"disable_vertex_attrib_array","","",7,[[["self"],["gluint"]]]],[11,"uniform_1f","","",7,[[["self"],["glint"],["glfloat"]]]],[11,"uniform_1fv","","",7,N],[11,"uniform_1i","","",7,[[["self"],["glint"],["glint"]]]],[11,"uniform_1iv","","",7,N],[11,"uniform_1ui","","",7,[[["self"],["glint"],["gluint"]]]],[11,"uniform_2f","","",7,[[["self"],["glint"],["glfloat"],["glfloat"]]]],[11,"uniform_2fv","","",7,N],[11,"uniform_2i","","",7,[[["self"],["glint"],["glint"],["glint"]]]],[11,"uniform_2iv","","",7,N],[11,"uniform_2ui","","",7,[[["self"],["glint"],["gluint"],["gluint"]]]],[11,"uniform_3f","","",7,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"uniform_3fv","","",7,N],[11,"uniform_3i","","",7,[[["self"],["glint"],["glint"],["glint"],["glint"]]]],[11,"uniform_3iv","","",7,N],[11,"uniform_3ui","","",7,[[["self"],["glint"],["gluint"],["gluint"],["gluint"]]]],[11,"uniform_4f","","",7,[[["self"],["glint"],["glfloat"],["glfloat"],["glfloat"],["glfloat"]]]],[11,"uniform_4i","","",7,[[["self"],["glint"],["glint"],["glint"],["glint"],["glint"]]]],[11,"uniform_4iv","","",7,N],[11,"uniform_4ui","","",7,[[["self"],["glint"],["gluint"],["gluint"],["gluint"],["gluint"]]]],[11,"uniform_4fv","","",7,N],[11,"uniform_matrix_2fv","","",7,N],[11,"uniform_matrix_3fv","","",7,N],[11,"uniform_matrix_4fv","","",7,N],[11,"depth_mask","","",7,[[["self"],["bool"]]]],[11,"depth_range","","",7,[[["self"],["f64"],["f64"]]]],[11,"get_active_attrib","","",7,N],[11,"get_active_uniform","","",7,N],[11,"get_active_uniforms_iv","","",7,[[["self"],["gluint"],["vec",["gluint"]],["glenum"]],["vec",["glint"]]]],[11,"get_active_uniform_block_i","","",7,[[["self"],["gluint"],["gluint"],["glenum"]],["glint"]]],[11,"get_active_uniform_block_iv","","",7,[[["self"],["gluint"],["gluint"],["glenum"]],["vec",["glint"]]]],[11,"get_active_uniform_block_name","","",7,[[["self"],["gluint"],["gluint"]],["string"]]],[11,"get_attrib_location","","",7,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_frag_data_location","","",7,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_uniform_location","","",7,[[["self"],["gluint"],["str"]],["c_int"]]],[11,"get_program_info_log","","",7,[[["self"],["gluint"]],["string"]]],[11,"get_program_iv","","",7,N],[11,"get_program_binary","","",7,N],[11,"program_binary","","",7,N],[11,"program_parameter_i","","",7,[[["self"],["gluint"],["glenum"],["glint"]]]],[11,"get_vertex_attrib_iv","","",7,N],[11,"get_vertex_attrib_fv","","",7,N],[11,"get_vertex_attrib_pointer_v","","",7,[[["self"],["gluint"],["glenum"]],["glsizeiptr"]]],[11,"get_buffer_parameter_iv","","",7,[[["self"],["gluint"],["glenum"]],["glint"]]],[11,"get_shader_info_log","","",7,[[["self"],["gluint"]],["string"]]],[11,"get_string","","",7,[[["self"],["glenum"]],["string"]]],[11,"get_string_i","","",7,[[["self"],["glenum"],["gluint"]],["string"]]],[11,"get_shader_iv","","",7,N],[11,"get_shader_precision_format","","",7,N],[11,"compile_shader","","",7,[[["self"],["gluint"]]]],[11,"create_program","","",7,[[["self"]],["gluint"]]],[11,"delete_program","","",7,[[["self"],["gluint"]]]],[11,"create_shader","","",7,[[["self"],["glenum"]],["gluint"]]],[11,"delete_shader","","",7,[[["self"],["gluint"]]]],[11,"detach_shader","","",7,[[["self"],["gluint"],["gluint"]]]],[11,"link_program","","",7,[[["self"],["gluint"]]]],[11,"clear_color","","",7,[[["self"],["f32"],["f32"],["f32"],["f32"]]]],[11,"clear","","",7,[[["self"],["glbitfield"]]]],[11,"clear_depth","","",7,[[["self"],["f64"]]]],[11,"clear_stencil","","",7,[[["self"],["glint"]]]],[11,"flush","","",7,[[["self"]]]],[11,"finish","","",7,[[["self"]]]],[11,"get_error","","",7,[[["self"]],["glenum"]]],[11,"stencil_mask","","",7,[[["self"],["gluint"]]]],[11,"stencil_mask_separate","","",7,[[["self"],["glenum"],["gluint"]]]],[11,"stencil_func","","",7,[[["self"],["glenum"],["glint"],["gluint"]]]],[11,"stencil_func_separate","","",7,[[["self"],["glenum"],["glenum"],["glint"],["gluint"]]]],[11,"stencil_op","","",7,[[["self"],["glenum"],["glenum"],["glenum"]]]],[11,"stencil_op_separate","","",7,[[["self"],["glenum"],["glenum"],["glenum"],["glenum"]]]],[11,"egl_image_target_texture2d_oes","","",7,[[["self"],["glenum"],["gleglimageoes"]]]],[11,"generate_mipmap","","",7,[[["self"],["glenum"]]]],[11,"insert_event_marker_ext","","",7,[[["self"],["str"]]]],[11,"push_group_marker_ext","","",7,[[["self"],["str"]]]],[11,"pop_group_marker_ext","","",7,[[["self"]]]],[11,"fence_sync","","",7,[[["self"],["glenum"],["glbitfield"]],["glsync"]]],[11,"client_wait_sync","","",7,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[11,"wait_sync","","",7,[[["self"],["glsync"],["glbitfield"],["gluint64"]]]],[11,"delete_sync","","",7,[[["self"],["glsync"]]]],[11,"texture_range_apple","","",7,N],[11,"gen_fences_apple","","",7,[[["self"],["glsizei"]],["vec",["gluint"]]]],[11,"delete_fences_apple","","",7,N],[11,"set_fence_apple","","",7,[[["self"],["gluint"]]]],[11,"finish_fence_apple","","",7,[[["self"],["gluint"]]]],[11,"test_fence_apple","","",7,[[["self"],["gluint"]]]],[11,"bind_frag_data_location_indexed","","",7,[[["self"],["gluint"],["gluint"],["gluint"],["str"]]]],[11,"get_frag_data_index","","",7,[[["self"],["gluint"],["str"]],["glint"]]],[11,"get_debug_messages","","",7,[[["self"]],["vec",["debugmessage"]]]],[11,"clone","","",8,[[["self"]],["fnptr"]]],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",8,[[["self"]],["bool"]]],[11,"clone","","",0,[[["self"]],["gl"]]],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",0,[[["f"]],["gl"]]],[11,"ActiveTexture","","",0,N],[11,"AttachShader","","",0,N],[11,"BeginConditionalRender","","",0,N],[11,"BeginQuery","","",0,N],[11,"BeginTransformFeedback","","",0,N],[11,"BindAttribLocation","","",0,N],[11,"BindBuffer","","",0,N],[11,"BindBufferBase","","",0,N],[11,"BindBufferRange","","",0,N],[11,"BindFragDataLocation","","",0,N],[11,"BindFragDataLocationIndexed","","",0,N],[11,"BindFramebuffer","","",0,N],[11,"BindRenderbuffer","","",0,N],[11,"BindSampler","","",0,N],[11,"BindTexture","","",0,N],[11,"BindVertexArray","","",0,N],[11,"BlendColor","","",0,N],[11,"BlendEquation","","",0,N],[11,"BlendEquationSeparate","","",0,N],[11,"BlendFunc","","",0,N],[11,"BlendFuncSeparate","","",0,N],[11,"BlitFramebuffer","","",0,N],[11,"BufferData","","",0,N],[11,"BufferSubData","","",0,N],[11,"CheckFramebufferStatus","","",0,[[["self"],["c_uint"]],["c_uint"]]],[11,"ClampColor","","",0,N],[11,"Clear","","",0,N],[11,"ClearBufferfi","","",0,N],[11,"ClearBufferfv","","",0,N],[11,"ClearBufferiv","","",0,N],[11,"ClearBufferuiv","","",0,N],[11,"ClearColor","","",0,N],[11,"ClearDepth","","",0,N],[11,"ClearStencil","","",0,N],[11,"ClientWaitSync","","",0,N],[11,"ColorMask","","",0,N],[11,"ColorMaski","","",0,N],[11,"ColorP3ui","","",0,N],[11,"ColorP3uiv","","",0,N],[11,"ColorP4ui","","",0,N],[11,"ColorP4uiv","","",0,N],[11,"CompileShader","","",0,N],[11,"CompressedTexImage1D","","",0,N],[11,"CompressedTexImage2D","","",0,N],[11,"CompressedTexImage3D","","",0,N],[11,"CompressedTexSubImage1D","","",0,N],[11,"CompressedTexSubImage2D","","",0,N],[11,"CompressedTexSubImage3D","","",0,N],[11,"CopyBufferSubData","","",0,N],[11,"CopyTexImage1D","","",0,N],[11,"CopyTexImage2D","","",0,N],[11,"CopyTexSubImage1D","","",0,N],[11,"CopyTexSubImage2D","","",0,N],[11,"CopyTexSubImage3D","","",0,N],[11,"CreateProgram","","",0,[[["self"]],["c_uint"]]],[11,"CreateShader","","",0,[[["self"],["c_uint"]],["c_uint"]]],[11,"CullFace","","",0,N],[11,"DebugMessageCallback","","",0,N],[11,"DebugMessageCallbackKHR","","",0,N],[11,"DebugMessageControl","","",0,N],[11,"DebugMessageControlKHR","","",0,N],[11,"DebugMessageInsert","","",0,N],[11,"DebugMessageInsertKHR","","",0,N],[11,"DeleteBuffers","","",0,N],[11,"DeleteFencesAPPLE","","",0,N],[11,"DeleteFramebuffers","","",0,N],[11,"DeleteProgram","","",0,N],[11,"DeleteQueries","","",0,N],[11,"DeleteRenderbuffers","","",0,N],[11,"DeleteSamplers","","",0,N],[11,"DeleteShader","","",0,N],[11,"DeleteSync","","",0,N],[11,"DeleteTextures","","",0,N],[11,"DeleteVertexArrays","","",0,N],[11,"DepthFunc","","",0,N],[11,"DepthMask","","",0,N],[11,"DepthRange","","",0,N],[11,"DetachShader","","",0,N],[11,"Disable","","",0,N],[11,"DisableVertexAttribArray","","",0,N],[11,"Disablei","","",0,N],[11,"DrawArrays","","",0,N],[11,"DrawArraysInstanced","","",0,N],[11,"DrawBuffer","","",0,N],[11,"DrawBuffers","","",0,N],[11,"DrawElements","","",0,N],[11,"DrawElementsBaseVertex","","",0,N],[11,"DrawElementsInstanced","","",0,N],[11,"DrawElementsInstancedBaseVertex","","",0,N],[11,"DrawRangeElements","","",0,N],[11,"DrawRangeElementsBaseVertex","","",0,N],[11,"Enable","","",0,N],[11,"EnableVertexAttribArray","","",0,N],[11,"Enablei","","",0,N],[11,"EndConditionalRender","","",0,N],[11,"EndQuery","","",0,N],[11,"EndTransformFeedback","","",0,N],[11,"FenceSync","","",0,N],[11,"Finish","","",0,N],[11,"FinishFenceAPPLE","","",0,N],[11,"FinishObjectAPPLE","","",0,N],[11,"Flush","","",0,N],[11,"FlushMappedBufferRange","","",0,N],[11,"FramebufferRenderbuffer","","",0,N],[11,"FramebufferTexture","","",0,N],[11,"FramebufferTexture1D","","",0,N],[11,"FramebufferTexture2D","","",0,N],[11,"FramebufferTexture3D","","",0,N],[11,"FramebufferTextureLayer","","",0,N],[11,"FrontFace","","",0,N],[11,"GenBuffers","","",0,N],[11,"GenFencesAPPLE","","",0,N],[11,"GenFramebuffers","","",0,N],[11,"GenQueries","","",0,N],[11,"GenRenderbuffers","","",0,N],[11,"GenSamplers","","",0,N],[11,"GenTextures","","",0,N],[11,"GenVertexArrays","","",0,N],[11,"GenerateMipmap","","",0,N],[11,"GetActiveAttrib","","",0,N],[11,"GetActiveUniform","","",0,N],[11,"GetActiveUniformBlockName","","",0,N],[11,"GetActiveUniformBlockiv","","",0,N],[11,"GetActiveUniformName","","",0,N],[11,"GetActiveUniformsiv","","",0,N],[11,"GetAttachedShaders","","",0,N],[11,"GetAttribLocation","","",0,N],[11,"GetBooleani_v","","",0,N],[11,"GetBooleanv","","",0,N],[11,"GetBufferParameteri64v","","",0,N],[11,"GetBufferParameteriv","","",0,N],[11,"GetBufferPointerv","","",0,N],[11,"GetBufferSubData","","",0,N],[11,"GetCompressedTexImage","","",0,N],[11,"GetDebugMessageLog","","",0,N],[11,"GetDebugMessageLogKHR","","",0,N],[11,"GetDoublev","","",0,N],[11,"GetError","","",0,[[["self"]],["c_uint"]]],[11,"GetFloatv","","",0,N],[11,"GetFragDataIndex","","",0,N],[11,"GetFragDataLocation","","",0,N],[11,"GetFramebufferAttachmentParameteriv","","",0,N],[11,"GetInteger64i_v","","",0,N],[11,"GetInteger64v","","",0,N],[11,"GetIntegeri_v","","",0,N],[11,"GetIntegerv","","",0,N],[11,"GetMultisamplefv","","",0,N],[11,"GetObjectLabel","","",0,N],[11,"GetObjectLabelKHR","","",0,N],[11,"GetObjectPtrLabel","","",0,N],[11,"GetObjectPtrLabelKHR","","",0,N],[11,"GetPointerv","","",0,N],[11,"GetPointervKHR","","",0,N],[11,"GetProgramBinary","","",0,N],[11,"GetProgramInfoLog","","",0,N],[11,"GetProgramiv","","",0,N],[11,"GetQueryObjecti64v","","",0,N],[11,"GetQueryObjectiv","","",0,N],[11,"GetQueryObjectui64v","","",0,N],[11,"GetQueryObjectuiv","","",0,N],[11,"GetQueryiv","","",0,N],[11,"GetRenderbufferParameteriv","","",0,N],[11,"GetSamplerParameterIiv","","",0,N],[11,"GetSamplerParameterIuiv","","",0,N],[11,"GetSamplerParameterfv","","",0,N],[11,"GetSamplerParameteriv","","",0,N],[11,"GetShaderInfoLog","","",0,N],[11,"GetShaderSource","","",0,N],[11,"GetShaderiv","","",0,N],[11,"GetString","","",0,N],[11,"GetStringi","","",0,N],[11,"GetSynciv","","",0,N],[11,"GetTexImage","","",0,N],[11,"GetTexLevelParameterfv","","",0,N],[11,"GetTexLevelParameteriv","","",0,N],[11,"GetTexParameterIiv","","",0,N],[11,"GetTexParameterIuiv","","",0,N],[11,"GetTexParameterPointervAPPLE","","",0,N],[11,"GetTexParameterfv","","",0,N],[11,"GetTexParameteriv","","",0,N],[11,"GetTransformFeedbackVarying","","",0,N],[11,"GetUniformBlockIndex","","",0,N],[11,"GetUniformIndices","","",0,N],[11,"GetUniformLocation","","",0,N],[11,"GetUniformfv","","",0,N],[11,"GetUniformiv","","",0,N],[11,"GetUniformuiv","","",0,N],[11,"GetVertexAttribIiv","","",0,N],[11,"GetVertexAttribIuiv","","",0,N],[11,"GetVertexAttribPointerv","","",0,N],[11,"GetVertexAttribdv","","",0,N],[11,"GetVertexAttribfv","","",0,N],[11,"GetVertexAttribiv","","",0,N],[11,"Hint","","",0,N],[11,"InsertEventMarkerEXT","","",0,N],[11,"IsBuffer","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsEnabled","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsEnabledi","","",0,[[["self"],["c_uint"],["c_uint"]],["c_uchar"]]],[11,"IsFenceAPPLE","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsFramebuffer","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsProgram","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsQuery","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsRenderbuffer","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsSampler","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsShader","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsSync","","",0,N],[11,"IsTexture","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsVertexArray","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"LineWidth","","",0,N],[11,"LinkProgram","","",0,N],[11,"LogicOp","","",0,N],[11,"MapBuffer","","",0,N],[11,"MapBufferRange","","",0,N],[11,"MultiDrawArrays","","",0,N],[11,"MultiDrawElements","","",0,N],[11,"MultiDrawElementsBaseVertex","","",0,N],[11,"MultiTexCoordP1ui","","",0,N],[11,"MultiTexCoordP1uiv","","",0,N],[11,"MultiTexCoordP2ui","","",0,N],[11,"MultiTexCoordP2uiv","","",0,N],[11,"MultiTexCoordP3ui","","",0,N],[11,"MultiTexCoordP3uiv","","",0,N],[11,"MultiTexCoordP4ui","","",0,N],[11,"MultiTexCoordP4uiv","","",0,N],[11,"NormalP3ui","","",0,N],[11,"NormalP3uiv","","",0,N],[11,"ObjectLabel","","",0,N],[11,"ObjectLabelKHR","","",0,N],[11,"ObjectPtrLabel","","",0,N],[11,"ObjectPtrLabelKHR","","",0,N],[11,"PixelStoref","","",0,N],[11,"PixelStorei","","",0,N],[11,"PointParameterf","","",0,N],[11,"PointParameterfv","","",0,N],[11,"PointParameteri","","",0,N],[11,"PointParameteriv","","",0,N],[11,"PointSize","","",0,N],[11,"PolygonMode","","",0,N],[11,"PolygonOffset","","",0,N],[11,"PopDebugGroup","","",0,N],[11,"PopDebugGroupKHR","","",0,N],[11,"PopGroupMarkerEXT","","",0,N],[11,"PrimitiveRestartIndex","","",0,N],[11,"ProgramBinary","","",0,N],[11,"ProgramParameteri","","",0,N],[11,"ProvokingVertex","","",0,N],[11,"PushDebugGroup","","",0,N],[11,"PushDebugGroupKHR","","",0,N],[11,"PushGroupMarkerEXT","","",0,N],[11,"QueryCounter","","",0,N],[11,"ReadBuffer","","",0,N],[11,"ReadPixels","","",0,N],[11,"RenderbufferStorage","","",0,N],[11,"RenderbufferStorageMultisample","","",0,N],[11,"SampleCoverage","","",0,N],[11,"SampleMaski","","",0,N],[11,"SamplerParameterIiv","","",0,N],[11,"SamplerParameterIuiv","","",0,N],[11,"SamplerParameterf","","",0,N],[11,"SamplerParameterfv","","",0,N],[11,"SamplerParameteri","","",0,N],[11,"SamplerParameteriv","","",0,N],[11,"Scissor","","",0,N],[11,"SecondaryColorP3ui","","",0,N],[11,"SecondaryColorP3uiv","","",0,N],[11,"SetFenceAPPLE","","",0,N],[11,"ShaderSource","","",0,N],[11,"StencilFunc","","",0,N],[11,"StencilFuncSeparate","","",0,N],[11,"StencilMask","","",0,N],[11,"StencilMaskSeparate","","",0,N],[11,"StencilOp","","",0,N],[11,"StencilOpSeparate","","",0,N],[11,"TestFenceAPPLE","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"TestObjectAPPLE","","",0,[[["self"],["c_uint"],["c_uint"]],["c_uchar"]]],[11,"TexBuffer","","",0,N],[11,"TexCoordP1ui","","",0,N],[11,"TexCoordP1uiv","","",0,N],[11,"TexCoordP2ui","","",0,N],[11,"TexCoordP2uiv","","",0,N],[11,"TexCoordP3ui","","",0,N],[11,"TexCoordP3uiv","","",0,N],[11,"TexCoordP4ui","","",0,N],[11,"TexCoordP4uiv","","",0,N],[11,"TexImage1D","","",0,N],[11,"TexImage2D","","",0,N],[11,"TexImage2DMultisample","","",0,N],[11,"TexImage3D","","",0,N],[11,"TexImage3DMultisample","","",0,N],[11,"TexParameterIiv","","",0,N],[11,"TexParameterIuiv","","",0,N],[11,"TexParameterf","","",0,N],[11,"TexParameterfv","","",0,N],[11,"TexParameteri","","",0,N],[11,"TexParameteriv","","",0,N],[11,"TexSubImage1D","","",0,N],[11,"TexSubImage2D","","",0,N],[11,"TexSubImage3D","","",0,N],[11,"TextureRangeAPPLE","","",0,N],[11,"TransformFeedbackVaryings","","",0,N],[11,"Uniform1f","","",0,N],[11,"Uniform1fv","","",0,N],[11,"Uniform1i","","",0,N],[11,"Uniform1iv","","",0,N],[11,"Uniform1ui","","",0,N],[11,"Uniform1uiv","","",0,N],[11,"Uniform2f","","",0,N],[11,"Uniform2fv","","",0,N],[11,"Uniform2i","","",0,N],[11,"Uniform2iv","","",0,N],[11,"Uniform2ui","","",0,N],[11,"Uniform2uiv","","",0,N],[11,"Uniform3f","","",0,N],[11,"Uniform3fv","","",0,N],[11,"Uniform3i","","",0,N],[11,"Uniform3iv","","",0,N],[11,"Uniform3ui","","",0,N],[11,"Uniform3uiv","","",0,N],[11,"Uniform4f","","",0,N],[11,"Uniform4fv","","",0,N],[11,"Uniform4i","","",0,N],[11,"Uniform4iv","","",0,N],[11,"Uniform4ui","","",0,N],[11,"Uniform4uiv","","",0,N],[11,"UniformBlockBinding","","",0,N],[11,"UniformMatrix2fv","","",0,N],[11,"UniformMatrix2x3fv","","",0,N],[11,"UniformMatrix2x4fv","","",0,N],[11,"UniformMatrix3fv","","",0,N],[11,"UniformMatrix3x2fv","","",0,N],[11,"UniformMatrix3x4fv","","",0,N],[11,"UniformMatrix4fv","","",0,N],[11,"UniformMatrix4x2fv","","",0,N],[11,"UniformMatrix4x3fv","","",0,N],[11,"UnmapBuffer","","",0,[[["self"],["c_uint"]],["c_uchar"]]],[11,"UseProgram","","",0,N],[11,"ValidateProgram","","",0,N],[11,"VertexAttrib1d","","",0,N],[11,"VertexAttrib1dv","","",0,N],[11,"VertexAttrib1f","","",0,N],[11,"VertexAttrib1fv","","",0,N],[11,"VertexAttrib1s","","",0,N],[11,"VertexAttrib1sv","","",0,N],[11,"VertexAttrib2d","","",0,N],[11,"VertexAttrib2dv","","",0,N],[11,"VertexAttrib2f","","",0,N],[11,"VertexAttrib2fv","","",0,N],[11,"VertexAttrib2s","","",0,N],[11,"VertexAttrib2sv","","",0,N],[11,"VertexAttrib3d","","",0,N],[11,"VertexAttrib3dv","","",0,N],[11,"VertexAttrib3f","","",0,N],[11,"VertexAttrib3fv","","",0,N],[11,"VertexAttrib3s","","",0,N],[11,"VertexAttrib3sv","","",0,N],[11,"VertexAttrib4Nbv","","",0,N],[11,"VertexAttrib4Niv","","",0,N],[11,"VertexAttrib4Nsv","","",0,N],[11,"VertexAttrib4Nub","","",0,N],[11,"VertexAttrib4Nubv","","",0,N],[11,"VertexAttrib4Nuiv","","",0,N],[11,"VertexAttrib4Nusv","","",0,N],[11,"VertexAttrib4bv","","",0,N],[11,"VertexAttrib4d","","",0,N],[11,"VertexAttrib4dv","","",0,N],[11,"VertexAttrib4f","","",0,N],[11,"VertexAttrib4fv","","",0,N],[11,"VertexAttrib4iv","","",0,N],[11,"VertexAttrib4s","","",0,N],[11,"VertexAttrib4sv","","",0,N],[11,"VertexAttrib4ubv","","",0,N],[11,"VertexAttrib4uiv","","",0,N],[11,"VertexAttrib4usv","","",0,N],[11,"VertexAttribDivisor","","",0,N],[11,"VertexAttribI1i","","",0,N],[11,"VertexAttribI1iv","","",0,N],[11,"VertexAttribI1ui","","",0,N],[11,"VertexAttribI1uiv","","",0,N],[11,"VertexAttribI2i","","",0,N],[11,"VertexAttribI2iv","","",0,N],[11,"VertexAttribI2ui","","",0,N],[11,"VertexAttribI2uiv","","",0,N],[11,"VertexAttribI3i","","",0,N],[11,"VertexAttribI3iv","","",0,N],[11,"VertexAttribI3ui","","",0,N],[11,"VertexAttribI3uiv","","",0,N],[11,"VertexAttribI4bv","","",0,N],[11,"VertexAttribI4i","","",0,N],[11,"VertexAttribI4iv","","",0,N],[11,"VertexAttribI4sv","","",0,N],[11,"VertexAttribI4ubv","","",0,N],[11,"VertexAttribI4ui","","",0,N],[11,"VertexAttribI4uiv","","",0,N],[11,"VertexAttribI4usv","","",0,N],[11,"VertexAttribIPointer","","",0,N],[11,"VertexAttribP1ui","","",0,N],[11,"VertexAttribP1uiv","","",0,N],[11,"VertexAttribP2ui","","",0,N],[11,"VertexAttribP2uiv","","",0,N],[11,"VertexAttribP3ui","","",0,N],[11,"VertexAttribP3uiv","","",0,N],[11,"VertexAttribP4ui","","",0,N],[11,"VertexAttribP4uiv","","",0,N],[11,"VertexAttribPointer","","",0,N],[11,"VertexP2ui","","",0,N],[11,"VertexP2uiv","","",0,N],[11,"VertexP3ui","","",0,N],[11,"VertexP3uiv","","",0,N],[11,"VertexP4ui","","",0,N],[11,"VertexP4uiv","","",0,N],[11,"Viewport","","",0,N],[11,"WaitSync","","",0,N],[11,"clone","","",1,[[["self"]],["gles2"]]],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",1,[[["f"]],["gles2"]]],[11,"ActiveTexture","","",1,N],[11,"AttachShader","","",1,N],[11,"BeginQuery","","",1,N],[11,"BeginQueryEXT","","",1,N],[11,"BeginTransformFeedback","","",1,N],[11,"BindAttribLocation","","",1,N],[11,"BindBuffer","","",1,N],[11,"BindBufferBase","","",1,N],[11,"BindBufferRange","","",1,N],[11,"BindFramebuffer","","",1,N],[11,"BindRenderbuffer","","",1,N],[11,"BindSampler","","",1,N],[11,"BindTexture","","",1,N],[11,"BindTransformFeedback","","",1,N],[11,"BindVertexArray","","",1,N],[11,"BlendColor","","",1,N],[11,"BlendEquation","","",1,N],[11,"BlendEquationSeparate","","",1,N],[11,"BlendFunc","","",1,N],[11,"BlendFuncSeparate","","",1,N],[11,"BlitFramebuffer","","",1,N],[11,"BufferData","","",1,N],[11,"BufferSubData","","",1,N],[11,"CheckFramebufferStatus","","",1,[[["self"],["c_uint"]],["c_uint"]]],[11,"Clear","","",1,N],[11,"ClearBufferfi","","",1,N],[11,"ClearBufferfv","","",1,N],[11,"ClearBufferiv","","",1,N],[11,"ClearBufferuiv","","",1,N],[11,"ClearColor","","",1,N],[11,"ClearDepthf","","",1,N],[11,"ClearStencil","","",1,N],[11,"ClientWaitSync","","",1,N],[11,"ColorMask","","",1,N],[11,"CompileShader","","",1,N],[11,"CompressedTexImage2D","","",1,N],[11,"CompressedTexImage3D","","",1,N],[11,"CompressedTexSubImage2D","","",1,N],[11,"CompressedTexSubImage3D","","",1,N],[11,"CopyBufferSubData","","",1,N],[11,"CopyTexImage2D","","",1,N],[11,"CopyTexSubImage2D","","",1,N],[11,"CopyTexSubImage3D","","",1,N],[11,"CreateProgram","","",1,[[["self"]],["c_uint"]]],[11,"CreateShader","","",1,[[["self"],["c_uint"]],["c_uint"]]],[11,"CullFace","","",1,N],[11,"DebugMessageCallback","","",1,N],[11,"DebugMessageCallbackKHR","","",1,N],[11,"DebugMessageControl","","",1,N],[11,"DebugMessageControlKHR","","",1,N],[11,"DebugMessageInsert","","",1,N],[11,"DebugMessageInsertKHR","","",1,N],[11,"DeleteBuffers","","",1,N],[11,"DeleteFramebuffers","","",1,N],[11,"DeleteProgram","","",1,N],[11,"DeleteQueries","","",1,N],[11,"DeleteQueriesEXT","","",1,N],[11,"DeleteRenderbuffers","","",1,N],[11,"DeleteSamplers","","",1,N],[11,"DeleteShader","","",1,N],[11,"DeleteSync","","",1,N],[11,"DeleteTextures","","",1,N],[11,"DeleteTransformFeedbacks","","",1,N],[11,"DeleteVertexArrays","","",1,N],[11,"DepthFunc","","",1,N],[11,"DepthMask","","",1,N],[11,"DepthRangef","","",1,N],[11,"DetachShader","","",1,N],[11,"Disable","","",1,N],[11,"DisableVertexAttribArray","","",1,N],[11,"DrawArrays","","",1,N],[11,"DrawArraysInstanced","","",1,N],[11,"DrawBuffers","","",1,N],[11,"DrawElements","","",1,N],[11,"DrawElementsInstanced","","",1,N],[11,"DrawRangeElements","","",1,N],[11,"EGLImageTargetRenderbufferStorageOES","","",1,N],[11,"EGLImageTargetTexture2DOES","","",1,N],[11,"Enable","","",1,N],[11,"EnableVertexAttribArray","","",1,N],[11,"EndQuery","","",1,N],[11,"EndQueryEXT","","",1,N],[11,"EndTransformFeedback","","",1,N],[11,"FenceSync","","",1,N],[11,"Finish","","",1,N],[11,"Flush","","",1,N],[11,"FlushMappedBufferRange","","",1,N],[11,"FramebufferRenderbuffer","","",1,N],[11,"FramebufferTexture2D","","",1,N],[11,"FramebufferTextureLayer","","",1,N],[11,"FrontFace","","",1,N],[11,"GenBuffers","","",1,N],[11,"GenFramebuffers","","",1,N],[11,"GenQueries","","",1,N],[11,"GenQueriesEXT","","",1,N],[11,"GenRenderbuffers","","",1,N],[11,"GenSamplers","","",1,N],[11,"GenTextures","","",1,N],[11,"GenTransformFeedbacks","","",1,N],[11,"GenVertexArrays","","",1,N],[11,"GenerateMipmap","","",1,N],[11,"GetActiveAttrib","","",1,N],[11,"GetActiveUniform","","",1,N],[11,"GetActiveUniformBlockName","","",1,N],[11,"GetActiveUniformBlockiv","","",1,N],[11,"GetActiveUniformsiv","","",1,N],[11,"GetAttachedShaders","","",1,N],[11,"GetAttribLocation","","",1,N],[11,"GetBooleanv","","",1,N],[11,"GetBufferParameteri64v","","",1,N],[11,"GetBufferParameteriv","","",1,N],[11,"GetBufferPointerv","","",1,N],[11,"GetDebugMessageLog","","",1,N],[11,"GetDebugMessageLogKHR","","",1,N],[11,"GetError","","",1,[[["self"]],["c_uint"]]],[11,"GetFloatv","","",1,N],[11,"GetFragDataLocation","","",1,N],[11,"GetFramebufferAttachmentParameteriv","","",1,N],[11,"GetInteger64i_v","","",1,N],[11,"GetInteger64v","","",1,N],[11,"GetIntegeri_v","","",1,N],[11,"GetIntegerv","","",1,N],[11,"GetInternalformativ","","",1,N],[11,"GetObjectLabel","","",1,N],[11,"GetObjectLabelKHR","","",1,N],[11,"GetObjectPtrLabel","","",1,N],[11,"GetObjectPtrLabelKHR","","",1,N],[11,"GetPointerv","","",1,N],[11,"GetPointervKHR","","",1,N],[11,"GetProgramBinary","","",1,N],[11,"GetProgramInfoLog","","",1,N],[11,"GetProgramiv","","",1,N],[11,"GetQueryObjecti64vEXT","","",1,N],[11,"GetQueryObjectivEXT","","",1,N],[11,"GetQueryObjectui64vEXT","","",1,N],[11,"GetQueryObjectuiv","","",1,N],[11,"GetQueryObjectuivEXT","","",1,N],[11,"GetQueryiv","","",1,N],[11,"GetQueryivEXT","","",1,N],[11,"GetRenderbufferParameteriv","","",1,N],[11,"GetSamplerParameterfv","","",1,N],[11,"GetSamplerParameteriv","","",1,N],[11,"GetShaderInfoLog","","",1,N],[11,"GetShaderPrecisionFormat","","",1,N],[11,"GetShaderSource","","",1,N],[11,"GetShaderiv","","",1,N],[11,"GetString","","",1,N],[11,"GetStringi","","",1,N],[11,"GetSynciv","","",1,N],[11,"GetTexParameterfv","","",1,N],[11,"GetTexParameteriv","","",1,N],[11,"GetTransformFeedbackVarying","","",1,N],[11,"GetUniformBlockIndex","","",1,N],[11,"GetUniformIndices","","",1,N],[11,"GetUniformLocation","","",1,N],[11,"GetUniformfv","","",1,N],[11,"GetUniformiv","","",1,N],[11,"GetUniformuiv","","",1,N],[11,"GetVertexAttribIiv","","",1,N],[11,"GetVertexAttribIuiv","","",1,N],[11,"GetVertexAttribPointerv","","",1,N],[11,"GetVertexAttribfv","","",1,N],[11,"GetVertexAttribiv","","",1,N],[11,"Hint","","",1,N],[11,"InsertEventMarkerEXT","","",1,N],[11,"InvalidateFramebuffer","","",1,N],[11,"InvalidateSubFramebuffer","","",1,N],[11,"IsBuffer","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsEnabled","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsFramebuffer","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsProgram","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsQuery","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsQueryEXT","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsRenderbuffer","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsSampler","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsShader","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsSync","","",1,N],[11,"IsTexture","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsTransformFeedback","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"IsVertexArray","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"LineWidth","","",1,N],[11,"LinkProgram","","",1,N],[11,"MapBufferRange","","",1,N],[11,"ObjectLabel","","",1,N],[11,"ObjectLabelKHR","","",1,N],[11,"ObjectPtrLabel","","",1,N],[11,"ObjectPtrLabelKHR","","",1,N],[11,"PauseTransformFeedback","","",1,N],[11,"PixelStorei","","",1,N],[11,"PolygonOffset","","",1,N],[11,"PopDebugGroup","","",1,N],[11,"PopDebugGroupKHR","","",1,N],[11,"PopGroupMarkerEXT","","",1,N],[11,"ProgramBinary","","",1,N],[11,"ProgramParameteri","","",1,N],[11,"PushDebugGroup","","",1,N],[11,"PushDebugGroupKHR","","",1,N],[11,"PushGroupMarkerEXT","","",1,N],[11,"QueryCounterEXT","","",1,N],[11,"ReadBuffer","","",1,N],[11,"ReadPixels","","",1,N],[11,"ReleaseShaderCompiler","","",1,N],[11,"RenderbufferStorage","","",1,N],[11,"RenderbufferStorageMultisample","","",1,N],[11,"ResumeTransformFeedback","","",1,N],[11,"SampleCoverage","","",1,N],[11,"SamplerParameterf","","",1,N],[11,"SamplerParameterfv","","",1,N],[11,"SamplerParameteri","","",1,N],[11,"SamplerParameteriv","","",1,N],[11,"Scissor","","",1,N],[11,"ShaderBinary","","",1,N],[11,"ShaderSource","","",1,N],[11,"StencilFunc","","",1,N],[11,"StencilFuncSeparate","","",1,N],[11,"StencilMask","","",1,N],[11,"StencilMaskSeparate","","",1,N],[11,"StencilOp","","",1,N],[11,"StencilOpSeparate","","",1,N],[11,"TexImage2D","","",1,N],[11,"TexImage3D","","",1,N],[11,"TexParameterf","","",1,N],[11,"TexParameterfv","","",1,N],[11,"TexParameteri","","",1,N],[11,"TexParameteriv","","",1,N],[11,"TexStorage2D","","",1,N],[11,"TexStorage3D","","",1,N],[11,"TexSubImage2D","","",1,N],[11,"TexSubImage3D","","",1,N],[11,"TransformFeedbackVaryings","","",1,N],[11,"Uniform1f","","",1,N],[11,"Uniform1fv","","",1,N],[11,"Uniform1i","","",1,N],[11,"Uniform1iv","","",1,N],[11,"Uniform1ui","","",1,N],[11,"Uniform1uiv","","",1,N],[11,"Uniform2f","","",1,N],[11,"Uniform2fv","","",1,N],[11,"Uniform2i","","",1,N],[11,"Uniform2iv","","",1,N],[11,"Uniform2ui","","",1,N],[11,"Uniform2uiv","","",1,N],[11,"Uniform3f","","",1,N],[11,"Uniform3fv","","",1,N],[11,"Uniform3i","","",1,N],[11,"Uniform3iv","","",1,N],[11,"Uniform3ui","","",1,N],[11,"Uniform3uiv","","",1,N],[11,"Uniform4f","","",1,N],[11,"Uniform4fv","","",1,N],[11,"Uniform4i","","",1,N],[11,"Uniform4iv","","",1,N],[11,"Uniform4ui","","",1,N],[11,"Uniform4uiv","","",1,N],[11,"UniformBlockBinding","","",1,N],[11,"UniformMatrix2fv","","",1,N],[11,"UniformMatrix2x3fv","","",1,N],[11,"UniformMatrix2x4fv","","",1,N],[11,"UniformMatrix3fv","","",1,N],[11,"UniformMatrix3x2fv","","",1,N],[11,"UniformMatrix3x4fv","","",1,N],[11,"UniformMatrix4fv","","",1,N],[11,"UniformMatrix4x2fv","","",1,N],[11,"UniformMatrix4x3fv","","",1,N],[11,"UnmapBuffer","","",1,[[["self"],["c_uint"]],["c_uchar"]]],[11,"UseProgram","","",1,N],[11,"ValidateProgram","","",1,N],[11,"VertexAttrib1f","","",1,N],[11,"VertexAttrib1fv","","",1,N],[11,"VertexAttrib2f","","",1,N],[11,"VertexAttrib2fv","","",1,N],[11,"VertexAttrib3f","","",1,N],[11,"VertexAttrib3fv","","",1,N],[11,"VertexAttrib4f","","",1,N],[11,"VertexAttrib4fv","","",1,N],[11,"VertexAttribDivisor","","",1,N],[11,"VertexAttribI4i","","",1,N],[11,"VertexAttribI4iv","","",1,N],[11,"VertexAttribI4ui","","",1,N],[11,"VertexAttribI4uiv","","",1,N],[11,"VertexAttribIPointer","","",1,N],[11,"VertexAttribPointer","","",1,N],[11,"Viewport","","",1,N],[11,"WaitSync","","",1,N],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]]],"paths":[[3,"GlFfi"],[3,"GlesFfi"],[3,"DebugMessage"],[4,"GlType"],[8,"Gl"],[3,"ErrorCheckingGl"],[3,"GlFns"],[3,"GlesFns"],[3,"FnPtr"]]};
searchIndex["inflector"]={"doc":"Adds String based inflections for Rust. Snake, kebab, train, camel, sentence, class, and title cases as well as ordinalize, deordinalize, demodulize, deconstantize, and foreign key are supported as both traits and pure functions acting on String types. `rust use inflector::Inflector; let camel_case_string: String = \"some_string\".to_camel_case(); let is_camel_cased: bool= camel_case_string.is_camel_case(); assert!(is_camel_cased == true);`","items":[[0,"cases","inflector","Provides case inflections - Camel case - Class case - Kebab case - Train case - Screaming snake case - Table case - Sentence case - Snake case - Pascal case",N,N],[0,"classcase","inflector::cases","Provides conversion to and detection of class case strings.",N,N],[5,"to_class_case","inflector::cases::classcase","Converts a `&str` to `ClassCase` `String`",N,[[["str"]],["string"]]],[5,"is_class_case","","Determines if a `&str` is `ClassCase` `bool`",N,[[["str"]],["bool"]]],[0,"camelcase","inflector::cases","Provides conversion to and detection of camel case strings.",N,N],[5,"to_camel_case","inflector::cases::camelcase","Converts a `&str` to camelCase `String`",N,[[["str"]],["string"]]],[5,"is_camel_case","","Determines if a `&str` is camelCase bool``",N,[[["str"]],["bool"]]],[0,"snakecase","inflector::cases","Provides conversion to and detection of snake case strings.",N,N],[5,"to_snake_case","inflector::cases::snakecase","Converts a `&str` to `snake_case` `String`",N,[[["str"]],["string"]]],[5,"is_snake_case","","Determines of a `&str` is `snake_case`",N,[[["str"]],["bool"]]],[0,"screamingsnakecase","inflector::cases","Provides conversion to and detection of screaming snake case strings.",N,N],[5,"to_screaming_snake_case","inflector::cases::screamingsnakecase","Converts a `&str` to `SCREAMING_SNAKE_CASE` `String`",N,[[["str"]],["string"]]],[5,"is_screaming_snake_case","","Determines of a `&str` is `SCREAMING_SNAKE_CASE`",N,[[["str"]],["bool"]]],[0,"kebabcase","inflector::cases","Provides conversion to and detection of kebab case strings.",N,N],[5,"is_kebab_case","inflector::cases::kebabcase","Determines if a `&str` is `kebab-case`",N,[[["str"]],["bool"]]],[5,"to_kebab_case","","Converts a `&str` to `kebab-case` `String`",N,[[["str"]],["string"]]],[0,"traincase","inflector::cases","Provides conversion to and detection of train case strings.",N,N],[5,"is_train_case","inflector::cases::traincase","Determines if a `&str` is `Train-Case`",N,[[["str"]],["bool"]]],[5,"to_train_case","","Converts a `&str` to `Train-Case` `String`",N,[[["str"]],["string"]]],[0,"sentencecase","inflector::cases","Provides conversion to and detection of sentence case strings.",N,N],[5,"to_sentence_case","inflector::cases::sentencecase","Converts a `&str` to `Sentence case` `String`",N,[[["str"]],["string"]]],[5,"is_sentence_case","","Determines of a `&str` is `Sentence case`",N,[[["str"]],["bool"]]],[0,"titlecase","inflector::cases","Provides conversion to and detection of title case strings.",N,N],[5,"to_title_case","inflector::cases::titlecase","Converts a `&str` to `Title Case` `String`",N,[[["str"]],["string"]]],[5,"is_title_case","","Determines if a `&str` is `Title Case`",N,[[["str"]],["bool"]]],[0,"tablecase","inflector::cases","Provides conversion to and detection of table case strings.",N,N],[5,"to_table_case","inflector::cases::tablecase","Converts a `&str` to `table-case` `String`",N,[[["str"]],["string"]]],[5,"is_table_case","","Determines if a `&str` is `table-case`",N,[[["str"]],["bool"]]],[0,"pascalcase","inflector::cases","Provides conversion to pascal case strings.",N,N],[5,"to_pascal_case","inflector::cases::pascalcase","Converts a `&str` to pascalCase `String`",N,[[["str"]],["string"]]],[5,"is_pascal_case","","Determines if a `&str` is pascalCase bool``",N,[[["str"]],["bool"]]],[0,"numbers","inflector","Provides number inflections - Ordinalize - Deordinalize",N,N],[0,"ordinalize","inflector::numbers","Provides ordinalization of a string.",N,N],[5,"ordinalize","inflector::numbers::ordinalize","Orginalizes a `&str`",N,[[["str"]],["string"]]],[0,"deordinalize","inflector::numbers","Provides deordinalization of a string.",N,N],[5,"deordinalize","inflector::numbers::deordinalize","Deorginalizes a `&str`",N,[[["str"]],["string"]]],[0,"suffix","inflector","Provides suffix inflections - Foreign key",N,N],[0,"foreignkey","inflector::suffix","Provides foreign key conversion for String.",N,N],[5,"to_foreign_key","inflector::suffix::foreignkey","Converts a `&str` to a `foreign_key`",N,[[["str"]],["string"]]],[5,"is_foreign_key","","Determines if a `&str` is a `foreign_key`",N,[[["str"]],["bool"]]],[0,"string","inflector","Provides string inflections - Deconstantize - Demodulize - Pluralize - Singularize",N,N],[0,"demodulize","inflector::string","Provides demodulize a string.",N,N],[5,"demodulize","inflector::string::demodulize","Demodulize a `&str`",N,[[["str"]],["string"]]],[0,"deconstantize","inflector::string","Provides deconstantizea string.",N,N],[5,"deconstantize","inflector::string::deconstantize","Deconstantizes a `&str`",N,[[["str"]],["string"]]],[0,"pluralize","inflector::string","Provides conversion to plural strings.",N,N],[5,"to_plural","inflector::string::pluralize","Converts a `&str` to pluralized `String`",N,[[["str"]],["string"]]],[0,"singularize","inflector::string","Provides conversion to singular strings.",N,N],[5,"to_singular","inflector::string::singularize","Converts a `&str` to singularized `String`",N,[[["str"]],["string"]]],[8,"Inflector","inflector","",N,N],[10,"to_camel_case","","",0,[[["self"]],["string"]]],[10,"is_camel_case","","",0,[[["self"]],["bool"]]],[10,"to_pascal_case","","",0,[[["self"]],["string"]]],[10,"is_pascal_case","","",0,[[["self"]],["bool"]]],[10,"to_snake_case","","",0,[[["self"]],["string"]]],[10,"is_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_screaming_snake_case","","",0,[[["self"]],["string"]]],[10,"is_screaming_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_kebab_case","","",0,[[["self"]],["string"]]],[10,"is_kebab_case","","",0,[[["self"]],["bool"]]],[10,"to_train_case","","",0,[[["self"]],["string"]]],[10,"is_train_case","","",0,[[["self"]],["bool"]]],[10,"to_sentence_case","","",0,[[["self"]],["string"]]],[10,"is_sentence_case","","",0,[[["self"]],["bool"]]],[10,"to_title_case","","",0,[[["self"]],["string"]]],[10,"is_title_case","","",0,[[["self"]],["bool"]]],[10,"ordinalize","","",0,[[["self"]],["string"]]],[10,"deordinalize","","",0,[[["self"]],["string"]]],[10,"to_foreign_key","","",0,[[["self"]],["string"]]],[10,"is_foreign_key","","",0,[[["self"]],["bool"]]],[10,"demodulize","","",0,[[["self"]],["string"]]],[10,"deconstantize","","",0,[[["self"]],["string"]]],[10,"to_class_case","","",0,[[["self"]],["string"]]],[10,"is_class_case","","",0,[[["self"]],["bool"]]],[10,"to_table_case","","",0,[[["self"]],["string"]]],[10,"is_table_case","","",0,[[["self"]],["bool"]]],[10,"to_plural","","",0,[[["self"]],["string"]]],[10,"to_singular","","",0,[[["self"]],["string"]]],[8,"InflectorNumbers","","",N,N],[10,"ordinalize","","",1,[[["self"]],["string"]]]],"paths":[[8,"Inflector"],[8,"InflectorNumbers"]]};
searchIndex["itoa"]={"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N]],"paths":[]};
searchIndex["jss"]={"doc":"JSS Implementation of JSS for Rust. Use css styles without css with identical properties. Part of Rise-UI project.","items":[[0,"common","jss","",N,N],[3,"StyleProperties","jss::common","Style properties struct with all css properties, by default allow to raw serialize/deserialize with serde. All elements wrap over Option for support optional field. Also implements derive macro for Add operator for merge properties, and custom macros for relative parse & prepares for styles",N,N],[12,"flex_direction","","",0,N],[12,"justify_content","","",0,N],[12,"position","","",0,N],[12,"align_content","","",0,N],[12,"align_items","","",0,N],[12,"align_self","","",0,N],[12,"flex_wrap","","",0,N],[12,"display","","",0,N],[12,"overflow","","",0,N],[12,"aspect_ratio","","",0,N],[12,"flex_shrink","","",0,N],[12,"flex_grow","","",0,N],[12,"flex","","",0,N],[12,"bottom","","",0,N],[12,"end","","",0,N],[12,"flex_basis","","",0,N],[12,"height","","",0,N],[12,"left","","",0,N],[12,"margin","","",0,N],[12,"margin_bottom","","",0,N],[12,"margin_end","","",0,N],[12,"margin_horizontal","","",0,N],[12,"margin_left","","",0,N],[12,"margin_right","","",0,N],[12,"margin_start","","",0,N],[12,"margin_top","","",0,N],[12,"margin_vertical","","",0,N],[12,"max_height","","",0,N],[12,"max_width","","",0,N],[12,"min_height","","",0,N],[12,"min_width","","",0,N],[12,"padding","","",0,N],[12,"padding_bottom","","",0,N],[12,"padding_end","","",0,N],[12,"padding_horizontal","","",0,N],[12,"padding_left","","",0,N],[12,"padding_right","","",0,N],[12,"padding_start","","",0,N],[12,"padding_top","","",0,N],[12,"padding_vertical","","",0,N],[12,"right","","",0,N],[12,"start","","",0,N],[12,"top","","",0,N],[12,"width","","",0,N],[12,"background","","",0,N],[12,"transform","","",0,N],[12,"filter","","",0,N],[12,"border_bottom_width","","",0,N],[12,"border_right_width","","",0,N],[12,"border_left_width","","",0,N],[12,"border_top_width","","",0,N],[12,"border_top_color","","",0,N],[12,"border_right_color","","",0,N],[12,"border_left_color","","",0,N],[12,"border_bottom_color","","",0,N],[12,"border_top_style","","",0,N],[12,"border_right_style","","",0,N],[12,"border_left_style","","",0,N],[12,"border_bottom_style","","",0,N],[12,"border_top_right_radius","","",0,N],[12,"border_top_left_radius","","",0,N],[12,"border_bottom_right_radius","","",0,N],[12,"border_bottom_left_radius","","",0,N],[3,"Context","","Context with other needed info - for parse and prepares, aka dimensions screen, element measures, variables, and other.",N,N],[3,"Style","","Style element, with all element status, and context`s, with implementations of traits for parse unions of one element",N,N],[12,"default","","",1,N],[12,"active","","",1,N],[12,"hover","","",1,N],[3,"ParseOptions","","Options for parse style from uniform functions",N,N],[12,"recursive","","",2,N],[12,"style","","",2,N],[12,"from","","",2,N],[4,"PropertyCase","","What format of properties keys to use and check when parsing Current allowed: snake_case, camelCase, kebab-case Default: camelCase",N,N],[13,"Snake","","",3,N],[13,"Kebab","","",3,N],[13,"Camel","","",3,N],[4,"ParseTarget","","From what data format to parse, currently available: JSON, YAML Default: JSON",N,N],[13,"Json","","",4,N],[13,"Yaml","","",4,N],[4,"RecursiveType","","One level recursion inside with: @media queries, status presudo classes: :hover, :active. Default: Basic",N,N],[13,"Basic","","",5,N],[13,"Never","","",5,N],[4,"ParseError","","",N,N],[13,"InvalidKeyCase","","",6,N],[12,"case","jss::common::ParseError","",6,N],[12,"key","","",6,N],[11,"fmt","jss::common","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["propertycase"]]],[11,"default","","",3,[[],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["parsetarget"]]],[11,"default","","",4,[[],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["recursivetype"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",2,[[],["parseoptions"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseoptions"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["styleproperties"]]],[11,"clone","","",0,[[["self"]],["styleproperties"]]],[11,"get_prepared_styles","","",0,N],[11,"add","","",0,[[["self"],["styleproperties"]],["styleproperties"]]],[11,"parse_json_element","","",1,[[["str"],["recursivetype"],["propertycase"]],["result",["style","error"]]]],[11,"parse_yaml_element","","",1,[[["str"],["recursivetype"],["propertycase"]],["result",["style","error"]]]],[11,"parse_element","","",1,[[["str"],["parseoptions"]],["result",["style","error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["context"]]],[11,"default","","",7,[[],["context"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["style"]]],[11,"default","","",1,[[],["style"]]],[0,"unit","","",N,N],[5,"serialize","jss::common::unit","",N,[[["option"],["s"]],["result"]]],[5,"deserialize","","",N,[[["d"]],["result",["option"]]]],[5,"parse_length","","",N,[[["str"]],["styleunit"]]],[8,"PrepareStyleExt","jss::common","",N,N],[10,"get_prepared_styles","","",8,N],[8,"ParseStyleExt","","",N,N],[10,"parse_element","","",9,[[["str"],["parseoptions"]],["result",["style","error"]]]],[10,"parse_json_element","","",9,[[["str"],["recursivetype"],["propertycase"]],["result",["style","error"]]]],[10,"parse_yaml_element","","",9,[[["str"],["recursivetype"],["propertycase"]],["result",["style","error"]]]],[0,"properties","jss","",N,N],[3,"GradientStop","jss::properties","",N,N],[12,"offset","","",10,N],[12,"color","","",10,N],[3,"Gradient","","",N,N],[12,"stops","","",11,N],[12,"from","","",11,N],[12,"to","","",11,N],[3,"BoxShadow","","",N,N],[12,"color","","",12,N],[12,"horizontal","","",12,N],[12,"vertical","","",12,N],[12,"blur","","",12,N],[12,"spread","","",12,N],[12,"inset","","",12,N],[3,"BorderRadius","","",N,N],[12,"bottom_right","","",13,N],[12,"bottom_left","","",13,N],[12,"top_right","","",13,N],[12,"top_left","","",13,N],[3,"Border","","",N,N],[12,"style","","",14,N],[12,"color","","",14,N],[12,"width","","",14,N],[3,"BorderStyles","","",N,N],[12,"bottom","","",15,N],[12,"right","","",15,N],[12,"left","","",15,N],[12,"top","","",15,N],[3,"Color","","",N,N],[12,"red","","",16,N],[12,"green","","",16,N],[12,"blue","","",16,N],[12,"alpha","","",16,N],[3,"Apperance","","",N,N],[12,"border_radius","","",17,N],[12,"border_styles","","",17,N],[12,"background","","",17,N],[12,"transform","","",17,N],[12,"filter","","",17,N],[4,"Background","","",N,N],[13,"Gradient","","",18,N],[13,"Color","","",18,N],[4,"Visibility","","",N,N],[13,"Hidden","","",19,N],[13,"Visible","","",19,N],[4,"Transform","","",N,N],[13,"Translate","","",20,N],[13,"Skew","","",20,N],[13,"Rotate","","",20,N],[13,"None","","",20,N],[4,"BorderStyle","","",N,N],[13,"None","","",21,N],[13,"Solid","","",21,N],[13,"Double","","",21,N],[13,"Dotted","","",21,N],[13,"Dashed","","",21,N],[13,"Hidden","","",21,N],[13,"Groove","","",21,N],[13,"Ridge","","",21,N],[13,"Inset","","",21,N],[13,"Outset","","",21,N],[4,"Cursor","","",N,N],[13,"Auto","","",22,N],[13,"None","","",22,N],[13,"Default","","",22,N],[13,"Pointer","","",22,N],[13,"ContextMenu","","",22,N],[13,"Help","","",22,N],[13,"Progress","","",22,N],[13,"Wait","","",22,N],[13,"Cell","","",22,N],[13,"Crosshair","","",22,N],[13,"Text","","",22,N],[13,"VerticalText","","",22,N],[13,"Alias","","",22,N],[13,"Copy","","",22,N],[13,"Move","","",22,N],[13,"NoDrop","","",22,N],[13,"NotAllowed","","",22,N],[13,"Grab","","",22,N],[13,"Grabbing","","",22,N],[13,"EResize","","",22,N],[13,"NResize","","",22,N],[13,"NeResize","","",22,N],[13,"NwResize","","",22,N],[13,"SResize","","",22,N],[13,"SeResize","","",22,N],[13,"SwResize","","",22,N],[13,"WResize","","",22,N],[13,"EwResize","","",22,N],[13,"NsResize","","",22,N],[13,"NeswResize","","",22,N],[13,"NwseResize","","",22,N],[13,"ColResize","","",22,N],[13,"RowResize","","",22,N],[13,"AllScroll","","",22,N],[13,"ZoomIn","","",22,N],[13,"ZoomOut","","",22,N],[4,"Filter","","",N,N],[13,"Brightness","","",23,N],[13,"Grayscale","","",23,N],[13,"HueRotate","","",23,N],[13,"Saturate","","",23,N],[13,"Contrast","","",23,N],[13,"Invert","","",23,N],[13,"Sepia","","",23,N],[13,"Blur","","",23,N],[13,"None","","",23,N],[4,"Angle","","",N,N],[13,"Degrees","","",24,N],[13,"Radians","","",24,N],[4,"Length","","",N,N],[13,"Percent","","",25,N],[13,"Point","","",25,N],[4,"SharedUnit","","",N,N],[13,"Length","","",26,N],[13,"Angle","","",26,N],[13,"None","","",26,N],[5,"make_translation","","",N,N],[5,"make_rotation","","",N,N],[5,"make_skew","","",N,[[["angle"],["angle"]],["layouttransform"]]],[5,"transforms_multiply","","",N,N],[5,"transforms_push_to_builder","","",N,N],[5,"into_transform3d","","",N,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["background"]],["bool"]]],[11,"ne","","",18,[[["self"],["background"]],["bool"]]],[11,"clone","","",18,[[["self"]],["background"]]],[11,"push_to_builder","","",18,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["gradientstop"]],["bool"]]],[11,"ne","","",10,[[["self"],["gradientstop"]],["bool"]]],[11,"clone","","",10,[[["self"]],["gradientstop"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["gradient"]],["bool"]]],[11,"ne","","",11,[[["self"],["gradient"]],["bool"]]],[11,"clone","","",11,[[["self"]],["gradient"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["boxshadow"]],["bool"]]],[11,"ne","","",12,[[["self"],["boxshadow"]],["bool"]]],[11,"clone","","",12,[[["self"]],["boxshadow"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["visibility"]],["bool"]]],[11,"clone","","",19,[[["self"]],["visibility"]]],[11,"into","","",19,[[["self"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"default","","",13,[[],["borderradius"]]],[11,"eq","","",13,[[["self"],["borderradius"]],["bool"]]],[11,"ne","","",13,[[["self"],["borderradius"]],["bool"]]],[11,"clone","","",13,[[["self"]],["borderradius"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["border"]],["bool"]]],[11,"ne","","",14,[[["self"],["border"]],["bool"]]],[11,"clone","","",14,[[["self"]],["border"]]],[11,"default","","",14,[[],["border"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"default","","",15,[[],["borderstyles"]]],[11,"eq","","",15,[[["self"],["borderstyles"]],["bool"]]],[11,"ne","","",15,[[["self"],["borderstyles"]],["bool"]]],[11,"clone","","",15,[[["self"]],["borderstyles"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["borderstyle"]],["bool"]]],[11,"clone","","",21,[[["self"]],["borderstyle"]]],[11,"into","","",21,[[["self"]],["borderstyle"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["color"]],["bool"]]],[11,"ne","","",16,[[["self"],["color"]],["bool"]]],[11,"clone","","",16,[[["self"]],["color"]]],[11,"serialize","","",16,[[["self"],["s"]],["result"]]],[11,"deserialize","","",16,[[["d"]],["result",["color"]]]],[11,"new","","",16,N],[11,"transparent","","",16,[[],["color"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"from","","",16,[[["csscolor"]],["color"]]],[11,"from","","",16,[[["str"]],["color"]]],[11,"from","","",16,[[["string"]],["color"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["angle"]],["bool"]]],[11,"ne","","",24,[[["self"],["angle"]],["bool"]]],[11,"clone","","",24,[[["self"]],["angle"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["length"]],["bool"]]],[11,"ne","","",25,[[["self"],["length"]],["bool"]]],[11,"clone","","",25,[[["self"]],["length"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["sharedunit"]],["bool"]]],[11,"ne","","",26,[[["self"],["sharedunit"]],["bool"]]],[11,"clone","","",26,[[["self"]],["sharedunit"]]],[11,"from","","",26,[[["lengthrepr"]],["sharedunit"]]],[11,"from","","",26,[[["anglerepr"]],["sharedunit"]]],[11,"from","","",26,[[["unitrepr"]],["sharedunit"]]],[11,"from","","",26,[[["str"]],["sharedunit"]]],[11,"from","","",26,[[["string"]],["sharedunit"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["cursor"]],["bool"]]],[11,"clone","","",22,[[["self"]],["cursor"]]],[11,"default","","",22,[[],["self"]]],[11,"serialize","","",23,[[["self"],["s"]],["result"]]],[11,"deserialize","","",23,[[["d"]],["result",["filter"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["filter"]],["bool"]]],[11,"ne","","",23,[[["self"],["filter"]],["bool"]]],[11,"clone","","",23,[[["self"]],["filter"]]],[11,"into","","",23,[[["self"]],["filterop"]]],[0,"parse","","",N,N],[3,"TransformFunction","jss::properties::parse","",N,N],[12,"args","","",27,N],[12,"name","","",27,N],[3,"GradientFunction","","",N,N],[12,"stops","","",28,N],[12,"angle","","",28,N],[3,"LengthRepr","","",N,N],[12,"value","","",29,N],[12,"unit","","",29,N],[3,"AngleRepr","","",N,N],[12,"value","","",30,N],[12,"angle","","",30,N],[3,"GradientStopRepr","","",N,N],[12,"color","","",31,N],[12,"offset","","",31,N],[4,"UnitRepr","","",N,N],[13,"Length","","",32,N],[13,"Angle","","",32,N],[5,"transform_parse","","",N,N],[5,"unit","","",N,N],[5,"length","","",N,N],[5,"angle","","",N,N],[5,"gradient_stop","","",N,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["unitrepr"]]],[11,"eq","","",32,[[["self"],["unitrepr"]],["bool"]]],[11,"ne","","",32,[[["self"],["unitrepr"]],["bool"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["lengthrepr"]]],[11,"eq","","",29,[[["self"],["lengthrepr"]],["bool"]]],[11,"ne","","",29,[[["self"],["lengthrepr"]],["bool"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["anglerepr"]]],[11,"eq","","",30,[[["self"],["anglerepr"]],["bool"]]],[11,"ne","","",30,[[["self"],["anglerepr"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["gradientstoprepr"]]],[11,"eq","","",31,[[["self"],["gradientstoprepr"]],["bool"]]],[11,"ne","","",31,[[["self"],["gradientstoprepr"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["gradientfunction"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["transformfunction"]]],[11,"eq","","",27,[[["self"],["transformfunction"]],["bool"]]],[11,"ne","","",27,[[["self"],["transformfunction"]],["bool"]]],[11,"serialize","jss::properties","",20,[[["self"],["s"]],["result"]]],[11,"deserialize","","",20,[[["d"]],["result",["transform"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["transform"]],["bool"]]],[11,"ne","","",20,[[["self"],["transform"]],["bool"]]],[11,"clone","","",20,[[["self"]],["transform"]]],[11,"is_none","","",20,[[["self"]],["bool"]]],[6,"PropertiesCollection","","",N,N],[6,"Transforms","","",N,N],[6,"Filters","","",N,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"default","","",17,[[],["apperance"]]],[11,"eq","","",17,[[["self"],["apperance"]],["bool"]]],[11,"ne","","",17,[[["self"],["apperance"]],["bool"]]],[11,"clone","","",17,[[["self"]],["apperance"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]]],"paths":[[3,"StyleProperties"],[3,"Style"],[3,"ParseOptions"],[4,"PropertyCase"],[4,"ParseTarget"],[4,"RecursiveType"],[4,"ParseError"],[3,"Context"],[8,"PrepareStyleExt"],[8,"ParseStyleExt"],[3,"GradientStop"],[3,"Gradient"],[3,"BoxShadow"],[3,"BorderRadius"],[3,"Border"],[3,"BorderStyles"],[3,"Color"],[3,"Apperance"],[4,"Background"],[4,"Visibility"],[4,"Transform"],[4,"BorderStyle"],[4,"Cursor"],[4,"Filter"],[4,"Angle"],[4,"Length"],[4,"SharedUnit"],[3,"TransformFunction"],[3,"GradientFunction"],[3,"LengthRepr"],[3,"AngleRepr"],[3,"GradientStopRepr"],[4,"UnitRepr"]]};
searchIndex["jss_derive"]={"doc":"","items":[[5,"prepare_style","jss_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"merge_style","","",N,[[["tokenstream"]],["tokenstream"]]],[5,"parse_style","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N],[11,"into","","",131,[[["self"]],["u"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"],[4,"c_void"],[4,"FILE"],[4,"fpos_t"]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",N,N],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",N,N],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",N,N],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",N,N],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",N,N],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",N,N],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",N,N],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied Entry.",0,N],[13,"Vacant","","A vacant Entry.",0,N],[11,"new","","Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,[[["usize"],["s"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,[[["self"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["k"]],["entry"]]],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,[[["self"]],["entries"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,[[["self"],["k"],["v"]],["option"]]],[11,"contains_key","","Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,[[["self"],["q"]],["option"]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"pop_front","","Removes the first entry.",1,[[["self"]],["option"]]],[11,"front","","Gets the first entry.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last entry.",1,[[["self"]],["option"]]],[11,"back","","Gets the last entry.",1,[[["self"]],["option"]]],[11,"len","","Returns the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher","","Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear","","Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,[[["self"]],["itermut"]]],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,[[["self"]],["keys"]]],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,[[["self"]],["values"]]],[11,"index","","",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","",1,[[["self"],["q"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"drop","","",1,[[["self"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next","","",5,[[["self"]],["option",["occupiedentry"]]]],[11,"size_hint","","",5,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"drop","","",3,[[["self"]]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"key","","Returns the entry key",0,[[["self"]],["k"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"key","","Gets a reference to the entry key",8,[[["self"]],["k"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it",8,[[["self"]],["v"]]],[11,"key","","Gets a reference to the entry key",9,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,[[["self"],["v"]],["v"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",N,[[["box",["log"]]],["result",["setloggererror"]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["maplit"]={"doc":"Macros for container literals with specific type.","items":[[14,"hashmap","maplit","Create a HashMap from a list of key-value pairs",N,N],[14,"hashset","","Create a HashSet from a list of elements.",N,N],[14,"btreemap","","Create a BTreeMap from a list of key-value pairs",N,N],[14,"btreeset","","Create a BTreeSet from a list of elements.",N,N],[14,"convert_args","","Macro that converts the keys or key-value pairs passed to another maplit macro. The default conversion is to use the [`Into`] trait, if no custom conversion is passed.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",N,N],[3,"Memchr2","","An iterator for Memchr2",N,N],[3,"Memchr3","","An iterator for Memchr3",N,N],[5,"memchr","","A safe interface to `memchr`.",N,N],[5,"memrchr","","A safe interface to `memrchr`.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"]={"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",N,N],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",N,N]],"paths":[]};
searchIndex["nodrop"]={"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",N,N],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"NoDrop"]]};
searchIndex["nom"]={"doc":"nom, eating data byte by byte","items":[[4,"CompareResult","nom","indicates wether a comparison was successful, an error, or if more data was needed",N,N],[13,"Ok","","",0,N],[13,"Incomplete","","",0,N],[13,"Error","","",0,N],[4,"ErrorKind","","indicates which parser returned an error",N,N],[13,"Custom","","",1,N],[13,"Tag","","",1,N],[13,"MapRes","","",1,N],[13,"MapOpt","","",1,N],[13,"Alt","","",1,N],[13,"IsNot","","",1,N],[13,"IsA","","",1,N],[13,"SeparatedList","","",1,N],[13,"SeparatedNonEmptyList","","",1,N],[13,"Many0","","",1,N],[13,"Many1","","",1,N],[13,"ManyTill","","",1,N],[13,"Count","","",1,N],[13,"TakeUntilAndConsume","","",1,N],[13,"TakeUntil","","",1,N],[13,"TakeUntilEitherAndConsume","","",1,N],[13,"TakeUntilEither","","",1,N],[13,"LengthValue","","",1,N],[13,"TagClosure","","",1,N],[13,"Alpha","","",1,N],[13,"Digit","","",1,N],[13,"HexDigit","","",1,N],[13,"OctDigit","","",1,N],[13,"AlphaNumeric","","",1,N],[13,"Space","","",1,N],[13,"MultiSpace","","",1,N],[13,"LengthValueFn","","",1,N],[13,"Eof","","",1,N],[13,"ExprOpt","","",1,N],[13,"ExprRes","","",1,N],[13,"CondReduce","","",1,N],[13,"Switch","","",1,N],[13,"TagBits","","",1,N],[13,"OneOf","","",1,N],[13,"NoneOf","","",1,N],[13,"Char","","",1,N],[13,"CrLf","","",1,N],[13,"RegexpMatch","","",1,N],[13,"RegexpMatches","","",1,N],[13,"RegexpFind","","",1,N],[13,"RegexpCapture","","",1,N],[13,"RegexpCaptures","","",1,N],[13,"TakeWhile1","","",1,N],[13,"Complete","","",1,N],[13,"Fix","","",1,N],[13,"Escaped","","",1,N],[13,"EscapedTransform","","",1,N],[13,"TagStr","","",1,N],[13,"IsNotStr","","",1,N],[13,"IsAStr","","",1,N],[13,"TakeWhile1Str","","",1,N],[13,"NonEmpty","","",1,N],[13,"ManyMN","","",1,N],[13,"TakeUntilAndConsumeStr","","",1,N],[13,"TakeUntilStr","","",1,N],[13,"Not","","",1,N],[13,"Permutation","","",1,N],[13,"Verify","","",1,N],[13,"TakeTill1","","",1,N],[13,"TakeUntilAndConsume1","","",1,N],[13,"TakeWhileMN","","",1,N],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",N,N],[13,"Unknown","","needs more data, but we do not know how much",2,N],[13,"Size","","contains the required data size",2,N],[4,"Err","","The `Err` enum indicates the parser was not successful",N,N],[13,"Incomplete","","There was not enough data",3,N],[13,"Error","","The parser had an error (recoverable)",3,N],[13,"Failure","","The parser had an unrecoverable error: we got to the right branch and we know other branches won't work, so backtrack as fast as possible",3,N],[4,"Endianness","","Configurable endianness",N,N],[13,"Big","","",4,N],[13,"Little","","",4,N],[5,"need_more","","",N,[[["i"],["needed"]],["iresult"]]],[5,"need_more_err","","",N,[[["i"],["needed"],["errorkind"]],["iresult"]]],[5,"slice_to_offsets","","",N,N],[5,"code_from_offset","","",N,N],[5,"reset_color","","",N,[[["vec"]]]],[5,"write_color","","",N,[[["vec"],["u8"]]]],[5,"print_codes","","",N,[[["hashmap"],["hashmap"]],["string"]]],[5,"error_to_u32","","",N,[[["errorkind"]],["u32"]]],[5,"newline","","Matches a newline character '\\n'",N,N],[5,"tab","","Matches a tab character '\\t'",N,N],[5,"anychar","","matches one byte as a character. Note that the input type will accept a `str`, but not a `&[u8]`, unlike many other nom parsers.",N,[[["t"]],["iresult",["char"]]]],[5,"tag_cl","","",N,N],[5,"print","","",N,[[["t"]],["iresult"]]],[5,"begin","","",N,N],[5,"crlf","","",N,[[["t"]],["iresult"]]],[5,"not_line_ending","","",N,[[["t"]],["iresult"]]],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",N,[[["t"]],["iresult"]]],[5,"eol","","",N,[[["t"]],["iresult"]]],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",N,[[["u8"]],["bool"]]],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",N,[[["u8"]],["bool"]]],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",N,[[["u8"]],["bool"]]],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",N,[[["u8"]],["bool"]]],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",N,[[["u8"]],["bool"]]],[5,"is_space","","Tests if byte is ASCII space or tab",N,[[["u8"]],["bool"]]],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult",["u32"]]]],[5,"alpha0","","Recognizes zero or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult",["u32"]]]],[5,"alpha1","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult",["u32"]]]],[5,"digit","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"digit0","","Recognizes zero or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"digit1","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"hex_digit0","","Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"hex_digit1","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"oct_digit0","","Recognizes zero or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"oct_digit1","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"alphanumeric0","","Recognizes zero or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"alphanumeric1","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"space","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"space0","","Recognizes zero or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"space1","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"multispace0","","Recognizes zero or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"multispace1","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"sized_buffer","","",N,N],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",N,N],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",N,N],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",N,N],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",N,N],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",N,N],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",N,N],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",N,N],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",N,N],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",N,N],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",N,N],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",N,N],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",N,N],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",N,N],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",N,N],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",N,N],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",N,N],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",N,N],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",N,N],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",N,N],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",N,N],[5,"hex_u32","","Recognizes a hex-encoded integer",N,N],[5,"non_empty","","Recognizes non empty buffers",N,[[["t"]],["iresult"]]],[5,"rest","","Return the remaining input.",N,[[["t"]],["iresult"]]],[5,"rest_s","","Return the remaining input, for strings.",N,[[["str"]],["iresult",["str","str"]]]],[5,"recognize_float","","",N,[[["t"]],["iresult",["u32"]]]],[5,"float","","Recognizes floating point number in a byte string and returns a f32",N,N],[5,"float_s","","Recognizes floating point number in a string and returns a f32",N,[[["str"]],["iresult",["str","f32"]]]],[5,"double","","Recognizes floating point number in a byte string and returns a f64",N,N],[5,"double_s","","Recognizes floating point number in a string and returns a f64",N,[[["str"]],["iresult",["str","f64"]]]],[0,"lib","","Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does it, albeit there it is not public.",N,N],[0,"std","nom::lib","",N,N],[0,"boxed","nom::lib::std","A pointer type for heap allocation.",N,N],[3,"Box","nom::lib::std::boxed","A pointer type for heap allocation.",N,N],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",N,N],[16,"Output","","",5,N],[10,"call_box","","",5,N],[3,"PinBox","","A pinned, heap allocated reference.",N,N],[0,"cmp","nom::lib::std","Functionality for ordering and comparison.",N,N],[8,"PartialEq","nom::lib::std::cmp","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",6,[[["self"],["rhs"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",N,N],[13,"Less","","An ordering where a compared value is less [than another].",7,N],[13,"Equal","","An ordering where a compared value is equal [to another].",7,N],[13,"Greater","","An ordering where a compared value is greater [than another].",7,N],[3,"Reverse","","A helper struct for reverse ordering.",N,N],[12,"0","","",8,N],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,[[["self"],["rhs"]],["bool"]]],[5,"min","","Compares and returns the minimum of two values.",N,[[["t"],["t"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",N,[[["t"],["t"]],["t"]]],[0,"collections","nom::lib::std","Collection types.",N,N],[0,"hash_map","nom::lib::std::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",N,N],[3,"VacantEntry","nom::lib::std::collections::hash_map","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over the entries of a `HashMap`.",N,N],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Occupied","","An occupied entry.",11,N],[13,"Vacant","","A vacant entry.",11,N],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",N,N],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",N,N],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",N,N],[3,"Keys","","An iterator over the keys of a `HashMap`.",N,N],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",N,N],[3,"Values","","An iterator over the values of a `HashMap`.",N,N],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",N,N],[3,"HashMap","","A hash map implemented with linear probing and Robin Hood bucket stealing.",N,N],[0,"hash_set","nom::lib::std::collections","A hash set implemented as a `HashMap` where the value is `()`.",N,N],[3,"SymmetricDifference","nom::lib::std::collections::hash_set","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",N,N],[3,"Iter","","An iterator over the items of a `HashSet`.",N,N],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",N,N],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",N,N],[3,"Drain","","A draining iterator over the items of a `HashSet`.",N,N],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",N,N],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",N,N],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",N,N],[0,"btree_set","nom::lib::std::collections","A set based on a B-Tree.",N,N],[3,"Range","nom::lib::std::collections::btree_set","An iterator over a sub-range of items in a `BTreeSet`.",N,N],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",N,N],[3,"Iter","","An iterator over the items of a `BTreeSet`.",N,N],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",N,N],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",N,N],[3,"BTreeSet","","A set based on a B-Tree.",N,N],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",N,N],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",N,N],[3,"BinaryHeap","nom::lib::std::collections","A priority queue implemented with a binary heap.",N,N],[0,"vec_deque","","A double-ended queue implemented with a growable ring buffer.",N,N],[3,"VecDeque","nom::lib::std::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",N,N],[3,"Iter","","An iterator over the elements of a `VecDeque`.",N,N],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",N,N],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",N,N],[0,"btree_map","nom::lib::std::collections","A map based on a B-Tree.",N,N],[3,"OccupiedEntry","nom::lib::std::collections::btree_map","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",N,N],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"BTreeMap","","A map based on a B-Tree.",N,N],[3,"Values","","An iterator over the values of a `BTreeMap`.",N,N],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant entry.",12,N],[13,"Occupied","","An occupied entry.",12,N],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",N,N],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",N,N],[0,"binary_heap","nom::lib::std::collections","A priority queue implemented with a binary heap.",N,N],[3,"PeekMut","nom::lib::std::collections::binary_heap","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",N,N],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",N,N],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",N,N],[4,"Bound","nom::lib::std::collections","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",13,N],[13,"Excluded","","An exclusive bound.",13,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",13,N],[0,"linked_list","","A doubly-linked list with owned nodes.",N,N],[3,"LinkedList","nom::lib::std::collections::linked_list","A doubly-linked list with owned nodes.",N,N],[3,"Iter","","An iterator over the elements of a `LinkedList`.",N,N],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",N,N],[4,"CollectionAllocErr","nom::lib::std::collections","Augments `AllocErr` with a CapacityOverflow variant.",N,N],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the collection's maximum (usually `isize::MAX` bytes).",14,N],[13,"AllocErr","","Error due to the allocator (see the `AllocErr` type's docs).",14,N],[0,"convert","nom::lib::std","Traits for conversions between types.",N,N],[8,"AsRef","nom::lib::std::convert","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",16,[[["self"]],["t"]]],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",18,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",N,N],[16,"Error","","The type returned in the event of a conversion error.",19,N],[10,"try_into","","Performs the conversion.",19,[[["self"]],["result"]]],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",N,N],[16,"Error","","The type returned in the event of a conversion error.",20,N],[10,"try_from","","Performs the conversion.",20,[[["t"]],["result"]]],[0,"fmt","nom::lib::std","Utilities for formatting and printing `String`s.",N,N],[5,"format","nom::lib::std::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",N,[[["arguments"]],["string"]]],[8,"Pointer","","`p` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",21,[[["self"],["formatter"]],["result",["error"]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"Display","","Format trait for an empty format, `{}`.",N,N],[10,"fmt","","Formats the value using the given formatter.",22,[[["self"],["formatter"]],["result",["error"]]]],[3,"Error","","The error type which is returned from formatting a message into a stream.",N,N],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",N,N],[4,"Alignment","","Possible alignments returned by `Formatter::align`",N,N],[13,"Left","","Indication that contents should be left-aligned.",23,N],[13,"Right","","Indication that contents should be right-aligned.",23,N],[13,"Center","","Indication that contents should be center-aligned.",23,N],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"Debug","","`?` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",24,[[["self"],["formatter"]],["result",["error"]]]],[8,"Write","","A collection of methods that are required to format a message into a stream.",N,N],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",25,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",25,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",25,[[["self"],["arguments"]],["result",["error"]]]],[8,"Octal","","`o` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",26,[[["self"],["formatter"]],["result",["error"]]]],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",N,N],[8,"UpperExp","","`E` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",27,[[["self"],["formatter"]],["result",["error"]]]],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",N,[[["write"],["arguments"]],["result",["error"]]]],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"UpperHex","","`X` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",28,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerExp","","`e` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",29,[[["self"],["formatter"]],["result",["error"]]]],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"Binary","","`b` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",30,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerHex","","`x` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",31,[[["self"],["formatter"]],["result",["error"]]]],[6,"Result","","The type returned by formatter methods.",N,N],[0,"hash","nom::lib::std","Generic hashing support.",N,N],[8,"Hash","nom::lib::std::hash","A hashable type.",N,N],[10,"hash","","Feeds this value into the given [`Hasher`].",32,N],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",32,N],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",N,N],[10,"finish","","Returns the hash value for the values written so far.",33,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",33,N],[11,"write_u8","","Writes a single `u8` into this hasher.",33,N],[11,"write_u16","","Writes a single `u16` into this hasher.",33,N],[11,"write_u32","","Writes a single `u32` into this hasher.",33,N],[11,"write_u64","","Writes a single `u64` into this hasher.",33,N],[11,"write_u128","","Writes a single `u128` into this hasher.",33,N],[11,"write_usize","","Writes a single `usize` into this hasher.",33,N],[11,"write_i8","","Writes a single `i8` into this hasher.",33,N],[11,"write_i16","","Writes a single `i16` into this hasher.",33,N],[11,"write_i32","","Writes a single `i32` into this hasher.",33,N],[11,"write_i64","","Writes a single `i64` into this hasher.",33,N],[11,"write_i128","","Writes a single `i128` into this hasher.",33,N],[11,"write_isize","","Writes a single `isize` into this hasher.",33,N],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",N,N],[16,"Hasher","","Type of the hasher that will be created.",34,N],[10,"build_hasher","","Creates a new hasher.",34,N],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[0,"iter","nom::lib::std","Composable external iteration.",N,N],[3,"Rev","nom::lib::std::iter","A double-ended iterator with the direction inverted.",N,N],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",N,N],[3,"Cycle","","An iterator that repeats endlessly.",N,N],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",N,N],[3,"Chain","","An iterator that strings two iterators together.",N,N],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",N,N],[3,"Map","","An iterator that maps the values of `iter` with `f`.",N,N],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",N,N],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",N,N],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",N,N],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",N,N],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",N,N],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",N,N],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",N,N],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",N,N],[3,"Scan","","An iterator to maintain state while iterating another iterator.",N,N],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",N,N],[3,"Flatten","","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.",N,N],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",N,N],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",N,N],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",N,N],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",35,[[["i"]],["self"]]],[3,"Empty","","An iterator that yields nothing.",N,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",36,N],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`.",N,N],[3,"Once","","An iterator that yields an element exactly once.",N,N],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",37,N],[10,"next","","Advances the iterator and returns the next value.",37,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",37,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",37,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",37,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",37,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",37,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",37,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",37,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",37,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",37,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",37,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",37,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",37,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",37,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",37,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",37,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",37,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",37,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",37,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",37,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",37,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",37,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",37,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",37,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",37,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",37,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",37,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",37,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",37,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",37,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",37,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",37,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",37,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",37,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",37,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",37,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",37,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",37,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",37,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",37,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",37,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",37,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",37,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",37,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",37,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",37,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",37,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",37,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",37,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",37,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",37,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",37,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",37,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",37,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",37,[[["self"],["i"]],["bool"]]],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",N,N],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",38,[[["i"]],["self"]]],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",N,N],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",39,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",39,N],[10,"into_iter","","Creates an iterator from a value.",39,N],[5,"empty","","Creates an iterator that yields nothing.",N,[[],["empty"]]],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",N,N],[8,"FromIterator","","Conversion from an `Iterator`.",N,N],[10,"from_iter","","Creates a value from an iterator.",40,[[["t"]],["self"]]],[8,"Step","","Objects that can be stepped over in both directions.",N,N],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",41,[[["self"],["self"]],["option",["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning itself",41,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning itself",41,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result",41,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result",41,[[["self"]],["self"]]],[10,"add_usize","","Add an usize, returning None on overflow",41,[[["self"],["usize"]],["option"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",42,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",42,[[["self"]],["bool"]]],[5,"once","","Creates an iterator that yields an element exactly once.",N,[[["t"]],["once"]]],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",43,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",43,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",43,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",43,[[["self"],["p"]],["option"]]],[3,"Repeat","","An iterator that repeats an element endlessly.",N,N],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",N,[[["t"]],["repeat"]]],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`.",N,[[["f"]],["repeatwith"]]],[0,"mem","nom::lib::std","Basic functions for dealing with memory.",N,N],[5,"forget","nom::lib::std::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",N,N],[5,"size_of","","Returns the size of a type in bytes.",N,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",N,[[],["bool"]]],[5,"zeroed","","Creates a value whose bytes are all zero.",N,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",N,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",N,N],[5,"replace","","Moves `src` into the referenced `dest`, returning the previous `dest` value.",N,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",N,N],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",N,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",N,N],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",N,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",N,N],[3,"PinMut","","A pinned reference.",N,N],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[0,"ops","nom::lib::std","Overloadable operators.",N,N],[8,"RemAssign","nom::lib::std::ops","The remainder assignment operator `%=`.",N,N],[10,"rem_assign","","Performs the `%=` operation.",44,N],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",45,N],[8,"BitOr","","The bitwise OR operator `|`.",N,N],[16,"Output","","The resulting type after applying the `|` operator.",46,N],[10,"bitor","","Performs the `|` operation.",46,N],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[10,"start_bound","","Start index bound.",47,[[["self"]],["bound"]]],[10,"end_bound","","End index bound.",47,[[["self"]],["bound"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",47,[[["self"],["u"]],["bool"]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",N,N],[10,"sub_assign","","Performs the `-=` operation.",48,N],[8,"Add","","The addition operator `+`.",N,N],[16,"Output","","The resulting type after applying the `+` operator.",49,N],[10,"add","","Performs the `+` operation.",49,N],[8,"Try","","A trait for customizing the behavior of the `?` operator.",N,N],[16,"Ok","","The type of this value when viewed as successful.",50,N],[16,"Error","","The type of this value when viewed as failed.",50,N],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",50,[[["self"]],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",50,N],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",50,N],[8,"Neg","","The unary negation operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",51,N],[10,"neg","","Performs the unary `-` operation.",51,N],[8,"Not","","The unary logical negation operator `!`.",N,N],[16,"Output","","The resulting type after applying the `!` operator.",52,N],[10,"not","","Performs the unary `!` operation.",52,N],[8,"Rem","","The remainder operator `%`.",N,N],[16,"Output","","The resulting type after applying the `%` operator.",53,N],[10,"rem","","Performs the `%` operation.",53,N],[8,"Shr","","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `>>` operator.",54,N],[10,"shr","","Performs the `>>` operation.",54,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",N,N],[10,"deref_mut","","Mutably dereferences the value.",55,N],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",N,N],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",56,N],[8,"BitAnd","","The bitwise AND operator `&`.",N,N],[16,"Output","","The resulting type after applying the `&` operator.",57,N],[10,"bitand","","Performs the `&` operation.",57,N],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",N,N],[12,"end","","The upper bound of the range (inclusive)",58,N],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",N,N],[12,"end","","The upper bound of the range (exclusive).",59,N],[4,"GeneratorState","","The result of a generator resumption.",N,N],[13,"Yielded","","The generator suspended with a value.",60,N],[13,"Complete","","The generator completed with a return value.",60,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",61,N],[10,"call_once","","Performs the call operation.",61,N],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",62,N],[10,"deref","","Dereferences the value.",62,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",63,N],[8,"Sub","","The subtraction operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",64,N],[10,"sub","","Performs the `-` operation.",64,N],[8,"Generator","","The trait implemented by builtin generator types.",N,N],[16,"Yield","","The type of value this generator yields.",65,N],[16,"Return","","The type of value this generator returns.",65,N],[10,"resume","","Resumes the execution of this generator.",65,[[["self"]],["generatorstate"]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",N,N],[10,"bitxor_assign","","Performs the `^=` operation.",66,N],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",67,N],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",N,N],[16,"Output","","The returned type after indexing.",68,N],[10,"index","","Performs the indexing (`container[index]`) operation.",68,N],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",N,N],[10,"bitor_assign","","Performs the `|=` operation.",69,N],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",N,N],[8,"ShrAssign","","The right shift assignment operator `>>=`.",N,N],[10,"shr_assign","","Performs the `>>=` operation.",70,N],[3,"RangeFull","","An unbounded range (`..`).",N,N],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",N,N],[10,"bitand_assign","","Performs the `&=` operation.",71,N],[8,"MulAssign","","The multiplication assignment operator `*=`.",N,N],[10,"mul_assign","","Performs the `*=` operation.",72,N],[8,"Div","","The division operator `/`.",N,N],[16,"Output","","The resulting type after applying the `/` operator.",73,N],[10,"div","","Performs the `/` operation.",73,N],[8,"ShlAssign","","The left shift assignment operator `<<=`.",N,N],[10,"shl_assign","","Performs the `<<=` operation.",74,N],[8,"AddAssign","","The addition assignment operator `+=`.",N,N],[10,"add_assign","","Performs the `+=` operation.",75,N],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",N,N],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",N,N],[12,"start","","The lower bound of the range (inclusive).",76,N],[8,"Shl","","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `<<` operator.",77,N],[10,"shl","","Performs the `<<` operation.",77,N],[8,"DivAssign","","The division assignment operator `/=`.",N,N],[10,"div_assign","","Performs the `/=` operation.",78,N],[8,"Mul","","The multiplication operator `*`.",N,N],[16,"Output","","The resulting type after applying the `*` operator.",79,N],[10,"mul","","Performs the `*` operation.",79,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",13,N],[13,"Excluded","","An exclusive bound.",13,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",13,N],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",N,N],[12,"start","","The lower bound of the range (inclusive).",80,N],[12,"end","","The upper bound of the range (exclusive).",80,N],[8,"BitXor","","The bitwise XOR operator `^`.",N,N],[16,"Output","","The resulting type after applying the `^` operator.",81,N],[10,"bitxor","","Performs the `^` operation.",81,N],[0,"option","nom::lib::std","Optional values.",N,N],[4,"Option","nom::lib::std::option","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",82,N],[13,"Some","","Some value `T`",82,N],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",N,N],[0,"result","nom::lib::std","Error handling with the `Result` type.",N,N],[4,"Result","nom::lib::std::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",83,N],[13,"Err","","Contains the error value",83,N],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",N,N],[0,"slice","nom::lib::std","A dynamically-sized view into a contiguous sequence, `[T]`.",N,N],[8,"SliceConcatExt","nom::lib::std::slice","An extension trait for concatenating slices",N,N],[16,"Output","","The resulting type after concatenation",84,N],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",84,N],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",84,N],[10,"connect","","",84,N],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[5,"from_mut","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",N,N],[3,"IterMut","","Mutable slice iterator.",N,N],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",N,N],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",N,N],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",N,N],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",N,N],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",N,N],[8,"SliceIndex","","A helper trait used for indexing operations.",N,N],[16,"Output","","The output type returned by methods.",85,N],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",85,[[["self"],["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",85,[[["self"],["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",85,N],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",85,N],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",85,N],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",85,N],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"Iter","","Immutable slice iterator",N,N],[3,"Windows","","An iterator over overlapping subslices of length `size`.",N,N],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",N,N],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time).",N,N],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[0,"str","nom::lib::std","Unicode string slices.",N,N],[5,"from_boxed_utf8_unchecked","nom::lib::std::str","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",N,[[["box"]],["box",["str"]]]],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",N,N],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",N,N],[3,"SplitN","","Created with the method [`splitn`].",N,N],[3,"Lines","","An iterator over the lines of a string, as string slices.",N,N],[3,"Bytes","","An iterator over the bytes of a string slice.",N,N],[3,"Split","","Created with the method [`split`].",N,N],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",N,N],[5,"from_utf8","","Converts a slice of bytes to a string slice.",N,N],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[0,"pattern","","The string Pattern API.",N,N],[8,"Pattern","nom::lib::std::str::pattern","A string pattern.",N,N],[16,"Searcher","","Associated searcher for this pattern",86,N],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",86,N],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",86,[[["self"],["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",86,[[["self"],["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",86,[[["self"],["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",N,N],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",87,N],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",87,N],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",87,N],[8,"Searcher","","A searcher for a string pattern.",N,N],[10,"haystack","","Getter for the underlying string to be searched in",88,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",88,[[["self"]],["searchstep"]]],[11,"next_match","","Find the next `Match` result. See `next()`",88,[[["self"]],["option"]]],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",88,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",N,N],[10,"next_back","","Performs the next search step starting from the back.",89,[[["self"]],["searchstep"]]],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",89,[[["self"]],["option"]]],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",89,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",N,N],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",N,N],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",N,N],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",N,N],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",N,N],[3,"RSplitTerminator","nom::lib::std::str","Created with the method [`rsplit_terminator`].",N,N],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",N,N],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",N,N],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",N,N],[16,"Err","","The associated error which can be returned from parsing.",90,N],[10,"from_str","","Parses a string `s` to return a value of this type.",90,[[["str"]],["result"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",N,N],[3,"SplitTerminator","","Created with the method [`split_terminator`].",N,N],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",N,N],[3,"MatchIndices","","Created with the method [`match_indices`].",N,N],[3,"LinesAny","","Created with the method [`lines_any`].",N,N],[3,"Chars","","An iterator over the [`char`]s of a string slice.",N,N],[3,"RSplit","","Created with the method [`rsplit`].",N,N],[3,"RMatches","","Created with the method [`rmatches`].",N,N],[3,"RSplitN","","Created with the method [`rsplitn`].",N,N],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.",N,N],[3,"Matches","","Created with the method [`matches`].",N,N],[0,"string","nom::lib::std","A UTF-8 encoded, growable string.",N,N],[3,"String","nom::lib::std::string","A UTF-8 encoded, growable string.",N,N],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",N,N],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",N,N],[4,"ParseError","","An error when parsing a `String`.",N,N],[8,"ToString","","A trait for converting a value to a `String`.",N,N],[10,"to_string","","Converts the given value to a `String`.",91,[[["self"]],["string"]]],[3,"Drain","","A draining iterator for `String`.",N,N],[0,"vec","nom::lib::std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",N,N],[3,"Vec","nom::lib::std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[3,"IntoIter","","An iterator that moves out of a vector.",N,N],[3,"Drain","","A draining iterator for `Vec<T>`.",N,N],[3,"Splice","","A splicing iterator for `Vec`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",N,N],[0,"prelude","nom::lib::std","",N,N],[0,"v1","nom::lib::std::prelude","The Rust Prelude.",N,N],[0,"v1","nom::lib::std::prelude::v1","The first version of the prelude of The Rust Standard Library.",N,N],[8,"Send","nom::lib::std::prelude::v1::v1","Types that can be transferred across thread boundaries.",N,N],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",67,N],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",N,N],[10,"clone","","Returns a copy of the value.",92,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",92,N],[3,"String","","A UTF-8 encoded, growable string.",N,N],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",N,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",36,N],[4,"Option","","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",82,N],[13,"Some","","Some value `T`",82,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",63,N],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"SliceConcatExt","","An extension trait for concatenating slices",N,N],[16,"Output","","The resulting type after concatenation",84,N],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",84,N],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",84,N],[10,"connect","","",84,N],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",42,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",42,[[["self"]],["bool"]]],[8,"Sync","","Types for which it is safe to share references between threads.",N,N],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",83,N],[13,"Err","","Contains the error value",83,N],[5,"drop","","Disposes of a value.",N,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",61,N],[10,"call_once","","Performs the call operation.",61,N],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,[[["self"],["rhs"]],["bool"]]],[8,"Sized","","Types with a constant size known at compile time.",N,N],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",37,N],[10,"next","","Advances the iterator and returns the next value.",37,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",37,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",37,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",37,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",37,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",37,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",37,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",37,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",37,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",37,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",37,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",37,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",37,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",37,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",37,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",37,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",37,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",37,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",37,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",37,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",37,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",37,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",37,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",37,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",37,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",37,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",37,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",37,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",37,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",37,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",37,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",37,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",37,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",37,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",37,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",37,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",37,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",37,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",37,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",37,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",37,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",37,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",37,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",37,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",37,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",37,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",37,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",37,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",37,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",37,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",37,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",37,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",37,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",37,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",37,[[["self"],["i"]],["bool"]]],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",N,N],[16,"Owned","","",93,N],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",93,N],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",93,N],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",45,N],[8,"Default","","A trait for giving a type a useful default value.",N,N],[10,"default","","Returns the \"default value\" for a type.",94,[[],["self"]]],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",16,[[["self"]],["t"]]],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",43,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",43,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",43,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",43,[[["self"],["p"]],["option"]]],[3,"Box","","A pointer type for heap allocation.",N,N],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",6,[[["self"],["rhs"]],["bool"]]],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",18,[[["t"]],["self"]]],[8,"ToString","","A trait for converting a value to a `String`.",N,N],[10,"to_string","","Converts the given value to a `String`.",91,[[["self"]],["string"]]],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",39,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",39,N],[10,"into_iter","","Creates an iterator from a value.",39,N],[11,"fmt","nom","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"into_error_kind","","Convert Err into an ErrorKind.",1,[[["self"]],["errorkind"]]],[11,"convert","","",1,[[["errorkind"]],["self"]]],[0,"simple_errors","","Error management",N,N],[4,"Context","nom::simple_errors","",N,N],[13,"Code","","",95,N],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["context"]]],[11,"eq","","",95,[[["self"],["context"]],["bool"]]],[11,"ne","","",95,[[["self"],["context"]],["bool"]]],[11,"convert","","",95,[[["context"]],["self"]]],[11,"into_error_kind","","Convert Err into ErrorKind.",95,[[["self"]],["errorkind"]]],[11,"fmt","nom","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["needed"]],["bool"]]],[11,"ne","","",2,[[["self"],["needed"]],["bool"]]],[11,"clone","","",2,[[["self"]],["needed"]]],[11,"is_known","","",2,[[["self"]],["bool"]]],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,[[["self"],["f"]],["needed"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["err"]]],[11,"eq","","",3,[[["self"],["err"]],["bool"]]],[11,"ne","","",3,[[["self"],["err"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"convert","","",3,[[["err"]],["self"]]],[11,"into_error_kind","","",3,[[["self"]],["errorkind"]]],[11,"is_incomplete","","",3,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["compareresult"]],["bool"]]],[0,"methods","","Method macro combinators",N,N],[0,"bits","","Bit level parsers and combinators",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["endianness"]],["bool"]]],[11,"clone","","",4,[[["self"]],["endianness"]]],[0,"whitespace","","Support for whitespace delimited formats",N,N],[5,"sp","nom::whitespace","",N,[[["t"]],["iresult"]]],[0,"types","nom","Custom input types",N,N],[3,"CompleteStr","nom::types","Holds a complete String, for which the `at_eof` method always returns true",N,N],[12,"0","","",96,N],[3,"CompleteByteSlice","","Holds a complete byte array, for which the `at_eof` method always returns true",N,N],[12,"0","","",97,N],[3,"Input","","",N,N],[12,"inner","","",98,N],[12,"at_eof","","",98,N],[11,"clone","","",96,[[["self"]],["completestr"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["completestr"]],["bool"]]],[11,"ne","","",96,[[["self"],["completestr"]],["bool"]]],[11,"hash","","",96,N],[11,"from","","",96,[[["str"]],["self"]]],[11,"from","","",96,[[["str"]],["self"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",96,[[["self"]],["str"]]],[11,"deref","","",96,N],[11,"at_eof","","",96,[[["self"]],["bool"]]],[11,"slice","","",96,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",96,N],[11,"iter_elements","","",96,N],[11,"position","","",96,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",96,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",96,[[["self"],["usize"]],["self"]]],[11,"take_split","","",96,N],[11,"input_len","","",96,[[["self"]],["usize"]]],[11,"compare","","",96,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",96,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",96,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",96,[[["self"],["char"]],["bool"]]],[11,"find_token","","",96,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",96,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",96,[[["self"]],["option"]]],[11,"offset","","",96,[[["self"],["completestr"]],["usize"]]],[11,"as_bytes","","",96,N],[11,"new_builder","","",96,[[["self"]],["string"]]],[11,"extend_into","","",96,[[["self"],["string"]]]],[11,"clone","","",97,[[["self"]],["completebyteslice"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["completebyteslice"]],["bool"]]],[11,"ne","","",97,[[["self"],["completebyteslice"]],["bool"]]],[11,"hash","","",97,N],[11,"from","","",97,N],[11,"from","","",97,N],[11,"deref","","",97,N],[11,"at_eof","","",97,[[["self"]],["bool"]]],[11,"slice","","",97,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",97,N],[11,"iter_elements","","",97,N],[11,"position","","",97,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",97,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",97,[[["self"],["usize"]],["self"]]],[11,"take_split","","",97,N],[11,"input_len","","",97,[[["self"]],["usize"]]],[11,"compare","","",97,N],[11,"compare_no_case","","",97,N],[11,"compare","","",97,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",97,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",97,N],[11,"find_substring","","",97,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",97,[[["self"],["char"]],["bool"]]],[11,"find_token","","",97,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",97,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",97,[[["self"]],["option"]]],[11,"offset","","",97,[[["self"],["completebyteslice"]],["usize"]]],[11,"as_bytes","","",97,N],[11,"to_hex","","",97,[[["self"],["usize"]],["string"]]],[11,"to_hex_from","","",97,[[["self"],["usize"],["usize"]],["string"]]],[11,"clone","","",98,[[["self"]],["input"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["input"]],["bool"]]],[11,"ne","","",98,[[["self"],["input"]],["bool"]]],[11,"hash","","",98,N],[11,"at_eof","","",98,[[["self"]],["bool"]]],[11,"slice","","",98,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",98,N],[11,"iter_elements","","",98,N],[11,"position","","",98,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",98,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",98,[[["self"],["usize"]],["self"]]],[11,"take_split","","",98,N],[11,"input_len","","",98,[[["self"]],["usize"]]],[11,"compare","","",98,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",98,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",98,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",98,[[["self"],["char"]],["bool"]]],[11,"find_token","","",98,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",98,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",98,[[["self"]],["option"]]],[11,"offset","","",98,[[["self"],["input"]],["usize"]]],[11,"as_bytes","","",98,N],[6,"IResult","nom","Holds the result of parsing functions",N,N],[8,"InputLength","","abstract method to calculate the input length",N,N],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",99,[[["self"]],["usize"]]],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",N,N],[10,"offset","","offset between the first byte of self and the first byte of the argument",100,[[["self"],["self"]],["usize"]]],[8,"AsBytes","","casts the input type to a byte slice",N,N],[10,"as_bytes","","",101,N],[8,"AsChar","","transforms common types to a char for basic token parsing",N,N],[10,"as_char","","makes a char from self",102,[[["self"]],["char"]]],[10,"is_alpha","","tests that self is an alphabetic character",102,[[["self"]],["bool"]]],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",102,[[["self"]],["bool"]]],[10,"is_dec_digit","","tests that self is a decimal digit",102,[[["self"]],["bool"]]],[10,"is_hex_digit","","tests that self is an hex digit",102,[[["self"]],["bool"]]],[10,"is_oct_digit","","tests that self is an octal digit",102,[[["self"]],["bool"]]],[10,"len","","gets the len in bytes for self",102,[[["self"]],["usize"]]],[8,"InputIter","","abstracts common iteration operations on the input type",N,N],[16,"Item","","",103,N],[16,"RawItem","","",103,N],[16,"Iter","","",103,N],[16,"IterElem","","",103,N],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",103,N],[10,"iter_elements","","returns an iterator over the elements",103,N],[10,"position","","finds the byte position of the element",103,[[["self"],["p"]],["option",["usize"]]]],[10,"slice_index","","get the byte offset from the element's position in the stream",103,[[["self"],["usize"]],["option",["usize"]]]],[8,"InputTake","","abstracts slicing operations",N,N],[10,"take","","returns a slice of `count` bytes. panics if count > length",104,[[["self"],["usize"]],["self"]]],[10,"take_split","","split the stream at the `count` byte offset. panics if count > length",104,N],[8,"UnspecializedInput","","Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).",N,N],[8,"InputTakeAtPosition","","methods to take as much input as possible until the provided function returns true for the current element",N,N],[16,"Item","","",105,N],[10,"split_at_position","","",105,[[["self"],["p"]],["iresult",["u32"]]]],[10,"split_at_position1","","",105,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[8,"Compare","","abstracts comparison operations",N,N],[10,"compare","","compares self to another value for equality",106,[[["self"],["t"]],["compareresult"]]],[10,"compare_no_case","","compares self to another value for equality independently of the case.",106,[[["self"],["t"]],["compareresult"]]],[8,"FindToken","","look for self in the given input stream",N,N],[10,"find_token","","",107,[[["self"],["t"]],["bool"]]],[8,"FindSubstring","","look for a substring in self",N,N],[10,"find_substring","","",108,[[["self"],["t"]],["option",["usize"]]]],[8,"ParseTo","","used to integrate str's parse() method",N,N],[10,"parse_to","","",109,[[["self"]],["option"]]],[8,"Slice","","slicing operations using ranges",N,N],[10,"slice","","",110,[[["self"],["r"]],["self"]]],[8,"AtEof","","indicates whether more data can come later in input",N,N],[10,"at_eof","","",111,[[["self"]],["bool"]]],[8,"ExtendInto","","abtracts something which can extend an `Extend`",N,N],[16,"Item","","",112,N],[16,"Extender","","",112,N],[10,"new_builder","","create a new `Extend` of the correct type",112,N],[10,"extend_into","","accumulate the input into an accumulator",112,N],[8,"HexDisplay","","",N,N],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",113,[[["self"],["usize"]],["string"]]],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",113,[[["self"],["usize"],["usize"]],["string"]]],[8,"Convert","","",N,N],[10,"convert","","",114,[[["t"]],["self"]]],[14,"dbg","","Prints a message if the parser fails",N,N],[14,"dbg_dmp","","Prints a message and the input if the parser fails",N,N],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",N,N],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",N,N],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"closure","","Wraps a parser in a closure",N,N],[14,"named","","Makes a function from a parser combination",N,N],[14,"named_args","","Makes a function from a parser combination with arguments.",N,N],[14,"named_attr","","Makes a function from a parser combination, with attributes",N,N],[14,"call","","Used to wrap common expressions and function as macros",N,N],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",N,N],[14,"return_error","","Prevents backtracking if the child parser fails",N,N],[14,"add_return_error","","Add an error if the child parser fails",N,N],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",N,N],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Ok`, and will do an early return for the `Err` side.",N,N],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",N,N],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",N,N],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",N,N],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",N,N],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",N,N],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",N,N],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a Ok((I,T)) if Ok",N,N],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a Ok((I,T)) if Some",N,N],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",N,N],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",N,N],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",N,N],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",N,N],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Err(Err::Incomplete) does not consume the input",N,N],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",N,N],[14,"eof","","`eof!()` returns its input if it is at the end of input data",N,N],[14,"exact","","`exact!()` will fail if the child parser does not consume the whole data",N,N],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",N,N],[14,"alt","","Try a list of parsers and return the result of the first successful one",N,N],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",N,N],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",N,N],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",N,N],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",N,N],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",N,N],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",N,N],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",N,N],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",N,N],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",N,N],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",N,N],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec.",N,N],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",N,N],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",N,N],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",N,N],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",N,N],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",N,N],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",N,N],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",N,N],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",N,N],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",N,N],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",N,N],[14,"method","","Makes a method from a parser combination",N,N],[14,"call_m","","Used to called methods then move self back into self",N,N],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",N,N],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",N,N],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",N,N],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",N,N],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",N,N],[14,"escaped","","`escaped!(T -> IResult<T, T>, U, T -> IResult<T, T>) => T -> IResult<T, T> where T: InputIter, U: AsChar` matches a byte string with escaped characters.",N,N],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",N,N],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",N,N],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",N,N],[14,"take_while_m_n","","`take_while_m_n!(m: usize, n: usize, T -> bool) => &[T] -> IResult<&[T], &[T]>` returns a list of bytes or characters for which the provided function returns true. the returned list's size will be at least m, and at most n",N,N],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",N,N],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",N,N],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",N,N],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",N,N],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",N,N],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",N,N],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag.",N,N],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds the specified tag",N,N],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either_and_consume1","","`take_until_either_and_consume1!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters",N,N],[14,"take_until_either1","","`take_until_either1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters",N,N],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",N,N],[14,"bits","","Transforms its byte slice input into a bit stream for the underlying parser. This allows the given bit stream parser to work on a byte slice input.",N,N],[14,"bytes","","Counterpart to bits, bytes! transforms its bit stream input into a byte slice for the underlying parser, allowing byte-slice parsers to work on bit streams.",N,N],[14,"take_bits","","Consumes the specified number of bits and returns them as the specified type.",N,N],[14,"tag_bits","","Matches the given bit pattern.",N,N],[14,"one_of","","matches one of the provided characters",N,N],[14,"none_of","","matches anything but the provided characters",N,N],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",N,N],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",N,N],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",N,N],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",N,N],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",N,N],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",N,N],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",N,N],[14,"wrap_sep","","",N,N],[14,"eat_separator","","helper macros to build a separator parser",N,N],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",N,N],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",N,N],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",N,N],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",N,N],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",N,N],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",N,N],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",N,N],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",N,N],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",N,N],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",N,N],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",N,N],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",N,N],[11,"new","nom::lib::std::prelude::v1::v1","Allocates memory on the heap and then places `x` into it.",115,[[["t"]],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",115,N],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",115,N],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",115,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Note that the type `T` must outlive the chosen lifetime `'a`. If the type has only static references, or none at all, then this may be chosen to be `'static`.",115,[[["box"]],["t"]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,[[["self"]],["result",["box","box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,[[["self"]],["result",["box","box"]]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"to_string","","",115,[[["self"]],["string"]]],[11,"into_iter","","",115,[[["self"]],["i"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"call_box","","",115,N],[11,"build_hasher","nom::lib::std::collections::hash_map","",116,[[["self"]],["defaulthasher"]]],[11,"to_socket_addrs","nom::lib::std::prelude::v1::v1","",117,[[["self"]],["result",["intoiter","error"]]]],[11,"description","","",115,[[["self"]],["str"]]],[11,"cause","","",115,[[["self"]],["option",["error"]]]],[11,"description","nom::lib::std::string","",118,[[["self"]],["str"]]],[11,"description","nom::lib::std::str","",119,[[["self"]],["str"]]],[11,"description","","",120,[[["self"]],["str"]]],[11,"description","nom::lib::std::string","",121,[[["self"]],["str"]]],[11,"description","","",122,[[["self"]],["str"]]],[11,"description","nom::lib::std::fmt","",123,[[["self"]],["str"]]],[11,"into_iter","nom::lib::std::collections::hash_map","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",124,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::hash_set","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",125,[[["self"]],["intoiter"]]],[11,"write","nom::lib::std::collections::hash_map","",126,N],[11,"finish","","",126,[[["self"]],["u64"]]],[11,"next","nom::lib::std::collections::hash_set","",127,[[["self"]],["option"]]],[11,"size_hint","","",127,N],[11,"next","nom::lib::std::collections::hash_map","",128,[[["self"]],["option"]]],[11,"size_hint","","",128,N],[11,"next","nom::lib::std::collections::hash_set","",129,[[["self"]],["option"]]],[11,"size_hint","","",129,N],[11,"next","nom::lib::std::collections::hash_map","",130,[[["self"]],["option"]]],[11,"size_hint","","",130,N],[11,"next","nom::lib::std::collections::hash_set","",131,[[["self"]],["option"]]],[11,"size_hint","","",131,N],[11,"next","","",132,[[["self"]],["option"]]],[11,"size_hint","","",132,N],[11,"next","","",133,[[["self"]],["option"]]],[11,"size_hint","","",133,N],[11,"next","nom::lib::std::collections::hash_map","",134,[[["self"]],["option"]]],[11,"size_hint","","",134,N],[11,"next","","",135,[[["self"]],["option"]]],[11,"size_hint","","",135,N],[11,"next","","",136,[[["self"]],["option"]]],[11,"size_hint","","",136,N],[11,"next","nom::lib::std::collections::hash_set","",137,[[["self"]],["option"]]],[11,"size_hint","","",137,N],[11,"next","nom::lib::std::collections::hash_map","",138,[[["self"]],["option"]]],[11,"size_hint","","",138,N],[11,"next","","",139,[[["self"]],["option"]]],[11,"size_hint","","",139,N],[11,"next","nom::lib::std::collections::hash_set","",140,[[["self"]],["option"]]],[11,"size_hint","","",140,N],[11,"extend","","",125,N],[11,"extend","nom::lib::std::collections::hash_map","",124,N],[11,"extend","nom::lib::std::collections::hash_set","",125,N],[11,"extend","nom::lib::std::collections::hash_map","",124,N],[11,"fmt","","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","nom::lib::std::collections::hash_set","",127,[[["self"]],["symmetricdifference"]]],[11,"clone","","",125,[[["self"]],["hashset"]]],[11,"clone","","",137,[[["self"]],["intersection"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["cstr"]]]],[11,"clone","nom::lib::std::collections::hash_map","",124,[[["self"]],["hashmap"]]],[11,"clone","nom::lib::std::collections::hash_set","",140,[[["self"]],["difference"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["path"]]]],[11,"clone","","",115,[[["self"]],["box",["osstr"]]]],[11,"clone","nom::lib::std::collections::hash_map","",135,[[["self"]],["values"]]],[11,"clone","","",126,[[["self"]],["defaulthasher"]]],[11,"clone","","",130,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::hash_set","",129,[[["self"]],["union"]]],[11,"clone","nom::lib::std::collections::hash_map","",139,[[["self"]],["keys"]]],[11,"clone","","",116,[[["self"]],["randomstate"]]],[11,"clone","nom::lib::std::collections::hash_set","",132,[[["self"]],["iter"]]],[11,"report","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["i32"]]],[11,"report","","",83,[[["self"]],["i32"]]],[11,"len","nom::lib::std::collections::hash_set","",131,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_map","",130,[[["self"]],["usize"]]],[11,"len","","",134,[[["self"]],["usize"]]],[11,"len","","",136,[[["self"]],["usize"]]],[11,"len","","",139,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_set","",133,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_map","",135,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_set","",132,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_map","",138,[[["self"]],["usize"]]],[11,"len","","",128,[[["self"]],["usize"]]],[11,"fill_buf","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["result",["error"]]]],[11,"consume","","",115,N],[11,"read_until","","",115,[[["self"],["u8"],["vec"]],["result",["usize","error"]]]],[11,"read_line","","",115,[[["self"],["string"]],["result",["usize","error"]]]],[11,"seek","","",115,[[["self"],["seekfrom"]],["result",["u64","error"]]]],[11,"as_ref","","",117,[[["self"]],["path"]]],[11,"as_ref","","",117,[[["self"]],["osstr"]]],[11,"write","","",143,N],[11,"write_all","","",143,N],[11,"flush","","",143,[[["self"]],["result",["error"]]]],[11,"write","","",115,N],[11,"flush","","",115,[[["self"]],["result",["error"]]]],[11,"write_all","","",115,N],[11,"write_fmt","","",115,[[["self"],["arguments"]],["result",["error"]]]],[11,"eq","nom::lib::std::collections::hash_map","",124,[[["self"],["hashmap"]],["bool"]]],[11,"eq","nom::lib::std::collections::hash_set","",125,[[["self"],["hashset"]],["bool"]]],[11,"read","nom::lib::std::prelude::v1::v1","",115,N],[11,"initializer","","",115,[[["self"]],["initializer"]]],[11,"read_to_end","","",115,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","",115,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","",115,N],[11,"from_iter","nom::lib::std::collections::hash_set","",125,[[["i"]],["hashset"]]],[11,"from_iter","nom::lib::std::collections::hash_map","",124,[[["t"]],["hashmap"]]],[11,"from","nom::lib::std::prelude::v1::v1","",115,[[["string"]],["box",["error"]]]],[11,"from","","Converts a [`OsString`] into a [`Box`]`<OsStr>` without copying or allocating.",115,[[["osstring"]],["box",["osstr"]]]],[11,"from","","",115,[[["cow",["str"]]],["box",["error"]]]],[11,"from","","",115,[[["str"]],["box",["error"]]]],[11,"from","","",115,[[["str"]],["box",["error"]]]],[11,"from","","",115,[[["e"]],["box",["error"]]]],[11,"from","","",115,[[["cstr"]],["box",["cstr"]]]],[11,"from","","Converts a [`CString`] into a [`Vec`]`<u8>`.",143,[[["cstring"]],["vec",["u8"]]]],[11,"from","","",115,[[["cow",["str"]]],["box",["error"]]]],[11,"from","","",115,[[["path"]],["box",["path"]]]],[11,"from","","",115,[[["pathbuf"]],["box",["path"]]]],[11,"from","","",115,[[["string"]],["box",["error"]]]],[11,"from","","",115,[[["osstr"]],["box",["osstr"]]]],[11,"from","","Converts a [`CString`] into a [`Box`]`<CStr>` without copying or allocating.",115,[[["cstring"]],["box",["cstr"]]]],[11,"from","","",115,[[["e"]],["box",["error"]]]],[11,"index","nom::lib::std::collections::hash_map","Returns a reference to the value corresponding to the supplied key.",124,[[["self"],["q"]],["v"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["osstr"]]]],[11,"default","nom::lib::std::collections::hash_map","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",124,[[],["hashmap"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["cstr"]]]],[11,"default","nom::lib::std::collections::hash_map","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",126,[[],["defaulthasher"]]],[11,"default","","Constructs a new `RandomState`.",116,[[],["randomstate"]]],[11,"default","nom::lib::std::collections::hash_set","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",125,[[],["hashset"]]],[11,"next","nom::lib::std::iter","",144,[[["self"]],["option"]]],[11,"count","","",144,[[["self"]],["usize"]]],[11,"try_fold","","",144,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",144,[[["self"],["acc"],["f"]],["acc"]]],[11,"nth","","",144,[[["self"],["usize"]],["option"]]],[11,"find","","",144,[[["self"],["p"]],["option"]]],[11,"last","","",144,[[["self"]],["option"]]],[11,"size_hint","","",144,N],[11,"next","nom::lib::std::slice","",145,[[["self"]],["option"]]],[11,"size_hint","","",145,N],[11,"next","nom::lib::std::iter","",146,[[["self"]],["option"]]],[11,"size_hint","","",146,N],[11,"nth","","",146,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::slice","",147,[[["self"]],["option"]]],[11,"size_hint","","",147,N],[11,"count","","",147,[[["self"]],["usize"]]],[11,"nth","","",147,[[["self"],["usize"]],["option"]]],[11,"last","","",147,[[["self"]],["option"]]],[11,"try_fold","","",147,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",147,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",147,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",147,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::str","",148,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",149,[[["self"]],["option"]]],[11,"size_hint","","",149,N],[11,"try_fold","","",149,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",149,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",150,[[["self"]],["option"]]],[11,"size_hint","","",150,N],[11,"next","nom::lib::std::str","",151,[[["self"]],["option"]]],[11,"count","","",151,[[["self"]],["usize"]]],[11,"size_hint","","",151,N],[11,"last","","",151,[[["self"]],["option"]]],[11,"next","","",152,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",152,N],[11,"count","","",152,[[["self"]],["usize"]]],[11,"last","","",152,[[["self"]],["option"]]],[11,"nth","","",152,[[["self"],["usize"]],["option"]]],[11,"all","","",152,[[["self"],["f"]],["bool"]]],[11,"any","","",152,[[["self"],["f"]],["bool"]]],[11,"find","","",152,[[["self"],["p"]],["option"]]],[11,"position","","",152,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",152,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::slice","",153,[[["self"]],["option"]]],[11,"size_hint","","",153,N],[11,"count","","",153,[[["self"]],["usize"]]],[11,"nth","","",153,[[["self"],["usize"]],["option"]]],[11,"last","","",153,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",154,[[["self"]],["option"]]],[11,"size_hint","","",154,N],[11,"try_fold","","",154,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",154,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",155,[[["self"]],["option",["str"]]]],[11,"size_hint","","",155,N],[11,"next","nom::lib::std::iter","",156,[[["self"]],["option"]]],[11,"size_hint","","",156,N],[11,"nth","","",156,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::slice","",157,[[["self"]],["option"]]],[11,"size_hint","","",157,N],[11,"next","nom::lib::std::str","",158,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",159,[[["self"]],["option"]]],[11,"size_hint","","",159,N],[11,"next","nom::lib::std::slice","",160,[[["self"]],["option"]]],[11,"size_hint","","",160,N],[11,"next","nom::lib::std::str","",161,[[["self"]],["option",["str"]]]],[11,"next","","",162,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",163,[[["self"]],["option"]]],[11,"size_hint","","",163,N],[11,"next","nom::lib::std::result","",164,[[["self"]],["option"]]],[11,"size_hint","","",164,N],[11,"next","nom::lib::std::option","",165,[[["self"]],["option"]]],[11,"size_hint","","",165,N],[11,"next","nom::lib::std::iter","",166,[[["self"]],["option"]]],[11,"size_hint","","",166,N],[11,"try_fold","","",166,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",166,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",167,[[["self"]],["option"]]],[11,"size_hint","","",167,N],[11,"count","","",167,[[["self"]],["usize"]]],[11,"nth","","",167,[[["self"],["usize"]],["option"]]],[11,"last","","",167,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",168,[[["self"]],["option"]]],[11,"next","","",169,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",170,[[["self"]],["option"]]],[11,"size_hint","","",170,N],[11,"count","","",170,[[["self"]],["usize"]]],[11,"nth","","",170,[[["self"],["usize"]],["option"]]],[11,"last","","",170,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",171,[[["self"]],["option"]]],[11,"size_hint","","",171,N],[11,"try_fold","","",171,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",172,[[["self"]],["option"]]],[11,"size_hint","","",172,N],[11,"next","","",173,[[["self"]],["option"]]],[11,"size_hint","","",173,N],[11,"try_fold","","",173,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",173,[[["self"],["acc"],["f"]],["acc"]]],[11,"find","","",173,[[["self"],["p"]],["option"]]],[11,"rposition","","",173,[[["self"],["p"]],["option",["usize"]]]],[11,"next","","",174,[[["self"]],["option"]]],[11,"size_hint","","",174,N],[11,"try_fold","","",174,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",174,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","nom::lib::std::slice","",175,[[["self"]],["option"]]],[11,"size_hint","","",175,N],[11,"count","","",175,[[["self"]],["usize"]]],[11,"nth","","",175,[[["self"],["usize"]],["option"]]],[11,"last","","",175,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",176,[[["self"]],["option"]]],[11,"size_hint","","",176,N],[11,"try_fold","","",176,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",176,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::ops","",80,[[["self"]],["option"]]],[11,"size_hint","","",80,N],[11,"nth","","",80,[[["self"],["usize"]],["option"]]],[11,"last","","",80,[[["self"]],["option"]]],[11,"min","","",80,[[["self"]],["option"]]],[11,"max","","",80,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",177,[[["self"]],["option",["char"]]]],[11,"count","","",177,[[["self"]],["usize"]]],[11,"size_hint","","",177,N],[11,"last","","",177,[[["self"]],["option",["char"]]]],[11,"next","nom::lib::std::slice","",178,[[["self"]],["option"]]],[11,"size_hint","","",178,N],[11,"count","","",178,[[["self"]],["usize"]]],[11,"nth","","",178,[[["self"],["usize"]],["option"]]],[11,"last","","",178,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",179,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",180,[[["self"]],["option"]]],[11,"size_hint","","",180,N],[11,"next","nom::lib::std::iter","Overflow Behavior",181,[[["self"]],["option"]]],[11,"size_hint","","",181,N],[11,"nth","","",181,[[["self"],["usize"]],["option"]]],[11,"count","","",181,[[["self"]],["usize"]]],[11,"try_fold","","",181,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",181,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",182,[[["self"]],["option"]]],[11,"count","","",182,[[["self"]],["usize"]]],[11,"nth","","",182,[[["self"],["usize"]],["option"]]],[11,"last","","",182,[[["self"]],["option"]]],[11,"size_hint","","",182,N],[11,"try_fold","","",182,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",182,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::result","",183,[[["self"]],["option"]]],[11,"size_hint","","",183,N],[11,"next","nom::lib::std::str","",184,[[["self"]],["option",["str"]]]],[11,"size_hint","","",184,N],[11,"next","nom::lib::std::iter","",185,[[["self"]],["option"]]],[11,"size_hint","","",185,N],[11,"next","","",186,[[["self"]],["option"]]],[11,"size_hint","","",186,N],[11,"try_fold","","",186,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",186,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",187,[[["self"]],["option"]]],[11,"nth","","",187,[[["self"],["usize"]],["option"]]],[11,"count","","",187,[[["self"]],["usize"]]],[11,"last","","",187,[[["self"]],["option"]]],[11,"size_hint","","",187,N],[11,"try_fold","","",187,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",187,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",188,[[["self"]],["option"]]],[11,"nth","","",188,[[["self"],["usize"]],["option"]]],[11,"last","","",188,[[["self"]],["option"]]],[11,"count","","",188,[[["self"]],["usize"]]],[11,"size_hint","","",188,N],[11,"try_fold","","",188,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",188,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",189,[[["self"]],["option"]]],[11,"next","nom::lib::std::option","",190,[[["self"]],["option"]]],[11,"size_hint","","",190,N],[11,"next","nom::lib::std::slice","",191,[[["self"]],["option"]]],[11,"size_hint","","",191,N],[11,"next","nom::lib::std::str","",192,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",193,[[["self"]],["option"]]],[11,"size_hint","","",193,N],[11,"count","","",193,[[["self"]],["usize"]]],[11,"nth","","",193,[[["self"],["usize"]],["option"]]],[11,"last","","",193,[[["self"]],["option"]]],[11,"try_fold","","",193,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",193,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",193,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",193,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::iter","",194,[[["self"]],["option"]]],[11,"size_hint","","",194,N],[11,"try_fold","","",194,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",194,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","","",195,[[["self"]],["option"]]],[11,"size_hint","","",195,N],[11,"count","","",195,[[["self"]],["usize"]]],[11,"try_fold","","",195,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",195,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",196,[[["self"]],["option",["str"]]]],[11,"size_hint","","",196,N],[11,"next","nom::lib::std::iter","",197,[[["self"]],["option"]]],[11,"size_hint","","",197,N],[11,"next","nom::lib::std::str","",198,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::option","",199,[[["self"]],["option"]]],[11,"size_hint","","",199,N],[11,"next","nom::lib::std::ops","",76,[[["self"]],["option"]]],[11,"size_hint","","",76,N],[11,"nth","","",76,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::iter","",188,[[["self"]],["option"]]],[11,"nth","","",188,[[["self"],["usize"]],["option"]]],[11,"last","","",188,[[["self"]],["option"]]],[11,"count","","",188,[[["self"]],["usize"]]],[11,"size_hint","","",188,N],[11,"try_fold","","",188,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",188,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",200,[[["self"]],["option",["str"]]]],[11,"size_hint","","",200,N],[11,"next","nom::lib::std::iter","",201,[[["self"]],["option"]]],[11,"size_hint","","",201,N],[11,"try_fold","","",201,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","nom::lib::std::slice","",202,[[["self"]],["option"]]],[11,"size_hint","","",202,N],[11,"next","nom::lib::std::str","",203,[[["self"]],["option",["u16"]]]],[11,"size_hint","","",203,N],[11,"next","nom::lib::std::result","",204,[[["self"]],["option"]]],[11,"size_hint","","",204,N],[11,"next","nom::lib::std::ops","",205,[[["self"]],["option"]]],[11,"size_hint","","",205,N],[11,"nth","","",205,[[["self"],["usize"]],["option"]]],[11,"last","","",205,[[["self"]],["option"]]],[11,"min","","",205,[[["self"]],["option"]]],[11,"max","","",205,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",206,[[["self"]],["option"]]],[11,"size_hint","","",206,N],[11,"next","","",207,[[["self"]],["option"]]],[11,"nth","","",207,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",207,N],[11,"try_fold","","",207,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","nom::lib::std::slice","",163,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::ops","",80,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::option","",165,[[["self"]],["option"]]],[11,"next_back","","",199,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",144,[[["self"]],["option"]]],[11,"try_rfold","","",144,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",144,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",195,[[["self"]],["option"]]],[11,"try_rfold","","",195,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",195,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",188,[[["self"]],["option"]]],[11,"try_rfold","","",188,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",188,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",145,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",149,[[["self"]],["option"]]],[11,"try_rfold","","",149,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",149,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::option","",190,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",176,[[["self"]],["option"]]],[11,"try_rfold","","",176,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",176,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",189,[[["self"]],["option"]]],[11,"next_back","","",155,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::slice","",178,[[["self"]],["option"]]],[11,"next_back","","",153,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",173,[[["self"]],["option"]]],[11,"try_rfold","","",173,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",173,[[["self"],["acc"],["f"]],["acc"]]],[11,"rfind","","",173,[[["self"],["p"]],["option"]]],[11,"next_back","","",185,[[["self"]],["option"]]],[11,"next_back","","",186,[[["self"]],["option"]]],[11,"try_rfold","","",186,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",186,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",187,[[["self"]],["option"]]],[11,"try_rfold","","",187,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","nom::lib::std::ops","",205,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",200,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::slice","",147,[[["self"]],["option"]]],[11,"try_rfold","","",147,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",147,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::iter","",174,[[["self"]],["option"]]],[11,"try_rfold","","",174,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",174,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","nom::lib::std::str","",196,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",194,[[["self"]],["option"]]],[11,"try_rfold","","",194,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",194,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",193,[[["self"]],["option"]]],[11,"try_rfold","","",193,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",193,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",158,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",172,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::result","",183,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",180,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::result","",164,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",179,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::slice","",175,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",151,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::result","",204,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",188,[[["self"]],["option"]]],[11,"try_rfold","","",188,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",188,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",198,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",206,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",168,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",170,[[["self"]],["option"]]],[11,"next_back","","",202,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",162,[[["self"]],["option",["str"]]]],[11,"next_back","","",152,[[["self"]],["option",["u8"]]]],[11,"rfind","","",152,[[["self"],["p"]],["option"]]],[11,"next_back","","",161,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::slice","",167,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",181,[[["self"]],["option"]]],[11,"try_rfold","","",181,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",181,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",146,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",169,[[["self"]],["option",["str"]]]],[11,"next_back","","",184,[[["self"]],["option",["str"]]]],[11,"next_back","","",177,[[["self"]],["option",["char"]]]],[11,"next_back","nom::lib::std::iter","",154,[[["self"]],["option"]]],[11,"try_rfold","","",154,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",154,[[["self"],["acc"],["fold"]],["acc"]]],[11,"haystack","nom::lib::std::str::pattern","",208,[[["self"]],["str"]]],[11,"next","","",208,[[["self"]],["searchstep"]]],[11,"next_match","","",208,[[["self"]],["option"]]],[11,"haystack","","",209,[[["self"]],["str"]]],[11,"next","","",209,[[["self"]],["searchstep"]]],[11,"next_match","","",209,[[["self"]],["option"]]],[11,"haystack","","",210,[[["self"]],["str"]]],[11,"next","","",210,[[["self"]],["searchstep"]]],[11,"next_match","","",210,[[["self"]],["option"]]],[11,"next_reject","","",210,[[["self"]],["option"]]],[11,"haystack","","",211,[[["self"]],["str"]]],[11,"next","","",211,[[["self"]],["searchstep"]]],[11,"next_match","","",211,[[["self"]],["option"]]],[11,"next_reject","","",211,[[["self"]],["option"]]],[11,"into_iter","nom::lib::std::prelude::v1::v1","Returns a consuming iterator over the possibly contained value.",82,[[["self"]],["intoiter"]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",83,[[["self"]],["intoiter"]]],[11,"poll","nom::lib::std::mem","",212,[[["pinmut",["pinmut"]],["context"]],["poll"]]],[11,"into_result","nom::lib::std::prelude::v1::v1","",82,[[["self"]],["result",["noneerror"]]]],[11,"from_ok","","",82,[[["t"]],["option"]]],[11,"from_error","","",82,[[["noneerror"]],["option"]]],[11,"into_result","","",83,[[["self"]],["result"]]],[11,"from_ok","","",83,[[["t"]],["result"]]],[11,"from_error","","",83,[[["e"]],["result"]]],[11,"deref_mut","nom::lib::std::mem","",213,N],[11,"deref_mut","","",212,[[["self"]],["t"]]],[11,"default","nom::lib::std::hash","",214,[[],["buildhasherdefault"]]],[11,"default","nom::lib::std::mem","",213,[[],["manuallydrop"]]],[11,"default","nom::lib::std::hash","",215,[[],["siphasher"]]],[11,"default","nom::lib::std::iter","",172,[[],["empty"]]],[11,"default","nom::lib::std::cmp","",8,[[],["reverse"]]],[11,"default","nom::lib::std::fmt","",123,[[],["error"]]],[11,"default","nom::lib::std::prelude::v1::v1","Returns [`None`].",82,[[],["option"]]],[11,"deref","nom::lib::std::mem","",213,N],[11,"deref","","",212,[[["self"]],["t"]]],[11,"sum","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",83,[[["i"]],["result"]]],[11,"len","nom::lib::std::iter","",188,[[["self"]],["usize"]]],[11,"is_empty","","",188,[[["self"]],["bool"]]],[11,"len","","",172,[[["self"]],["usize"]]],[11,"len","","",176,[[["self"]],["usize"]]],[11,"is_empty","","",176,[[["self"]],["bool"]]],[11,"len","nom::lib::std::str","",152,[[["self"]],["usize"]]],[11,"is_empty","","",152,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",181,[[["self"]],["usize"]]],[11,"is_empty","","",181,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::slice","",170,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",174,[[["self"]],["usize"]]],[11,"is_empty","","",174,[[["self"]],["bool"]]],[11,"len","","",173,[[["self"]],["usize"]]],[11,"is_empty","","",173,[[["self"]],["bool"]]],[11,"len","","",194,[[["self"]],["usize"]]],[11,"is_empty","","",194,[[["self"]],["bool"]]],[11,"len","nom::lib::std::slice","",193,[[["self"]],["usize"]]],[11,"is_empty","","",193,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",206,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::slice","",178,[[["self"]],["bool"]]],[11,"len","","",147,[[["self"]],["usize"]]],[11,"is_empty","","",147,[[["self"]],["bool"]]],[11,"build_hasher","nom::lib::std::hash","",214,[[["self"]],["h"]]],[11,"fmt","nom::lib::std::fmt","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"start_bound","nom::lib::std::ops","",76,[[["self"]],["bound"]]],[11,"end_bound","","",76,[[["self"]],["bound"]]],[11,"start_bound","","",205,[[["self"]],["bound"]]],[11,"end_bound","","",205,[[["self"]],["bound"]]],[11,"start_bound","","",205,[[["self"]],["bound"]]],[11,"end_bound","","",205,[[["self"]],["bound"]]],[11,"start_bound","","",58,[[["self"]],["bound"]]],[11,"end_bound","","",58,[[["self"]],["bound"]]],[11,"start_bound","","",76,[[["self"]],["bound"]]],[11,"end_bound","","",76,[[["self"]],["bound"]]],[11,"start_bound","","",59,[[["self"]],["bound"]]],[11,"end_bound","","",59,[[["self"]],["bound"]]],[11,"start_bound","","",59,[[["self"]],["bound"]]],[11,"end_bound","","",59,[[["self"]],["bound"]]],[11,"start_bound","","",58,[[["self"]],["bound"]]],[11,"end_bound","","",58,[[["self"]],["bound"]]],[11,"start_bound","","",80,[[["self"]],["bound"]]],[11,"end_bound","","",80,[[["self"]],["bound"]]],[11,"start_bound","","",217,[[["self"]],["bound"]]],[11,"end_bound","","",217,[[["self"]],["bound"]]],[11,"start_bound","","",80,[[["self"]],["bound"]]],[11,"end_bound","","",80,[[["self"]],["bound"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",82,[[["i"]],["option"]]],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",83,[[["i"]],["result"]]],[11,"from","","",82,[[["t"]],["option"]]],[11,"write","nom::lib::std::hash","",215,N],[11,"finish","","",215,[[["self"]],["u64"]]],[11,"as_ref","nom::lib::std::slice","",147,N],[11,"hash","nom::lib::std::prelude::v1::v1","",82,N],[11,"hash","nom::lib::std::mem","",218,N],[11,"hash","nom::lib::std::prelude::v1::v1","",83,N],[11,"hash","nom::lib::std::cmp","",7,N],[11,"hash","nom::lib::std::fmt","",123,N],[11,"hash","nom::lib::std::option","",219,N],[11,"hash","nom::lib::std::ops","",76,N],[11,"hash","","",13,N],[11,"hash","nom::lib::std::mem","",213,N],[11,"hash","nom::lib::std::ops","",59,N],[11,"hash","","",217,N],[11,"hash","","",80,N],[11,"hash","","",205,N],[11,"hash","","",60,N],[11,"hash","nom::lib::std::cmp","",8,N],[11,"hash","nom::lib::std::ops","",58,N],[11,"into_raw","nom::lib::std::mem","",212,N],[11,"poll","","",212,N],[11,"drop","","",212,N],[11,"clone","nom::lib::std::str","",179,[[["self"]],["rsplit"]]],[11,"clone","","",119,[[["self"]],["parseboolerror"]]],[11,"clone","nom::lib::std::iter","",194,[[["self"]],["cloned"]]],[11,"clone","nom::lib::std::ops","",13,[[["self"]],["bound"]]],[11,"clone","nom::lib::std::cmp","",7,[[["self"]],["ordering"]]],[11,"clone","nom::lib::std::result","",204,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::hash","",214,[[["self"]],["buildhasherdefault"]]],[11,"clone","nom::lib::std::str","",161,[[["self"]],["rsplitterminator"]]],[11,"clone","nom::lib::std::iter","",176,[[["self"]],["inspect"]]],[11,"clone","","",201,[[["self"]],["scan"]]],[11,"clone","nom::lib::std::slice","",167,[[["self"]],["chunks"]]],[11,"clone","nom::lib::std::str","",151,[[["self"]],["charindices"]]],[11,"clone","nom::lib::std::iter","",166,[[["self"]],["skipwhile"]]],[11,"clone","","",206,[[["self"]],["once"]]],[11,"clone","nom::lib::std::option","",219,[[["self"]],["noneerror"]]],[11,"clone","nom::lib::std::ops","",205,[[["self"]],["rangeinclusive"]]],[11,"clone","nom::lib::std::str","",162,[[["self"]],["rmatches"]]],[11,"clone","","",158,[[["self"]],["splitterminator"]]],[11,"clone","nom::lib::std::slice","",175,[[["self"]],["windows"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",82,[[["self"]],["option"]]],[11,"clone","nom::lib::std::str","",169,[[["self"]],["matches"]]],[11,"clone","nom::lib::std::option","",165,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::iter","",182,[[["self"]],["peekable"]]],[11,"clone","","",156,[[["self"]],["stepby"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["result"]]],[11,"clone","nom::lib::std::str::pattern","",87,[[["self"]],["searchstep"]]],[11,"clone","nom::lib::std::str","",203,[[["self"]],["encodeutf16"]]],[11,"clone","nom::lib::std::slice","",147,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::ops","",80,[[["self"]],["range"]]],[11,"clone","nom::lib::std::iter","",195,[[["self"]],["filter"]]],[11,"clone","nom::lib::std::slice","",170,[[["self"]],["exactchunks"]]],[11,"clone","nom::lib::std::iter","",159,[[["self"]],["cycle"]]],[11,"clone","nom::lib::std::str","",120,[[["self"]],["utf8error"]]],[11,"clone","nom::lib::std::str::pattern","",209,[[["self"]],["strsearcher"]]],[11,"clone","nom::lib::std::iter","",186,[[["self"]],["flatmap"]]],[11,"clone","nom::lib::std::ops","",76,[[["self"]],["rangefrom"]]],[11,"clone","","",58,[[["self"]],["rangetoinclusive"]]],[11,"clone","nom::lib::std::str","",200,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","nom::lib::std::fmt","",216,[[["self"]],["arguments"]]],[11,"clone","nom::lib::std::iter","",197,[[["self"]],["repeatwith"]]],[11,"clone","","",185,[[["self"]],["repeat"]]],[11,"clone","nom::lib::std::ops","",217,[[["self"]],["rangefull"]]],[11,"clone","nom::lib::std::fmt","",123,[[["self"]],["error"]]],[11,"clone","nom::lib::std::str","",168,[[["self"]],["matchindices"]]],[11,"clone","","",184,[[["self"]],["linesany"]]],[11,"clone","nom::lib::std::iter","",171,[[["self"]],["takewhile"]]],[11,"clone","nom::lib::std::mem","",218,[[["self"]],["discriminant"]]],[11,"clone","","",213,[[["self"]],["manuallydrop"]]],[11,"clone","nom::lib::std::ops","",59,[[["self"]],["rangeto"]]],[11,"clone","nom::lib::std::iter","",174,[[["self"]],["map"]]],[11,"clone","","",207,[[["self"]],["take"]]],[11,"clone","nom::lib::std::str","",177,[[["self"]],["chars"]]],[11,"clone","","",152,[[["self"]],["bytes"]]],[11,"clone","nom::lib::std::cmp","",8,[[["self"]],["reverse"]]],[11,"clone","nom::lib::std::hash","",215,[[["self"]],["siphasher"]]],[11,"clone","nom::lib::std::result","",164,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::str","",196,[[["self"]],["splitwhitespace"]]],[11,"clone","nom::lib::std::iter","",172,[[["self"]],["empty"]]],[11,"clone","","",181,[[["self"]],["enumerate"]]],[11,"clone","nom::lib::std::str::pattern","",210,[[["self"]],["charpredicatesearcher"]]],[11,"clone","","",208,[[["self"]],["charsearcher"]]],[11,"clone","nom::lib::std::iter","",146,[[["self"]],["zip"]]],[11,"clone","","",154,[[["self"]],["flatten"]]],[11,"clone","","",188,[[["self"]],["fuse"]]],[11,"clone","","",187,[[["self"]],["skip"]]],[11,"clone","","",149,[[["self"]],["filtermap"]]],[11,"clone","nom::lib::std::str::pattern","",211,[[["self"]],["charslicesearcher"]]],[11,"clone","nom::lib::std::iter","",173,[[["self"]],["rev"]]],[11,"clone","nom::lib::std::option","",199,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::slice","",180,[[["self"]],["split"]]],[11,"clone","nom::lib::std::str","",198,[[["self"]],["split"]]],[11,"clone","","",189,[[["self"]],["rmatchindices"]]],[11,"clone","nom::lib::std::slice","",202,[[["self"]],["rsplit"]]],[11,"clone","nom::lib::std::str","",192,[[["self"]],["splitn"]]],[11,"clone","nom::lib::std::ops","",60,[[["self"]],["generatorstate"]]],[11,"clone","nom::lib::std::iter","",144,[[["self"]],["chain"]]],[11,"clone","nom::lib::std::str","",155,[[["self"]],["lines"]]],[11,"clone","","",148,[[["self"]],["rsplitn"]]],[11,"partial_cmp","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["option",["ordering"]]]],[11,"lt","","",82,[[["self"],["option"]],["bool"]]],[11,"le","","",82,[[["self"],["option"]],["bool"]]],[11,"gt","","",82,[[["self"],["option"]],["bool"]]],[11,"ge","","",82,[[["self"],["option"]],["bool"]]],[11,"partial_cmp","nom::lib::std::mem","",213,[[["self"],["manuallydrop"]],["option",["ordering"]]]],[11,"lt","","",213,[[["self"],["manuallydrop"]],["bool"]]],[11,"le","","",213,[[["self"],["manuallydrop"]],["bool"]]],[11,"gt","","",213,[[["self"],["manuallydrop"]],["bool"]]],[11,"ge","","",213,[[["self"],["manuallydrop"]],["bool"]]],[11,"partial_cmp","nom::lib::std::option","",219,[[["self"],["noneerror"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["option",["ordering"]]]],[11,"lt","","",83,[[["self"],["result"]],["bool"]]],[11,"le","","",83,[[["self"],["result"]],["bool"]]],[11,"gt","","",83,[[["self"],["result"]],["bool"]]],[11,"ge","","",83,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","nom::lib::std::fmt","",123,[[["self"],["error"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["reverse"]],["bool"]]],[11,"le","","",8,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",8,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",8,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","nom::lib::std::ops","",60,[[["self"],["generatorstate"]],["option",["ordering"]]]],[11,"lt","","",60,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",60,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",60,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",60,[[["self"],["generatorstate"]],["bool"]]],[11,"fmt","nom::lib::std::mem","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","nom::lib::std::str::pattern","",210,[[["self"]],["searchstep"]]],[11,"next_match_back","","",210,[[["self"]],["option"]]],[11,"next_reject_back","","",210,[[["self"]],["option"]]],[11,"next_back","","",211,[[["self"]],["searchstep"]]],[11,"next_match_back","","",211,[[["self"]],["option"]]],[11,"next_reject_back","","",211,[[["self"]],["option"]]],[11,"next_back","","",209,[[["self"]],["searchstep"]]],[11,"next_match_back","","",209,[[["self"]],["option"]]],[11,"next_back","","",208,[[["self"]],["searchstep"]]],[11,"next_match_back","","",208,[[["self"]],["option"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["ordering"]]],[11,"cmp","nom::lib::std::fmt","",123,[[["self"],["error"]],["ordering"]]],[11,"cmp","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","nom::lib::std::mem","",213,[[["self"],["manuallydrop"]],["ordering"]]],[11,"cmp","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","nom::lib::std::option","",219,[[["self"],["noneerror"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["ordering"]]],[11,"cmp","nom::lib::std::ops","",60,[[["self"],["generatorstate"]],["ordering"]]],[11,"fmt","nom::lib::std::str","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",213,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",210,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",218,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::hash","",215,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",219,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::cmp","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",205,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::cmp","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",217,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",211,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::hash","",214,[[["self"],["formatter"]],["result",["error"]]]],[11,"get","nom::lib::std::ops","",217,[[["self"],["str"]],["option"]]],[11,"get_mut","","",217,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",217,N],[11,"get_unchecked_mut","","",217,N],[11,"index","","",217,N],[11,"index_mut","","",217,N],[11,"get","","",59,N],[11,"get_mut","","",59,N],[11,"get_unchecked","","",59,N],[11,"get_unchecked_mut","","",59,N],[11,"index","","",59,N],[11,"index_mut","","",59,N],[11,"get","","",59,[[["self"],["str"]],["option"]]],[11,"get_mut","","",59,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",59,N],[11,"get_unchecked_mut","","",59,N],[11,"index","","",59,N],[11,"index_mut","","",59,N],[11,"get","","",205,N],[11,"get_mut","","",205,N],[11,"get_unchecked","","",205,N],[11,"get_unchecked_mut","","",205,N],[11,"index","","",205,N],[11,"index_mut","","",205,N],[11,"get","","",80,N],[11,"get_mut","","",80,N],[11,"get_unchecked","","",80,N],[11,"get_unchecked_mut","","",80,N],[11,"index","","",80,N],[11,"index_mut","","",80,N],[11,"get","","",80,[[["self"],["str"]],["option"]]],[11,"get_mut","","",80,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",80,N],[11,"get_unchecked_mut","","",80,N],[11,"index","","",80,N],[11,"index_mut","","",80,N],[11,"get","","",205,[[["self"],["str"]],["option"]]],[11,"get_mut","","",205,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",205,N],[11,"get_unchecked_mut","","",205,N],[11,"index","","",205,N],[11,"index_mut","","",205,N],[11,"get","","",76,[[["self"],["str"]],["option"]]],[11,"get_mut","","",76,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",76,N],[11,"get_unchecked_mut","","",76,N],[11,"index","","",76,N],[11,"index_mut","","",76,N],[11,"get","","",58,N],[11,"get_mut","","",58,N],[11,"get_unchecked","","",58,N],[11,"get_unchecked_mut","","",58,N],[11,"index","","",58,N],[11,"index_mut","","",58,N],[11,"get","","",217,N],[11,"get_mut","","",217,N],[11,"get_unchecked","","",217,N],[11,"get_unchecked_mut","","",217,N],[11,"index","","",217,N],[11,"index_mut","","",217,N],[11,"get","","",76,N],[11,"get_mut","","",76,N],[11,"get_unchecked","","",76,N],[11,"get_unchecked_mut","","",76,N],[11,"index","","",76,N],[11,"index_mut","","",76,N],[11,"get","","",58,[[["self"],["str"]],["option"]]],[11,"get_mut","","",58,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",58,N],[11,"get_unchecked_mut","","",58,N],[11,"index","","",58,N],[11,"index_mut","","",58,N],[11,"eq","","",13,[[["self"],["bound"]],["bool"]]],[11,"ne","","",13,[[["self"],["bound"]],["bool"]]],[11,"eq","","",205,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",8,[[["self"],["reverse"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["bool"]]],[11,"ne","","",82,[[["self"],["option"]],["bool"]]],[11,"eq","nom::lib::std::mem","",213,[[["self"],["manuallydrop"]],["bool"]]],[11,"ne","","",213,[[["self"],["manuallydrop"]],["bool"]]],[11,"eq","nom::lib::std::option","",219,[[["self"],["noneerror"]],["bool"]]],[11,"eq","nom::lib::std::mem","",218,[[["self"],["discriminant"]],["bool"]]],[11,"eq","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["bool"]]],[11,"eq","nom::lib::std::ops","",60,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",60,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","","",58,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",58,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","","",76,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",76,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","nom::lib::std::hash","",214,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","nom::lib::std::fmt","",123,[[["self"],["error"]],["bool"]]],[11,"eq","nom::lib::std::str::pattern","",87,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",87,[[["self"],["searchstep"]],["bool"]]],[11,"eq","nom::lib::std::str","",119,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",119,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","nom::lib::std::ops","",80,[[["self"],["range"]],["bool"]]],[11,"ne","","",80,[[["self"],["range"]],["bool"]]],[11,"eq","","",59,[[["self"],["rangeto"]],["bool"]]],[11,"ne","","",59,[[["self"],["rangeto"]],["bool"]]],[11,"eq","nom::lib::std::str","",120,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",120,[[["self"],["utf8error"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["bool"]]],[11,"ne","","",83,[[["self"],["result"]],["bool"]]],[11,"eq","nom::lib::std::ops","",217,[[["self"],["rangefull"]],["bool"]]],[11,"write_str","nom::lib::std::fmt","",220,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",220,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","",220,[[["self"],["arguments"]],["result",["error"]]]],[11,"product","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",83,[[["i"]],["result"]]],[11,"poll","","",115,[[["pinmut",["box"]],["context"]],["poll"]]],[11,"poll","nom::lib::std::boxed","",221,[[["pinmut",["pinbox"]],["context"]],["poll"]]],[11,"spawn_obj","nom::lib::std::prelude::v1::v1","",115,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","",115,[[["self"]],["result",["spawnerrorkind"]]]],[11,"partial_cmp","nom::lib::std::collections::btree_map","",222,[[["self"],["btreemap"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",143,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::collections::linked_list","",224,[[["self"],["linkedlist"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",117,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",117,[[["self"],["string"]],["bool"]]],[11,"le","","",117,[[["self"],["string"]],["bool"]]],[11,"gt","","",117,[[["self"],["string"]],["bool"]]],[11,"ge","","",117,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","nom::lib::std::collections::btree_set","",225,[[["self"],["btreeset"]],["option",["ordering"]]]],[11,"lt","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",115,[[["self"],["box"]],["option",["ordering"]]]],[11,"lt","","",115,[[["self"],["box"]],["bool"]]],[11,"le","","",115,[[["self"],["box"]],["bool"]]],[11,"ge","","",115,[[["self"],["box"]],["bool"]]],[11,"gt","","",115,[[["self"],["box"]],["bool"]]],[11,"write_str","","",117,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",117,[[["self"],["char"]],["result",["error"]]]],[11,"as_mut","","",143,N],[11,"as_mut","","",143,[[["self"]],["vec"]]],[11,"as_mut","","",115,[[["self"]],["t"]]],[11,"add_assign","","",117,N],[11,"into_raw","","",115,N],[11,"poll","","",115,N],[11,"drop","","",115,N],[11,"into_raw","nom::lib::std::boxed","",221,N],[11,"poll","","",221,N],[11,"drop","","",221,N],[11,"into_iter","nom::lib::std::collections::btree_map","",222,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::prelude::v1::v1","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",143,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",223,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",226,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",225,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::linked_list","Consumes the list into an iterator yielding elements by value.",224,[[["self"]],["intoiter"]]],[11,"finish","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["u64"]]],[11,"write","","",115,N],[11,"write_u8","","",115,N],[11,"write_u16","","",115,N],[11,"write_u32","","",115,N],[11,"write_u64","","",115,N],[11,"write_u128","","",115,N],[11,"write_usize","","",115,N],[11,"write_i8","","",115,N],[11,"write_i16","","",115,N],[11,"write_i32","","",115,N],[11,"write_i64","","",115,N],[11,"write_i128","","",115,N],[11,"write_isize","","",115,N],[11,"next","nom::lib::std::collections::btree_set","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,N],[11,"next","","",228,[[["self"]],["option"]]],[11,"size_hint","","",228,N],[11,"next","nom::lib::std::collections::vec_deque","",229,[[["self"]],["option"]]],[11,"size_hint","","",229,N],[11,"next","nom::lib::std::collections::btree_set","",230,[[["self"]],["option"]]],[11,"next","nom::lib::std::vec","",231,[[["self"]],["option"]]],[11,"size_hint","","",231,N],[11,"next","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["option"]]],[11,"size_hint","","",115,N],[11,"nth","","",115,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::string","",232,[[["self"]],["option",["char"]]]],[11,"size_hint","","",232,N],[11,"next","nom::lib::std::collections::btree_map","",233,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::btree_set","",234,[[["self"]],["option"]]],[11,"size_hint","","",234,N],[11,"next","nom::lib::std::collections::binary_heap","",235,[[["self"]],["option"]]],[11,"size_hint","","",235,N],[11,"next","nom::lib::std::vec","",236,[[["self"]],["option"]]],[11,"size_hint","","",236,N],[11,"count","","",236,[[["self"]],["usize"]]],[11,"next","","",237,[[["self"]],["option"]]],[11,"size_hint","","",237,N],[11,"next","nom::lib::std::collections::linked_list","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,N],[11,"next","nom::lib::std::collections::vec_deque","",239,[[["self"]],["option"]]],[11,"size_hint","","",239,N],[11,"next","nom::lib::std::collections::btree_set","",240,[[["self"]],["option"]]],[11,"size_hint","","",240,N],[11,"next","nom::lib::std::collections::btree_map","",241,[[["self"]],["option"]]],[11,"size_hint","","",241,N],[11,"next","nom::lib::std::collections::vec_deque","",242,[[["self"]],["option"]]],[11,"size_hint","","",242,N],[11,"fold","","",242,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","nom::lib::std::collections::btree_set","",243,[[["self"]],["option"]]],[11,"size_hint","","",243,N],[11,"next","nom::lib::std::collections::btree_map","",244,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::btree_set","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,N],[11,"next","nom::lib::std::collections::linked_list","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,N],[11,"next","nom::lib::std::collections::btree_map","",247,[[["self"]],["option"]]],[11,"size_hint","","",247,N],[11,"next","","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,N],[11,"next","nom::lib::std::collections::vec_deque","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,N],[11,"fold","","",249,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","nom::lib::std::collections::linked_list","",250,[[["self"]],["option"]]],[11,"size_hint","","",250,N],[11,"next","nom::lib::std::collections::btree_map","",251,[[["self"]],["option"]]],[11,"size_hint","","",251,N],[11,"next","","",252,[[["self"]],["option"]]],[11,"size_hint","","",252,N],[11,"next","","",253,[[["self"]],["option"]]],[11,"size_hint","","",253,N],[11,"next","nom::lib::std::collections::binary_heap","",254,[[["self"]],["option"]]],[11,"size_hint","","",254,N],[11,"next","nom::lib::std::collections::linked_list","",255,[[["self"]],["option"]]],[11,"size_hint","","",255,N],[11,"next","nom::lib::std::collections::binary_heap","",256,[[["self"]],["option"]]],[11,"size_hint","","",256,N],[11,"next","nom::lib::std::vec","",257,[[["self"]],["option"]]],[11,"size_hint","","",257,N],[11,"next_back","nom::lib::std::collections::linked_list","",250,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",241,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",236,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",252,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_set","",230,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",244,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",242,[[["self"]],["option"]]],[11,"rfold","","",242,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",239,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",257,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",229,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",238,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",247,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",246,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_set","",227,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",254,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",253,[[["self"]],["option"]]],[11,"next_back","","",251,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",231,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",256,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",233,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",235,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",248,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",249,[[["self"]],["option"]]],[11,"rfold","","",249,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::string","",232,[[["self"]],["option",["char"]]]],[11,"next_back","nom::lib::std::collections::btree_set","",234,[[["self"]],["option"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",143,[[["self"],["vec"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::linked_list","",224,[[["self"],["linkedlist"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::btree_map","",222,[[["self"],["btreemap"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::btree_set","",225,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",115,[[["self"],["box"]],["ordering"]]],[11,"cmp","","",117,[[["self"],["string"]],["ordering"]]],[11,"resume","","",115,[[["self"]],["generatorstate"]]],[11,"extend","nom::lib::std::collections","",226,N],[11,"extend","nom::lib::std::collections::btree_map","",222,N],[11,"extend","nom::lib::std::collections","",226,N],[11,"extend","nom::lib::std::prelude::v1::v1","",117,N],[11,"extend","","",117,N],[11,"extend","","",143,N],[11,"extend","nom::lib::std::collections::btree_map","",222,N],[11,"extend","nom::lib::std::collections::linked_list","",224,N],[11,"extend","nom::lib::std::prelude::v1::v1","",117,N],[11,"extend","","",117,N],[11,"extend","nom::lib::std::collections::btree_set","",225,N],[11,"extend","nom::lib::std::collections::vec_deque","",223,N],[11,"extend","","",223,N],[11,"extend","nom::lib::std::collections::btree_set","",225,N],[11,"extend","nom::lib::std::prelude::v1::v1","",143,N],[11,"extend","","",117,N],[11,"extend","nom::lib::std::collections::linked_list","",224,N],[11,"fmt","nom::lib::std::collections::binary_heap","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",223,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",225,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",254,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",227,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",240,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",222,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",230,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",259,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",249,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",228,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",231,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",252,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",243,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",260,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",248,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",229,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",244,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",236,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",255,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",237,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",242,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",241,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",235,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::boxed","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",226,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",245,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",247,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","nom::lib::std::collections::btree_set","",228,[[["self"]],["symmetricdifference"]]],[11,"clone","nom::lib::std::collections::btree_map","",233,[[["self"]],["range"]]],[11,"clone","nom::lib::std::collections","",226,[[["self"]],["binaryheap"]]],[11,"clone_from","","",226,N],[11,"clone","nom::lib::std::collections::linked_list","",238,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["str"]]]],[11,"clone","nom::lib::std::collections","",14,[[["self"]],["collectionallocerr"]]],[11,"clone","nom::lib::std::collections::btree_set","",243,[[["self"]],["intersection"]]],[11,"clone","nom::lib::std::collections::binary_heap","",254,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::vec","",236,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::vec_deque","",249,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::btree_map","",241,[[["self"]],["keys"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",117,[[["self"]],["string"]]],[11,"clone_from","","",117,N],[11,"clone","nom::lib::std::collections::btree_set","",245,[[["self"]],["difference"]]],[11,"clone","","",225,[[["self"]],["btreeset"]]],[11,"clone","","",234,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::vec_deque","",239,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::string","",122,[[["self"]],["parseerror"]]],[11,"clone","nom::lib::std::collections::linked_list","",224,[[["self"]],["linkedlist"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",143,[[["self"]],["vec"]]],[11,"clone_from","","",143,N],[11,"clone","nom::lib::std::collections::btree_set","",240,[[["self"]],["union"]]],[11,"clone","nom::lib::std::collections::linked_list","",246,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::prelude::v1::v1","Returns a new box with a `clone()` of this box's contents.",115,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",115,N],[11,"clone","nom::lib::std::collections::btree_map","",248,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::btree_set","",230,[[["self"]],["range"]]],[11,"clone","nom::lib::std::collections::binary_heap","",256,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::btree_map","",222,[[["self"]],["btreemap"]]],[11,"clone","nom::lib::std::collections::vec_deque","",223,[[["self"]],["vecdeque"]]],[11,"clone","nom::lib::std::collections::btree_map","",252,[[["self"]],["values"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::boxed","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"borrow","nom::lib::std::prelude::v1::v1","",117,[[["self"]],["str"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow","","",143,N],[11,"index_mut","","",143,N],[11,"index_mut","","",117,[[["self"],["range",["usize"]]],["str"]]],[11,"index_mut","","",117,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",117,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index_mut","nom::lib::std::collections::vec_deque","",223,[[["self"],["usize"]],["a"]]],[11,"index_mut","nom::lib::std::prelude::v1::v1","",117,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index_mut","","",117,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",117,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"len","nom::lib::std::collections::btree_set","",234,[[["self"]],["usize"]]],[11,"len","","",227,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::btree_map","",252,[[["self"]],["usize"]]],[11,"len","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["usize"]]],[11,"is_empty","","",115,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",253,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",239,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",235,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",248,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",256,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::vec","",257,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",241,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",249,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",247,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::vec","",236,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",254,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",251,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",242,[[["self"]],["bool"]]],[11,"borrow_mut","nom::lib::std::prelude::v1::v1","",143,N],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"drop","nom::lib::std::collections::linked_list","",255,N],[11,"drop","nom::lib::std::prelude::v1::v1","",115,N],[11,"drop","nom::lib::std::string","",232,N],[11,"drop","nom::lib::std::collections::vec_deque","",223,N],[11,"drop","nom::lib::std::vec","",257,N],[11,"drop","","",231,N],[11,"drop","nom::lib::std::collections::vec_deque","",229,N],[11,"drop","nom::lib::std::collections::linked_list","",224,N],[11,"drop","nom::lib::std::prelude::v1::v1","",143,N],[11,"drop","nom::lib::std::collections::btree_map","",222,N],[11,"drop","","",251,N],[11,"drop","nom::lib::std::vec","",237,N],[11,"drop","","",236,N],[11,"drop","nom::lib::std::collections::binary_heap","",260,N],[11,"as_ref","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["t"]]],[11,"as_ref","","",143,[[["self"]],["vec"]]],[11,"as_ref","","",117,[[["self"]],["str"]]],[11,"as_ref","","",117,N],[11,"as_ref","","",143,N],[11,"hash","nom::lib::std::collections::vec_deque","",223,N],[11,"hash","nom::lib::std::prelude::v1::v1","",143,N],[11,"hash","nom::lib::std::collections::linked_list","",224,N],[11,"hash","nom::lib::std::prelude::v1::v1","",117,N],[11,"hash","nom::lib::std::collections::btree_map","",222,N],[11,"hash","nom::lib::std::prelude::v1::v1","",115,N],[11,"hash","nom::lib::std::collections::btree_set","",225,N],[11,"deref","nom::lib::std::boxed","",221,[[["self"]],["t"]]],[11,"deref","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["t"]]],[11,"deref","","",117,[[["self"]],["str"]]],[11,"deref","","",143,N],[11,"deref","nom::lib::std::collections::binary_heap","",260,[[["self"]],["t"]]],[11,"from_str","nom::lib::std::prelude::v1::v1","",117,[[["str"]],["result",["string","parseerror"]]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",117,[[["self"],["cow"]],["bool"]]],[11,"ne","","",117,[[["self"],["cow"]],["bool"]]],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",117,[[["self"],["str"]],["bool"]]],[11,"ne","","",117,[[["self"],["str"]],["bool"]]],[11,"eq","","",115,[[["self"],["box"]],["bool"]]],[11,"ne","","",115,[[["self"],["box"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections::linked_list","",224,[[["self"],["linkedlist"]],["bool"]]],[11,"ne","","",224,[[["self"],["linkedlist"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::collections::btree_set","",225,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",117,[[["self"],["str"]],["bool"]]],[11,"ne","","",117,[[["self"],["str"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,[[["self"],["vec"]],["bool"]]],[11,"ne","","",143,[[["self"],["vec"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections","",14,[[["self"],["collectionallocerr"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::collections::btree_map","",222,[[["self"],["btreemap"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",117,[[["self"],["string"]],["bool"]]],[11,"ne","","",117,[[["self"],["string"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::string","",122,[[["self"],["parseerror"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,[[["self"],["vec"]],["bool"]]],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["bool"]]],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","","",143,N],[11,"ne","","",143,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"from_iter","nom::lib::std::collections::btree_map","",222,[[["t"]],["btreemap"]]],[11,"from_iter","nom::lib::std::collections::btree_set","",225,[[["i"]],["btreeset"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",117,[[["i"]],["string"]]],[11,"from_iter","","",117,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections::vec_deque","",223,[[["t"]],["vecdeque"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",117,[[["i"]],["string"]]],[11,"from_iter","","",117,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections::linked_list","",224,[[["i"]],["linkedlist"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",117,[[["i"]],["string"]]],[11,"from_iter","","",143,[[["i"]],["vec"]]],[11,"from_iter","nom::lib::std::collections","",226,[[["i"]],["binaryheap"]]],[11,"from","nom::lib::std::prelude::v1::v1","",117,[[["box",["str"]]],["string"]]],[11,"from","nom::lib::std::collections::vec_deque","",223,[[["vec"]],["vecdeque"]]],[11,"from","nom::lib::std::prelude::v1::v1","",143,[[["string"]],["vec",["u8"]]]],[11,"from","","",143,[[["box"]],["vec"]]],[11,"from","","",115,[[["pinbox"]],["box"]]],[11,"from","","",143,[[["str"]],["vec",["u8"]]]],[11,"from","","",117,[[["str"]],["string"]]],[11,"from","","",115,[[["str"]],["box",["str"]]]],[11,"from","","",115,[[["box",["str"]]],["box"]]],[11,"from","","",143,N],[11,"from","nom::lib::std::boxed","",221,[[["box"]],["pinbox"]]],[11,"from","nom::lib::std::prelude::v1::v1","",143,[[["vecdeque"]],["vec"]]],[11,"from","","",115,N],[11,"from","","",115,[[["string"]],["box",["str"]]]],[11,"from","nom::lib::std::collections","",14,[[["layouterr"]],["collectionallocerr"]]],[11,"from","nom::lib::std::prelude::v1::v1","",115,[[["t"]],["box"]]],[11,"from","","",143,[[["cow"]],["vec"]]],[11,"from","","",143,[[["binaryheap"]],["vec"]]],[11,"from","","",117,[[["cow",["str"]]],["string"]]],[11,"from","","",143,N],[11,"from","nom::lib::std::collections","",14,[[["allocerr"]],["collectionallocerr"]]],[11,"from","nom::lib::std::prelude::v1::v1","",115,[[["vec"]],["box"]]],[11,"from","nom::lib::std::collections","",226,[[["vec"]],["binaryheap"]]],[11,"to_string","nom::lib::std::prelude::v1::v1","",117,[[["self"]],["string"]]],[11,"call_once","","",115,[[["self"],["a"]],["r"]]],[11,"call_once","","",115,[[["self"],["a"]],["r"]]],[11,"fmt","nom::lib::std::string","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::boxed","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"add","nom::lib::std::prelude::v1::v1","",117,[[["self"],["str"]],["string"]]],[11,"index","","",117,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",117,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",117,[[["self"],["rangefull"]],["str"]]],[11,"index","nom::lib::std::collections::vec_deque","",223,[[["self"],["usize"]],["a"]]],[11,"index","nom::lib::std::prelude::v1::v1","",117,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","nom::lib::std::collections::btree_map","Returns a reference to the value corresponding to the supplied key.",222,[[["self"],["q"]],["v"]]],[11,"index","nom::lib::std::prelude::v1::v1","",117,[[["self"],["range",["usize"]]],["str"]]],[11,"index","","",143,N],[11,"index","","",117,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"deref_mut","","",115,[[["self"]],["t"]]],[11,"deref_mut","","",143,N],[11,"deref_mut","","",117,[[["self"]],["str"]]],[11,"deref_mut","nom::lib::std::boxed","",221,[[["self"]],["t"]]],[11,"deref_mut","nom::lib::std::collections::binary_heap","",260,[[["self"]],["t"]]],[11,"default","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque<T>`.",223,[[],["vecdeque"]]],[11,"default","nom::lib::std::collections","Creates an empty `BinaryHeap<T>`.",226,[[],["binaryheap"]]],[11,"default","nom::lib::std::prelude::v1::v1","Creates an empty `Vec<T>`.",143,[[],["vec"]]],[11,"default","nom::lib::std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",222,[[],["btreemap"]]],[11,"default","nom::lib::std::prelude::v1::v1","Creates a `Box<T>`, with the `Default` value for T.",115,[[],["box"]]],[11,"default","","Creates an empty `String`.",117,[[],["string"]]],[11,"default","","",115,[[],["box",["str"]]]],[11,"default","nom::lib::std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",225,[[],["btreeset"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box"]]],[11,"default","nom::lib::std::collections::linked_list","Creates an empty `LinkedList<T>`.",224,[[],["linkedlist"]]],[11,"new","nom::lib::std::boxed","Allocate memory on the heap, move the data into it and pin it.",221,[[["t"]],["pinbox"]]],[11,"as_pin_mut","","Get a pinned reference to the data in this PinBox.",221,[[["self"]],["pinmut"]]],[11,"from_raw","","Constructs a `PinBox` from a raw pointer.",221,N],[11,"into_raw","","Consumes the `PinBox`, returning the wrapped raw pointer.",221,N],[11,"get_mut","","Get a mutable reference to the data inside this PinBox.",221,[[["pinbox"]],["t"]]],[11,"unpin","","Convert this PinBox into an unpinned Box.",221,[[["pinbox"]],["box"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"to_string","","",221,[[["self"]],["string"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"reverse","nom::lib::std::cmp","Reverses the `Ordering`.",7,[[["self"]],["ordering"]]],[11,"then","","Chains two orderings.",7,[[["self"],["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",7,[[["self"],["f"]],["ordering"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"key","nom::lib::std::collections::hash_map","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",142,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",142,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",142,[[["self"],["v"]],["v"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"into_iter","","",130,[[["self"]],["i"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into_iter","","",128,[[["self"]],["i"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",11,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",11,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",11,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",11,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",11,[[["self"]],["v"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into_iter","","",134,[[["self"]],["i"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into_iter","","",136,[[["self"]],["i"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into_iter","","",138,[[["self"]],["i"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"key","","Gets a reference to the key in the entry.",141,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",141,N],[11,"get","","Gets a reference to the value in the entry.",141,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",141,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",141,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",141,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",141,[[["self"]],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The new key in the hash map will be the key used to create this entry.",141,N],[11,"replace_key","","Replaces the key in the hash map with the key used to create this entry.",141,[[["self"]],["k"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"from","","",139,[[["t"]],["t"]]],[11,"into_iter","","",139,[[["self"]],["i"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"new","","Creates a new `DefaultHasher`.",126,[[],["defaulthasher"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"into_iter","","",135,[[["self"]],["i"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",116,[[],["randomstate"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"new","","Creates an empty `HashMap`.",124,[[],["hashmap",["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",124,[[["usize"]],["hashmap",["randomstate"]]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",124,[[["s"]],["hashmap"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",124,[[["usize"],["s"]],["hashmap"]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",124,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",124,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",124,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `HashMap<K,V>`. The collection may reserve more space to avoid frequent reallocations.",124,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",124,N],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",124,N],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",124,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",124,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",124,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",124,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",124,[[["self"]],["itermut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",124,[[["self"],["k"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",124,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",124,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",124,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",124,N],[11,"get","","Returns a reference to the value corresponding to the key.",124,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",124,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",124,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",124,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",124,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",124,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",124,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",124,N],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"into_iter","","",124,[[["self"]],["i"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::collections::hash_set","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"into_iter","","",127,[[["self"]],["i"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"into_iter","","",132,[[["self"]],["i"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"into_iter","","",137,[[["self"]],["i"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into_iter","","",131,[[["self"]],["i"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into_iter","","",133,[[["self"]],["i"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"into_iter","","",140,[[["self"]],["i"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"into_iter","","",129,[[["self"]],["i"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"new","","Creates an empty `HashSet`.",125,[[],["hashset",["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",125,[[["usize"]],["hashset",["randomstate"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",125,[[["s"]],["hashset"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",125,[[["usize"],["s"]],["hashset"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",125,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",125,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",125,N],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",125,N],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",125,N],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",125,[[["self"]],["iter"]]],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",125,[[["self"],["hashset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",125,[[["self"],["hashset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",125,[[["self"],["hashset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",125,[[["self"],["hashset"]],["union"]]],[11,"len","","Returns the number of elements in the set.",125,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",125,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",125,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",125,N],[11,"contains","","Returns `true` if the set contains a value.",125,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",125,[[["self"],["q"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",125,[[["self"],["hashset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",125,[[["self"],["hashset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",125,[[["self"],["hashset"]],["bool"]]],[11,"insert","","Adds a value to the set.",125,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",125,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",125,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",125,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",125,N],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"into_iter","","",125,[[["self"]],["i"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::collections::btree_set","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"into_iter","","",230,[[["self"]],["i"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,N],[11,"from","","",240,[[["t"]],["t"]]],[11,"into_iter","","",240,[[["self"]],["i"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,N],[11,"from","","",234,[[["t"]],["t"]]],[11,"into_iter","","",234,[[["self"]],["i"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"from","","",228,[[["t"]],["t"]]],[11,"into_iter","","",228,[[["self"]],["i"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"into_iter","","",245,[[["self"]],["i"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",225,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",225,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",225,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",225,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",225,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",225,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",225,N],[11,"contains","","Returns `true` if the set contains a value.",225,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",225,[[["self"],["q"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",225,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",225,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",225,[[["self"],["btreeset"]],["bool"]]],[11,"insert","","Adds a value to the set.",225,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",225,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",225,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",225,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",225,N],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",225,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",225,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",225,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",225,[[["self"]],["bool"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"into_iter","","",225,[[["self"]],["i"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into_iter","","",227,[[["self"]],["i"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,N],[11,"from","","",243,[[["t"]],["t"]]],[11,"into_iter","","",243,[[["self"]],["i"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"new","nom::lib::std::collections","Creates an empty `BinaryHeap` as a max-heap.",226,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",226,[[["usize"]],["binaryheap"]]],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",226,[[["self"]],["iter"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",226,[[["self"]],["option"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",226,[[["self"]],["option",["peekmut"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",226,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",226,N],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",226,N],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",226,N],[11,"shrink_to","","Discards capacity with a lower bound.",226,N],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",226,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",226,N],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",226,[[["self"]],["vec"]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",226,[[["self"]],["vec"]]],[11,"len","","Returns the length of the binary heap.",226,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",226,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",226,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",226,N],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",226,N],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"into_iter","","",226,[[["self"]],["i"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"new","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque`.",223,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",223,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",223,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",223,[[["self"],["usize"]],["option"]]],[11,"swap","","Swaps elements at indices `i` and `j`.",223,N],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",223,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",223,N],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",223,N],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",223,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `VecDeque<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",223,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",223,N],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",223,N],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",223,N],[11,"iter","","Returns a front-to-back iterator.",223,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",223,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",223,N],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",223,N],[11,"len","","Returns the number of elements in the `VecDeque`.",223,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",223,[[["self"]],["bool"]]],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",223,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",223,N],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",223,[[["self"],["t"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",223,N],[11,"push_back","","Appends an element to the back of the `VecDeque`.",223,N],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",223,[[["self"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",223,[[["self"],["usize"]],["option"]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",223,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",223,N],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",223,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",223,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",223,N],[11,"retain","","Retains only the elements specified by the predicate.",223,N],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",223,N],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"into_iter","","",223,[[["self"]],["i"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,N],[11,"from","","",249,[[["t"]],["t"]]],[11,"into_iter","","",249,[[["self"]],["i"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into_iter","","",242,[[["self"]],["i"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"into_iter","","",239,[[["self"]],["i"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into_iter","","",229,[[["self"]],["i"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"key","nom::lib::std::collections::btree_map","Gets a reference to the key in the entry.",258,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",258,N],[11,"get","","Gets a reference to the value in the entry.",258,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",258,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",258,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",258,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",258,[[["self"]],["v"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"into_iter","","",233,[[["self"]],["i"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"into_iter","","",241,[[["self"]],["i"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",259,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",259,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",259,[[["self"],["v"]],["v"]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into_iter","","",244,[[["self"]],["i"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",222,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all values.",222,N],[11,"get","","Returns a reference to the value corresponding to the key.",222,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",222,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",222,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",222,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",222,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",222,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",222,N],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",222,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",222,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",222,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",222,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",222,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",222,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",222,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by key.",222,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",222,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",222,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",222,[[["self"]],["bool"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"into_iter","","",222,[[["self"]],["i"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"into_iter","","",252,[[["self"]],["i"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"into_iter","","",248,[[["self"]],["i"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",12,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",12,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",12,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",12,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",12,[[["self"]],["v"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"into_iter","","",253,[[["self"]],["i"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"into_iter","","",251,[[["self"]],["i"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into_iter","","",247,[[["self"]],["i"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"pop","nom::lib::std::collections::binary_heap","Removes the peeked value from the heap and returns it.",260,[[["peekmut"]],["t"]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"into_iter","","",256,[[["self"]],["i"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"into","","",254,[[["self"]],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,N],[11,"from","","",254,[[["t"]],["t"]]],[11,"into_iter","","",254,[[["self"]],["i"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"try_into","","",254,[[["self"]],["result"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"into_iter","","",235,[[["self"]],["i"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::ops","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"new","nom::lib::std::collections::linked_list","Creates an empty `LinkedList`.",224,[[],["linkedlist"]]],[11,"append","","Moves all elements from `other` to the end of the list.",224,N],[11,"iter","","Provides a forward iterator.",224,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",224,[[["self"]],["itermut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",224,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",224,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",224,N],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",224,[[["self"],["t"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",224,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",224,[[["self"]],["option"]]],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",224,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",224,[[["self"]],["option"]]],[11,"push_front","","Adds an element first in the list.",224,N],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",224,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list",224,N],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",224,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",224,[[["self"],["usize"]],["linkedlist"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",224,[[["self"],["f"]],["drainfilter"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"into_iter","","",224,[[["self"]],["i"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,N],[11,"from","","",238,[[["t"]],["t"]]],[11,"into_iter","","",238,[[["self"]],["i"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"insert_next","","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",250,N],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",250,[[["self"]],["option"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into_iter","","",250,[[["self"]],["i"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,N],[11,"from","","",246,[[["t"]],["t"]]],[11,"into_iter","","",246,[[["self"]],["i"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into_iter","","",255,[[["self"]],["i"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::collections","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"entry","nom::lib::std::fmt","Adds a new entry to the list output.",261,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list output.",261,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",261,[[["self"]],["result",["error"]]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"to_string","","",123,[[["self"]],["string"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"to_string","","",216,[[["self"]],["string"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"field","","Adds a new field to the generated struct output.",262,[[["self"],["str"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",262,[[["self"]],["result",["error"]]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"entry","","Adds a new entry to the map output.",263,[[["self"],["debug"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map output.",263,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",263,[[["self"]],["result",["error"]]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",220,[[["self"],["bool"],["str"],["str"]],["result",["error"]]]],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",220,[[["self"],["str"]],["result",["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",220,[[["self"],["str"]],["result",["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",220,[[["self"],["arguments"]],["result",["error"]]]],[11,"flags","","Flags for formatting",220,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",220,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",220,[[["self"]],["option",["alignment"]]]],[11,"width","","Optionally specified integer width that the output should be.",220,[[["self"]],["option",["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",220,[[["self"]],["option",["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",220,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",220,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",220,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",220,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",220,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",220,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",220,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",220,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",220,[[["self"]],["debugmap"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"entry","","Adds a new entry to the set output.",264,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set output.",264,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",264,[[["self"]],["result",["error"]]]],[11,"into","","",264,[[["self"]],["u"]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"try_into","","",264,[[["self"]],["result"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"field","","Adds a new field to the generated tuple struct output.",265,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",265,[[["self"]],["result",["error"]]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::hash","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",215,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",215,[[["u64"],["u64"]],["siphasher"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::iter","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"into_iter","","",173,[[["self"]],["i"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"into_iter","","",194,[[["self"]],["i"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"into_iter","","",159,[[["self"]],["i"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"from","","",156,[[["t"]],["t"]]],[11,"into_iter","","",156,[[["self"]],["i"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"into_iter","","",144,[[["self"]],["i"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"into_iter","","",146,[[["self"]],["i"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"into_iter","","",174,[[["self"]],["i"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"into_iter","","",195,[[["self"]],["i"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"into_iter","","",149,[[["self"]],["i"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"from","","",181,[[["t"]],["t"]]],[11,"into_iter","","",181,[[["self"]],["i"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",182,[[["self"]],["option"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"into_iter","","",182,[[["self"]],["i"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"into_iter","","",166,[[["self"]],["i"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"into_iter","","",171,[[["self"]],["i"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"from","","",187,[[["t"]],["t"]]],[11,"into_iter","","",187,[[["self"]],["i"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"into_iter","","",207,[[["self"]],["i"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"into_iter","","",201,[[["self"]],["i"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"from","","",186,[[["t"]],["t"]]],[11,"into_iter","","",186,[[["self"]],["i"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"into_iter","","",154,[[["self"]],["i"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"into_iter","","",188,[[["self"]],["i"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"from","","",176,[[["t"]],["t"]]],[11,"into_iter","","",176,[[["self"]],["i"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"into_iter","","",172,[[["self"]],["i"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"into_iter","","",197,[[["self"]],["i"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"into_iter","","",206,[[["self"]],["i"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"from","","",185,[[["t"]],["t"]]],[11,"into_iter","","",185,[[["self"]],["i"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::mem","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"new","","Wrap a value to be manually dropped.",213,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extract the value from the ManuallyDrop container.",213,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",213,N],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"new","","Construct a new `PinMut` around a reference to some data of a type that implements `Unpin`.",212,[[["t"]],["pinmut"]]],[11,"get_mut","","Get a mutable reference to the data inside of this `PinMut`.",212,[[["pinmut"]],["t"]]],[11,"new_unchecked","","Construct a new `PinMut` around a reference to some data of a type that may or may not implement `Unpin`.",212,[[["t"]],["pinmut"]]],[11,"reborrow","","Reborrow a `PinMut` for a shorter lifetime.",212,[[["self"]],["pinmut"]]],[11,"get_mut_unchecked","","Get a mutable reference to the data inside of this `PinMut`.",212,[[["pinmut"]],["t"]]],[11,"map_unchecked","","Construct a new pin by mapping the interior value.",212,[[["pinmut"],["f"]],["pinmut"]]],[11,"set","","Assign a new value to the memory behind the pinned reference.",212,N],[11,"into","","",212,[[["self"]],["u"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"to_string","","",212,[[["self"]],["string"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"contains","nom::lib::std::ops","Returns `true` if `item` is contained in the range.",58,[[["self"],["u"]],["bool"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",59,[[["self"],["u"]],["bool"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing `start..=end`.",205,[[["idx"],["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",205,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",205,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).",205,N],[11,"contains","","Returns `true` if `item` is contained in the range.",205,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",205,[[["self"]],["bool"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"into_iter","","",205,[[["self"]],["i"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",76,[[["self"],["u"]],["bool"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"into_iter","","",76,[[["self"]],["i"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",80,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",80,[[["self"]],["bool"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"into_iter","","",80,[[["self"]],["i"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"is_some","nom::lib::std::prelude::v1::v1","Returns `true` if the option is a [`Some`] value.",82,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",82,[[["self"]],["bool"]]],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",82,[[["self"]],["option"]]],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",82,[[["self"]],["option"]]],[11,"as_pin_mut","","Converts from `Option<T>` to `Option<PinMut<'_, T>>`",82,[[["pinmut",["option"]]],["option",["pinmut"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",82,[[["self"],["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",82,[[["self"]],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",82,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",82,[[["self"],["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",82,[[["self"],["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",82,[[["self"],["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",82,[[["self"],["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",82,[[["self"],["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",82,[[["self"],["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",82,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",82,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",82,[[["self"],["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",82,[[["self"],["f"]],["option"]]],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",82,[[["self"],["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",82,[[["self"],["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",82,[[["self"],["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",82,[[["self"],["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",82,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",82,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",82,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a [`Some`] in its place without deinitializing either one.",82,[[["self"],["t"]],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",82,[[["self"]],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",82,[[["self"]],["option"]]],[11,"unwrap_or_default","","Returns the contained value or a default",82,[[["self"]],["t"]]],[11,"deref","","Converts from `&Option<T>` to `Option<&T::Target>`.",82,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",82,[[["self"]],["result",["option"]]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"into_iter","","",82,[[["self"]],["i"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::option","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"into_iter","","",199,[[["self"]],["i"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into_iter","","",190,[[["self"]],["i"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"into_iter","","",165,[[["self"]],["i"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"is_ok","nom::lib::std::prelude::v1::v1","Returns `true` if the result is [`Ok`].",83,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",83,[[["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",83,[[["self"]],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",83,[[["self"]],["option"]]],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",83,[[["self"]],["result"]]],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",83,[[["self"]],["result"]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",83,[[["self"],["f"]],["result"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",83,[[["self"],["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",83,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",83,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",83,[[["self"],["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",83,[[["self"],["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",83,[[["self"],["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",83,[[["self"],["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",83,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",83,[[["self"],["f"]],["t"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",83,[[["self"]],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",83,[[["self"],["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",83,[[["self"]],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",83,[[["self"],["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",83,[[["self"]],["t"]]],[11,"deref_ok","","Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.",83,[[["self"]],["result"]]],[11,"deref_err","","Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.",83,[[["self"]],["result"]]],[11,"deref","","Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.",83,[[["self"]],["result"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",83,[[["self"]],["option",["result"]]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"into_iter","","",83,[[["self"]],["i"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::result","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"into_iter","","",164,[[["self"]],["i"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into_iter","","",183,[[["self"]],["i"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"into_iter","","",204,[[["self"]],["i"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::slice","",160,[[["self"]],["u"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into_iter","","",160,[[["self"]],["i"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",170,N],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"into_iter","","",170,[[["self"]],["i"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"into_iter","","",167,[[["self"]],["i"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"from","","",180,[[["t"]],["t"]]],[11,"into_iter","","",180,[[["self"]],["i"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"into_slice","","View the underlying data as a subslice of the original data.",193,N],[11,"into","","",193,[[["self"]],["u"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into_iter","","",193,[[["self"]],["i"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into_iter","","",153,[[["self"]],["i"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into_iter","","",157,[[["self"]],["i"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into_iter","","",145,[[["self"]],["i"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into_iter","","",163,[[["self"]],["i"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into_iter","","",191,[[["self"]],["i"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"as_slice","","View the underlying data as a subslice of the original data.",147,N],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"into_iter","","",147,[[["self"]],["i"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"into_iter","","",175,[[["self"]],["i"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"into_iter","","",202,[[["self"]],["i"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"into_remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",178,N],[11,"into","","",178,[[["self"]],["u"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into_iter","","",178,[[["self"]],["i"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into_iter","","",150,[[["self"]],["i"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::str","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"into_iter","","",196,[[["self"]],["i"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"from","","",192,[[["t"]],["t"]]],[11,"into_iter","","",192,[[["self"]],["i"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"into_iter","","",155,[[["self"]],["i"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"from","","",152,[[["t"]],["t"]]],[11,"into_iter","","",152,[[["self"]],["i"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"into_iter","","",198,[[["self"]],["i"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",151,[[["self"]],["str"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"into_iter","","",151,[[["self"]],["i"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"into_iter","","",203,[[["self"]],["i"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",120,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",120,[[["self"]],["option",["usize"]]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"to_string","","",120,[[["self"]],["string"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::str::pattern","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"into","nom::lib::std::str","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"into_iter","","",161,[[["self"]],["i"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"from","","",189,[[["t"]],["t"]]],[11,"into_iter","","",189,[[["self"]],["i"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"to_string","","",119,[[["self"]],["string"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"into_iter","","",158,[[["self"]],["i"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"into_iter","","",168,[[["self"]],["i"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"from","","",184,[[["t"]],["t"]]],[11,"into_iter","","",184,[[["self"]],["i"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",177,[[["self"]],["str"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"from","","",177,[[["t"]],["t"]]],[11,"into_iter","","",177,[[["self"]],["i"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"from","","",179,[[["t"]],["t"]]],[11,"into_iter","","",179,[[["self"]],["i"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"into_iter","","",162,[[["self"]],["i"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"into_iter","","",148,[[["self"]],["i"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"into_iter","","",200,[[["self"]],["i"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"into_iter","","",169,[[["self"]],["i"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"new","nom::lib::std::prelude::v1::v1","Creates a new empty `String`.",117,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",117,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",117,[[["vec",["u8"]]],["result",["string","fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",117,N],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",117,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",117,N],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",117,N],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",117,[[["vec",["u8"]]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",117,[[["self"]],["vec",["u8"]]]],[11,"as_str","","Extracts a string slice containing the entire string.",117,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",117,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",117,N],[11,"capacity","","Returns this `String`'s capacity, in bytes.",117,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",117,N],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",117,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `String`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",117,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `String`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",117,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",117,N],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",117,N],[11,"push","","Appends the given [`char`] to the end of this `String`.",117,N],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",117,N],[11,"truncate","","Shortens this `String` to the specified length.",117,N],[11,"pop","","Removes the last character from the string buffer and returns it.",117,[[["self"]],["option",["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",117,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",117,N],[11,"insert","","Inserts a character into this `String` at a byte position.",117,N],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",117,N],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",117,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes.",117,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",117,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",117,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",117,N],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",117,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",117,N],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",117,[[["self"]],["box",["str"]]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"to_string","","",117,[[["self"]],["string"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"as_bytes","nom::lib::std::string","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",118,N],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",118,[[["self"]],["vec",["u8"]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",118,[[["self"]],["utf8error"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"to_string","","",118,[[["self"]],["string"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"to_string","","",121,[[["self"]],["string"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into_iter","","",232,[[["self"]],["i"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"new","nom::lib::std::prelude::v1::v1","Constructs a new, empty `Vec<T>`.",143,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",143,[[["usize"]],["vec"]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",143,N],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",143,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",143,N],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",143,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",143,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",143,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",143,N],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",143,N],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",143,[[["self"]],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",143,N],[11,"as_slice","","Extracts a slice containing the entire vector.",143,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",143,N],[11,"set_len","","Sets the length of a vector.",143,N],[11,"swap_remove","","Removes an element from the vector and returns it.",143,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",143,N],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",143,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",143,N],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",143,N],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",143,N],[11,"push","","Appends an element to the back of a collection.",143,N],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",143,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",143,N],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",143,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",143,N],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",143,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",143,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",143,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",143,N],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",143,N],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",143,N],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",143,N],[11,"dedup","","Removes consecutive repeated elements in the vector.",143,N],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",143,[[["self"],["t"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",143,[[["self"],["r"],["i"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",143,[[["self"],["f"]],["drainfilter"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"into_iter","","",143,[[["self"]],["i"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"as_slice","nom::lib::std::vec","Returns the remaining items of this iterator as a slice.",236,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",236,N],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"into_iter","","",236,[[["self"]],["i"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into_iter","","",257,[[["self"]],["i"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into_iter","","",231,[[["self"]],["i"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"into_iter","","",237,[[["self"]],["i"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"into","nom::simple_errors","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"split_at_position","nom::types","",97,[[["self"],["p"]],["iresult",["u32"]]]],[11,"split_at_position1","","",97,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[11,"split_at_position","","",96,[[["self"],["p"]],["iresult",["u32"]]]],[11,"split_at_position1","","",96,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"to_string","","",96,[[["self"]],["string"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]]],"paths":[[4,"CompareResult"],[4,"ErrorKind"],[4,"Needed"],[4,"Err"],[4,"Endianness"],[8,"FnBox"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[4,"Entry"],[4,"Entry"],[4,"Bound"],[4,"CollectionAllocErr"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Pointer"],[8,"Display"],[4,"Alignment"],[8,"Debug"],[8,"Write"],[8,"Octal"],[8,"UpperExp"],[8,"UpperHex"],[8,"LowerExp"],[8,"Binary"],[8,"LowerHex"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Product"],[8,"Extend"],[8,"Iterator"],[8,"Sum"],[8,"IntoIterator"],[8,"FromIterator"],[8,"Step"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"RemAssign"],[8,"FnMut"],[8,"BitOr"],[8,"RangeBounds"],[8,"SubAssign"],[8,"Add"],[8,"Try"],[8,"Neg"],[8,"Not"],[8,"Rem"],[8,"Shr"],[8,"DerefMut"],[8,"IndexMut"],[8,"BitAnd"],[3,"RangeToInclusive"],[3,"RangeTo"],[4,"GeneratorState"],[8,"FnOnce"],[8,"Deref"],[8,"Drop"],[8,"Sub"],[8,"Generator"],[8,"BitXorAssign"],[8,"Fn"],[8,"Index"],[8,"BitOrAssign"],[8,"ShrAssign"],[8,"BitAndAssign"],[8,"MulAssign"],[8,"Div"],[8,"ShlAssign"],[8,"AddAssign"],[3,"RangeFrom"],[8,"Shl"],[8,"DivAssign"],[8,"Mul"],[3,"Range"],[8,"BitXor"],[4,"Option"],[4,"Result"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[8,"Clone"],[8,"ToOwned"],[8,"Default"],[4,"Context"],[3,"CompleteStr"],[3,"CompleteByteSlice"],[3,"Input"],[8,"InputLength"],[8,"Offset"],[8,"AsBytes"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"InputTakeAtPosition"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"AtEof"],[8,"ExtendInto"],[8,"HexDisplay"],[8,"Convert"],[3,"Box"],[3,"RandomState"],[3,"String"],[3,"FromUtf8Error"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Error"],[3,"HashMap"],[3,"HashSet"],[3,"DefaultHasher"],[3,"SymmetricDifference"],[3,"IterMut"],[3,"Union"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"ValuesMut"],[3,"Values"],[3,"IntoIter"],[3,"Intersection"],[3,"Drain"],[3,"Keys"],[3,"Difference"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Vec"],[3,"Chain"],[3,"RSplitMut"],[3,"Zip"],[3,"Iter"],[3,"RSplitN"],[3,"FilterMap"],[3,"RSplitN"],[3,"CharIndices"],[3,"Bytes"],[3,"ChunksMut"],[3,"Flatten"],[3,"Lines"],[3,"StepBy"],[3,"RSplitNMut"],[3,"SplitTerminator"],[3,"Cycle"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"RMatches"],[3,"SplitMut"],[3,"Iter"],[3,"IntoIter"],[3,"SkipWhile"],[3,"Chunks"],[3,"MatchIndices"],[3,"Matches"],[3,"ExactChunks"],[3,"TakeWhile"],[3,"Empty"],[3,"Rev"],[3,"Map"],[3,"Windows"],[3,"Inspect"],[3,"Chars"],[3,"ExactChunksMut"],[3,"RSplit"],[3,"Split"],[3,"Enumerate"],[3,"Peekable"],[3,"IterMut"],[3,"LinesAny"],[3,"Repeat"],[3,"FlatMap"],[3,"Skip"],[3,"Fuse"],[3,"RMatchIndices"],[3,"IterMut"],[3,"SplitNMut"],[3,"SplitN"],[3,"IterMut"],[3,"Cloned"],[3,"Filter"],[3,"SplitWhitespace"],[3,"RepeatWith"],[3,"Split"],[3,"Iter"],[3,"SplitAsciiWhitespace"],[3,"Scan"],[3,"RSplit"],[3,"EncodeUtf16"],[3,"IntoIter"],[3,"RangeInclusive"],[3,"Once"],[3,"Take"],[3,"CharSearcher"],[3,"StrSearcher"],[3,"CharPredicateSearcher"],[3,"CharSliceSearcher"],[3,"PinMut"],[3,"ManuallyDrop"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Arguments"],[3,"RangeFull"],[3,"Discriminant"],[3,"NoneError"],[3,"Formatter"],[3,"PinBox"],[3,"BTreeMap"],[3,"VecDeque"],[3,"LinkedList"],[3,"BTreeSet"],[3,"BinaryHeap"],[3,"IntoIter"],[3,"SymmetricDifference"],[3,"Drain"],[3,"Range"],[3,"Splice"],[3,"Drain"],[3,"Range"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Iter"],[3,"IntoIter"],[3,"Union"],[3,"Keys"],[3,"IterMut"],[3,"Intersection"],[3,"RangeMut"],[3,"Difference"],[3,"IntoIter"],[3,"IterMut"],[3,"Iter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Values"],[3,"ValuesMut"],[3,"IntoIter"],[3,"DrainFilter"],[3,"Iter"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"PeekMut"],[3,"DebugList"],[3,"DebugStruct"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugTuple"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"fmt","num_traits","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordered_float"]={"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[12,"0","","",0,N],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",N,N],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"partial_cmp","","",0,[[["self"],["orderedfloat"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"le","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"gt","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"ge","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["orderedfloat"]]],[11,"clone","","",0,[[["self"]],["orderedfloat"]]],[11,"into_inner","","Get the value out.",0,[[["self"]],["t"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"cmp","","",0,[[["self"],["orderedfloat"]],["ordering"]]],[11,"eq","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["f32"]]],[11,"into","","",0,[[["self"]],["f64"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"partial_cmp","","",1,[[["self"],["notnan"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"le","","",1,[[["self"],["notnan"]],["bool"]]],[11,"gt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ge","","",1,[[["self"],["notnan"]],["bool"]]],[11,"eq","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ne","","",1,[[["self"],["notnan"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["notnan"]]],[11,"clone","","",1,[[["self"]],["notnan"]]],[11,"new","","Create a NotNaN value.",1,[[["t"]],["result",["floatisnan"]]]],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,[[["t"]],["self"]]],[11,"into_inner","","Get the value out.",1,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"cmp","","",1,[[["self"],["notnan"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into","","",1,[[["self"]],["f32"]]],[11,"into","","",1,[[["self"]],["f64"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"deref","","",1,N],[11,"add","","",1,[[["self"],["self"]],["self"]]],[11,"add","","",1,[[["self"],["t"]],["self"]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["f64"]]]],[11,"add_assign","","",1,[[["self"],["f32"]]]],[11,"sub","","",1,[[["self"],["self"]],["self"]]],[11,"sub","","",1,[[["self"],["t"]],["self"]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["f64"]]]],[11,"sub_assign","","",1,[[["self"],["f32"]]]],[11,"mul","","",1,[[["self"],["self"]],["self"]]],[11,"mul","","",1,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["f64"]]]],[11,"mul_assign","","",1,[[["self"],["f32"]]]],[11,"div","","",1,[[["self"],["self"]],["self"]]],[11,"div","","",1,[[["self"],["t"]],["self"]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["f64"]]]],[11,"div_assign","","",1,[[["self"],["f32"]]]],[11,"rem","","",1,[[["self"],["self"]],["self"]]],[11,"rem","","",1,[[["self"],["t"]],["self"]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["f64"]]]],[11,"rem_assign","","",1,[[["self"],["f32"]]]],[11,"neg","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["floatisnan"]]],[11,"eq","","",2,[[["self"],["floatisnan"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into","","",2,[[["self"]],["error"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["plane_split"]={"doc":"Plane splitting.","items":[[3,"BspSplitter","plane_split","Binary Space Partitioning splitter, uses a BSP tree.",N,N],[3,"LineProjection","","The projection of a `Polygon` on a line.",N,N],[12,"markers","","Projected value of each point in the polygon.",0,N],[3,"Polygon","","A convex polygon with 4 points lying on a plane.",N,N],[12,"points","","Points making the polygon.",1,N],[12,"plane","","A plane describing polygon orientation.",1,N],[12,"anchor","","A simple anchoring index to allow association of the produced split polygons with the original one.",1,N],[3,"Line","","A generic line.",N,N],[12,"origin","","Arbitrary point on the line.",2,N],[12,"dir","","Normalized direction of the line.",2,N],[3,"Plane","","An infinite plane in 3D space, defined by equation: dot(v, normal) + offset = 0 When used for plane splitting, it's defining a hemisphere with equation \"dot(v, normal) + offset > 0\".",N,N],[12,"normal","","Normalized vector perpendicular to the plane.",3,N],[12,"offset","","Constant offset from the normal plane, specified in the direction opposite to the normal.",3,N],[3,"Clipper","","A helper object to clip polygons by a number of planes.",N,N],[4,"Intersection","","Polygon intersection results.",N,N],[13,"Coplanar","","Polygons are coplanar, including the case of being on the same plane.",4,N],[13,"Outside","","Polygon planes are intersecting, but polygons are not.",4,N],[13,"Inside","","Polygons are actually intersecting.",4,N],[11,"cut","","",1,[[["self"],["self"]],["planecut"]]],[11,"is_aligned","","",1,[[["self"],["self"]],["bool"]]],[11,"new","","Create a new BSP splitter.",5,[[],["self"]]],[11,"reset","","",5,[[["self"]]]],[11,"add","","",5,[[["self"],["polygon"]]]],[11,"sort","","",5,N],[11,"get_bounds","","Get the min/max of the line projection markers.",0,N],[11,"intersect","","Check intersection with another line projection.",0,[[["self"],["self"]],["bool"]]],[11,"is_outside","","Return true if the intersection is completely outside.",4,[[["self"]],["bool"]]],[11,"is_inside","","Return true if the intersection cuts the source polygon.",4,[[["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["polygon"]],["bool"]]],[11,"ne","","",1,[[["self"],["polygon"]],["bool"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"from_points","","Construct a polygon from points that are already transformed.",1,N],[11,"from_transformed_rect","","Construct a polygon from a rectangle with 3D transform.",1,[[["typedrect"],["typedtransform3d"],["usize"]],["self"]]],[11,"untransform_point","","Bring a point into the local coordinate space, returning the 2D normalized coordinates.",1,[[["self"],["typedpoint3d"]],["point2d"]]],[11,"is_valid","","Check if all the points are indeed placed on the plane defined by the normal and offset, and the winding order is consistent.",1,[[["self"]],["bool"]]],[11,"contains","","Check if this polygon contains another one.",1,[[["self"],["self"]],["bool"]]],[11,"project_on","","Project this polygon onto a 3D vector, returning a line projection. Note: we can think of it as a projection to a ray placed at the origin.",1,[[["self"],["typedvector3d"]],["lineprojection"]]],[11,"intersect_plane","","Compute the line of intersection with an infinite plane.",1,[[["self"],["plane"]],["intersection",["line"]]]],[11,"intersect","","Compute the line of intersection with another polygon.",1,[[["self"],["self"]],["intersection",["line"]]]],[11,"split","","Split the polygon along the specified `Line`. Will do nothing if the line doesn't belong to the polygon plane.",1,N],[8,"Splitter","","Generic plane splitter interface",N,N],[10,"reset","","Reset the splitter results.",6,[[["self"]]]],[10,"add","","Add a new polygon and return a slice of the subdivisions that avoid collision with any of the previously added polygons.",6,[[["self"],["polygon"]]]],[10,"sort","","Sort the produced polygon set by the ascending distance across the specified view vector. Return the sorted slice.",6,N],[11,"solve","","Process a set of polygons at once.",6,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"is_valid","","Check if the line has consistent parameters.",2,[[["self"]],["bool"]]],[11,"matches","","Check if two lines match each other.",2,[[["self"],["self"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["plane"]],["bool"]]],[11,"ne","","",3,[[["self"],["plane"]],["bool"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"contains","","Check if this plane contains another one.",3,[[["self"],["self"]],["bool"]]],[11,"signed_distance_to","","Return the signed distance from this plane to a point. The distance is negative if the point is on the other side of the plane from the direction of the normal.",3,[[["self"],["typedpoint3d"]],["t"]]],[11,"distance_to_line","","Compute the distance across the line to the plane plane, starting from the line origin.",3,[[["self"],["line"]],["t"]]],[11,"signed_distance_sum_to","","Compute the sum of signed distances to each of the points of another plane. Useful to know the relation of a plane that is a product of a split, and we know it doesn't intersect `self`.",3,[[["self"],["polygon"]],["t"]]],[11,"are_outside","","Check if a convex shape defined by a set of points is completely outside of this plane. Merely touching the surface is not considered an intersection.",3,N],[11,"intersect","","Compute the line of intersection with another plane.",3,[[["self"],["self"]],["option",["line"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new clipper object.",7,[[],["self"]]],[11,"add","","Add a clipping plane to the list. The plane will clip everything behind it, where the direction is set by the plane normal.",7,[[["self"],["plane"]]]],[11,"clip","","Clip specified polygon by the contained planes, return the fragmented polygons.",7,N],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]]],"paths":[[3,"LineProjection"],[3,"Polygon"],[3,"Line"],[3,"Plane"],[4,"Intersection"],[3,"BspSplitter"],[8,"Splitter"],[3,"Clipper"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",3,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",4,[[["self"]],["intoiter"]]],[11,"clone","","",4,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,[[],["tokenstream"]]],[11,"empty","","",4,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"from_str","","",4,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",4,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"from_iter","","",4,[[["i"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",6,[[],["span"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","proc_macro2::token_stream","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rayon"]={"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",N,[[],["usize"]]],[3,"ThreadPool","","Represents a user created [thread-pool].",N,N],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",N,N],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",N,N],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",N,N],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",N,N],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",N,N],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",N,[[["op"]],["r"]]],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",N,N],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",N,N],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",N,N],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",0,N],[11,"opt_len","","",0,[[["self"]],["option",["usize"]]]],[11,"drive","","",0,N],[11,"len","","",0,[[["self"]],["usize"]]],[11,"with_producer","","",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"drive_unindexed","","",1,N],[11,"opt_len","","",1,[[["self"]],["option",["usize"]]]],[11,"drive","","",1,N],[11,"len","","",1,[[["self"]],["usize"]]],[11,"with_producer","","",1,N],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",2,N],[11,"opt_len","","",2,[[["self"]],["option",["usize"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"drive_unindexed","","",3,N],[11,"opt_len","","",3,[[["self"]],["option",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",4,N],[11,"opt_len","","",4,[[["self"]],["option",["usize"]]]],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",N,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",5,N],[11,"opt_len","","",5,[[["self"]],["option",["usize"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"drive_unindexed","","",6,N],[11,"opt_len","","",6,[[["self"]],["option",["usize"]]]],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",7,N],[11,"opt_len","","",7,[[["self"]],["option",["usize"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"drive_unindexed","","",8,N],[11,"opt_len","","",8,[[["self"]],["option",["usize"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",9,N],[11,"opt_len","","",9,[[["self"]],["option",["usize"]]]],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",N,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",10,N],[11,"opt_len","","",10,[[["self"]],["option",["usize"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"drive_unindexed","","",11,N],[11,"opt_len","","",11,[[["self"]],["option",["usize"]]]],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",N,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",12,N],[11,"opt_len","","",12,[[["self"]],["option",["usize"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"drive_unindexed","","",13,N],[11,"opt_len","","",13,[[["self"]],["option",["usize"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",14,N],[11,"opt_len","","",14,[[["self"]],["option",["usize"]]]],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",N,N],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",N,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",15,N],[11,"opt_len","","",15,[[["self"]],["option",["usize"]]]],[11,"drive","","",15,N],[11,"len","","",15,[[["self"]],["usize"]]],[11,"with_producer","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"drive_unindexed","","",16,N],[11,"opt_len","","",16,[[["self"]],["option",["usize"]]]],[11,"drive","","",16,N],[11,"len","","",16,[[["self"]],["usize"]]],[11,"with_producer","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",17,N],[11,"opt_len","","",17,[[["self"]],["option",["usize"]]]],[11,"drive","","",17,N],[11,"len","","",17,[[["self"]],["usize"]]],[11,"with_producer","","",17,N],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",N,N],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",18,N],[13,"Right","","A value of type `R`.",18,N],[3,"IterBridge","","`IterBridge` is a parallel iterator that wraps a sequential iterator.",N,N],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",N,N],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",N,N],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",N,N],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",N,N],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",N,N],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",N,N],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",N,N],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",N,N],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",N,N],[3,"TryFold","","`TryFold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold()`] method on [`ParallelIterator`]",N,N],[3,"TryFoldWith","","`TryFoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]",N,N],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",N,N],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",N,N],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",N,N],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",N,N],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",N,N],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",N,N],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",N,N],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",N,N],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",N,N],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",N,N],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",N,N],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",N,N],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",N,N],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",N,N],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",N,N],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",N,N],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",N,N],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",N,N],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",N,N],[3,"Empty","","Iterator adaptor for the `empty()` function.",N,N],[3,"Once","","Iterator adaptor for the `once()` function.",N,N],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",N,[[["d"],["s"]],["split"]]],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",N,[[["t"]],["repeat"]]],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",N,[[["t"],["usize"]],["repeatn"]]],[5,"empty","","Creates a parallel iterator that produces nothing.",N,[[],["empty"]]],[5,"once","","Creates a parallel iterator that produces an element exactly once.",N,[[["t"]],["once"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["iterbridge"]]],[11,"drive_unindexed","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["chain"]]],[11,"drive_unindexed","","",20,N],[11,"opt_len","","",20,[[["self"]],["option",["usize"]]]],[11,"drive","","",20,N],[11,"len","","",20,[[["self"]],["usize"]]],[11,"with_producer","","",20,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["chunks"]]],[11,"drive_unindexed","","",21,N],[11,"opt_len","","",21,[[["self"]],["option",["usize"]]]],[11,"drive","","",21,N],[11,"len","","",21,[[["self"]],["usize"]]],[11,"with_producer","","",21,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["enumerate"]]],[11,"drive_unindexed","","",22,N],[11,"opt_len","","",22,[[["self"]],["option",["usize"]]]],[11,"drive","","",22,N],[11,"len","","",22,[[["self"]],["usize"]]],[11,"with_producer","","",22,N],[11,"clone","","",23,[[["self"]],["filter"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",23,N],[11,"clone","","",24,[[["self"]],["filtermap"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",24,N],[11,"clone","","",25,[[["self"]],["flatmap"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",25,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["flatten"]]],[11,"drive_unindexed","","",26,N],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",N,N],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",N,N],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",N,N],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",N,N],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",N,N],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",27,N],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",27,N],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",N,N],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",28,N],[16,"IntoIter","","The type of iterator we will become.",28,N],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",28,N],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,[[["self"]],["usize"]]],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,[[["self"]],["usize"]]],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",28,N],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",28,[[["self"],["f"]],["f"]]],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",N,N],[16,"Folder","","The type of folder that this consumer can be converted into.",29,N],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",29,N],[16,"Result","","The type of result that this consumer will ultimately produce.",29,N],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",29,N],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",29,N],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",29,[[["self"]],["bool"]]],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",N,N],[16,"Result","","The type of result that will ultimately be produced by the folder.",30,N],[10,"consume","","Consume next item and return new sequential state.",30,[[["self"],["item"]],["self"]]],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",30,[[["self"],["i"]],["self"]]],[10,"complete","","Finish consuming items, produce final result.",30,N],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",30,[[["self"]],["bool"]]],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",N,N],[10,"reduce","","Reduce two final results into one; this is executed after a split.",31,[[["self"],["result"],["result"]],["result"]]],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",N,N],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",32,[[["self"]],["self"]]],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",32,N],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",N,N],[16,"Item","","The type of item returned by this producer.",33,N],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",33,N],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",33,[[["self"],["f"]],["f"]]],[11,"clone","rayon::iter","",34,[[["self"]],["fold"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",34,N],[11,"clone","","",35,[[["self"]],["foldwith"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",35,N],[11,"clone","","",36,[[["self"]],["tryfold"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",36,N],[11,"clone","","",37,[[["self"]],["tryfoldwith"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",37,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["skip"]]],[11,"drive_unindexed","","",38,N],[11,"opt_len","","",38,[[["self"]],["option",["usize"]]]],[11,"len","","",38,[[["self"]],["usize"]]],[11,"drive","","",38,N],[11,"with_producer","","",38,N],[11,"clone","","",39,[[["self"]],["split"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",39,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["take"]]],[11,"drive_unindexed","","",40,N],[11,"opt_len","","",40,[[["self"]],["option",["usize"]]]],[11,"len","","",40,[[["self"]],["usize"]]],[11,"drive","","",40,N],[11,"with_producer","","",40,N],[11,"clone","","",41,[[["self"]],["map"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",41,N],[11,"opt_len","","",41,[[["self"]],["option",["usize"]]]],[11,"drive","","",41,N],[11,"len","","",41,[[["self"]],["usize"]]],[11,"with_producer","","",41,N],[11,"clone","","",42,[[["self"]],["mapwith"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",42,N],[11,"opt_len","","",42,[[["self"]],["option",["usize"]]]],[11,"drive","","",42,N],[11,"len","","",42,[[["self"]],["usize"]]],[11,"with_producer","","",42,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["zip"]]],[11,"drive_unindexed","","",43,N],[11,"opt_len","","",43,[[["self"]],["option",["usize"]]]],[11,"drive","","",43,N],[11,"len","","",43,[[["self"]],["usize"]]],[11,"with_producer","","",43,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["zipeq"]]],[11,"drive_unindexed","","",44,N],[11,"opt_len","","",44,[[["self"]],["option",["usize"]]]],[11,"drive","","",44,N],[11,"len","","",44,[[["self"]],["usize"]]],[11,"with_producer","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["interleave"]]],[11,"drive_unindexed","","",45,N],[11,"opt_len","","",45,[[["self"]],["option",["usize"]]]],[11,"drive","","",45,N],[11,"len","","",45,[[["self"]],["usize"]]],[11,"with_producer","","",45,N],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["interleaveshortest"]]],[11,"drive_unindexed","","",46,N],[11,"opt_len","","",46,[[["self"]],["option",["usize"]]]],[11,"drive","","",46,N],[11,"len","","",46,[[["self"]],["usize"]]],[11,"with_producer","","",46,N],[11,"clone","","",47,[[["self"]],["intersperse"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",47,N],[11,"opt_len","","",47,[[["self"]],["option",["usize"]]]],[11,"drive","","",47,N],[11,"len","","",47,[[["self"]],["usize"]]],[11,"with_producer","","",47,N],[11,"clone","","",48,[[["self"]],["update"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",48,N],[11,"opt_len","","",48,[[["self"]],["option",["usize"]]]],[11,"drive","","",48,N],[11,"len","","",48,[[["self"]],["usize"]]],[11,"with_producer","","",48,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["rev"]]],[11,"drive_unindexed","","",49,N],[11,"opt_len","","",49,[[["self"]],["option",["usize"]]]],[11,"drive","","",49,N],[11,"len","","",49,[[["self"]],["usize"]]],[11,"with_producer","","",49,N],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["minlen"]]],[11,"drive_unindexed","","",50,N],[11,"opt_len","","",50,[[["self"]],["option",["usize"]]]],[11,"drive","","",50,N],[11,"len","","",50,[[["self"]],["usize"]]],[11,"with_producer","","",50,N],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["maxlen"]]],[11,"drive_unindexed","","",51,N],[11,"opt_len","","",51,[[["self"]],["option",["usize"]]]],[11,"drive","","",51,N],[11,"len","","",51,[[["self"]],["usize"]]],[11,"with_producer","","",51,N],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["cloned"]]],[11,"drive_unindexed","","",52,N],[11,"opt_len","","",52,[[["self"]],["option",["usize"]]]],[11,"drive","","",52,N],[11,"len","","",52,[[["self"]],["usize"]]],[11,"with_producer","","",52,N],[11,"clone","","",53,[[["self"]],["inspect"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",53,N],[11,"opt_len","","",53,[[["self"]],["option",["usize"]]]],[11,"drive","","",53,N],[11,"len","","",53,[[["self"]],["usize"]]],[11,"with_producer","","",53,N],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"clone","","",54,[[["self"]],["whilesome"]]],[11,"drive_unindexed","","",54,N],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["repeat"]]],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",55,[[["self"],["usize"]],["repeatn"]]],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",55,[[["self"],["z"]],["zip",["repeatn"]]]],[11,"drive_unindexed","","",55,N],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",56,[[["self"]],["repeatn"]]],[11,"drive_unindexed","","",56,N],[11,"opt_len","","",56,[[["self"]],["option",["usize"]]]],[11,"drive","","",56,N],[11,"with_producer","","",56,N],[11,"len","","",56,[[["self"]],["usize"]]],[11,"clone","","",57,[[["self"]],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",57,N],[11,"opt_len","","",57,[[["self"]],["option",["usize"]]]],[11,"drive","","",57,N],[11,"len","","",57,[[["self"]],["usize"]]],[11,"with_producer","","",57,N],[11,"clone","","",58,[[["self"]],["once"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",58,N],[11,"opt_len","","",58,[[["self"]],["option",["usize"]]]],[11,"drive","","",58,N],[11,"len","","",58,[[["self"]],["usize"]]],[11,"with_producer","","",58,N],[8,"ParallelBridge","","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",N,N],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,[[["self"]],["iterbridge"]]],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",N,N],[16,"Iter","","The parallel iterator type that will be created.",60,N],[16,"Item","","The type of item that the parallel iterator will produce.",60,N],[10,"into_par_iter","","Converts `self` into a parallel iterator.",60,N],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",N,N],[16,"Iter","","The type of the parallel iterator that will be returned.",61,N],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",61,N],[10,"par_iter","","Converts `self` into a parallel iterator.",61,N],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",N,N],[16,"Iter","","The type of iterator that will be created.",62,N],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",62,N],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",62,N],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",N,N],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",63,N],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,[[["self"],["op"]]]],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,[[["self"],["t"],["op"]]]],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",63,[[["self"],["op"]],["r"]]],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,[[["self"],["t"],["op"]],["r"]]],[11,"count","","Counts the number of items in this parallel iterator.",63,[[["self"]],["usize"]]],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,[[["self"],["f"]],["map"]]],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",63,[[["self"],["t"],["f"]],["mapwith"]]],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,[[["self"]],["cloned"]]],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,[[["self"],["op"]],["inspect"]]],[11,"update","","Mutates each item of this iterator before yielding it.",63,[[["self"],["f"]],["update"]]],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,[[["self"],["p"]],["filtermap"]]],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",63,[[["self"]],["flatten"]]],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,N],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,[[["self"],["op"]],["option"]]],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",63,N],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",63,[[["self"],["op"]],["option"]]],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,[[["self"],["id"],["f"]],["fold"]]],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",63,[[["self"],["t"],["f"]],["foldwith"]]],[11,"try_fold","","Perform a fallible parallel fold.",63,[[["self"],["id"],["f"]],["tryfold"]]],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",63,[[["self"],["t"],["f"]],["tryfoldwith"]]],[11,"sum","","Sums up the items in the iterator.",63,[[["self"]],["s"]]],[11,"product","","Multiplies all the items in the iterator.",63,[[["self"]],["p"]]],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"]],["option"]]],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,[[["self"]],["option"]]],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,[[["self"],["f"]],["option"]]],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,[[["self"],["c"]],["chain"]]],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,[[["self"],["p"]],["option"]]],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",63,[[["self"],["p"]],["option"]]],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",63,[[["self"],["p"]],["option"]]],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,[[["self"],["p"]],["bool"]]],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,[[["self"],["p"]],["bool"]]],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",63,[[["self"]],["whilesome"]]],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,[[["self"]],["c"]]],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",63,N],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",63,N],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",63,N],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",63,N],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,N],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,[[["self"]],["option",["usize"]]]],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",N,N],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",64,[[["self"],["vec"]]]],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",64,[[["self"],["vec"],["vec"]]]],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",64,[[["self"],["z"]],["zip"]]],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",64,[[["self"],["z"]],["zipeq"]]],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",64,[[["self"],["i"]],["interleave"]]],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",64,[[["self"],["i"]],["interleaveshortest"]]],[11,"chunks","","Split an iterator up into fixed-size chunks.",64,[[["self"],["usize"]],["chunks"]]],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",64,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",64,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",64,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",64,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,[[["self"],["i"]],["bool"]]],[11,"enumerate","","Yields an index along with each item.",64,[[["self"]],["enumerate"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",64,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields the first `n` elements.",64,[[["self"],["usize"]],["take"]]],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",64,[[["self"],["p"]],["option",["usize"]]]],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",64,[[["self"]],["rev"]]],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",64,[[["self"],["usize"]],["minlen"]]],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",64,[[["self"],["usize"]],["maxlen"]]],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",64,[[["self"]],["usize"]]],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,N],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,N],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",N,N],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",65,[[["i"]],["self"]]],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",N,N],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",66,[[["self"],["i"]]]],[0,"option","rayon","Parallel iterator types for [options][std::option]",N,N],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",67,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",67,N],[11,"opt_len","","",67,[[["self"]],["option",["usize"]]]],[11,"drive","","",67,N],[11,"len","","",67,[[["self"]],["usize"]]],[11,"with_producer","","",67,N],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["self"]]],[11,"drive_unindexed","","",68,N],[11,"opt_len","","",68,[[["self"]],["option",["usize"]]]],[11,"drive","","",68,N],[11,"len","","",68,[[["self"]],["usize"]]],[11,"with_producer","","",68,N],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",69,N],[11,"opt_len","","",69,[[["self"]],["option",["usize"]]]],[11,"drive","","",69,N],[11,"len","","",69,[[["self"]],["usize"]]],[11,"with_producer","","",69,N],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",N,N],[8,"ParallelBridge","rayon::prelude","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",N,N],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,[[["self"]],["iterbridge"]]],[0,"range","rayon","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",N,N],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",N,N],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",70,[[["self"]],["iter"]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive","","",70,N],[11,"len","","",70,[[["self"]],["usize"]]],[11,"with_producer","","",70,N],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[11,"drive_unindexed","","",70,N],[11,"opt_len","","",70,[[["self"]],["option",["usize"]]]],[0,"result","rayon","Parallel iterator types for [results][std::result]",N,N],[3,"IntoIter","rayon::result","Parallel iterator over a result",N,N],[3,"Iter","","Parallel iterator over an immutable reference to a result",N,N],[3,"IterMut","","Parallel iterator over a mutable reference to a result",N,N],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",71,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",71,N],[11,"opt_len","","",71,[[["self"]],["option",["usize"]]]],[11,"drive","","",71,N],[11,"len","","",71,[[["self"]],["usize"]]],[11,"with_producer","","",71,N],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["self"]]],[11,"drive_unindexed","","",72,N],[11,"opt_len","","",72,[[["self"]],["option",["usize"]]]],[11,"drive","","",72,N],[11,"len","","",72,[[["self"]],["usize"]]],[11,"with_producer","","",72,N],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",73,N],[11,"opt_len","","",73,[[["self"]],["option",["usize"]]]],[11,"drive","","",73,N],[11,"len","","",73,[[["self"]],["usize"]]],[11,"with_producer","","",73,N],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",N,N],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",N,N],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",N,N],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",N,N],[3,"IterMut","","Parallel iterator over mutable items in a slice",N,N],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",N,N],[3,"Split","","Parallel iterator over slices separated by a predicate",N,N],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",N,N],[8,"ParallelSlice","","Parallel extensions for slices.",N,N],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",74,N],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",74,[[["self"],["p"]],["split"]]],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `window_size`. The windows overlap.",74,[[["self"],["usize"]],["windows"]]],[11,"par_chunks","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks do not overlap.",74,[[["self"],["usize"]],["chunks"]]],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",N,N],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",75,N],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",75,[[["self"],["p"]],["splitmut"]]],[11,"par_chunks_mut","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks are mutable and do not overlap.",75,[[["self"],["usize"]],["chunksmut"]]],[11,"par_sort","","Sorts the slice in parallel.",75,[[["self"]]]],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",75,[[["self"],["f"]]]],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",75,[[["self"],["f"]]]],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",75,[[["self"]]]],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",75,[[["self"],["f"]]]],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",75,[[["self"],["f"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["self"]]],[11,"drive_unindexed","","",76,N],[11,"opt_len","","",76,[[["self"]],["option",["usize"]]]],[11,"drive","","",76,N],[11,"len","","",76,[[["self"]],["usize"]]],[11,"with_producer","","",76,N],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["self"]]],[11,"drive_unindexed","","",77,N],[11,"opt_len","","",77,[[["self"]],["option",["usize"]]]],[11,"drive","","",77,N],[11,"len","","",77,[[["self"]],["usize"]]],[11,"with_producer","","",77,N],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["self"]]],[11,"drive_unindexed","","",78,N],[11,"opt_len","","",78,[[["self"]],["option",["usize"]]]],[11,"drive","","",78,N],[11,"len","","",78,[[["self"]],["usize"]]],[11,"with_producer","","",78,N],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",79,N],[11,"opt_len","","",79,[[["self"]],["option",["usize"]]]],[11,"drive","","",79,N],[11,"len","","",79,[[["self"]],["usize"]]],[11,"with_producer","","",79,N],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",80,N],[11,"opt_len","","",80,[[["self"]],["option",["usize"]]]],[11,"drive","","",80,N],[11,"len","","",80,[[["self"]],["usize"]]],[11,"with_producer","","",80,N],[11,"clone","","",81,[[["self"]],["self"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",81,N],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"drive_unindexed","","",82,N],[0,"str","rayon","Parallel iterator types for [strings][std::str]",N,N],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",N,N],[3,"CharIndices","","Parallel iterator over the characters of a string, with their positions",N,N],[3,"Bytes","","Parallel iterator over the bytes of a string",N,N],[3,"EncodeUtf16","","Parallel iterator over a string encoded as UTF-16",N,N],[3,"Split","","Parallel iterator over substrings separated by a pattern",N,N],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",N,N],[3,"Lines","","Parallel iterator over lines in a string",N,N],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",N,N],[3,"Matches","","Parallel iterator over substrings that match a pattern",N,N],[3,"MatchIndices","","Parallel iterator over substrings that match a pattern, with their positions",N,N],[8,"ParallelString","","Parallel extensions for strings.",N,N],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",83,[[["self"]],["str"]]],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",83,[[["self"]],["chars"]]],[11,"par_char_indices","","Returns a parallel iterator over the characters of a string, with their positions.",83,[[["self"]],["charindices"]]],[11,"par_bytes","","Returns a parallel iterator over the bytes of a string.",83,[[["self"]],["bytes"]]],[11,"par_encode_utf16","","Returns a parallel iterator over a string encoded as UTF-16.",83,[[["self"]],["encodeutf16"]]],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",83,[[["self"],["p"]],["split"]]],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",83,[[["self"],["p"]],["splitterminator"]]],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",83,[[["self"]],["lines"]]],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",83,[[["self"]],["splitwhitespace"]]],[11,"par_matches","","Returns a parallel iterator over substrings that match a given character or predicate, similar to `str::matches`.",83,[[["self"],["p"]],["matches"]]],[11,"par_match_indices","","Returns a parallel iterator over substrings that match a given character or predicate, with their positions, similar to `str::match_indices`.",83,[[["self"],["p"]],["matchindices"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"clone","","",84,[[["self"]],["chars"]]],[11,"drive_unindexed","","",84,N],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"clone","","",85,[[["self"]],["charindices"]]],[11,"drive_unindexed","","",85,N],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["bytes"]]],[11,"drive_unindexed","","",86,N],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["encodeutf16"]]],[11,"drive_unindexed","","",87,N],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["split"]]],[11,"drive_unindexed","","",88,N],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"clone","","",89,[[["self"]],["splitterminator"]]],[11,"drive_unindexed","","",89,N],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"clone","","",90,[[["self"]],["lines"]]],[11,"drive_unindexed","","",90,N],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"clone","","",91,[[["self"]],["splitwhitespace"]]],[11,"drive_unindexed","","",91,N],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"clone","","",92,[[["self"]],["matches"]]],[11,"drive_unindexed","","",92,N],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["matchindices"]]],[11,"drive_unindexed","","",93,N],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",N,N],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",N,N],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",94,[[["self"]],["intoiter"]]],[11,"drive_unindexed","","",94,N],[11,"opt_len","","",94,[[["self"]],["option",["usize"]]]],[11,"drive","","",94,N],[11,"len","","",94,[[["self"]],["usize"]]],[11,"with_producer","","",94,N],[11,"drive_unindexed","rayon::iter","",18,N],[11,"opt_len","","",18,[[["self"]],["option",["usize"]]]],[11,"drive","","",18,N],[11,"len","","",18,[[["self"]],["usize"]]],[11,"with_producer","","",18,N],[11,"par_extend","","",18,[[["self"],["i"]]]],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",95,[[["configuration"]],["result",["threadpool","box"]]]],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",95,[[["self"],["op"]],["r"]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",95,[[["self"]],["usize"]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",95,[[["self"]],["option",["usize"]]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",95,[[["self"]],["option",["bool"]]]],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",95,N],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",95,[[["self"],["op"]],["r"]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",95,N],[11,"into","","",95,[[["self"]],["u"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"drop","","",95,N],[11,"description","","",96,[[["self"]],["str"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",99,[[],["threadpoolbuilder"]]],[11,"partial_cmp","rayon::iter","",18,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["either"]],["bool"]]],[11,"le","","",18,[[["self"],["either"]],["bool"]]],[11,"gt","","",18,[[["self"],["either"]],["bool"]]],[11,"ge","","",18,[[["self"],["either"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",18,[[["self"]],["either"]]],[11,"as_mut","","",18,[[["self"]],["target"]]],[11,"into","","",18,[[["self"]],["result"]]],[11,"as_ref","","",18,[[["self"]],["target"]]],[11,"hash","","",18,N],[11,"deref","","",18,N],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"fold","","",18,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",18,[[["self"]],["usize"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"collect","","",18,[[["self"]],["b"]]],[11,"all","","",18,[[["self"],["f"]],["bool"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"eq","","",18,[[["self"],["either"]],["bool"]]],[11,"ne","","",18,[[["self"],["either"]],["bool"]]],[11,"deref_mut","","",18,N],[11,"cmp","","",18,[[["self"],["either"]],["ordering"]]],[11,"from","","",18,[[["result"]],["either"]]],[11,"extend","","",18,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",99,[[],["threadpoolbuilder"]]],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",99,[[["self"]],["result",["threadpool","threadpoolbuilderror"]]]],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",99,[[["self"]],["result",["threadpoolbuilderror"]]]],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",99,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",99,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",99,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"stack_size","","Set the stack size of the worker threads",99,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",99,[[["self"]],["threadpoolbuilder"]]],[11,"start_handler","","Set a callback to be invoked on thread start.",99,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"exit_handler","","Set a callback to be invoked on thread exit.",99,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"to_string","","",96,[[["self"]],["string"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",98,[[["self"]],["bool"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",97,N],[11,"into","","",97,[[["self"]],["u"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::binary_heap","",0,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into_par_iter","","",1,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::btree_map","",2,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_par_iter","","",3,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_par_iter","","",4,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::btree_set","",5,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_par_iter","","",6,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::hash_map","",7,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_par_iter","","",8,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_par_iter","","",9,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::hash_set","",10,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into_par_iter","","",11,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::linked_list","",12,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_par_iter","","",13,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into_par_iter","","",14,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::collections::vec_deque","",15,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into_par_iter","","",16,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into_par_iter","","",17,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",18,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",18,[[["self"]],["either"]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,N],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,N],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,[[["self"]],["t"]]],[11,"into_par_iter","","",18,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::option","",67,[[["self"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_par_iter","","",68,[[["self"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_par_iter","","",69,[[["self"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::range","",70,[[["self"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::result","",71,[[["self"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_par_iter","","",72,[[["self"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_par_iter","","",73,[[["self"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::slice","",76,[[["self"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_par_iter","","",77,[[["self"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into_par_iter","","",78,[[["self"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_par_iter","","",79,[[["self"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_par_iter","","",80,[[["self"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_par_iter","","",81,[[["self"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"into_par_iter","","",82,[[["self"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::str","",84,[[["self"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"into_par_iter","","",85,[[["self"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"into_par_iter","","",86,[[["self"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"into_par_iter","","",87,[[["self"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"into_par_iter","","",88,[[["self"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"into_par_iter","","",89,[[["self"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"into_par_iter","","",90,[[["self"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"into_par_iter","","",91,[[["self"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"into_par_iter","","",92,[[["self"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"into_par_iter","","",93,[[["self"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"into_par_iter","rayon::vec","",94,[[["self"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"IterBridge"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"IntoIter"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"Scope"],[3,"FnContext"],[3,"ThreadPoolBuilder"]]};
searchIndex["rayon_core"]={"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",N,N],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",N,N],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",N,N],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",N,N],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",N,N],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",N,N],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",N,[[],["option",["usize"]]]],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",N,[[],["option",["bool"]]]],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",N,N],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",N,N],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",N,[[["op"]],["r"]]],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",N,[[["f"]]]],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",N,[[],["usize"]]],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",N,[[["configuration"]],["result",["box"]]]],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,[[["self"],["body"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,[[["configuration"]],["result",["threadpool","box"]]]],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,[[["self"],["op"]],["r"]]],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,[[["self"]],["usize"]]],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,[[["self"]],["option",["usize"]]]],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,[[["self"]],["option",["bool"]]]],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,N],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,[[["self"],["op"]],["r"]]],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,[[["self"],["op"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["threadpoolbuilder"]]],[11,"default","","",4,[[],["configuration"]]],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,[[],["threadpoolbuilder"]]],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,[[["self"]],["result",["threadpool","threadpoolbuilderror"]]]],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,[[["self"]],["result",["threadpoolbuilderror"]]]],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,[[["self"],["f"]],["self"]]],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"stack_size","","Set the stack size of the worker threads",3,[[["self"],["usize"]],["self"]]],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,[[["self"]],["self"]]],[11,"start_handler","","Set a callback to be invoked on thread start.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,[[["self"],["h"]],["threadpoolbuilder"]]],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,[[],["configuration"]]],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,[[["self"]],["result",["threadpool","box"]]]],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,[[["self"],["f"]],["self"]]],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,[[["self"],["usize"]],["configuration"]]],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,[[["self"],["usize"]],["self"]]],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,[[["self"]],["self"]]],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,[[["self"],["h"]],["configuration"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,[[["self"]],["bool"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","regex","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","","",8,[[["self"]],["match"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"next","","",10,[[["self"]],["option",["match"]]]],[11,"next","","",11,[[["self"]],["option",["captures"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["capturelocations"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",15,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,N],[11,"len","","Returns the number of captured groups.",16,[[["self"]],["usize"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"index","","",16,N],[11,"index","","",16,N],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",18,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",18,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",19,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",19,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",19,[[["self"]],["usize"]]],[11,"clone","","",20,[[["self"]],["setmatches"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",20,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",20,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",20,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",20,N],[11,"next","","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",23,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",23,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,N],[11,"len","","Returns the total number of regular expressions in this set.",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["setmatches"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",24,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",24,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",24,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",24,N],[11,"next","","",25,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",25,N],[11,"next_back","","",25,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",26,N],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",27,[[["self"]],["match"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["match"]],["bool"]]],[11,"ne","","",27,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",27,[[["self"]],["str"]]],[11,"clone","","",28,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",28,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",28,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",28,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",28,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",28,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,[[["self"]],["capturelocations"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"size_hint","","",29,N],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"next","","",31,[[["self"]],["option",["str"]]]],[11,"clone","","",32,[[["self"]],["capturelocations"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",32,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",33,[[["self"]],["usize"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"index","","",33,[[["self"],["usize"]],["str"]]],[11,"index","","",33,[[["self"],["str"]],["str"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"next","","",35,[[["self"]],["option",["captures"]]]],[11,"next","","",36,[[["self"]],["option",["match"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",37,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",37,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"into","regex_syntax::ast","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into","regex_syntax::ast::parse","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into","regex_syntax::ast::print","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"into","regex_syntax::hir","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into_iter","","",67,[[["self"]],["i"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into_iter","","",70,[[["self"]],["i"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into","regex_syntax::hir::literal","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into","regex_syntax::hir::print","",60,[[["self"]],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into","regex_syntax::hir::translate","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["trydemangleerror"]]],[11,"as_str","","Returns the underlying string that's being demangled.",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N],[11,"into","serde::de","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","serde::de::value","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_bytes"]={"doc":"Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.","items":[[3,"ByteBuf","serde_bytes","Wrapper around `Vec<u8>` to serialize and deserialize efficiently.",N,N],[3,"Bytes","","Wrapper around `&[u8]` to serialize and deserialize efficiently.",N,N],[5,"serialize","","Serde `serialize_with` function to serialize bytes efficiently.",N,[[["t"],["s"]],["result"]]],[5,"deserialize","","Serde `deserialize_with` function to deserialize bytes efficiently.",N,[[["d"]],["result"]]],[11,"into_deserializer","","",0,N],[11,"into_deserializer","","",1,N],[11,"clone","","",1,[[["self"]],["bytebuf"]]],[11,"default","","",1,[[],["bytebuf"]]],[11,"hash","","",1,N],[11,"eq","","",1,[[["self"],["bytebuf"]],["bool"]]],[11,"ne","","",1,[[["self"],["bytebuf"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["bytebuf"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["bytebuf"]],["bool"]]],[11,"le","","",1,[[["self"],["bytebuf"]],["bool"]]],[11,"gt","","",1,[[["self"],["bytebuf"]],["bool"]]],[11,"ge","","",1,[[["self"],["bytebuf"]],["bool"]]],[11,"cmp","","",1,[[["self"],["bytebuf"]],["ordering"]]],[11,"new","","Construct a new, empty `ByteBuf`.",1,[[],["self"]]],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,[[["usize"]],["self"]]],[11,"from","","Wrap existing bytes in a `ByteBuf`.",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["vec",["u8"]]],["self"]]],[11,"as_ref","","",1,[[["self"]],["vec"]]],[11,"as_ref","","",1,N],[11,"as_mut","","",1,[[["self"]],["vec"]]],[11,"as_mut","","",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["bytebuf"]]]],[11,"clone","","",0,[[["self"]],["bytes"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",0,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["bytes"]],["bool"]]],[11,"le","","",0,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",0,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",0,[[["self"],["bytes"]],["bool"]]],[11,"cmp","","",0,[[["self"],["bytes"]],["ordering"]]],[11,"new","","Wrap an existing `&[u8]`.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,N],[11,"deref","","",0,N],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["bytes"]]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"Bytes"],[3,"ByteBuf"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N],[11,"into","serde_json::de","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","serde_json::error","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","serde_json::ser","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into","serde_json::map","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","serde_json::value","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","serde_json::error","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","serde_json::map","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","serde_json::ser","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_yaml"]={"doc":"This crate is a Rust library for using the [Serde] serialization framework with data in [YAML] file format.","items":[[3,"Error","serde_yaml","This type represents all possible errors that can occur when serializing or deserializing YAML data.",N,N],[3,"Location","","This type represents the location that an error occured.",N,N],[3,"Mapping","","A YAML mapping in which the keys and values are both `serde_yaml::Value`.",N,N],[3,"Number","","Represents a YAML number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid YAML value.",N,N],[13,"Null","","Represents a YAML null value.",0,N],[13,"Bool","","Represents a YAML boolean.",0,N],[13,"Number","","Represents a YAML numerical value, whether integer or floating point.",0,N],[13,"String","","Represents a YAML string.",0,N],[13,"Sequence","","Represents a YAML sequence in which the elements are `serde_yaml::Value`.",0,N],[13,"Mapping","","Represents a YAML mapping in which the keys and values are both `serde_yaml::Value`.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of YAML.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of YAML text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of YAML text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of YAML.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a YAML byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as YAML into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_yaml::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.",N,[[["t"]],["result",["value","error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"index","","The byte index of the error",1,[[["self"]],["usize"]]],[11,"line","","The line of the error",1,[[["self"]],["usize"]]],[11,"column","","The column of the error",1,[[["self"]],["usize"]]],[11,"location","","Returns the Location from the error if one exists.",2,[[["self"]],["option",["location"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"clone","","",3,[[["self"]],["mapping"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["mapping"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["mapping"]],["bool"]]],[11,"ne","","",3,[[["self"],["mapping"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["mapping"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["mapping"]],["bool"]]],[11,"le","","",3,[[["self"],["mapping"]],["bool"]]],[11,"gt","","",3,[[["self"],["mapping"]],["bool"]]],[11,"ge","","",3,[[["self"],["mapping"]],["bool"]]],[11,"new","","",3,[[],["self"]]],[11,"with_capacity","","",3,[[["usize"]],["self"]]],[11,"reserve","","",3,[[["self"],["usize"]]]],[11,"shrink_to_fit","","",3,[[["self"]]]],[11,"insert","","",3,[[["self"],["value"],["value"]],["option",["value"]]]],[11,"contains_key","","",3,[[["self"],["value"]],["bool"]]],[11,"get","","",3,[[["self"],["value"]],["option",["value"]]]],[11,"get_mut","","",3,[[["self"],["value"]],["option",["value"]]]],[11,"remove","","",3,[[["self"],["value"]],["option",["value"]]]],[11,"capacity","","",3,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"clear","","",3,[[["self"]]]],[11,"iter","","",3,[[["self"]],["iter"]]],[11,"iter_mut","","",3,[[["self"]],["itermut"]]],[11,"index","","",3,[[["self"],["value"]],["value"]]],[11,"index_mut","","",3,[[["self"],["value"]],["value"]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"from_iter","","",3,[[["i"]],["self"]]],[11,"into_iter","","",3,N],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"clone","","",4,[[["self"]],["number"]]],[11,"eq","","",4,[[["self"],["number"]],["bool"]]],[11,"ne","","",4,[[["self"],["number"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["number"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["number"]],["bool"]]],[11,"le","","",4,[[["self"],["number"]],["bool"]]],[11,"gt","","",4,[[["self"],["number"]],["bool"]]],[11,"ge","","",4,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",4,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",4,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",4,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",4,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",4,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",4,[[["self"]],["option",["f64"]]]],[11,"is_nan","","Returns true if this value is NaN and false otherwise.",4,[[["self"]],["bool"]]],[11,"is_infinite","","Returns true if this value is positive infinity or negative infinity and false otherwise.",4,[[["self"]],["bool"]]],[11,"is_finite","","Returns true if this number is neither infinite nor NaN.",4,[[["self"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"from","","",4,[[["i8"]],["self"]]],[11,"from","","",4,[[["i16"]],["self"]]],[11,"from","","",4,[[["i32"]],["self"]]],[11,"from","","",4,[[["i64"]],["self"]]],[11,"from","","",4,[[["isize"]],["self"]]],[11,"from","","",4,[[["u8"]],["self"]]],[11,"from","","",4,[[["u16"]],["self"]]],[11,"from","","",4,[[["u32"]],["self"]]],[11,"from","","",4,[[["u64"]],["self"]]],[11,"from","","",4,[[["usize"]],["self"]]],[11,"from","","",4,[[["f32"]],["self"]]],[11,"from","","",4,[[["f64"]],["self"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","",0,[[["f32"]],["self"]]],[11,"from","","",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["mapping"]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a YAML sequence",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_yaml::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_yaml::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","Compare `str` with YAML value",0,[[["self"],["str"]],["bool"]]],[11,"eq","","Compare `&str` with YAML value",0,[[["self"],["str"]],["bool"]]],[11,"eq","","Compare YAML value with String",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"partial_cmp","","",0,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["value"]],["bool"]]],[11,"le","","",0,[[["self"],["value"]],["bool"]]],[11,"gt","","",0,[[["self"],["value"]],["bool"]]],[11,"ge","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a YAML sequence or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an sequence.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"is_bool","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"is_u64","","Returns true if the `Value` is an integer between `u64::MIN` and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"as_u64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_sequence","","Returns true if the `Value` is a sequence. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_sequence","","If the `Value` is a sequence, return a reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["sequence"]]]],[11,"as_sequence_mut","","If the `Value` is a sequence, return a mutable reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["sequence"]]]],[11,"is_mapping","","Returns true if the `Value` is a mapping. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_mapping","","If the `Value` is a mapping, return a reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["mapping"]]]],[11,"as_mapping_mut","","If the `Value` is a mapping, return a reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["mapping"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[6,"Result","","Alias for a `Result` with the error type `serde_yaml::Error`.",N,N],[6,"Sequence","","A YAML sequence in which the elements are `serde_yaml::Value`.",N,N]],"paths":[[4,"Value"],[3,"Location"],[3,"Error"],[3,"Mapping"],[3,"Number"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Construct an empty vector",4,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,[[["a"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",4,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",4,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",4,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",4,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",4,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,N],[11,"clear","","Remove all elements from the vector.",4,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,[[["self"]],["vec"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",4,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"write","","",4,N],[11,"write_all","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"from","","",4,N],[11,"from","","",4,[[["vec"]],["smallvec"]]],[11,"from","","",4,[[["a"]],["smallvec"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"extend_from_slice","","",4,N],[11,"push","","",4,N],[11,"from_iter","","",4,[[["i"]],["smallvec"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"clone","","",4,[[["self"]],["smallvec"]]],[11,"eq","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["smallvec"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",4,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[12,"attrs","","",10,N],[12,"bracket_token","","",10,N],[12,"elems","","",10,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[12,"attrs","","",11,N],[12,"left","","",11,N],[12,"eq_token","","",11,N],[12,"right","","",11,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[12,"attrs","","",12,N],[12,"left","","",12,N],[12,"op","","",12,N],[12,"right","","",12,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",13,N],[12,"left","","",13,N],[12,"op","","",13,N],[12,"right","","",13,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[12,"attrs","","",14,N],[12,"block","","",14,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[12,"attrs","","",15,N],[12,"box_token","","",15,N],[12,"expr","","",15,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[12,"attrs","","",16,N],[12,"break_token","","",16,N],[12,"label","","",16,N],[12,"expr","","",16,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",17,N],[12,"func","","",17,N],[12,"paren_token","","",17,N],[12,"args","","",17,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",18,N],[12,"expr","","",18,N],[12,"as_token","","",18,N],[12,"ty","","",18,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[12,"attrs","","",19,N],[12,"do_token","","",19,N],[12,"catch_token","","",19,N],[12,"block","","",19,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[12,"attrs","","",20,N],[12,"movability","","",20,N],[12,"capture","","",20,N],[12,"or1_token","","",20,N],[12,"inputs","","",20,N],[12,"or2_token","","",20,N],[12,"output","","",20,N],[12,"body","","",20,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[12,"attrs","","",21,N],[12,"continue_token","","",21,N],[12,"label","","",21,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",22,N],[12,"base","","",22,N],[12,"dot_token","","",22,N],[12,"member","","",22,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[12,"attrs","","",23,N],[12,"label","","",23,N],[12,"for_token","","",23,N],[12,"pat","","",23,N],[12,"in_token","","",23,N],[12,"expr","","",23,N],[12,"body","","",23,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[12,"attrs","","",24,N],[12,"group_token","","",24,N],[12,"expr","","",24,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[12,"attrs","","",25,N],[12,"if_token","","",25,N],[12,"cond","","",25,N],[12,"then_branch","","",25,N],[12,"else_branch","","",25,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[12,"attrs","","",26,N],[12,"if_token","","",26,N],[12,"let_token","","",26,N],[12,"pats","","",26,N],[12,"eq_token","","",26,N],[12,"expr","","",26,N],[12,"then_branch","","",26,N],[12,"else_branch","","",26,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[12,"attrs","","",27,N],[12,"place","","",27,N],[12,"arrow_token","","",27,N],[12,"value","","",27,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",28,N],[12,"expr","","",28,N],[12,"bracket_token","","",28,N],[12,"index","","",28,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",29,N],[12,"lit","","",29,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[12,"attrs","","",30,N],[12,"label","","",30,N],[12,"loop_token","","",30,N],[12,"body","","",30,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[12,"attrs","","",31,N],[12,"mac","","",31,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[12,"attrs","","",32,N],[12,"match_token","","",32,N],[12,"expr","","",32,N],[12,"brace_token","","",32,N],[12,"arms","","",32,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[12,"attrs","","",33,N],[12,"receiver","","",33,N],[12,"dot_token","","",33,N],[12,"method","","",33,N],[12,"turbofish","","",33,N],[12,"paren_token","","",33,N],[12,"args","","",33,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",34,N],[12,"paren_token","","",34,N],[12,"expr","","",34,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",35,N],[12,"qself","","",35,N],[12,"path","","",35,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[12,"attrs","","",36,N],[12,"from","","",36,N],[12,"limits","","",36,N],[12,"to","","",36,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[12,"attrs","","",37,N],[12,"and_token","","",37,N],[12,"mutability","","",37,N],[12,"expr","","",37,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[12,"attrs","","",38,N],[12,"bracket_token","","",38,N],[12,"expr","","",38,N],[12,"semi_token","","",38,N],[12,"len","","",38,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[12,"attrs","","",39,N],[12,"return_token","","",39,N],[12,"expr","","",39,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[12,"attrs","","",40,N],[12,"path","","",40,N],[12,"brace_token","","",40,N],[12,"fields","","",40,N],[12,"dot2_token","","",40,N],[12,"rest","","",40,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[12,"attrs","","",41,N],[12,"expr","","",41,N],[12,"question_token","","",41,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[12,"attrs","","",42,N],[12,"paren_token","","",42,N],[12,"elems","","",42,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[12,"attrs","","",43,N],[12,"expr","","",43,N],[12,"colon_token","","",43,N],[12,"ty","","",43,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",44,N],[12,"op","","",44,N],[12,"expr","","",44,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[12,"attrs","","",45,N],[12,"unsafe_token","","",45,N],[12,"block","","",45,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",46,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[12,"attrs","","",47,N],[12,"label","","",47,N],[12,"while_token","","",47,N],[12,"cond","","",47,N],[12,"body","","",47,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[12,"attrs","","",48,N],[12,"label","","",48,N],[12,"while_token","","",48,N],[12,"let_token","","",48,N],[12,"pats","","",48,N],[12,"eq_token","","",48,N],[12,"expr","","",48,N],[12,"body","","",48,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[12,"attrs","","",49,N],[12,"yield_token","","",49,N],[12,"expr","","",49,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",50,N],[12,"span","","",50,N],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",N,N],[12,"attrs","","",51,N],[12,"leading_vert","","",51,N],[12,"pats","","",51,N],[12,"guard","","",51,N],[12,"fat_arrow_token","","",51,N],[12,"body","","",51,N],[12,"comma","","",51,N],[3,"Block","","A braced block containing Rust statements.",N,N],[12,"brace_token","","",52,N],[12,"stmts","","Statements in a block",52,N],[3,"FieldPat","","A single field in a struct pattern.",N,N],[12,"attrs","","",53,N],[12,"member","","",53,N],[12,"colon_token","","",53,N],[12,"pat","","",53,N],[3,"FieldValue","","A field-value pair in a struct literal.",N,N],[12,"attrs","","Attributes tagged on the field.",54,N],[12,"member","","Name or index of the field.",54,N],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,N],[12,"expr","","Value of the field.",54,N],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",N,N],[12,"name","","",55,N],[12,"colon_token","","",55,N],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",N,N],[12,"attrs","","",56,N],[12,"let_token","","",56,N],[12,"pats","","",56,N],[12,"ty","","",56,N],[12,"init","","",56,N],[12,"semi_token","","",56,N],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"PatBox","","A box pattern: `box v`.",N,N],[12,"box_token","","",58,N],[12,"pat","","",58,N],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",N,N],[12,"by_ref","","",59,N],[12,"mutability","","",59,N],[12,"ident","","",59,N],[12,"subpat","","",59,N],[3,"PatLit","","A literal pattern: `0`.",N,N],[12,"expr","","",60,N],[3,"PatMacro","","A macro in expression position.",N,N],[12,"mac","","",61,N],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",N,N],[12,"qself","","",62,N],[12,"path","","",62,N],[3,"PatRange","","A range pattern: `1..=2`.",N,N],[12,"lo","","",63,N],[12,"limits","","",63,N],[12,"hi","","",63,N],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",N,N],[12,"and_token","","",64,N],[12,"mutability","","",64,N],[12,"pat","","",64,N],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",N,N],[12,"bracket_token","","",65,N],[12,"front","","",65,N],[12,"middle","","",65,N],[12,"dot2_token","","",65,N],[12,"comma_token","","",65,N],[12,"back","","",65,N],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",N,N],[12,"path","","",66,N],[12,"brace_token","","",66,N],[12,"fields","","",66,N],[12,"dot2_token","","",66,N],[3,"PatTuple","","A tuple pattern: `(a, b)`.",N,N],[12,"paren_token","","",67,N],[12,"front","","",67,N],[12,"dot2_token","","",67,N],[12,"comma_token","","",67,N],[12,"back","","",67,N],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",N,N],[12,"path","","",68,N],[12,"pat","","",68,N],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",N,N],[12,"tts","","",69,N],[3,"PatWild","","A pattern that matches any value: `_`.",N,N],[12,"underscore_token","","",70,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",71,N],[12,"lt_token","","",71,N],[12,"lifetimes","","",71,N],[12,"gt_token","","",71,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",72,N],[12,"const_token","","",72,N],[12,"ident","","",72,N],[12,"colon_token","","",72,N],[12,"ty","","",72,N],[12,"eq_token","","",72,N],[12,"default","","",72,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",73,N],[12,"params","","",73,N],[12,"gt_token","","",73,N],[12,"where_clause","","",73,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",74,N],[12,"lifetime","","",74,N],[12,"colon_token","","",74,N],[12,"bounds","","",74,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",75,N],[12,"eq_token","","",75,N],[12,"rhs_ty","","",75,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",76,N],[12,"colon_token","","",76,N],[12,"bounds","","",76,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",77,N],[12,"bounded_ty","","The type being bounded",77,N],[12,"colon_token","","",77,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",78,N],[12,"modifier","","",78,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",79,N],[12,"ident","","",79,N],[12,"colon_token","","",79,N],[12,"bounds","","",79,N],[12,"eq_token","","",79,N],[12,"default","","",79,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",80,N],[12,"predicates","","",80,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",N,N],[12,"pat","","",81,N],[12,"colon_token","","",81,N],[12,"ty","","",81,N],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",N,N],[12,"mutability","","",82,N],[12,"self_token","","",82,N],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",N,N],[12,"and_token","","",83,N],[12,"lifetime","","",83,N],[12,"mutability","","",83,N],[12,"self_token","","",83,N],[3,"FnDecl","","Header of a function declaration, without including the body.",N,N],[12,"fn_token","","",84,N],[12,"generics","","",84,N],[12,"paren_token","","",84,N],[12,"inputs","","",84,N],[12,"variadic","","",84,N],[12,"output","","",84,N],[3,"ForeignItemFn","","A foreign function in an `extern` block.",N,N],[12,"attrs","","",85,N],[12,"vis","","",85,N],[12,"ident","","",85,N],[12,"decl","","",85,N],[12,"semi_token","","",85,N],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",N,N],[12,"attrs","","",86,N],[12,"vis","","",86,N],[12,"static_token","","",86,N],[12,"mutability","","",86,N],[12,"ident","","",86,N],[12,"colon_token","","",86,N],[12,"ty","","",86,N],[12,"semi_token","","",86,N],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",N,N],[12,"attrs","","",87,N],[12,"vis","","",87,N],[12,"type_token","","",87,N],[12,"ident","","",87,N],[12,"semi_token","","",87,N],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",N,N],[12,"tts","","",88,N],[3,"ImplItemConst","","An associated constant within an impl block.",N,N],[12,"attrs","","",89,N],[12,"vis","","",89,N],[12,"defaultness","","",89,N],[12,"const_token","","",89,N],[12,"ident","","",89,N],[12,"colon_token","","",89,N],[12,"ty","","",89,N],[12,"eq_token","","",89,N],[12,"expr","","",89,N],[12,"semi_token","","",89,N],[3,"ImplItemMacro","","A macro invocation within an impl block.",N,N],[12,"attrs","","",90,N],[12,"mac","","",90,N],[12,"semi_token","","",90,N],[3,"ImplItemMethod","","A method within an impl block.",N,N],[12,"attrs","","",91,N],[12,"vis","","",91,N],[12,"defaultness","","",91,N],[12,"sig","","",91,N],[12,"block","","",91,N],[3,"ImplItemType","","An associated type within an impl block.",N,N],[12,"attrs","","",92,N],[12,"vis","","",92,N],[12,"defaultness","","",92,N],[12,"type_token","","",92,N],[12,"ident","","",92,N],[12,"generics","","",92,N],[12,"eq_token","","",92,N],[12,"ty","","",92,N],[12,"semi_token","","",92,N],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",N,N],[12,"tts","","",93,N],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",N,N],[12,"attrs","","",94,N],[12,"vis","","",94,N],[12,"const_token","","",94,N],[12,"ident","","",94,N],[12,"colon_token","","",94,N],[12,"ty","","",94,N],[12,"eq_token","","",94,N],[12,"expr","","",94,N],[12,"semi_token","","",94,N],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",N,N],[12,"attrs","","",95,N],[12,"vis","","",95,N],[12,"enum_token","","",95,N],[12,"ident","","",95,N],[12,"generics","","",95,N],[12,"brace_token","","",95,N],[12,"variants","","",95,N],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",N,N],[12,"attrs","","",96,N],[12,"vis","","",96,N],[12,"extern_token","","",96,N],[12,"crate_token","","",96,N],[12,"ident","","",96,N],[12,"rename","","",96,N],[12,"semi_token","","",96,N],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",N,N],[12,"attrs","","",97,N],[12,"vis","","",97,N],[12,"constness","","",97,N],[12,"unsafety","","",97,N],[12,"abi","","",97,N],[12,"ident","","",97,N],[12,"decl","","",97,N],[12,"block","","",97,N],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",N,N],[12,"attrs","","",98,N],[12,"abi","","",98,N],[12,"brace_token","","",98,N],[12,"items","","",98,N],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",N,N],[12,"attrs","","",99,N],[12,"defaultness","","",99,N],[12,"unsafety","","",99,N],[12,"impl_token","","",99,N],[12,"generics","","",99,N],[12,"trait_","","Trait this impl implements.",99,N],[12,"self_ty","","The Self type of the impl.",99,N],[12,"brace_token","","",99,N],[12,"items","","",99,N],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",N,N],[12,"attrs","","",100,N],[12,"ident","","The `example` in `macro_rules! example { ... }`.",100,N],[12,"mac","","",100,N],[12,"semi_token","","",100,N],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",N,N],[12,"attrs","","",101,N],[12,"vis","","",101,N],[12,"macro_token","","",101,N],[12,"ident","","",101,N],[12,"paren_token","","",101,N],[12,"args","","",101,N],[12,"brace_token","","",101,N],[12,"body","","",101,N],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",N,N],[12,"attrs","","",102,N],[12,"vis","","",102,N],[12,"mod_token","","",102,N],[12,"ident","","",102,N],[12,"content","","",102,N],[12,"semi","","",102,N],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",N,N],[12,"attrs","","",103,N],[12,"vis","","",103,N],[12,"static_token","","",103,N],[12,"mutability","","",103,N],[12,"ident","","",103,N],[12,"colon_token","","",103,N],[12,"ty","","",103,N],[12,"eq_token","","",103,N],[12,"expr","","",103,N],[12,"semi_token","","",103,N],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",N,N],[12,"attrs","","",104,N],[12,"vis","","",104,N],[12,"struct_token","","",104,N],[12,"ident","","",104,N],[12,"generics","","",104,N],[12,"fields","","",104,N],[12,"semi_token","","",104,N],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",N,N],[12,"attrs","","",105,N],[12,"vis","","",105,N],[12,"unsafety","","",105,N],[12,"auto_token","","",105,N],[12,"trait_token","","",105,N],[12,"ident","","",105,N],[12,"generics","","",105,N],[12,"colon_token","","",105,N],[12,"supertraits","","",105,N],[12,"brace_token","","",105,N],[12,"items","","",105,N],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",N,N],[12,"attrs","","",106,N],[12,"vis","","",106,N],[12,"type_token","","",106,N],[12,"ident","","",106,N],[12,"generics","","",106,N],[12,"eq_token","","",106,N],[12,"ty","","",106,N],[12,"semi_token","","",106,N],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",N,N],[12,"attrs","","",107,N],[12,"vis","","",107,N],[12,"union_token","","",107,N],[12,"ident","","",107,N],[12,"generics","","",107,N],[12,"fields","","",107,N],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",N,N],[12,"attrs","","",108,N],[12,"vis","","",108,N],[12,"use_token","","",108,N],[12,"leading_colon","","",108,N],[12,"tree","","",108,N],[12,"semi_token","","",108,N],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",N,N],[12,"tts","","",109,N],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",N,N],[12,"constness","","",110,N],[12,"unsafety","","",110,N],[12,"abi","","",110,N],[12,"ident","","",110,N],[12,"decl","","",110,N],[3,"TraitItemConst","","An associated constant within the definition of a trait.",N,N],[12,"attrs","","",111,N],[12,"const_token","","",111,N],[12,"ident","","",111,N],[12,"colon_token","","",111,N],[12,"ty","","",111,N],[12,"default","","",111,N],[12,"semi_token","","",111,N],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",N,N],[12,"attrs","","",112,N],[12,"mac","","",112,N],[12,"semi_token","","",112,N],[3,"TraitItemMethod","","A trait method within the definition of a trait.",N,N],[12,"attrs","","",113,N],[12,"sig","","",113,N],[12,"default","","",113,N],[12,"semi_token","","",113,N],[3,"TraitItemType","","An associated type within the definition of a trait.",N,N],[12,"attrs","","",114,N],[12,"type_token","","",114,N],[12,"ident","","",114,N],[12,"generics","","",114,N],[12,"colon_token","","",114,N],[12,"bounds","","",114,N],[12,"default","","",114,N],[12,"semi_token","","",114,N],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",N,N],[12,"tts","","",115,N],[3,"UseGlob","","A glob import in a `use` item: `*`.",N,N],[12,"star_token","","",116,N],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",N,N],[12,"brace_token","","",117,N],[12,"items","","",117,N],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",N,N],[12,"ident","","",118,N],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",N,N],[12,"ident","","",119,N],[12,"colon2_token","","",119,N],[12,"tree","","",119,N],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",N,N],[12,"ident","","",120,N],[12,"as_token","","",120,N],[12,"rename","","",120,N],[3,"File","","A complete file of Rust source code.",N,N],[12,"shebang","","",121,N],[12,"attrs","","",121,N],[12,"items","","",121,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",122,N],[12,"ident","","",122,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",123,N],[12,"span","","",123,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",124,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",125,N],[12,"bang_token","","",125,N],[12,"delimiter","","",125,N],[12,"tts","","",125,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",126,N],[12,"brace_token","","",126,N],[12,"variants","","",126,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",127,N],[12,"fields","","",127,N],[12,"semi_token","","",127,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",128,N],[12,"fields","","",128,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",129,N],[12,"vis","","Visibility of the struct or enum.",129,N],[12,"ident","","Name of the struct or enum.",129,N],[12,"generics","","Generics required to complete the definition.",129,N],[12,"data","","Data within the struct or enum.",129,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",130,N],[12,"name","","",130,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",131,N],[12,"ty","","",131,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",132,N],[12,"elem","","",132,N],[12,"semi_token","","",132,N],[12,"len","","",132,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",133,N],[12,"abi","","",133,N],[12,"fn_token","","",133,N],[12,"lifetimes","","",133,N],[12,"paren_token","","",133,N],[12,"inputs","","",133,N],[12,"variadic","","",133,N],[12,"output","","",133,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",134,N],[12,"elem","","",134,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",135,N],[12,"bounds","","",135,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",136,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",137,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",138,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",139,N],[12,"elem","","",139,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",140,N],[12,"path","","",140,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",141,N],[12,"const_token","","",141,N],[12,"mutability","","",141,N],[12,"elem","","",141,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",142,N],[12,"lifetime","","",142,N],[12,"mutability","","",142,N],[12,"elem","","",142,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",143,N],[12,"elem","","",143,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",144,N],[12,"bounds","","",144,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",145,N],[12,"elems","","",145,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",146,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",147,N],[12,"1","","",147,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",148,N],[12,"lt_token","","",148,N],[12,"args","","",148,N],[12,"gt_token","","",148,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",149,N],[12,"eq_token","","",149,N],[12,"ty","","",149,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",150,N],[12,"inputs","","`(A, B)`",150,N],[12,"output","","`C`",150,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",151,N],[12,"segments","","",151,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",152,N],[12,"arguments","","",152,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",153,N],[12,"ty","","",153,N],[12,"position","","",153,N],[12,"as_token","","",153,N],[12,"gt_token","","",153,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",154,N],[13,"Inner","","",154,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",155,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",155,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",155,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",156,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",156,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",157,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",157,N],[13,"Unit","","Unit struct or unit variant such as `None`.",157,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",158,N],[13,"Crate","","A crate-level visibility: `crate`.",158,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",158,N],[13,"Inherited","","An inherited visibility, which usually means private.",158,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",159,N],[13,"InPlace","","A placement expression: `place <- value`.",159,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",159,N],[13,"Call","","A function call expression: `invoke(a, b)`.",159,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",159,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",159,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",159,N],[13,"Unary","","A unary operation: `!x`, `*x`.",159,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",159,N],[13,"Cast","","A cast expression: `foo as f64`.",159,N],[13,"Type","","A type ascription expression: `foo: f64`.",159,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",159,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",159,N],[13,"While","","A while loop: `while expr { ... }`.",159,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",159,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",159,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",159,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",159,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",159,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",159,N],[13,"Block","","A blocked scope: `{ ... }`.",159,N],[13,"Assign","","An assignment expression: `a = compute()`.",159,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",159,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",159,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",159,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",159,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",159,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",159,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",159,N],[13,"Continue","","A `continue`, with an optional label.",159,N],[13,"Return","","A `return`, with an optional value to be returned.",159,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",159,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",159,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",159,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",159,N],[13,"Group","","An expression contained within invisible delimiters.",159,N],[13,"Try","","A try-expression: `expr?`.",159,N],[13,"Catch","","A catch expression: `do catch { ... }`.",159,N],[13,"Yield","","A yield expression: `yield expr`.",159,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",159,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",160,N],[13,"Unnamed","","An unnamed field like `self.0`.",160,N],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",N,N],[13,"Type","","A type argument.",161,N],[13,"Const","","A const expression. Must be inside of a block.",161,N],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",N,N],[13,"Wild","","A pattern that matches any value: `_`.",162,N],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",162,N],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",162,N],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",162,N],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",162,N],[13,"Tuple","","A tuple pattern: `(a, b)`.",162,N],[13,"Box","","A box pattern: `box v`.",162,N],[13,"Ref","","A reference pattern: `&mut (first, second)`.",162,N],[13,"Lit","","A literal pattern: `0`.",162,N],[13,"Range","","A range pattern: `1..=2`.",162,N],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",162,N],[13,"Macro","","A macro in expression position.",162,N],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",162,N],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",N,N],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",163,N],[13,"Closed","","Inclusive at the beginning and end.",163,N],[4,"Stmt","","A statement, usually ending in a semicolon.",N,N],[13,"Local","","A local (let) binding.",164,N],[13,"Item","","An item definition.",164,N],[13,"Expr","","Expr without trailing semicolon.",164,N],[13,"Semi","","Expression with trailing semicolon.",164,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",165,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",165,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",165,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",166,N],[13,"Maybe","","",166,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",167,N],[13,"Lifetime","","",167,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",168,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",168,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",168,N],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",N,N],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",169,N],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",169,N],[13,"Captured","","An explicitly typed pattern captured by a function signature.",169,N],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",169,N],[13,"Ignored","","A type not bound to any pattern in a function signature.",169,N],[4,"ForeignItem","","An item within an `extern` block.",N,N],[13,"Fn","","A foreign function in an `extern` block.",170,N],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",170,N],[13,"Type","","A foreign type in an `extern` block: `type void`.",170,N],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",170,N],[4,"ImplItem","","An item within an impl block.",N,N],[13,"Const","","An associated constant within an impl block.",171,N],[13,"Method","","A method within an impl block.",171,N],[13,"Type","","An associated type within an impl block.",171,N],[13,"Macro","","A macro invocation within an impl block.",171,N],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",171,N],[4,"Item","","Things that can appear directly inside of a module or scope.",N,N],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",172,N],[13,"Use","","A use declaration: `use std::collections::HashMap`.",172,N],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",172,N],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",172,N],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",172,N],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",172,N],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",172,N],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",172,N],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",172,N],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",172,N],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",172,N],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",172,N],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",172,N],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",172,N],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",172,N],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",172,N],[4,"TraitItem","","An item declaration within the definition of a trait.",N,N],[13,"Const","","An associated constant within the definition of a trait.",173,N],[13,"Method","","A trait method within the definition of a trait.",173,N],[13,"Type","","An associated type within the definition of a trait.",173,N],[13,"Macro","","A macro invocation within the definition of a trait.",173,N],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",173,N],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",N,N],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",174,N],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",174,N],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",174,N],[13,"Glob","","A glob import in a `use` item: `*`.",174,N],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",174,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",175,N],[13,"F64","","",175,N],[13,"None","","",175,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",176,N],[13,"I16","","",176,N],[13,"I32","","",176,N],[13,"I64","","",176,N],[13,"I128","","",176,N],[13,"Isize","","",176,N],[13,"U8","","",176,N],[13,"U16","","",176,N],[13,"U32","","",176,N],[13,"U64","","",176,N],[13,"U128","","",176,N],[13,"Usize","","",176,N],[13,"None","","",176,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",177,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",177,N],[13,"Byte","","A byte literal: `b'f'`.",177,N],[13,"Char","","A character literal: `'a'`.",177,N],[13,"Int","","An integer literal: `1` or `1u16`.",177,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",177,N],[13,"Bool","","A boolean literal: `true` or `false`.",177,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",177,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",178,N],[13,"Raw","","A raw string like `r##\"data\"##`.",178,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",179,N],[13,"Brace","","",179,N],[13,"Bracket","","",179,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",180,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",180,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",180,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",181,N],[13,"Sub","","The `-` operator (subtraction)",181,N],[13,"Mul","","The `*` operator (multiplication)",181,N],[13,"Div","","The `/` operator (division)",181,N],[13,"Rem","","The `%` operator (modulus)",181,N],[13,"And","","The `&&` operator (logical and)",181,N],[13,"Or","","The `||` operator (logical or)",181,N],[13,"BitXor","","The `^` operator (bitwise xor)",181,N],[13,"BitAnd","","The `&` operator (bitwise and)",181,N],[13,"BitOr","","The `|` operator (bitwise or)",181,N],[13,"Shl","","The `<<` operator (shift left)",181,N],[13,"Shr","","The `>>` operator (shift right)",181,N],[13,"Eq","","The `==` operator (equality)",181,N],[13,"Lt","","The `<` operator (less than)",181,N],[13,"Le","","The `<=` operator (less than or equal to)",181,N],[13,"Ne","","The `!=` operator (not equal to)",181,N],[13,"Ge","","The `>=` operator (greater than or equal to)",181,N],[13,"Gt","","The `>` operator (greater than)",181,N],[13,"AddEq","","The `+=` operator",181,N],[13,"SubEq","","The `-=` operator",181,N],[13,"MulEq","","The `*=` operator",181,N],[13,"DivEq","","The `/=` operator",181,N],[13,"RemEq","","The `%=` operator",181,N],[13,"BitXorEq","","The `^=` operator",181,N],[13,"BitAndEq","","The `&=` operator",181,N],[13,"BitOrEq","","The `|=` operator",181,N],[13,"ShlEq","","The `<<=` operator",181,N],[13,"ShrEq","","The `>>=` operator",181,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",182,N],[13,"Not","","The `!` operator for logical inversion",182,N],[13,"Neg","","The `-` operator for negation",182,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",183,N],[13,"Wild","","Argument not given a name, matched with `_`.",183,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",184,N],[13,"Type","","A particular type is returned.",184,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",185,N],[13,"Array","","A fixed size array type: `[T; n]`.",185,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",185,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",185,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",185,N],[13,"Never","","The never type: `!`.",185,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",185,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",185,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",185,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",185,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",185,N],[13,"Group","","A type contained within invisible delimiters.",185,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",185,N],[13,"Macro","","A macro in the type position.",185,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",185,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",186,N],[13,"Type","","A type argument.",186,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",186,N],[13,"Const","","A const expression. Must be inside of a block.",186,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",187,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",187,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",187,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",N,[[["str"]],["result",["file","parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",188,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",189,N],[3,"Add","","`+`",N,N],[12,"0","","",190,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",191,N],[3,"And","","`&`",N,N],[12,"0","","",192,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",193,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",194,N],[3,"At","","`@`",N,N],[12,"0","","",195,N],[3,"Bang","","`!`",N,N],[12,"0","","",196,N],[3,"Caret","","`^`",N,N],[12,"0","","",197,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",198,N],[3,"Colon","","`:`",N,N],[12,"0","","",199,N],[3,"Colon2","","`::`",N,N],[12,"0","","",200,N],[3,"Comma","","`,`",N,N],[12,"0","","",201,N],[3,"Div","","`/`",N,N],[12,"0","","",202,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",203,N],[3,"Dollar","","`$`",N,N],[12,"0","","",204,N],[3,"Dot","","`.`",N,N],[12,"0","","",205,N],[3,"Dot2","","`..`",N,N],[12,"0","","",206,N],[3,"Dot3","","`...`",N,N],[12,"0","","",207,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",208,N],[3,"Eq","","`=`",N,N],[12,"0","","",209,N],[3,"EqEq","","`==`",N,N],[12,"0","","",210,N],[3,"Ge","","`>=`",N,N],[12,"0","","",211,N],[3,"Gt","","`>`",N,N],[12,"0","","",212,N],[3,"Le","","`<=`",N,N],[12,"0","","",213,N],[3,"Lt","","`<`",N,N],[12,"0","","",214,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",215,N],[3,"Ne","","`!=`",N,N],[12,"0","","",216,N],[3,"Or","","`|`",N,N],[12,"0","","",217,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",218,N],[3,"OrOr","","`||`",N,N],[12,"0","","",219,N],[3,"Pound","","`#`",N,N],[12,"0","","",220,N],[3,"Question","","`?`",N,N],[12,"0","","",221,N],[3,"RArrow","","`->`",N,N],[12,"0","","",222,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",223,N],[3,"Rem","","`%`",N,N],[12,"0","","",224,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",225,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",226,N],[3,"Semi","","`;`",N,N],[12,"0","","",227,N],[3,"Shl","","`<<`",N,N],[12,"0","","",228,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",229,N],[3,"Shr","","`>>`",N,N],[12,"0","","",230,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",231,N],[3,"Star","","`*`",N,N],[12,"0","","",232,N],[3,"Sub","","`-`",N,N],[12,"0","","",233,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",234,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",235,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",236,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",237,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",238,N],[3,"As","","`as`",N,N],[12,"0","","",239,N],[3,"Async","","`async`",N,N],[12,"0","","",240,N],[3,"Auto","","`auto`",N,N],[12,"0","","",241,N],[3,"Box","","`box`",N,N],[12,"0","","",242,N],[3,"Break","","`break`",N,N],[12,"0","","",243,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",244,N],[3,"Catch","","`catch`",N,N],[12,"0","","",245,N],[3,"Const","","`const`",N,N],[12,"0","","",246,N],[3,"Continue","","`continue`",N,N],[12,"0","","",247,N],[3,"Crate","","`crate`",N,N],[12,"0","","",248,N],[3,"Default","","`default`",N,N],[12,"0","","",249,N],[3,"Do","","`do`",N,N],[12,"0","","",250,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",251,N],[3,"Else","","`else`",N,N],[12,"0","","",252,N],[3,"Enum","","`enum`",N,N],[12,"0","","",253,N],[3,"Extern","","`extern`",N,N],[12,"0","","",254,N],[3,"Fn","","`fn`",N,N],[12,"0","","",255,N],[3,"For","","`for`",N,N],[12,"0","","",256,N],[3,"If","","`if`",N,N],[12,"0","","",257,N],[3,"Impl","","`impl`",N,N],[12,"0","","",258,N],[3,"In","","`in`",N,N],[12,"0","","",259,N],[3,"Let","","`let`",N,N],[12,"0","","",260,N],[3,"Loop","","`loop`",N,N],[12,"0","","",261,N],[3,"Macro","","`macro`",N,N],[12,"0","","",262,N],[3,"Match","","`match`",N,N],[12,"0","","",263,N],[3,"Mod","","`mod`",N,N],[12,"0","","",264,N],[3,"Move","","`move`",N,N],[12,"0","","",265,N],[3,"Mut","","`mut`",N,N],[12,"0","","",266,N],[3,"Pub","","`pub`",N,N],[12,"0","","",267,N],[3,"Ref","","`ref`",N,N],[12,"0","","",268,N],[3,"Return","","`return`",N,N],[12,"0","","",269,N],[3,"Self_","","`self`",N,N],[12,"0","","",270,N],[3,"Static","","`static`",N,N],[12,"0","","",271,N],[3,"Struct","","`struct`",N,N],[12,"0","","",272,N],[3,"Super","","`super`",N,N],[12,"0","","",273,N],[3,"Trait","","`trait`",N,N],[12,"0","","",274,N],[3,"Type","","`type`",N,N],[12,"0","","",275,N],[3,"Union","","`union`",N,N],[12,"0","","",276,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",277,N],[3,"Use","","`use`",N,N],[12,"0","","",278,N],[3,"Where","","`where`",N,N],[12,"0","","",279,N],[3,"While","","`while`",N,N],[12,"0","","",280,N],[3,"Yield","","`yield`",N,N],[12,"0","","",281,N],[11,"clone","","",188,[[["self"]],["underscore"]]],[11,"new","","",188,[[["span"]],["self"]]],[11,"default","","",188,[[],["self"]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"eq","","",188,[[["self"],["underscore"]],["bool"]]],[11,"hash","","",188,[[["self"],["h"]]]],[11,"from","","",188,[[["span"]],["self"]]],[11,"to_tokens","","",188,[[["self"],["tokenstream"]]]],[11,"parse","","",188,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",188,[[],["option",["str"]]]],[11,"clone","","",189,[[["self"]],["apostrophe"]]],[11,"new","","",189,[[["span"]],["self"]]],[11,"default","","",189,[[],["self"]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"eq","","",189,[[["self"],["apostrophe"]],["bool"]]],[11,"hash","","",189,[[["self"],["h"]]]],[11,"from","","",189,[[["span"]],["self"]]],[11,"to_tokens","","",189,[[["self"],["tokenstream"]]]],[11,"parse","","",189,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",189,[[],["option",["str"]]]],[11,"clone","","",190,[[["self"]],["add"]]],[11,"new","","",190,[[["span"]],["self"]]],[11,"default","","",190,[[],["self"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"eq","","",190,[[["self"],["add"]],["bool"]]],[11,"hash","","",190,[[["self"],["h"]]]],[11,"from","","",190,[[["span"]],["self"]]],[11,"clone","","",191,[[["self"]],["addeq"]]],[11,"new","","",191,[[["span"]],["self"]]],[11,"default","","",191,[[],["self"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"eq","","",191,[[["self"],["addeq"]],["bool"]]],[11,"hash","","",191,[[["self"],["h"]]]],[11,"from","","",191,[[["span"]],["self"]]],[11,"clone","","",192,[[["self"]],["and"]]],[11,"new","","",192,[[["span"]],["self"]]],[11,"default","","",192,[[],["self"]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"eq","","",192,[[["self"],["and"]],["bool"]]],[11,"hash","","",192,[[["self"],["h"]]]],[11,"from","","",192,[[["span"]],["self"]]],[11,"clone","","",193,[[["self"]],["andand"]]],[11,"new","","",193,[[["span"]],["self"]]],[11,"default","","",193,[[],["self"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"eq","","",193,[[["self"],["andand"]],["bool"]]],[11,"hash","","",193,[[["self"],["h"]]]],[11,"from","","",193,[[["span"]],["self"]]],[11,"clone","","",194,[[["self"]],["andeq"]]],[11,"new","","",194,[[["span"]],["self"]]],[11,"default","","",194,[[],["self"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"eq","","",194,[[["self"],["andeq"]],["bool"]]],[11,"hash","","",194,[[["self"],["h"]]]],[11,"from","","",194,[[["span"]],["self"]]],[11,"clone","","",195,[[["self"]],["at"]]],[11,"new","","",195,[[["span"]],["self"]]],[11,"default","","",195,[[],["self"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"eq","","",195,[[["self"],["at"]],["bool"]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"from","","",195,[[["span"]],["self"]]],[11,"clone","","",196,[[["self"]],["bang"]]],[11,"new","","",196,[[["span"]],["self"]]],[11,"default","","",196,[[],["self"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"eq","","",196,[[["self"],["bang"]],["bool"]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"from","","",196,[[["span"]],["self"]]],[11,"clone","","",197,[[["self"]],["caret"]]],[11,"new","","",197,[[["span"]],["self"]]],[11,"default","","",197,[[],["self"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"eq","","",197,[[["self"],["caret"]],["bool"]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"from","","",197,[[["span"]],["self"]]],[11,"clone","","",198,[[["self"]],["careteq"]]],[11,"new","","",198,[[["span"]],["self"]]],[11,"default","","",198,[[],["self"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"eq","","",198,[[["self"],["careteq"]],["bool"]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"from","","",198,[[["span"]],["self"]]],[11,"clone","","",199,[[["self"]],["colon"]]],[11,"new","","",199,[[["span"]],["self"]]],[11,"default","","",199,[[],["self"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"eq","","",199,[[["self"],["colon"]],["bool"]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"from","","",199,[[["span"]],["self"]]],[11,"clone","","",200,[[["self"]],["colon2"]]],[11,"new","","",200,[[["span"]],["self"]]],[11,"default","","",200,[[],["self"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"eq","","",200,[[["self"],["colon2"]],["bool"]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"from","","",200,[[["span"]],["self"]]],[11,"clone","","",201,[[["self"]],["comma"]]],[11,"new","","",201,[[["span"]],["self"]]],[11,"default","","",201,[[],["self"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"eq","","",201,[[["self"],["comma"]],["bool"]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"from","","",201,[[["span"]],["self"]]],[11,"clone","","",202,[[["self"]],["div"]]],[11,"new","","",202,[[["span"]],["self"]]],[11,"default","","",202,[[],["self"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"eq","","",202,[[["self"],["div"]],["bool"]]],[11,"hash","","",202,[[["self"],["h"]]]],[11,"from","","",202,[[["span"]],["self"]]],[11,"clone","","",203,[[["self"]],["diveq"]]],[11,"new","","",203,[[["span"]],["self"]]],[11,"default","","",203,[[],["self"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"eq","","",203,[[["self"],["diveq"]],["bool"]]],[11,"hash","","",203,[[["self"],["h"]]]],[11,"from","","",203,[[["span"]],["self"]]],[11,"clone","","",204,[[["self"]],["dollar"]]],[11,"new","","",204,[[["span"]],["self"]]],[11,"default","","",204,[[],["self"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"eq","","",204,[[["self"],["dollar"]],["bool"]]],[11,"hash","","",204,[[["self"],["h"]]]],[11,"from","","",204,[[["span"]],["self"]]],[11,"clone","","",205,[[["self"]],["dot"]]],[11,"new","","",205,[[["span"]],["self"]]],[11,"default","","",205,[[],["self"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"eq","","",205,[[["self"],["dot"]],["bool"]]],[11,"hash","","",205,[[["self"],["h"]]]],[11,"from","","",205,[[["span"]],["self"]]],[11,"clone","","",206,[[["self"]],["dot2"]]],[11,"new","","",206,[[["span"]],["self"]]],[11,"default","","",206,[[],["self"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"eq","","",206,[[["self"],["dot2"]],["bool"]]],[11,"hash","","",206,[[["self"],["h"]]]],[11,"from","","",206,[[["span"]],["self"]]],[11,"clone","","",207,[[["self"]],["dot3"]]],[11,"new","","",207,[[["span"]],["self"]]],[11,"default","","",207,[[],["self"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"eq","","",207,[[["self"],["dot3"]],["bool"]]],[11,"hash","","",207,[[["self"],["h"]]]],[11,"from","","",207,[[["span"]],["self"]]],[11,"clone","","",208,[[["self"]],["dotdoteq"]]],[11,"new","","",208,[[["span"]],["self"]]],[11,"default","","",208,[[],["self"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"eq","","",208,[[["self"],["dotdoteq"]],["bool"]]],[11,"hash","","",208,[[["self"],["h"]]]],[11,"from","","",208,[[["span"]],["self"]]],[11,"clone","","",209,[[["self"]],["eq"]]],[11,"new","","",209,[[["span"]],["self"]]],[11,"default","","",209,[[],["self"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"eq","","",209,[[["self"],["eq"]],["bool"]]],[11,"hash","","",209,[[["self"],["h"]]]],[11,"from","","",209,[[["span"]],["self"]]],[11,"clone","","",210,[[["self"]],["eqeq"]]],[11,"new","","",210,[[["span"]],["self"]]],[11,"default","","",210,[[],["self"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"eq","","",210,[[["self"],["eqeq"]],["bool"]]],[11,"hash","","",210,[[["self"],["h"]]]],[11,"from","","",210,[[["span"]],["self"]]],[11,"clone","","",211,[[["self"]],["ge"]]],[11,"new","","",211,[[["span"]],["self"]]],[11,"default","","",211,[[],["self"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"eq","","",211,[[["self"],["ge"]],["bool"]]],[11,"hash","","",211,[[["self"],["h"]]]],[11,"from","","",211,[[["span"]],["self"]]],[11,"clone","","",212,[[["self"]],["gt"]]],[11,"new","","",212,[[["span"]],["self"]]],[11,"default","","",212,[[],["self"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"eq","","",212,[[["self"],["gt"]],["bool"]]],[11,"hash","","",212,[[["self"],["h"]]]],[11,"from","","",212,[[["span"]],["self"]]],[11,"clone","","",213,[[["self"]],["le"]]],[11,"new","","",213,[[["span"]],["self"]]],[11,"default","","",213,[[],["self"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"eq","","",213,[[["self"],["le"]],["bool"]]],[11,"hash","","",213,[[["self"],["h"]]]],[11,"from","","",213,[[["span"]],["self"]]],[11,"clone","","",214,[[["self"]],["lt"]]],[11,"new","","",214,[[["span"]],["self"]]],[11,"default","","",214,[[],["self"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"eq","","",214,[[["self"],["lt"]],["bool"]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"from","","",214,[[["span"]],["self"]]],[11,"clone","","",215,[[["self"]],["muleq"]]],[11,"new","","",215,[[["span"]],["self"]]],[11,"default","","",215,[[],["self"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"eq","","",215,[[["self"],["muleq"]],["bool"]]],[11,"hash","","",215,[[["self"],["h"]]]],[11,"from","","",215,[[["span"]],["self"]]],[11,"clone","","",216,[[["self"]],["ne"]]],[11,"new","","",216,[[["span"]],["self"]]],[11,"default","","",216,[[],["self"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"eq","","",216,[[["self"],["ne"]],["bool"]]],[11,"hash","","",216,[[["self"],["h"]]]],[11,"from","","",216,[[["span"]],["self"]]],[11,"clone","","",217,[[["self"]],["or"]]],[11,"new","","",217,[[["span"]],["self"]]],[11,"default","","",217,[[],["self"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"eq","","",217,[[["self"],["or"]],["bool"]]],[11,"hash","","",217,[[["self"],["h"]]]],[11,"from","","",217,[[["span"]],["self"]]],[11,"clone","","",218,[[["self"]],["oreq"]]],[11,"new","","",218,[[["span"]],["self"]]],[11,"default","","",218,[[],["self"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"eq","","",218,[[["self"],["oreq"]],["bool"]]],[11,"hash","","",218,[[["self"],["h"]]]],[11,"from","","",218,[[["span"]],["self"]]],[11,"clone","","",219,[[["self"]],["oror"]]],[11,"new","","",219,[[["span"]],["self"]]],[11,"default","","",219,[[],["self"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"eq","","",219,[[["self"],["oror"]],["bool"]]],[11,"hash","","",219,[[["self"],["h"]]]],[11,"from","","",219,[[["span"]],["self"]]],[11,"clone","","",220,[[["self"]],["pound"]]],[11,"new","","",220,[[["span"]],["self"]]],[11,"default","","",220,[[],["self"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"eq","","",220,[[["self"],["pound"]],["bool"]]],[11,"hash","","",220,[[["self"],["h"]]]],[11,"from","","",220,[[["span"]],["self"]]],[11,"clone","","",221,[[["self"]],["question"]]],[11,"new","","",221,[[["span"]],["self"]]],[11,"default","","",221,[[],["self"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"eq","","",221,[[["self"],["question"]],["bool"]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"from","","",221,[[["span"]],["self"]]],[11,"clone","","",222,[[["self"]],["rarrow"]]],[11,"new","","",222,[[["span"]],["self"]]],[11,"default","","",222,[[],["self"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"eq","","",222,[[["self"],["rarrow"]],["bool"]]],[11,"hash","","",222,[[["self"],["h"]]]],[11,"from","","",222,[[["span"]],["self"]]],[11,"clone","","",223,[[["self"]],["larrow"]]],[11,"new","","",223,[[["span"]],["self"]]],[11,"default","","",223,[[],["self"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"eq","","",223,[[["self"],["larrow"]],["bool"]]],[11,"hash","","",223,[[["self"],["h"]]]],[11,"from","","",223,[[["span"]],["self"]]],[11,"clone","","",224,[[["self"]],["rem"]]],[11,"new","","",224,[[["span"]],["self"]]],[11,"default","","",224,[[],["self"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"eq","","",224,[[["self"],["rem"]],["bool"]]],[11,"hash","","",224,[[["self"],["h"]]]],[11,"from","","",224,[[["span"]],["self"]]],[11,"clone","","",225,[[["self"]],["remeq"]]],[11,"new","","",225,[[["span"]],["self"]]],[11,"default","","",225,[[],["self"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"eq","","",225,[[["self"],["remeq"]],["bool"]]],[11,"hash","","",225,[[["self"],["h"]]]],[11,"from","","",225,[[["span"]],["self"]]],[11,"clone","","",226,[[["self"]],["fatarrow"]]],[11,"new","","",226,[[["span"]],["self"]]],[11,"default","","",226,[[],["self"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"eq","","",226,[[["self"],["fatarrow"]],["bool"]]],[11,"hash","","",226,[[["self"],["h"]]]],[11,"from","","",226,[[["span"]],["self"]]],[11,"clone","","",227,[[["self"]],["semi"]]],[11,"new","","",227,[[["span"]],["self"]]],[11,"default","","",227,[[],["self"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"eq","","",227,[[["self"],["semi"]],["bool"]]],[11,"hash","","",227,[[["self"],["h"]]]],[11,"from","","",227,[[["span"]],["self"]]],[11,"clone","","",228,[[["self"]],["shl"]]],[11,"new","","",228,[[["span"]],["self"]]],[11,"default","","",228,[[],["self"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"eq","","",228,[[["self"],["shl"]],["bool"]]],[11,"hash","","",228,[[["self"],["h"]]]],[11,"from","","",228,[[["span"]],["self"]]],[11,"clone","","",229,[[["self"]],["shleq"]]],[11,"new","","",229,[[["span"]],["self"]]],[11,"default","","",229,[[],["self"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"eq","","",229,[[["self"],["shleq"]],["bool"]]],[11,"hash","","",229,[[["self"],["h"]]]],[11,"from","","",229,[[["span"]],["self"]]],[11,"clone","","",230,[[["self"]],["shr"]]],[11,"new","","",230,[[["span"]],["self"]]],[11,"default","","",230,[[],["self"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"eq","","",230,[[["self"],["shr"]],["bool"]]],[11,"hash","","",230,[[["self"],["h"]]]],[11,"from","","",230,[[["span"]],["self"]]],[11,"clone","","",231,[[["self"]],["shreq"]]],[11,"new","","",231,[[["span"]],["self"]]],[11,"default","","",231,[[],["self"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"eq","","",231,[[["self"],["shreq"]],["bool"]]],[11,"hash","","",231,[[["self"],["h"]]]],[11,"from","","",231,[[["span"]],["self"]]],[11,"clone","","",232,[[["self"]],["star"]]],[11,"new","","",232,[[["span"]],["self"]]],[11,"default","","",232,[[],["self"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"eq","","",232,[[["self"],["star"]],["bool"]]],[11,"hash","","",232,[[["self"],["h"]]]],[11,"from","","",232,[[["span"]],["self"]]],[11,"clone","","",233,[[["self"]],["sub"]]],[11,"new","","",233,[[["span"]],["self"]]],[11,"default","","",233,[[],["self"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"eq","","",233,[[["self"],["sub"]],["bool"]]],[11,"hash","","",233,[[["self"],["h"]]]],[11,"from","","",233,[[["span"]],["self"]]],[11,"clone","","",234,[[["self"]],["subeq"]]],[11,"new","","",234,[[["span"]],["self"]]],[11,"default","","",234,[[],["self"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"eq","","",234,[[["self"],["subeq"]],["bool"]]],[11,"hash","","",234,[[["self"],["h"]]]],[11,"from","","",234,[[["span"]],["self"]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"parse","","",190,[[["cursor"]],["presult",["add"]]]],[11,"description","","",190,[[],["option",["str"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"parse","","",191,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",191,[[],["option",["str"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"parse","","",192,[[["cursor"]],["presult",["and"]]]],[11,"description","","",192,[[],["option",["str"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"parse","","",193,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",193,[[],["option",["str"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"parse","","",194,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",194,[[],["option",["str"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"parse","","",195,[[["cursor"]],["presult",["at"]]]],[11,"description","","",195,[[],["option",["str"]]]],[11,"to_tokens","","",196,[[["self"],["tokenstream"]]]],[11,"parse","","",196,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",196,[[],["option",["str"]]]],[11,"to_tokens","","",197,[[["self"],["tokenstream"]]]],[11,"parse","","",197,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",197,[[],["option",["str"]]]],[11,"to_tokens","","",198,[[["self"],["tokenstream"]]]],[11,"parse","","",198,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",198,[[],["option",["str"]]]],[11,"to_tokens","","",199,[[["self"],["tokenstream"]]]],[11,"parse","","",199,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",199,[[],["option",["str"]]]],[11,"to_tokens","","",200,[[["self"],["tokenstream"]]]],[11,"parse","","",200,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",200,[[],["option",["str"]]]],[11,"to_tokens","","",201,[[["self"],["tokenstream"]]]],[11,"parse","","",201,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",201,[[],["option",["str"]]]],[11,"to_tokens","","",202,[[["self"],["tokenstream"]]]],[11,"parse","","",202,[[["cursor"]],["presult",["div"]]]],[11,"description","","",202,[[],["option",["str"]]]],[11,"to_tokens","","",203,[[["self"],["tokenstream"]]]],[11,"parse","","",203,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",203,[[],["option",["str"]]]],[11,"to_tokens","","",204,[[["self"],["tokenstream"]]]],[11,"parse","","",204,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",204,[[],["option",["str"]]]],[11,"to_tokens","","",205,[[["self"],["tokenstream"]]]],[11,"parse","","",205,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",205,[[],["option",["str"]]]],[11,"to_tokens","","",206,[[["self"],["tokenstream"]]]],[11,"parse","","",206,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",206,[[],["option",["str"]]]],[11,"to_tokens","","",207,[[["self"],["tokenstream"]]]],[11,"parse","","",207,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",207,[[],["option",["str"]]]],[11,"to_tokens","","",208,[[["self"],["tokenstream"]]]],[11,"parse","","",208,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",208,[[],["option",["str"]]]],[11,"to_tokens","","",209,[[["self"],["tokenstream"]]]],[11,"parse","","",209,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",209,[[],["option",["str"]]]],[11,"to_tokens","","",210,[[["self"],["tokenstream"]]]],[11,"parse","","",210,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",210,[[],["option",["str"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"parse","","",211,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",211,[[],["option",["str"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"parse","","",212,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",212,[[],["option",["str"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"parse","","",213,[[["cursor"]],["presult",["le"]]]],[11,"description","","",213,[[],["option",["str"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"parse","","",214,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",214,[[],["option",["str"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"parse","","",215,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"parse","","",216,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"parse","","",217,[[["cursor"]],["presult",["or"]]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"parse","","",218,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"parse","","",219,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"parse","","",220,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",220,[[],["option",["str"]]]],[11,"to_tokens","","",221,[[["self"],["tokenstream"]]]],[11,"parse","","",221,[[["cursor"]],["presult",["question"]]]],[11,"description","","",221,[[],["option",["str"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"parse","","",222,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",222,[[],["option",["str"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"parse","","",223,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",223,[[],["option",["str"]]]],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"parse","","",224,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",224,[[],["option",["str"]]]],[11,"to_tokens","","",225,[[["self"],["tokenstream"]]]],[11,"parse","","",225,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",225,[[],["option",["str"]]]],[11,"to_tokens","","",226,[[["self"],["tokenstream"]]]],[11,"parse","","",226,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",226,[[],["option",["str"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"parse","","",227,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",227,[[],["option",["str"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"parse","","",228,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",228,[[],["option",["str"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"parse","","",229,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",229,[[],["option",["str"]]]],[11,"to_tokens","","",230,[[["self"],["tokenstream"]]]],[11,"parse","","",230,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",230,[[],["option",["str"]]]],[11,"to_tokens","","",231,[[["self"],["tokenstream"]]]],[11,"parse","","",231,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",231,[[],["option",["str"]]]],[11,"to_tokens","","",232,[[["self"],["tokenstream"]]]],[11,"parse","","",232,[[["cursor"]],["presult",["star"]]]],[11,"description","","",232,[[],["option",["str"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"parse","","",233,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",233,[[],["option",["str"]]]],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"parse","","",234,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",234,[[],["option",["str"]]]],[11,"clone","","",235,[[["self"]],["brace"]]],[11,"default","","",235,[[],["self"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"eq","","",235,[[["self"],["brace"]],["bool"]]],[11,"hash","","",235,[[["self"],["h"]]]],[11,"surround","","",235,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",235,[[["cursor"],["f"]],["presult"]]],[11,"from","","",235,[[["span"]],["self"]]],[11,"clone","","",236,[[["self"]],["bracket"]]],[11,"default","","",236,[[],["self"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"eq","","",236,[[["self"],["bracket"]],["bool"]]],[11,"hash","","",236,[[["self"],["h"]]]],[11,"surround","","",236,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",236,[[["cursor"],["f"]],["presult"]]],[11,"from","","",236,[[["span"]],["self"]]],[11,"clone","","",237,[[["self"]],["paren"]]],[11,"default","","",237,[[],["self"]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result"]]],[11,"eq","","",237,[[["self"],["paren"]],["bool"]]],[11,"hash","","",237,[[["self"],["h"]]]],[11,"surround","","",237,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",237,[[["cursor"],["f"]],["presult"]]],[11,"from","","",237,[[["span"]],["self"]]],[11,"clone","","",238,[[["self"]],["group"]]],[11,"default","","",238,[[],["self"]]],[11,"fmt","","",238,[[["self"],["formatter"]],["result"]]],[11,"eq","","",238,[[["self"],["group"]],["bool"]]],[11,"hash","","",238,[[["self"],["h"]]]],[11,"surround","","",238,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",238,[[["cursor"],["f"]],["presult"]]],[11,"from","","",238,[[["span"]],["self"]]],[11,"clone","","",239,[[["self"]],["as"]]],[11,"default","","",239,[[],["self"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"eq","","",239,[[["self"],["as"]],["bool"]]],[11,"hash","","",239,[[["self"],["h"]]]],[11,"to_tokens","","",239,[[["self"],["tokenstream"]]]],[11,"parse","","",239,[[["cursor"]],["presult",["as"]]]],[11,"description","","",239,[[],["option",["str"]]]],[11,"from","","",239,[[["span"]],["self"]]],[11,"clone","","",240,[[["self"]],["async"]]],[11,"default","","",240,[[],["self"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"eq","","",240,[[["self"],["async"]],["bool"]]],[11,"hash","","",240,[[["self"],["h"]]]],[11,"to_tokens","","",240,[[["self"],["tokenstream"]]]],[11,"parse","","",240,[[["cursor"]],["presult",["async"]]]],[11,"description","","",240,[[],["option",["str"]]]],[11,"from","","",240,[[["span"]],["self"]]],[11,"clone","","",241,[[["self"]],["auto"]]],[11,"default","","",241,[[],["self"]]],[11,"fmt","","",241,[[["self"],["formatter"]],["result"]]],[11,"eq","","",241,[[["self"],["auto"]],["bool"]]],[11,"hash","","",241,[[["self"],["h"]]]],[11,"to_tokens","","",241,[[["self"],["tokenstream"]]]],[11,"parse","","",241,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",241,[[],["option",["str"]]]],[11,"from","","",241,[[["span"]],["self"]]],[11,"clone","","",242,[[["self"]],["box"]]],[11,"default","","",242,[[],["self"]]],[11,"fmt","","",242,[[["self"],["formatter"]],["result"]]],[11,"eq","","",242,[[["self"],["box"]],["bool"]]],[11,"hash","","",242,[[["self"],["h"]]]],[11,"to_tokens","","",242,[[["self"],["tokenstream"]]]],[11,"parse","","",242,[[["cursor"]],["presult",["box"]]]],[11,"description","","",242,[[],["option",["str"]]]],[11,"from","","",242,[[["span"]],["self"]]],[11,"clone","","",243,[[["self"]],["break"]]],[11,"default","","",243,[[],["self"]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result"]]],[11,"eq","","",243,[[["self"],["break"]],["bool"]]],[11,"hash","","",243,[[["self"],["h"]]]],[11,"to_tokens","","",243,[[["self"],["tokenstream"]]]],[11,"parse","","",243,[[["cursor"]],["presult",["break"]]]],[11,"description","","",243,[[],["option",["str"]]]],[11,"from","","",243,[[["span"]],["self"]]],[11,"clone","","",244,[[["self"]],["capself"]]],[11,"default","","",244,[[],["self"]]],[11,"fmt","","",244,[[["self"],["formatter"]],["result"]]],[11,"eq","","",244,[[["self"],["capself"]],["bool"]]],[11,"hash","","",244,[[["self"],["h"]]]],[11,"to_tokens","","",244,[[["self"],["tokenstream"]]]],[11,"parse","","",244,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",244,[[],["option",["str"]]]],[11,"from","","",244,[[["span"]],["self"]]],[11,"clone","","",245,[[["self"]],["catch"]]],[11,"default","","",245,[[],["self"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"eq","","",245,[[["self"],["catch"]],["bool"]]],[11,"hash","","",245,[[["self"],["h"]]]],[11,"to_tokens","","",245,[[["self"],["tokenstream"]]]],[11,"parse","","",245,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",245,[[],["option",["str"]]]],[11,"from","","",245,[[["span"]],["self"]]],[11,"clone","","",246,[[["self"]],["const"]]],[11,"default","","",246,[[],["self"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"eq","","",246,[[["self"],["const"]],["bool"]]],[11,"hash","","",246,[[["self"],["h"]]]],[11,"to_tokens","","",246,[[["self"],["tokenstream"]]]],[11,"parse","","",246,[[["cursor"]],["presult",["const"]]]],[11,"description","","",246,[[],["option",["str"]]]],[11,"from","","",246,[[["span"]],["self"]]],[11,"clone","","",247,[[["self"]],["continue"]]],[11,"default","","",247,[[],["self"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"eq","","",247,[[["self"],["continue"]],["bool"]]],[11,"hash","","",247,[[["self"],["h"]]]],[11,"to_tokens","","",247,[[["self"],["tokenstream"]]]],[11,"parse","","",247,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",247,[[],["option",["str"]]]],[11,"from","","",247,[[["span"]],["self"]]],[11,"clone","","",248,[[["self"]],["crate"]]],[11,"default","","",248,[[],["self"]]],[11,"fmt","","",248,[[["self"],["formatter"]],["result"]]],[11,"eq","","",248,[[["self"],["crate"]],["bool"]]],[11,"hash","","",248,[[["self"],["h"]]]],[11,"to_tokens","","",248,[[["self"],["tokenstream"]]]],[11,"parse","","",248,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",248,[[],["option",["str"]]]],[11,"from","","",248,[[["span"]],["self"]]],[11,"clone","","",249,[[["self"]],["default"]]],[11,"default","","",249,[[],["self"]]],[11,"fmt","","",249,[[["self"],["formatter"]],["result"]]],[11,"eq","","",249,[[["self"],["default"]],["bool"]]],[11,"hash","","",249,[[["self"],["h"]]]],[11,"to_tokens","","",249,[[["self"],["tokenstream"]]]],[11,"parse","","",249,[[["cursor"]],["presult",["default"]]]],[11,"description","","",249,[[],["option",["str"]]]],[11,"from","","",249,[[["span"]],["self"]]],[11,"clone","","",250,[[["self"]],["do"]]],[11,"default","","",250,[[],["self"]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result"]]],[11,"eq","","",250,[[["self"],["do"]],["bool"]]],[11,"hash","","",250,[[["self"],["h"]]]],[11,"to_tokens","","",250,[[["self"],["tokenstream"]]]],[11,"parse","","",250,[[["cursor"]],["presult",["do"]]]],[11,"description","","",250,[[],["option",["str"]]]],[11,"from","","",250,[[["span"]],["self"]]],[11,"clone","","",251,[[["self"]],["dyn"]]],[11,"default","","",251,[[],["self"]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result"]]],[11,"eq","","",251,[[["self"],["dyn"]],["bool"]]],[11,"hash","","",251,[[["self"],["h"]]]],[11,"to_tokens","","",251,[[["self"],["tokenstream"]]]],[11,"parse","","",251,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",251,[[],["option",["str"]]]],[11,"from","","",251,[[["span"]],["self"]]],[11,"clone","","",252,[[["self"]],["else"]]],[11,"default","","",252,[[],["self"]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result"]]],[11,"eq","","",252,[[["self"],["else"]],["bool"]]],[11,"hash","","",252,[[["self"],["h"]]]],[11,"to_tokens","","",252,[[["self"],["tokenstream"]]]],[11,"parse","","",252,[[["cursor"]],["presult",["else"]]]],[11,"description","","",252,[[],["option",["str"]]]],[11,"from","","",252,[[["span"]],["self"]]],[11,"clone","","",253,[[["self"]],["enum"]]],[11,"default","","",253,[[],["self"]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result"]]],[11,"eq","","",253,[[["self"],["enum"]],["bool"]]],[11,"hash","","",253,[[["self"],["h"]]]],[11,"to_tokens","","",253,[[["self"],["tokenstream"]]]],[11,"parse","","",253,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",253,[[],["option",["str"]]]],[11,"from","","",253,[[["span"]],["self"]]],[11,"clone","","",254,[[["self"]],["extern"]]],[11,"default","","",254,[[],["self"]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result"]]],[11,"eq","","",254,[[["self"],["extern"]],["bool"]]],[11,"hash","","",254,[[["self"],["h"]]]],[11,"to_tokens","","",254,[[["self"],["tokenstream"]]]],[11,"parse","","",254,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",254,[[],["option",["str"]]]],[11,"from","","",254,[[["span"]],["self"]]],[11,"clone","","",255,[[["self"]],["fn"]]],[11,"default","","",255,[[],["self"]]],[11,"fmt","","",255,[[["self"],["formatter"]],["result"]]],[11,"eq","","",255,[[["self"],["fn"]],["bool"]]],[11,"hash","","",255,[[["self"],["h"]]]],[11,"to_tokens","","",255,[[["self"],["tokenstream"]]]],[11,"parse","","",255,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",255,[[],["option",["str"]]]],[11,"from","","",255,[[["span"]],["self"]]],[11,"clone","","",256,[[["self"]],["for"]]],[11,"default","","",256,[[],["self"]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result"]]],[11,"eq","","",256,[[["self"],["for"]],["bool"]]],[11,"hash","","",256,[[["self"],["h"]]]],[11,"to_tokens","","",256,[[["self"],["tokenstream"]]]],[11,"parse","","",256,[[["cursor"]],["presult",["for"]]]],[11,"description","","",256,[[],["option",["str"]]]],[11,"from","","",256,[[["span"]],["self"]]],[11,"clone","","",257,[[["self"]],["if"]]],[11,"default","","",257,[[],["self"]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result"]]],[11,"eq","","",257,[[["self"],["if"]],["bool"]]],[11,"hash","","",257,[[["self"],["h"]]]],[11,"to_tokens","","",257,[[["self"],["tokenstream"]]]],[11,"parse","","",257,[[["cursor"]],["presult",["if"]]]],[11,"description","","",257,[[],["option",["str"]]]],[11,"from","","",257,[[["span"]],["self"]]],[11,"clone","","",258,[[["self"]],["impl"]]],[11,"default","","",258,[[],["self"]]],[11,"fmt","","",258,[[["self"],["formatter"]],["result"]]],[11,"eq","","",258,[[["self"],["impl"]],["bool"]]],[11,"hash","","",258,[[["self"],["h"]]]],[11,"to_tokens","","",258,[[["self"],["tokenstream"]]]],[11,"parse","","",258,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",258,[[],["option",["str"]]]],[11,"from","","",258,[[["span"]],["self"]]],[11,"clone","","",259,[[["self"]],["in"]]],[11,"default","","",259,[[],["self"]]],[11,"fmt","","",259,[[["self"],["formatter"]],["result"]]],[11,"eq","","",259,[[["self"],["in"]],["bool"]]],[11,"hash","","",259,[[["self"],["h"]]]],[11,"to_tokens","","",259,[[["self"],["tokenstream"]]]],[11,"parse","","",259,[[["cursor"]],["presult",["in"]]]],[11,"description","","",259,[[],["option",["str"]]]],[11,"from","","",259,[[["span"]],["self"]]],[11,"clone","","",260,[[["self"]],["let"]]],[11,"default","","",260,[[],["self"]]],[11,"fmt","","",260,[[["self"],["formatter"]],["result"]]],[11,"eq","","",260,[[["self"],["let"]],["bool"]]],[11,"hash","","",260,[[["self"],["h"]]]],[11,"to_tokens","","",260,[[["self"],["tokenstream"]]]],[11,"parse","","",260,[[["cursor"]],["presult",["let"]]]],[11,"description","","",260,[[],["option",["str"]]]],[11,"from","","",260,[[["span"]],["self"]]],[11,"clone","","",261,[[["self"]],["loop"]]],[11,"default","","",261,[[],["self"]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result"]]],[11,"eq","","",261,[[["self"],["loop"]],["bool"]]],[11,"hash","","",261,[[["self"],["h"]]]],[11,"to_tokens","","",261,[[["self"],["tokenstream"]]]],[11,"parse","","",261,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",261,[[],["option",["str"]]]],[11,"from","","",261,[[["span"]],["self"]]],[11,"clone","","",262,[[["self"]],["macro"]]],[11,"default","","",262,[[],["self"]]],[11,"fmt","","",262,[[["self"],["formatter"]],["result"]]],[11,"eq","","",262,[[["self"],["macro"]],["bool"]]],[11,"hash","","",262,[[["self"],["h"]]]],[11,"to_tokens","","",262,[[["self"],["tokenstream"]]]],[11,"parse","","",262,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",262,[[],["option",["str"]]]],[11,"from","","",262,[[["span"]],["self"]]],[11,"clone","","",263,[[["self"]],["match"]]],[11,"default","","",263,[[],["self"]]],[11,"fmt","","",263,[[["self"],["formatter"]],["result"]]],[11,"eq","","",263,[[["self"],["match"]],["bool"]]],[11,"hash","","",263,[[["self"],["h"]]]],[11,"to_tokens","","",263,[[["self"],["tokenstream"]]]],[11,"parse","","",263,[[["cursor"]],["presult",["match"]]]],[11,"description","","",263,[[],["option",["str"]]]],[11,"from","","",263,[[["span"]],["self"]]],[11,"clone","","",264,[[["self"]],["mod"]]],[11,"default","","",264,[[],["self"]]],[11,"fmt","","",264,[[["self"],["formatter"]],["result"]]],[11,"eq","","",264,[[["self"],["mod"]],["bool"]]],[11,"hash","","",264,[[["self"],["h"]]]],[11,"to_tokens","","",264,[[["self"],["tokenstream"]]]],[11,"parse","","",264,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",264,[[],["option",["str"]]]],[11,"from","","",264,[[["span"]],["self"]]],[11,"clone","","",265,[[["self"]],["move"]]],[11,"default","","",265,[[],["self"]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result"]]],[11,"eq","","",265,[[["self"],["move"]],["bool"]]],[11,"hash","","",265,[[["self"],["h"]]]],[11,"to_tokens","","",265,[[["self"],["tokenstream"]]]],[11,"parse","","",265,[[["cursor"]],["presult",["move"]]]],[11,"description","","",265,[[],["option",["str"]]]],[11,"from","","",265,[[["span"]],["self"]]],[11,"clone","","",266,[[["self"]],["mut"]]],[11,"default","","",266,[[],["self"]]],[11,"fmt","","",266,[[["self"],["formatter"]],["result"]]],[11,"eq","","",266,[[["self"],["mut"]],["bool"]]],[11,"hash","","",266,[[["self"],["h"]]]],[11,"to_tokens","","",266,[[["self"],["tokenstream"]]]],[11,"parse","","",266,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",266,[[],["option",["str"]]]],[11,"from","","",266,[[["span"]],["self"]]],[11,"clone","","",267,[[["self"]],["pub"]]],[11,"default","","",267,[[],["self"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"eq","","",267,[[["self"],["pub"]],["bool"]]],[11,"hash","","",267,[[["self"],["h"]]]],[11,"to_tokens","","",267,[[["self"],["tokenstream"]]]],[11,"parse","","",267,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",267,[[],["option",["str"]]]],[11,"from","","",267,[[["span"]],["self"]]],[11,"clone","","",268,[[["self"]],["ref"]]],[11,"default","","",268,[[],["self"]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result"]]],[11,"eq","","",268,[[["self"],["ref"]],["bool"]]],[11,"hash","","",268,[[["self"],["h"]]]],[11,"to_tokens","","",268,[[["self"],["tokenstream"]]]],[11,"parse","","",268,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",268,[[],["option",["str"]]]],[11,"from","","",268,[[["span"]],["self"]]],[11,"clone","","",269,[[["self"]],["return"]]],[11,"default","","",269,[[],["self"]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result"]]],[11,"eq","","",269,[[["self"],["return"]],["bool"]]],[11,"hash","","",269,[[["self"],["h"]]]],[11,"to_tokens","","",269,[[["self"],["tokenstream"]]]],[11,"parse","","",269,[[["cursor"]],["presult",["return"]]]],[11,"description","","",269,[[],["option",["str"]]]],[11,"from","","",269,[[["span"]],["self"]]],[11,"clone","","",270,[[["self"]],["self_"]]],[11,"default","","",270,[[],["self"]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result"]]],[11,"eq","","",270,[[["self"],["self_"]],["bool"]]],[11,"hash","","",270,[[["self"],["h"]]]],[11,"to_tokens","","",270,[[["self"],["tokenstream"]]]],[11,"parse","","",270,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",270,[[],["option",["str"]]]],[11,"from","","",270,[[["span"]],["self"]]],[11,"clone","","",271,[[["self"]],["static"]]],[11,"default","","",271,[[],["self"]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result"]]],[11,"eq","","",271,[[["self"],["static"]],["bool"]]],[11,"hash","","",271,[[["self"],["h"]]]],[11,"to_tokens","","",271,[[["self"],["tokenstream"]]]],[11,"parse","","",271,[[["cursor"]],["presult",["static"]]]],[11,"description","","",271,[[],["option",["str"]]]],[11,"from","","",271,[[["span"]],["self"]]],[11,"clone","","",272,[[["self"]],["struct"]]],[11,"default","","",272,[[],["self"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"eq","","",272,[[["self"],["struct"]],["bool"]]],[11,"hash","","",272,[[["self"],["h"]]]],[11,"to_tokens","","",272,[[["self"],["tokenstream"]]]],[11,"parse","","",272,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",272,[[],["option",["str"]]]],[11,"from","","",272,[[["span"]],["self"]]],[11,"clone","","",273,[[["self"]],["super"]]],[11,"default","","",273,[[],["self"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"eq","","",273,[[["self"],["super"]],["bool"]]],[11,"hash","","",273,[[["self"],["h"]]]],[11,"to_tokens","","",273,[[["self"],["tokenstream"]]]],[11,"parse","","",273,[[["cursor"]],["presult",["super"]]]],[11,"description","","",273,[[],["option",["str"]]]],[11,"from","","",273,[[["span"]],["self"]]],[11,"clone","","",274,[[["self"]],["trait"]]],[11,"default","","",274,[[],["self"]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result"]]],[11,"eq","","",274,[[["self"],["trait"]],["bool"]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"to_tokens","","",274,[[["self"],["tokenstream"]]]],[11,"parse","","",274,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",274,[[],["option",["str"]]]],[11,"from","","",274,[[["span"]],["self"]]],[11,"clone","","",275,[[["self"]],["type"]]],[11,"default","","",275,[[],["self"]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result"]]],[11,"eq","","",275,[[["self"],["type"]],["bool"]]],[11,"hash","","",275,[[["self"],["h"]]]],[11,"to_tokens","","",275,[[["self"],["tokenstream"]]]],[11,"parse","","",275,[[["cursor"]],["presult",["type"]]]],[11,"description","","",275,[[],["option",["str"]]]],[11,"from","","",275,[[["span"]],["self"]]],[11,"clone","","",276,[[["self"]],["union"]]],[11,"default","","",276,[[],["self"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"eq","","",276,[[["self"],["union"]],["bool"]]],[11,"hash","","",276,[[["self"],["h"]]]],[11,"to_tokens","","",276,[[["self"],["tokenstream"]]]],[11,"parse","","",276,[[["cursor"]],["presult",["union"]]]],[11,"description","","",276,[[],["option",["str"]]]],[11,"from","","",276,[[["span"]],["self"]]],[11,"clone","","",277,[[["self"]],["unsafe"]]],[11,"default","","",277,[[],["self"]]],[11,"fmt","","",277,[[["self"],["formatter"]],["result"]]],[11,"eq","","",277,[[["self"],["unsafe"]],["bool"]]],[11,"hash","","",277,[[["self"],["h"]]]],[11,"to_tokens","","",277,[[["self"],["tokenstream"]]]],[11,"parse","","",277,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",277,[[],["option",["str"]]]],[11,"from","","",277,[[["span"]],["self"]]],[11,"clone","","",278,[[["self"]],["use"]]],[11,"default","","",278,[[],["self"]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result"]]],[11,"eq","","",278,[[["self"],["use"]],["bool"]]],[11,"hash","","",278,[[["self"],["h"]]]],[11,"to_tokens","","",278,[[["self"],["tokenstream"]]]],[11,"parse","","",278,[[["cursor"]],["presult",["use"]]]],[11,"description","","",278,[[],["option",["str"]]]],[11,"from","","",278,[[["span"]],["self"]]],[11,"clone","","",279,[[["self"]],["where"]]],[11,"default","","",279,[[],["self"]]],[11,"fmt","","",279,[[["self"],["formatter"]],["result"]]],[11,"eq","","",279,[[["self"],["where"]],["bool"]]],[11,"hash","","",279,[[["self"],["h"]]]],[11,"to_tokens","","",279,[[["self"],["tokenstream"]]]],[11,"parse","","",279,[[["cursor"]],["presult",["where"]]]],[11,"description","","",279,[[],["option",["str"]]]],[11,"from","","",279,[[["span"]],["self"]]],[11,"clone","","",280,[[["self"]],["while"]]],[11,"default","","",280,[[],["self"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"eq","","",280,[[["self"],["while"]],["bool"]]],[11,"hash","","",280,[[["self"],["h"]]]],[11,"to_tokens","","",280,[[["self"],["tokenstream"]]]],[11,"parse","","",280,[[["cursor"]],["presult",["while"]]]],[11,"description","","",280,[[],["option",["str"]]]],[11,"from","","",280,[[["span"]],["self"]]],[11,"clone","","",281,[[["self"]],["yield"]]],[11,"default","","",281,[[],["self"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"eq","","",281,[[["self"],["yield"]],["bool"]]],[11,"hash","","",281,[[["self"],["h"]]]],[11,"to_tokens","","",281,[[["self"],["tokenstream"]]]],[11,"parse","","",281,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",281,[[],["option",["str"]]]],[11,"from","","",281,[[["span"]],["self"]]],[11,"from","syn","",282,[[["self_"]],["ident"]]],[11,"from","","",282,[[["capself"]],["ident"]]],[11,"from","","",282,[[["super"]],["ident"]]],[11,"from","","",282,[[["crate"]],["ident"]]],[11,"from","","",282,[[["extern"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"eq","","",154,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",154,[[["self"],["attrstyle"]],["bool"]]],[11,"hash","","",154,N],[11,"clone","","",154,[[["self"]],["attrstyle"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"eq","","",155,[[["self"],["meta"]],["bool"]]],[11,"ne","","",155,[[["self"],["meta"]],["bool"]]],[11,"hash","","",155,N],[11,"clone","","",155,[[["self"]],["meta"]]],[11,"from","","",155,[[["ident"]],["meta"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",155,[[["metalist"]],["meta"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"hash","","",2,N],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",155,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",155,[[["self"]],["ident"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"eq","","",156,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",156,[[["self"],["nestedmeta"]],["bool"]]],[11,"hash","","",156,N],[11,"clone","","",156,[[["self"]],["nestedmeta"]]],[11,"from","","",156,[[["meta"]],["nestedmeta"]]],[11,"from","","",156,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",158,[[["cursor"]],["presult"]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"hash","","",6,N],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"eq","","",157,[[["self"],["fields"]],["bool"]]],[11,"ne","","",157,[[["self"],["fields"]],["bool"]]],[11,"hash","","",157,N],[11,"clone","","",157,[[["self"]],["fields"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",157,[[["fieldsnamed"]],["fields"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"hash","","",5,N],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",157,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",157,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",157,[[["self"]],["itermut",["field"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["field"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"eq","","",158,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",158,[[["self"],["visibility"]],["bool"]]],[11,"hash","","",158,N],[11,"clone","","",158,[[["self"]],["visibility"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"hash","","",8,N],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",158,[[["vispublic"]],["visibility"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",158,[[["viscrate"]],["visibility"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"hash","","",9,N],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",158,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult"]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"parse","","",10,[[["cursor"]],["presult"]]],[11,"description","","",10,[[],["option",["str"]]]],[11,"parse","","",161,[[["cursor"]],["presult"]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",26,[[["cursor"]],["presult"]]],[11,"description","","",26,[[],["option",["str"]]]],[11,"parse","","",25,[[["cursor"]],["presult"]]],[11,"description","","",25,[[],["option",["str"]]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"parse","","",19,[[["cursor"]],["presult"]]],[11,"description","","",19,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",55,[[["cursor"]],["presult"]]],[11,"description","","",55,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",14,[[["cursor"]],["presult"]]],[11,"description","","",14,[[],["option",["str"]]]],[11,"parse","","",163,[[["cursor"]],["presult"]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"parse","","",35,[[["cursor"]],["presult"]]],[11,"description","","",35,[[],["option",["str"]]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse_within","","",52,[[["cursor"]],["presult",["vec"]]]],[11,"parse","","",164,[[["cursor"]],["presult"]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"parse","","",162,[[["cursor"]],["presult"]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",66,[[["cursor"]],["presult"]]],[11,"description","","",66,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"parse","","",160,[[["cursor"]],["presult"]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",62,[[["cursor"]],["presult"]]],[11,"description","","",62,[[],["option",["str"]]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"parse","","",64,[[["cursor"]],["presult"]]],[11,"description","","",64,[[],["option",["str"]]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",63,[[["cursor"]],["presult"]]],[11,"description","","",63,[[],["option",["str"]]]],[11,"parse","","",65,[[["cursor"]],["presult"]]],[11,"description","","",65,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",36,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",35,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",37,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",62,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",63,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"eq","","",159,[[["self"],["expr"]],["bool"]]],[11,"ne","","",159,[[["self"],["expr"]],["bool"]]],[11,"hash","","",159,N],[11,"clone","","",159,[[["self"]],["expr"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprbox"]],["bool"]]],[11,"hash","","",15,N],[11,"clone","","",15,[[["self"]],["exprbox"]]],[11,"from","","",159,[[["exprbox"]],["expr"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",27,[[["self"],["exprinplace"]],["bool"]]],[11,"hash","","",27,N],[11,"clone","","",27,[[["self"]],["exprinplace"]]],[11,"from","","",159,[[["exprinplace"]],["expr"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"hash","","",10,N],[11,"clone","","",10,[[["self"]],["exprarray"]]],[11,"from","","",159,[[["exprarray"]],["expr"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",17,[[["self"],["exprcall"]],["bool"]]],[11,"hash","","",17,N],[11,"clone","","",17,[[["self"]],["exprcall"]]],[11,"from","","",159,[[["exprcall"]],["expr"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"hash","","",33,N],[11,"clone","","",33,[[["self"]],["exprmethodcall"]]],[11,"from","","",159,[[["exprmethodcall"]],["expr"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",42,[[["self"],["exprtuple"]],["bool"]]],[11,"hash","","",42,N],[11,"clone","","",42,[[["self"]],["exprtuple"]]],[11,"from","","",159,[[["exprtuple"]],["expr"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",13,[[["self"],["exprbinary"]],["bool"]]],[11,"hash","","",13,N],[11,"clone","","",13,[[["self"]],["exprbinary"]]],[11,"from","","",159,[[["exprbinary"]],["expr"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",44,[[["self"],["exprunary"]],["bool"]]],[11,"hash","","",44,N],[11,"clone","","",44,[[["self"]],["exprunary"]]],[11,"from","","",159,[[["exprunary"]],["expr"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"hash","","",29,N],[11,"clone","","",29,[[["self"]],["exprlit"]]],[11,"from","","",159,[[["exprlit"]],["expr"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",18,[[["self"],["exprcast"]],["bool"]]],[11,"hash","","",18,N],[11,"clone","","",18,[[["self"]],["exprcast"]]],[11,"from","","",159,[[["exprcast"]],["expr"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",43,[[["self"],["exprtype"]],["bool"]]],[11,"hash","","",43,N],[11,"clone","","",43,[[["self"]],["exprtype"]]],[11,"from","","",159,[[["exprtype"]],["expr"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",25,[[["self"],["exprif"]],["bool"]]],[11,"hash","","",25,N],[11,"clone","","",25,[[["self"]],["exprif"]]],[11,"from","","",159,[[["exprif"]],["expr"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["expriflet"]],["bool"]]],[11,"ne","","",26,[[["self"],["expriflet"]],["bool"]]],[11,"hash","","",26,N],[11,"clone","","",26,[[["self"]],["expriflet"]]],[11,"from","","",159,[[["expriflet"]],["expr"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",47,[[["self"],["exprwhile"]],["bool"]]],[11,"hash","","",47,N],[11,"clone","","",47,[[["self"]],["exprwhile"]]],[11,"from","","",159,[[["exprwhile"]],["expr"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["exprwhilelet"]],["bool"]]],[11,"ne","","",48,[[["self"],["exprwhilelet"]],["bool"]]],[11,"hash","","",48,N],[11,"clone","","",48,[[["self"]],["exprwhilelet"]]],[11,"from","","",159,[[["exprwhilelet"]],["expr"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"hash","","",23,N],[11,"clone","","",23,[[["self"]],["exprforloop"]]],[11,"from","","",159,[[["exprforloop"]],["expr"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"hash","","",30,N],[11,"clone","","",30,[[["self"]],["exprloop"]]],[11,"from","","",159,[[["exprloop"]],["expr"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"hash","","",32,N],[11,"clone","","",32,[[["self"]],["exprmatch"]]],[11,"from","","",159,[[["exprmatch"]],["expr"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"hash","","",20,N],[11,"clone","","",20,[[["self"]],["exprclosure"]]],[11,"from","","",159,[[["exprclosure"]],["expr"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",45,[[["self"],["exprunsafe"]],["bool"]]],[11,"hash","","",45,N],[11,"clone","","",45,[[["self"]],["exprunsafe"]]],[11,"from","","",159,[[["exprunsafe"]],["expr"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprblock"]],["bool"]]],[11,"hash","","",14,N],[11,"clone","","",14,[[["self"]],["exprblock"]]],[11,"from","","",159,[[["exprblock"]],["expr"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"hash","","",11,N],[11,"clone","","",11,[[["self"]],["exprassign"]]],[11,"from","","",159,[[["exprassign"]],["expr"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"hash","","",12,N],[11,"clone","","",12,[[["self"]],["exprassignop"]]],[11,"from","","",159,[[["exprassignop"]],["expr"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"hash","","",22,N],[11,"clone","","",22,[[["self"]],["exprfield"]]],[11,"from","","",159,[[["exprfield"]],["expr"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",28,[[["self"],["exprindex"]],["bool"]]],[11,"hash","","",28,N],[11,"clone","","",28,[[["self"]],["exprindex"]]],[11,"from","","",159,[[["exprindex"]],["expr"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"hash","","",36,N],[11,"clone","","",36,[[["self"]],["exprrange"]]],[11,"from","","",159,[[["exprrange"]],["expr"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"hash","","",35,N],[11,"clone","","",35,[[["self"]],["exprpath"]]],[11,"from","","",159,[[["exprpath"]],["expr"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"hash","","",37,N],[11,"clone","","",37,[[["self"]],["exprreference"]]],[11,"from","","",159,[[["exprreference"]],["expr"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprbreak"]],["bool"]]],[11,"hash","","",16,N],[11,"clone","","",16,[[["self"]],["exprbreak"]]],[11,"from","","",159,[[["exprbreak"]],["expr"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"hash","","",21,N],[11,"clone","","",21,[[["self"]],["exprcontinue"]]],[11,"from","","",159,[[["exprcontinue"]],["expr"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"hash","","",39,N],[11,"clone","","",39,[[["self"]],["exprreturn"]]],[11,"from","","",159,[[["exprreturn"]],["expr"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"hash","","",31,N],[11,"clone","","",31,[[["self"]],["exprmacro"]]],[11,"from","","",159,[[["exprmacro"]],["expr"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"hash","","",40,N],[11,"clone","","",40,[[["self"]],["exprstruct"]]],[11,"from","","",159,[[["exprstruct"]],["expr"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"hash","","",38,N],[11,"clone","","",38,[[["self"]],["exprrepeat"]]],[11,"from","","",159,[[["exprrepeat"]],["expr"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"hash","","",34,N],[11,"clone","","",34,[[["self"]],["exprparen"]]],[11,"from","","",159,[[["exprparen"]],["expr"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"hash","","",24,N],[11,"clone","","",24,[[["self"]],["exprgroup"]]],[11,"from","","",159,[[["exprgroup"]],["expr"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"hash","","",41,N],[11,"clone","","",41,[[["self"]],["exprtry"]]],[11,"from","","",159,[[["exprtry"]],["expr"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["exprcatch"]],["bool"]]],[11,"ne","","",19,[[["self"],["exprcatch"]],["bool"]]],[11,"hash","","",19,N],[11,"clone","","",19,[[["self"]],["exprcatch"]]],[11,"from","","",159,[[["exprcatch"]],["expr"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",49,[[["self"],["expryield"]],["bool"]]],[11,"hash","","",49,N],[11,"clone","","",49,[[["self"]],["expryield"]]],[11,"from","","",159,[[["expryield"]],["expr"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["exprverbatim"]]],[11,"from","","",159,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"eq","","",46,[[["self"],["self"]],["bool"]]],[11,"hash","","",46,[[["self"],["h"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"eq","","",160,[[["self"],["member"]],["bool"]]],[11,"ne","","",160,[[["self"],["member"]],["bool"]]],[11,"hash","","",160,N],[11,"clone","","",160,[[["self"]],["member"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["index"]]],[11,"from","","",50,[[["usize"]],["index"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"hash","","",50,[[["self"],["h"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"hash","","",57,N],[11,"clone","","",57,[[["self"]],["methodturbofish"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"eq","","",161,[[["self"],["genericmethodargument"]],["bool"]]],[11,"ne","","",161,[[["self"],["genericmethodargument"]],["bool"]]],[11,"hash","","",161,N],[11,"clone","","",161,[[["self"]],["genericmethodargument"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"ne","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"hash","","",54,N],[11,"clone","","",54,[[["self"]],["fieldvalue"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["label"]],["bool"]]],[11,"ne","","",55,[[["self"],["label"]],["bool"]]],[11,"hash","","",55,N],[11,"clone","","",55,[[["self"]],["label"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["block"]],["bool"]]],[11,"ne","","",52,[[["self"],["block"]],["bool"]]],[11,"hash","","",52,N],[11,"clone","","",52,[[["self"]],["block"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"eq","","",164,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",164,[[["self"],["stmt"]],["bool"]]],[11,"hash","","",164,N],[11,"clone","","",164,[[["self"]],["stmt"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["local"]],["bool"]]],[11,"ne","","",56,[[["self"],["local"]],["bool"]]],[11,"hash","","",56,N],[11,"clone","","",56,[[["self"]],["local"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"eq","","",162,[[["self"],["pat"]],["bool"]]],[11,"ne","","",162,[[["self"],["pat"]],["bool"]]],[11,"hash","","",162,N],[11,"clone","","",162,[[["self"]],["pat"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"eq","","",70,[[["self"],["patwild"]],["bool"]]],[11,"ne","","",70,[[["self"],["patwild"]],["bool"]]],[11,"hash","","",70,N],[11,"clone","","",70,[[["self"]],["patwild"]]],[11,"from","","",162,[[["patwild"]],["pat"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"eq","","",59,[[["self"],["patident"]],["bool"]]],[11,"ne","","",59,[[["self"],["patident"]],["bool"]]],[11,"hash","","",59,N],[11,"clone","","",59,[[["self"]],["patident"]]],[11,"from","","",162,[[["patident"]],["pat"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"hash","","",66,N],[11,"clone","","",66,[[["self"]],["patstruct"]]],[11,"from","","",162,[[["patstruct"]],["pat"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"eq","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"hash","","",68,N],[11,"clone","","",68,[[["self"]],["pattuplestruct"]]],[11,"from","","",162,[[["pattuplestruct"]],["pat"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"eq","","",62,[[["self"],["patpath"]],["bool"]]],[11,"ne","","",62,[[["self"],["patpath"]],["bool"]]],[11,"hash","","",62,N],[11,"clone","","",62,[[["self"]],["patpath"]]],[11,"from","","",162,[[["patpath"]],["pat"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"eq","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"ne","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"hash","","",67,N],[11,"clone","","",67,[[["self"]],["pattuple"]]],[11,"from","","",162,[[["pattuple"]],["pat"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"eq","","",58,[[["self"],["patbox"]],["bool"]]],[11,"ne","","",58,[[["self"],["patbox"]],["bool"]]],[11,"hash","","",58,N],[11,"clone","","",58,[[["self"]],["patbox"]]],[11,"from","","",162,[[["patbox"]],["pat"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["patref"]],["bool"]]],[11,"ne","","",64,[[["self"],["patref"]],["bool"]]],[11,"hash","","",64,N],[11,"clone","","",64,[[["self"]],["patref"]]],[11,"from","","",162,[[["patref"]],["pat"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"eq","","",60,[[["self"],["patlit"]],["bool"]]],[11,"ne","","",60,[[["self"],["patlit"]],["bool"]]],[11,"hash","","",60,N],[11,"clone","","",60,[[["self"]],["patlit"]]],[11,"from","","",162,[[["patlit"]],["pat"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["patrange"]],["bool"]]],[11,"ne","","",63,[[["self"],["patrange"]],["bool"]]],[11,"hash","","",63,N],[11,"clone","","",63,[[["self"]],["patrange"]]],[11,"from","","",162,[[["patrange"]],["pat"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",65,[[["self"],["patslice"]],["bool"]]],[11,"hash","","",65,N],[11,"clone","","",65,[[["self"]],["patslice"]]],[11,"from","","",162,[[["patslice"]],["pat"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"eq","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"ne","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"hash","","",61,N],[11,"clone","","",61,[[["self"]],["patmacro"]]],[11,"from","","",162,[[["patmacro"]],["pat"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["patverbatim"]]],[11,"from","","",162,[[["patverbatim"]],["pat"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"eq","","",69,[[["self"],["self"]],["bool"]]],[11,"hash","","",69,[[["self"],["h"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["arm"]],["bool"]]],[11,"ne","","",51,[[["self"],["arm"]],["bool"]]],[11,"hash","","",51,N],[11,"clone","","",51,[[["self"]],["arm"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"eq","","",163,[[["self"],["rangelimits"]],["bool"]]],[11,"ne","","",163,[[["self"],["rangelimits"]],["bool"]]],[11,"hash","","",163,N],[11,"clone","","",163,[[["self"]],["rangelimits"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"ne","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"hash","","",53,N],[11,"clone","","",53,[[["self"]],["fieldpat"]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"parse","","",165,[[["cursor"]],["presult"]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"parse","","",74,[[["cursor"]],["presult"]]],[11,"description","","",74,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",79,[[["cursor"]],["presult"]]],[11,"description","","",79,[[],["option",["str"]]]],[11,"parse","","",167,[[["cursor"]],["presult"]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"parse","","",78,[[["cursor"]],["presult"]]],[11,"description","","",78,[[],["option",["str"]]]],[11,"parse","","",166,[[["cursor"]],["presult"]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",80,[[["cursor"]],["presult"]]],[11,"description","","",80,[[],["option",["str"]]]],[11,"parse","","",168,[[["cursor"]],["presult"]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",283,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",284,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",285,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",74,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",79,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",78,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",77,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",75,[[["self"],["tokenstream"]]]],[11,"default","","",73,[[],["generics"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["generics"]],["bool"]]],[11,"ne","","",73,[[["self"],["generics"]],["bool"]]],[11,"hash","","",73,N],[11,"clone","","",73,[[["self"]],["generics"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"eq","","",165,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",165,[[["self"],["genericparam"]],["bool"]]],[11,"hash","","",165,N],[11,"clone","","",165,[[["self"]],["genericparam"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"eq","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"hash","","",79,N],[11,"clone","","",79,[[["self"]],["typeparam"]]],[11,"from","","",165,[[["typeparam"]],["genericparam"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"eq","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"hash","","",74,N],[11,"clone","","",74,[[["self"]],["lifetimedef"]]],[11,"from","","",165,[[["lifetimedef"]],["genericparam"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"eq","","",72,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",72,[[["self"],["constparam"]],["bool"]]],[11,"hash","","",72,N],[11,"clone","","",72,[[["self"]],["constparam"]]],[11,"from","","",165,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",73,[[["self"]],["whereclause"]]],[11,"fmt","","",283,[[["self"],["formatter"]],["result"]]],[11,"eq","","",283,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",283,[[["self"],["implgenerics"]],["bool"]]],[11,"hash","","",283,N],[11,"clone","","",283,[[["self"]],["implgenerics"]]],[11,"fmt","","",284,[[["self"],["formatter"]],["result"]]],[11,"eq","","",284,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",284,[[["self"],["typegenerics"]],["bool"]]],[11,"hash","","",284,N],[11,"clone","","",284,[[["self"]],["typegenerics"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"eq","","",285,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",285,[[["self"],["turbofish"]],["bool"]]],[11,"hash","","",285,N],[11,"clone","","",285,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",284,[[["self"]],["turbofish"]]],[11,"default","","",71,[[],["boundlifetimes"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"eq","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"hash","","",71,N],[11,"clone","","",71,[[["self"]],["boundlifetimes"]]],[11,"new","","",74,[[["lifetime"]],["self"]]],[11,"from","","",79,[[["ident"]],["self"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"eq","","",167,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",167,[[["self"],["typeparambound"]],["bool"]]],[11,"hash","","",167,N],[11,"clone","","",167,[[["self"]],["typeparambound"]]],[11,"from","","",167,[[["traitbound"]],["typeparambound"]]],[11,"from","","",167,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"hash","","",78,N],[11,"clone","","",78,[[["self"]],["traitbound"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"eq","","",166,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",166,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"hash","","",166,N],[11,"clone","","",166,[[["self"]],["traitboundmodifier"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"eq","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"hash","","",80,N],[11,"clone","","",80,[[["self"]],["whereclause"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"eq","","",168,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",168,[[["self"],["wherepredicate"]],["bool"]]],[11,"hash","","",168,N],[11,"clone","","",168,[[["self"]],["wherepredicate"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"eq","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"hash","","",77,N],[11,"clone","","",77,[[["self"]],["predicatetype"]]],[11,"from","","",168,[[["predicatetype"]],["wherepredicate"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"eq","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"hash","","",76,N],[11,"clone","","",76,[[["self"]],["predicatelifetime"]]],[11,"from","","",168,[[["predicatelifetime"]],["wherepredicate"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"eq","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"hash","","",75,N],[11,"clone","","",75,[[["self"]],["predicateeq"]]],[11,"from","","",168,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult"]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"parse","","",100,[[["cursor"]],["presult"]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"parse","","",101,[[["cursor"]],["presult"]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"parse","","",96,[[["cursor"]],["presult"]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"parse","","",108,[[["cursor"]],["presult"]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"parse","","",174,[[["cursor"]],["presult"]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"parse","","",119,[[["cursor"]],["presult"]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"parse","","",118,[[["cursor"]],["presult"]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"parse","","",120,[[["cursor"]],["presult"]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"parse","","",116,[[["cursor"]],["presult"]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"parse","","",117,[[["cursor"]],["presult"]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"parse","","",103,[[["cursor"]],["presult"]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"parse","","",94,[[["cursor"]],["presult"]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"parse","","",97,[[["cursor"]],["presult"]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"parse","","",169,[[["cursor"]],["presult"]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"parse","","",102,[[["cursor"]],["presult"]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"parse","","",98,[[["cursor"]],["presult"]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"parse","","",170,[[["cursor"]],["presult"]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"description","","",85,[[],["option",["str"]]]],[11,"parse","","",86,[[["cursor"]],["presult"]]],[11,"description","","",86,[[],["option",["str"]]]],[11,"parse","","",87,[[["cursor"]],["presult"]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"parse","","",106,[[["cursor"]],["presult"]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"parse","","",104,[[["cursor"]],["presult"]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"parse","","",95,[[["cursor"]],["presult"]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"parse","","",107,[[["cursor"]],["presult"]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"parse","","",105,[[["cursor"]],["presult"]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"parse","","",173,[[["cursor"]],["presult"]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"parse","","",111,[[["cursor"]],["presult"]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"parse","","",113,[[["cursor"]],["presult"]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"parse","","",114,[[["cursor"]],["presult"]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"parse","","",112,[[["cursor"]],["presult"]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"parse","","",99,[[["cursor"]],["presult"]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"parse","","",171,[[["cursor"]],["presult"]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"parse","","",89,[[["cursor"]],["presult"]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"parse","","",91,[[["cursor"]],["presult"]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"parse","","",92,[[["cursor"]],["presult"]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"parse","","",90,[[["cursor"]],["presult"]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"eq","","",172,[[["self"],["item"]],["bool"]]],[11,"ne","","",172,[[["self"],["item"]],["bool"]]],[11,"hash","","",172,N],[11,"clone","","",172,[[["self"]],["item"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",96,[[["self"],["itemexterncrate"]],["bool"]]],[11,"hash","","",96,N],[11,"clone","","",96,[[["self"]],["itemexterncrate"]]],[11,"from","","",172,[[["itemexterncrate"]],["item"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"eq","","",108,[[["self"],["itemuse"]],["bool"]]],[11,"ne","","",108,[[["self"],["itemuse"]],["bool"]]],[11,"hash","","",108,N],[11,"clone","","",108,[[["self"]],["itemuse"]]],[11,"from","","",172,[[["itemuse"]],["item"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"eq","","",103,[[["self"],["itemstatic"]],["bool"]]],[11,"ne","","",103,[[["self"],["itemstatic"]],["bool"]]],[11,"hash","","",103,N],[11,"clone","","",103,[[["self"]],["itemstatic"]]],[11,"from","","",172,[[["itemstatic"]],["item"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"eq","","",94,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",94,[[["self"],["itemconst"]],["bool"]]],[11,"hash","","",94,N],[11,"clone","","",94,[[["self"]],["itemconst"]]],[11,"from","","",172,[[["itemconst"]],["item"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",97,[[["self"],["itemfn"]],["bool"]]],[11,"hash","","",97,N],[11,"clone","","",97,[[["self"]],["itemfn"]]],[11,"from","","",172,[[["itemfn"]],["item"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"eq","","",102,[[["self"],["itemmod"]],["bool"]]],[11,"ne","","",102,[[["self"],["itemmod"]],["bool"]]],[11,"hash","","",102,N],[11,"clone","","",102,[[["self"]],["itemmod"]]],[11,"from","","",172,[[["itemmod"]],["item"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",98,[[["self"],["itemforeignmod"]],["bool"]]],[11,"hash","","",98,N],[11,"clone","","",98,[[["self"]],["itemforeignmod"]]],[11,"from","","",172,[[["itemforeignmod"]],["item"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"eq","","",106,[[["self"],["itemtype"]],["bool"]]],[11,"ne","","",106,[[["self"],["itemtype"]],["bool"]]],[11,"hash","","",106,N],[11,"clone","","",106,[[["self"]],["itemtype"]]],[11,"from","","",172,[[["itemtype"]],["item"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"eq","","",104,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",104,[[["self"],["itemstruct"]],["bool"]]],[11,"hash","","",104,N],[11,"clone","","",104,[[["self"]],["itemstruct"]]],[11,"from","","",172,[[["itemstruct"]],["item"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"eq","","",95,[[["self"],["itemenum"]],["bool"]]],[11,"ne","","",95,[[["self"],["itemenum"]],["bool"]]],[11,"hash","","",95,N],[11,"clone","","",95,[[["self"]],["itemenum"]]],[11,"from","","",172,[[["itemenum"]],["item"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"eq","","",107,[[["self"],["itemunion"]],["bool"]]],[11,"ne","","",107,[[["self"],["itemunion"]],["bool"]]],[11,"hash","","",107,N],[11,"clone","","",107,[[["self"]],["itemunion"]]],[11,"from","","",172,[[["itemunion"]],["item"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"eq","","",105,[[["self"],["itemtrait"]],["bool"]]],[11,"ne","","",105,[[["self"],["itemtrait"]],["bool"]]],[11,"hash","","",105,N],[11,"clone","","",105,[[["self"]],["itemtrait"]]],[11,"from","","",172,[[["itemtrait"]],["item"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"eq","","",99,[[["self"],["itemimpl"]],["bool"]]],[11,"ne","","",99,[[["self"],["itemimpl"]],["bool"]]],[11,"hash","","",99,N],[11,"clone","","",99,[[["self"]],["itemimpl"]]],[11,"from","","",172,[[["itemimpl"]],["item"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"eq","","",100,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",100,[[["self"],["itemmacro"]],["bool"]]],[11,"hash","","",100,N],[11,"clone","","",100,[[["self"]],["itemmacro"]]],[11,"from","","",172,[[["itemmacro"]],["item"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["itemmacro2"]]],[11,"from","","",172,[[["itemmacro2"]],["item"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"clone","","",109,[[["self"]],["itemverbatim"]]],[11,"from","","",172,[[["itemverbatim"]],["item"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"eq","","",101,[[["self"],["self"]],["bool"]]],[11,"hash","","",101,[[["self"],["h"]]]],[11,"eq","","",109,[[["self"],["self"]],["bool"]]],[11,"hash","","",109,[[["self"],["h"]]]],[11,"from","","",172,[[["deriveinput"]],["item"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"eq","","",174,[[["self"],["usetree"]],["bool"]]],[11,"ne","","",174,[[["self"],["usetree"]],["bool"]]],[11,"hash","","",174,N],[11,"clone","","",174,[[["self"]],["usetree"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"eq","","",119,[[["self"],["usepath"]],["bool"]]],[11,"ne","","",119,[[["self"],["usepath"]],["bool"]]],[11,"hash","","",119,N],[11,"clone","","",119,[[["self"]],["usepath"]]],[11,"from","","",174,[[["usepath"]],["usetree"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"eq","","",118,[[["self"],["usename"]],["bool"]]],[11,"ne","","",118,[[["self"],["usename"]],["bool"]]],[11,"hash","","",118,N],[11,"clone","","",118,[[["self"]],["usename"]]],[11,"from","","",174,[[["usename"]],["usetree"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"eq","","",120,[[["self"],["userename"]],["bool"]]],[11,"ne","","",120,[[["self"],["userename"]],["bool"]]],[11,"hash","","",120,N],[11,"clone","","",120,[[["self"]],["userename"]]],[11,"from","","",174,[[["userename"]],["usetree"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"eq","","",116,[[["self"],["useglob"]],["bool"]]],[11,"ne","","",116,[[["self"],["useglob"]],["bool"]]],[11,"hash","","",116,N],[11,"clone","","",116,[[["self"]],["useglob"]]],[11,"from","","",174,[[["useglob"]],["usetree"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"eq","","",117,[[["self"],["usegroup"]],["bool"]]],[11,"ne","","",117,[[["self"],["usegroup"]],["bool"]]],[11,"hash","","",117,N],[11,"clone","","",117,[[["self"]],["usegroup"]]],[11,"from","","",174,[[["usegroup"]],["usetree"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"eq","","",170,[[["self"],["foreignitem"]],["bool"]]],[11,"ne","","",170,[[["self"],["foreignitem"]],["bool"]]],[11,"hash","","",170,N],[11,"clone","","",170,[[["self"]],["foreignitem"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"hash","","",85,N],[11,"clone","","",85,[[["self"]],["foreignitemfn"]]],[11,"from","","",170,[[["foreignitemfn"]],["foreignitem"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"ne","","",86,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"hash","","",86,N],[11,"clone","","",86,[[["self"]],["foreignitemstatic"]]],[11,"from","","",170,[[["foreignitemstatic"]],["foreignitem"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"eq","","",87,[[["self"],["foreignitemtype"]],["bool"]]],[11,"ne","","",87,[[["self"],["foreignitemtype"]],["bool"]]],[11,"hash","","",87,N],[11,"clone","","",87,[[["self"]],["foreignitemtype"]]],[11,"from","","",170,[[["foreignitemtype"]],["foreignitem"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["foreignitemverbatim"]]],[11,"from","","",170,[[["foreignitemverbatim"]],["foreignitem"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"eq","","",88,[[["self"],["self"]],["bool"]]],[11,"hash","","",88,[[["self"],["h"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"eq","","",173,[[["self"],["traititem"]],["bool"]]],[11,"ne","","",173,[[["self"],["traititem"]],["bool"]]],[11,"hash","","",173,N],[11,"clone","","",173,[[["self"]],["traititem"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"eq","","",111,[[["self"],["traititemconst"]],["bool"]]],[11,"ne","","",111,[[["self"],["traititemconst"]],["bool"]]],[11,"hash","","",111,N],[11,"clone","","",111,[[["self"]],["traititemconst"]]],[11,"from","","",173,[[["traititemconst"]],["traititem"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"eq","","",113,[[["self"],["traititemmethod"]],["bool"]]],[11,"ne","","",113,[[["self"],["traititemmethod"]],["bool"]]],[11,"hash","","",113,N],[11,"clone","","",113,[[["self"]],["traititemmethod"]]],[11,"from","","",173,[[["traititemmethod"]],["traititem"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"eq","","",114,[[["self"],["traititemtype"]],["bool"]]],[11,"ne","","",114,[[["self"],["traititemtype"]],["bool"]]],[11,"hash","","",114,N],[11,"clone","","",114,[[["self"]],["traititemtype"]]],[11,"from","","",173,[[["traititemtype"]],["traititem"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"eq","","",112,[[["self"],["traititemmacro"]],["bool"]]],[11,"ne","","",112,[[["self"],["traititemmacro"]],["bool"]]],[11,"hash","","",112,N],[11,"clone","","",112,[[["self"]],["traititemmacro"]]],[11,"from","","",173,[[["traititemmacro"]],["traititem"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"clone","","",115,[[["self"]],["traititemverbatim"]]],[11,"from","","",173,[[["traititemverbatim"]],["traititem"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"eq","","",115,[[["self"],["self"]],["bool"]]],[11,"hash","","",115,[[["self"],["h"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"eq","","",171,[[["self"],["implitem"]],["bool"]]],[11,"ne","","",171,[[["self"],["implitem"]],["bool"]]],[11,"hash","","",171,N],[11,"clone","","",171,[[["self"]],["implitem"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"eq","","",89,[[["self"],["implitemconst"]],["bool"]]],[11,"ne","","",89,[[["self"],["implitemconst"]],["bool"]]],[11,"hash","","",89,N],[11,"clone","","",89,[[["self"]],["implitemconst"]]],[11,"from","","",171,[[["implitemconst"]],["implitem"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"eq","","",91,[[["self"],["implitemmethod"]],["bool"]]],[11,"ne","","",91,[[["self"],["implitemmethod"]],["bool"]]],[11,"hash","","",91,N],[11,"clone","","",91,[[["self"]],["implitemmethod"]]],[11,"from","","",171,[[["implitemmethod"]],["implitem"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",92,[[["self"],["implitemtype"]],["bool"]]],[11,"hash","","",92,N],[11,"clone","","",92,[[["self"]],["implitemtype"]]],[11,"from","","",171,[[["implitemtype"]],["implitem"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["implitemmacro"]],["bool"]]],[11,"ne","","",90,[[["self"],["implitemmacro"]],["bool"]]],[11,"hash","","",90,N],[11,"clone","","",90,[[["self"]],["implitemmacro"]]],[11,"from","","",171,[[["implitemmacro"]],["implitem"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["implitemverbatim"]]],[11,"from","","",171,[[["implitemverbatim"]],["implitem"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"eq","","",93,[[["self"],["self"]],["bool"]]],[11,"hash","","",93,[[["self"],["h"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"eq","","",110,[[["self"],["methodsig"]],["bool"]]],[11,"ne","","",110,[[["self"],["methodsig"]],["bool"]]],[11,"hash","","",110,N],[11,"clone","","",110,[[["self"]],["methodsig"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"eq","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"ne","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"hash","","",84,N],[11,"clone","","",84,[[["self"]],["fndecl"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"eq","","",169,[[["self"],["fnarg"]],["bool"]]],[11,"ne","","",169,[[["self"],["fnarg"]],["bool"]]],[11,"hash","","",169,N],[11,"clone","","",169,[[["self"]],["fnarg"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"ne","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"hash","","",83,N],[11,"clone","","",83,[[["self"]],["argselfref"]]],[11,"from","","",169,[[["argselfref"]],["fnarg"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"eq","","",82,[[["self"],["argself"]],["bool"]]],[11,"ne","","",82,[[["self"],["argself"]],["bool"]]],[11,"hash","","",82,N],[11,"clone","","",82,[[["self"]],["argself"]]],[11,"from","","",169,[[["argself"]],["fnarg"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"eq","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"ne","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"hash","","",81,N],[11,"clone","","",81,[[["self"]],["argcaptured"]]],[11,"from","","",169,[[["argcaptured"]],["fnarg"]]],[11,"from","","",169,[[["pat"]],["fnarg"]]],[11,"from","","",169,[[["type"]],["fnarg"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult"]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"eq","","",121,[[["self"],["file"]],["bool"]]],[11,"ne","","",121,[[["self"],["file"]],["bool"]]],[11,"hash","","",121,N],[11,"clone","","",121,[[["self"]],["file"]]],[11,"parse","","",122,[[["cursor"]],["presult"]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["lifetime"]]],[11,"new","","",122,[[["str"],["span"]],["self"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"eq","","",122,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",122,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",122,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",122,[[["self"],["h"]]]],[11,"parse","","",177,[[["cursor"]],["presult"]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"parse","","",286,[[["cursor"]],["presult"]]],[11,"description","","",286,[[],["option",["str"]]]],[11,"parse","","",287,[[["cursor"]],["presult"]]],[11,"description","","",287,[[],["option",["str"]]]],[11,"parse","","",288,[[["cursor"]],["presult"]]],[11,"description","","",288,[[],["option",["str"]]]],[11,"parse","","",289,[[["cursor"]],["presult"]]],[11,"description","","",289,[[],["option",["str"]]]],[11,"parse","","",290,[[["cursor"]],["presult"]]],[11,"description","","",290,[[],["option",["str"]]]],[11,"parse","","",291,[[["cursor"]],["presult"]]],[11,"description","","",291,[[],["option",["str"]]]],[11,"parse","","",123,[[["cursor"]],["presult"]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",286,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",287,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",288,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",289,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",290,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",291,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",177,[[["literal"]],["self"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"eq","","",177,[[["self"],["lit"]],["bool"]]],[11,"ne","","",177,[[["self"],["lit"]],["bool"]]],[11,"hash","","",177,N],[11,"clone","","",177,[[["self"]],["lit"]]],[11,"fmt","","",286,[[["self"],["formatter"]],["result"]]],[11,"clone","","",286,[[["self"]],["litstr"]]],[11,"from","","",177,[[["litstr"]],["lit"]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result"]]],[11,"clone","","",287,[[["self"]],["litbytestr"]]],[11,"from","","",177,[[["litbytestr"]],["lit"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"clone","","",288,[[["self"]],["litbyte"]]],[11,"from","","",177,[[["litbyte"]],["lit"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"clone","","",289,[[["self"]],["litchar"]]],[11,"from","","",177,[[["litchar"]],["lit"]]],[11,"fmt","","",290,[[["self"],["formatter"]],["result"]]],[11,"clone","","",290,[[["self"]],["litint"]]],[11,"from","","",177,[[["litint"]],["lit"]]],[11,"fmt","","",291,[[["self"],["formatter"]],["result"]]],[11,"clone","","",291,[[["self"]],["litfloat"]]],[11,"from","","",177,[[["litfloat"]],["lit"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"clone","","",123,[[["self"]],["litbool"]]],[11,"from","","",177,[[["litbool"]],["lit"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"clone","","",124,[[["self"]],["litverbatim"]]],[11,"from","","",177,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"new","","",286,[[["str"],["span"]],["self"]]],[11,"value","","",286,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",286,[[["self"]],["result",["parseerror"]]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"set_span","","",286,[[["self"],["span"]]]],[11,"new","","",287,N],[11,"value","","",287,[[["self"]],["vec",["u8"]]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"set_span","","",287,[[["self"],["span"]]]],[11,"new","","",288,[[["u8"],["span"]],["self"]]],[11,"value","","",288,[[["self"]],["u8"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"set_span","","",288,[[["self"],["span"]]]],[11,"new","","",289,[[["char"],["span"]],["self"]]],[11,"value","","",289,[[["self"]],["char"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"set_span","","",289,[[["self"],["span"]]]],[11,"new","","",290,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",290,[[["self"]],["u64"]]],[11,"suffix","","",290,[[["self"]],["intsuffix"]]],[11,"span","","",290,[[["self"]],["span"]]],[11,"set_span","","",290,[[["self"],["span"]]]],[11,"new","","",291,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",291,[[["self"]],["f64"]]],[11,"suffix","","",291,[[["self"]],["floatsuffix"]]],[11,"span","","",291,[[["self"]],["span"]]],[11,"set_span","","",291,[[["self"],["span"]]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"set_span","","",124,[[["self"],["span"]]]],[11,"eq","","",286,[[["self"],["self"]],["bool"]]],[11,"hash","","",286,[[["self"],["h"]]]],[11,"eq","","",287,[[["self"],["self"]],["bool"]]],[11,"hash","","",287,[[["self"],["h"]]]],[11,"eq","","",288,[[["self"],["self"]],["bool"]]],[11,"hash","","",288,[[["self"],["h"]]]],[11,"eq","","",289,[[["self"],["self"]],["bool"]]],[11,"hash","","",289,[[["self"],["h"]]]],[11,"eq","","",290,[[["self"],["self"]],["bool"]]],[11,"hash","","",290,[[["self"],["h"]]]],[11,"eq","","",291,[[["self"],["self"]],["bool"]]],[11,"hash","","",291,[[["self"],["h"]]]],[11,"eq","","",123,[[["self"],["self"]],["bool"]]],[11,"hash","","",123,[[["self"],["h"]]]],[11,"eq","","",124,[[["self"],["self"]],["bool"]]],[11,"hash","","",124,[[["self"],["h"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"eq","","",178,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",178,[[["self"],["strstyle"]],["bool"]]],[11,"hash","","",178,N],[11,"clone","","",178,[[["self"]],["strstyle"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"eq","","",176,[[["self"],["intsuffix"]],["bool"]]],[11,"hash","","",176,N],[11,"clone","","",176,[[["self"]],["intsuffix"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"eq","","",175,[[["self"],["floatsuffix"]],["bool"]]],[11,"hash","","",175,N],[11,"clone","","",175,[[["self"]],["floatsuffix"]]],[11,"parse","","",125,[[["cursor"]],["presult"]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"clone","","",125,[[["self"]],["macro"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"eq","","",179,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",179,[[["self"],["macrodelimiter"]],["bool"]]],[11,"hash","","",179,N],[11,"clone","","",179,[[["self"]],["macrodelimiter"]]],[11,"eq","","",125,[[["self"],["self"]],["bool"]]],[11,"hash","","",125,[[["self"],["h"]]]],[11,"parse","","",129,[[["cursor"]],["presult"]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"eq","","",129,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",129,[[["self"],["deriveinput"]],["bool"]]],[11,"hash","","",129,N],[11,"clone","","",129,[[["self"]],["deriveinput"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"eq","","",180,[[["self"],["data"]],["bool"]]],[11,"ne","","",180,[[["self"],["data"]],["bool"]]],[11,"hash","","",180,N],[11,"clone","","",180,[[["self"]],["data"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"eq","","",127,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",127,[[["self"],["datastruct"]],["bool"]]],[11,"hash","","",127,N],[11,"clone","","",127,[[["self"]],["datastruct"]]],[11,"from","","",180,[[["datastruct"]],["data"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"eq","","",126,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",126,[[["self"],["dataenum"]],["bool"]]],[11,"hash","","",126,N],[11,"clone","","",126,[[["self"]],["dataenum"]]],[11,"from","","",180,[[["dataenum"]],["data"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"eq","","",128,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",128,[[["self"],["dataunion"]],["bool"]]],[11,"hash","","",128,N],[11,"clone","","",128,[[["self"]],["dataunion"]]],[11,"from","","",180,[[["dataunion"]],["data"]]],[11,"parse_binop","","",181,[[["cursor"]],["presult"]]],[11,"parse_assign_op","","",181,[[["cursor"]],["presult"]]],[11,"parse","","",182,[[["cursor"]],["presult"]]],[11,"description","","",182,[[],["option",["str"]]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"eq","","",181,[[["self"],["binop"]],["bool"]]],[11,"ne","","",181,[[["self"],["binop"]],["bool"]]],[11,"hash","","",181,N],[11,"clone","","",181,[[["self"]],["binop"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"eq","","",182,[[["self"],["unop"]],["bool"]]],[11,"ne","","",182,[[["self"],["unop"]],["bool"]]],[11,"hash","","",182,N],[11,"clone","","",182,[[["self"]],["unop"]]],[11,"parse","","",185,[[["cursor"]],["presult"]]],[11,"description","","",185,[[],["option",["str"]]]],[11,"without_plus","","",185,[[["cursor"]],["presult"]]],[11,"parse","","",143,[[["cursor"]],["presult"]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"parse","","",132,[[["cursor"]],["presult"]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"parse","","",141,[[["cursor"]],["presult"]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"parse","","",142,[[["cursor"]],["presult"]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"parse","","",133,[[["cursor"]],["presult"]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"parse","","",138,[[["cursor"]],["presult"]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"parse","","",136,[[["cursor"]],["presult"]]],[11,"description","","",136,[[],["option",["str"]]]],[11,"parse","","",145,[[["cursor"]],["presult"]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"parse","","",137,[[["cursor"]],["presult"]]],[11,"description","","",137,[[],["option",["str"]]]],[11,"parse","","",140,[[["cursor"]],["presult"]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"without_plus","","",184,[[["cursor"]],["presult"]]],[11,"parse","","",184,[[["cursor"]],["presult"]]],[11,"description","","",184,[[],["option",["str"]]]],[11,"parse","","",144,[[["cursor"]],["presult"]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"without_plus","","",144,[[["cursor"]],["presult"]]],[11,"parse","","",135,[[["cursor"]],["presult"]]],[11,"description","","",135,[[],["option",["str"]]]],[11,"parse","","",134,[[["cursor"]],["presult"]]],[11,"description","","",134,[[],["option",["str"]]]],[11,"parse","","",139,[[["cursor"]],["presult"]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"parse","","",131,[[["cursor"]],["presult"]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"parse","","",183,[[["cursor"]],["presult"]]],[11,"description","","",183,[[],["option",["str"]]]],[11,"parse","","",130,[[["cursor"]],["presult"]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"eq","","",185,[[["self"],["type"]],["bool"]]],[11,"ne","","",185,[[["self"],["type"]],["bool"]]],[11,"hash","","",185,N],[11,"clone","","",185,[[["self"]],["type"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"eq","","",143,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",143,[[["self"],["typeslice"]],["bool"]]],[11,"hash","","",143,N],[11,"clone","","",143,[[["self"]],["typeslice"]]],[11,"from","","",185,[[["typeslice"]],["type"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"eq","","",132,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",132,[[["self"],["typearray"]],["bool"]]],[11,"hash","","",132,N],[11,"clone","","",132,[[["self"]],["typearray"]]],[11,"from","","",185,[[["typearray"]],["type"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"eq","","",141,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",141,[[["self"],["typeptr"]],["bool"]]],[11,"hash","","",141,N],[11,"clone","","",141,[[["self"]],["typeptr"]]],[11,"from","","",185,[[["typeptr"]],["type"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"eq","","",142,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",142,[[["self"],["typereference"]],["bool"]]],[11,"hash","","",142,N],[11,"clone","","",142,[[["self"]],["typereference"]]],[11,"from","","",185,[[["typereference"]],["type"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"eq","","",133,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",133,[[["self"],["typebarefn"]],["bool"]]],[11,"hash","","",133,N],[11,"clone","","",133,[[["self"]],["typebarefn"]]],[11,"from","","",185,[[["typebarefn"]],["type"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"eq","","",138,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",138,[[["self"],["typenever"]],["bool"]]],[11,"hash","","",138,N],[11,"clone","","",138,[[["self"]],["typenever"]]],[11,"from","","",185,[[["typenever"]],["type"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"eq","","",145,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",145,[[["self"],["typetuple"]],["bool"]]],[11,"hash","","",145,N],[11,"clone","","",145,[[["self"]],["typetuple"]]],[11,"from","","",185,[[["typetuple"]],["type"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"eq","","",140,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",140,[[["self"],["typepath"]],["bool"]]],[11,"hash","","",140,N],[11,"clone","","",140,[[["self"]],["typepath"]]],[11,"from","","",185,[[["typepath"]],["type"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"eq","","",144,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",144,[[["self"],["typetraitobject"]],["bool"]]],[11,"hash","","",144,N],[11,"clone","","",144,[[["self"]],["typetraitobject"]]],[11,"from","","",185,[[["typetraitobject"]],["type"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"eq","","",135,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",135,[[["self"],["typeimpltrait"]],["bool"]]],[11,"hash","","",135,N],[11,"clone","","",135,[[["self"]],["typeimpltrait"]]],[11,"from","","",185,[[["typeimpltrait"]],["type"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"eq","","",139,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",139,[[["self"],["typeparen"]],["bool"]]],[11,"hash","","",139,N],[11,"clone","","",139,[[["self"]],["typeparen"]]],[11,"from","","",185,[[["typeparen"]],["type"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"eq","","",134,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",134,[[["self"],["typegroup"]],["bool"]]],[11,"hash","","",134,N],[11,"clone","","",134,[[["self"]],["typegroup"]]],[11,"from","","",185,[[["typegroup"]],["type"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"eq","","",136,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",136,[[["self"],["typeinfer"]],["bool"]]],[11,"hash","","",136,N],[11,"clone","","",136,[[["self"]],["typeinfer"]]],[11,"from","","",185,[[["typeinfer"]],["type"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"eq","","",137,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",137,[[["self"],["typemacro"]],["bool"]]],[11,"hash","","",137,N],[11,"clone","","",137,[[["self"]],["typemacro"]]],[11,"from","","",185,[[["typemacro"]],["type"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"clone","","",146,[[["self"]],["typeverbatim"]]],[11,"from","","",185,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"eq","","",146,[[["self"],["self"]],["bool"]]],[11,"hash","","",146,[[["self"],["h"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"eq","","",130,[[["self"],["abi"]],["bool"]]],[11,"ne","","",130,[[["self"],["abi"]],["bool"]]],[11,"hash","","",130,N],[11,"clone","","",130,[[["self"]],["abi"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"eq","","",131,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",131,[[["self"],["barefnarg"]],["bool"]]],[11,"hash","","",131,N],[11,"clone","","",131,[[["self"]],["barefnarg"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"eq","","",183,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",183,[[["self"],["barefnargname"]],["bool"]]],[11,"hash","","",183,N],[11,"clone","","",183,[[["self"]],["barefnargname"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"eq","","",184,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",184,[[["self"],["returntype"]],["bool"]]],[11,"hash","","",184,N],[11,"clone","","",184,[[["self"]],["returntype"]]],[11,"parse","","",151,[[["cursor"]],["presult"]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"parse","","",186,[[["cursor"]],["presult"]]],[11,"description","","",186,[[],["option",["str"]]]],[11,"parse","","",148,[[["cursor"]],["presult"]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"parse","","",150,[[["cursor"]],["presult"]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"parse","","",152,[[["cursor"]],["presult"]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"parse","","",149,[[["cursor"]],["presult"]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"parse_mod_style","","",151,[[["cursor"]],["presult"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",187,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",186,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"eq","","",151,[[["self"],["path"]],["bool"]]],[11,"ne","","",151,[[["self"],["path"]],["bool"]]],[11,"hash","","",151,N],[11,"clone","","",151,[[["self"]],["path"]]],[11,"global","","",151,[[["self"]],["bool"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"eq","","",147,[[["self"],["pathtokens"]],["bool"]]],[11,"ne","","",147,[[["self"],["pathtokens"]],["bool"]]],[11,"hash","","",147,N],[11,"clone","","",147,[[["self"]],["pathtokens"]]],[11,"from","","",151,[[["t"]],["self"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"eq","","",152,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",152,[[["self"],["pathsegment"]],["bool"]]],[11,"hash","","",152,N],[11,"clone","","",152,[[["self"]],["pathsegment"]]],[11,"from","","",152,[[["t"]],["self"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"eq","","",187,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",187,[[["self"],["patharguments"]],["bool"]]],[11,"hash","","",187,N],[11,"clone","","",187,[[["self"]],["patharguments"]]],[11,"default","","",187,[[],["self"]]],[11,"is_empty","","",187,[[["self"]],["bool"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"eq","","",186,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",186,[[["self"],["genericargument"]],["bool"]]],[11,"hash","","",186,N],[11,"clone","","",186,[[["self"]],["genericargument"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"eq","","",148,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",148,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"hash","","",148,N],[11,"clone","","",148,[[["self"]],["anglebracketedgenericarguments"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"eq","","",149,[[["self"],["binding"]],["bool"]]],[11,"ne","","",149,[[["self"],["binding"]],["bool"]]],[11,"hash","","",149,N],[11,"clone","","",149,[[["self"]],["binding"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"eq","","",150,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",150,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"hash","","",150,N],[11,"clone","","",150,[[["self"]],["parenthesizedgenericarguments"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"eq","","",153,[[["self"],["qself"]],["bool"]]],[11,"ne","","",153,[[["self"],["qself"]],["bool"]]],[11,"hash","","",153,N],[11,"clone","","",153,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",292,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",292,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",292,[[["self"]],["cursor"]]],[11,"clone","","",293,[[["self"]],["cursor"]]],[11,"eq","","",293,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",293,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",293,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",293,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",293,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",293,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",293,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",294,N],[13,"End","","",294,N],[11,"to_tokens","","",295,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",294,[[["self"],["tokenstream"]]]],[11,"eq","","",295,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",295,[[["self"],["punctuated"]],["bool"]]],[11,"hash","","",295,N],[11,"clone","","",295,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",295,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",295,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",295,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",295,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",295,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",295,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",295,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",295,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",295,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",295,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",295,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",295,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",295,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",295,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",295,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",295,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",295,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",295,[[["self"],["usize"],["t"]]]],[11,"fmt","","",295,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",295,[[["i"]],["self"]]],[11,"extend","","",295,[[["self"],["i"]]]],[11,"from_iter","","",295,[[["i"]],["self"]]],[11,"extend","","",295,[[["self"],["i"]]]],[11,"into_iter","","",295,N],[11,"default","","",295,[[],["self"]]],[11,"next","","",296,[[["self"]],["option"]]],[11,"len","","",296,[[["self"]],["usize"]]],[11,"next","","",297,[[["self"]],["option"]]],[11,"len","","",297,[[["self"]],["usize"]]],[11,"next","","",298,[[["self"]],["option"]]],[11,"len","","",298,[[["self"]],["usize"]]],[11,"next","","",299,[[["self"]],["option"]]],[11,"len","","",299,[[["self"]],["usize"]]],[11,"next","","",300,[[["self"]],["option"]]],[11,"len","","",300,[[["self"]],["usize"]]],[11,"next","","",301,[[["self"]],["option"]]],[11,"len","","",301,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",294,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",294,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",294,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",294,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",294,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",294,N],[11,"index","","",295,N],[11,"index_mut","","",295,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",295,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",295,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",295,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",295,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",302,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",282,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",303,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",303,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",304,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",304,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",304,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",304,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",282,[[["cursor"]],["presult"]]],[11,"description","","",282,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",305,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_arg_captured","","",N,[[["v"],["argcaptured"]]]],[5,"visit_arg_self","","",N,[[["v"],["argself"]]]],[5,"visit_arg_self_ref","","",N,[[["v"],["argselfref"]]]],[5,"visit_arm","","",N,[[["v"],["arm"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_block","","",N,[[["v"],["block"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_array","","",N,[[["v"],["exprarray"]]]],[5,"visit_expr_assign","","",N,[[["v"],["exprassign"]]]],[5,"visit_expr_assign_op","","",N,[[["v"],["exprassignop"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_block","","",N,[[["v"],["exprblock"]]]],[5,"visit_expr_box","","",N,[[["v"],["exprbox"]]]],[5,"visit_expr_break","","",N,[[["v"],["exprbreak"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_catch","","",N,[[["v"],["exprcatch"]]]],[5,"visit_expr_closure","","",N,[[["v"],["exprclosure"]]]],[5,"visit_expr_continue","","",N,[[["v"],["exprcontinue"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_for_loop","","",N,[[["v"],["exprforloop"]]]],[5,"visit_expr_group","","",N,[[["v"],["exprgroup"]]]],[5,"visit_expr_if","","",N,[[["v"],["exprif"]]]],[5,"visit_expr_if_let","","",N,[[["v"],["expriflet"]]]],[5,"visit_expr_in_place","","",N,[[["v"],["exprinplace"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_loop","","",N,[[["v"],["exprloop"]]]],[5,"visit_expr_macro","","",N,[[["v"],["exprmacro"]]]],[5,"visit_expr_match","","",N,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call","","",N,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_range","","",N,[[["v"],["exprrange"]]]],[5,"visit_expr_reference","","",N,[[["v"],["exprreference"]]]],[5,"visit_expr_repeat","","",N,[[["v"],["exprrepeat"]]]],[5,"visit_expr_return","","",N,[[["v"],["exprreturn"]]]],[5,"visit_expr_struct","","",N,[[["v"],["exprstruct"]]]],[5,"visit_expr_try","","",N,[[["v"],["exprtry"]]]],[5,"visit_expr_tuple","","",N,[[["v"],["exprtuple"]]]],[5,"visit_expr_type","","",N,[[["v"],["exprtype"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe","","",N,[[["v"],["exprunsafe"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_expr_while","","",N,[[["v"],["exprwhile"]]]],[5,"visit_expr_while_let","","",N,[[["v"],["exprwhilelet"]]]],[5,"visit_expr_yield","","",N,[[["v"],["expryield"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_field_pat","","",N,[[["v"],["fieldpat"]]]],[5,"visit_field_value","","",N,[[["v"],["fieldvalue"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_file","","",N,[[["v"],["file"]]]],[5,"visit_fn_arg","","",N,[[["v"],["fnarg"]]]],[5,"visit_fn_decl","","",N,[[["v"],["fndecl"]]]],[5,"visit_foreign_item","","",N,[[["v"],["foreignitem"]]]],[5,"visit_foreign_item_fn","","",N,[[["v"],["foreignitemfn"]]]],[5,"visit_foreign_item_static","","",N,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type","","",N,[[["v"],["foreignitemtype"]]]],[5,"visit_foreign_item_verbatim","","",N,[[["v"],["foreignitemverbatim"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_method_argument","","",N,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_impl_item","","",N,[[["v"],["implitem"]]]],[5,"visit_impl_item_const","","",N,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_macro","","",N,[[["v"],["implitemmacro"]]]],[5,"visit_impl_item_method","","",N,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type","","",N,[[["v"],["implitemtype"]]]],[5,"visit_impl_item_verbatim","","",N,[[["v"],["implitemverbatim"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_item","","",N,[[["v"],["item"]]]],[5,"visit_item_const","","",N,[[["v"],["itemconst"]]]],[5,"visit_item_enum","","",N,[[["v"],["itemenum"]]]],[5,"visit_item_extern_crate","","",N,[[["v"],["itemexterncrate"]]]],[5,"visit_item_fn","","",N,[[["v"],["itemfn"]]]],[5,"visit_item_foreign_mod","","",N,[[["v"],["itemforeignmod"]]]],[5,"visit_item_impl","","",N,[[["v"],["itemimpl"]]]],[5,"visit_item_macro","","",N,[[["v"],["itemmacro"]]]],[5,"visit_item_macro2","","",N,[[["v"],["itemmacro2"]]]],[5,"visit_item_mod","","",N,[[["v"],["itemmod"]]]],[5,"visit_item_static","","",N,[[["v"],["itemstatic"]]]],[5,"visit_item_struct","","",N,[[["v"],["itemstruct"]]]],[5,"visit_item_trait","","",N,[[["v"],["itemtrait"]]]],[5,"visit_item_type","","",N,[[["v"],["itemtype"]]]],[5,"visit_item_union","","",N,[[["v"],["itemunion"]]]],[5,"visit_item_use","","",N,[[["v"],["itemuse"]]]],[5,"visit_item_verbatim","","",N,[[["v"],["itemverbatim"]]]],[5,"visit_label","","",N,[[["v"],["label"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_local","","",N,[[["v"],["local"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_method_sig","","",N,[[["v"],["methodsig"]]]],[5,"visit_method_turbofish","","",N,[[["v"],["methodturbofish"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_pat","","",N,[[["v"],["pat"]]]],[5,"visit_pat_box","","",N,[[["v"],["patbox"]]]],[5,"visit_pat_ident","","",N,[[["v"],["patident"]]]],[5,"visit_pat_lit","","",N,[[["v"],["patlit"]]]],[5,"visit_pat_macro","","",N,[[["v"],["patmacro"]]]],[5,"visit_pat_path","","",N,[[["v"],["patpath"]]]],[5,"visit_pat_range","","",N,[[["v"],["patrange"]]]],[5,"visit_pat_ref","","",N,[[["v"],["patref"]]]],[5,"visit_pat_slice","","",N,[[["v"],["patslice"]]]],[5,"visit_pat_struct","","",N,[[["v"],["patstruct"]]]],[5,"visit_pat_tuple","","",N,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct","","",N,[[["v"],["pattuplestruct"]]]],[5,"visit_pat_verbatim","","",N,[[["v"],["patverbatim"]]]],[5,"visit_pat_wild","","",N,[[["v"],["patwild"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_range_limits","","",N,[[["v"],["rangelimits"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_stmt","","",N,[[["v"],["stmt"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_trait_item","","",N,[[["v"],["traititem"]]]],[5,"visit_trait_item_const","","",N,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro","","",N,[[["v"],["traititemmacro"]]]],[5,"visit_trait_item_method","","",N,[[["v"],["traititemmethod"]]]],[5,"visit_trait_item_type","","",N,[[["v"],["traititemtype"]]]],[5,"visit_trait_item_verbatim","","",N,[[["v"],["traititemverbatim"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_use_glob","","",N,[[["v"],["useglob"]]]],[5,"visit_use_group","","",N,[[["v"],["usegroup"]]]],[5,"visit_use_name","","",N,[[["v"],["usename"]]]],[5,"visit_use_path","","",N,[[["v"],["usepath"]]]],[5,"visit_use_rename","","",N,[[["v"],["userename"]]]],[5,"visit_use_tree","","",N,[[["v"],["usetree"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",306,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",306,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured","","",306,[[["self"],["argcaptured"]]]],[11,"visit_arg_self","","",306,[[["self"],["argself"]]]],[11,"visit_arg_self_ref","","",306,[[["self"],["argselfref"]]]],[11,"visit_arm","","",306,[[["self"],["arm"]]]],[11,"visit_attr_style","","",306,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",306,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",306,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",306,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",306,[[["self"],["binop"]]]],[11,"visit_binding","","",306,[[["self"],["binding"]]]],[11,"visit_block","","",306,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",306,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",306,[[["self"],["constparam"]]]],[11,"visit_data","","",306,[[["self"],["data"]]]],[11,"visit_data_enum","","",306,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",306,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",306,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",306,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",306,[[["self"],["expr"]]]],[11,"visit_expr_array","","",306,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",306,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",306,[[["self"],["exprassignop"]]]],[11,"visit_expr_binary","","",306,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",306,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",306,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",306,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",306,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",306,[[["self"],["exprcast"]]]],[11,"visit_expr_catch","","",306,[[["self"],["exprcatch"]]]],[11,"visit_expr_closure","","",306,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",306,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",306,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",306,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",306,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",306,[[["self"],["exprif"]]]],[11,"visit_expr_if_let","","",306,[[["self"],["expriflet"]]]],[11,"visit_expr_in_place","","",306,[[["self"],["exprinplace"]]]],[11,"visit_expr_index","","",306,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",306,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",306,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",306,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",306,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",306,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",306,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",306,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",306,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",306,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",306,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",306,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",306,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",306,[[["self"],["exprtry"]]]],[11,"visit_expr_tuple","","",306,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",306,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",306,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",306,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim","","",306,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while","","",306,[[["self"],["exprwhile"]]]],[11,"visit_expr_while_let","","",306,[[["self"],["exprwhilelet"]]]],[11,"visit_expr_yield","","",306,[[["self"],["expryield"]]]],[11,"visit_field","","",306,[[["self"],["field"]]]],[11,"visit_field_pat","","",306,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",306,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",306,[[["self"],["fields"]]]],[11,"visit_fields_named","","",306,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",306,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",306,[[["self"],["file"]]]],[11,"visit_fn_arg","","",306,[[["self"],["fnarg"]]]],[11,"visit_fn_decl","","",306,[[["self"],["fndecl"]]]],[11,"visit_foreign_item","","",306,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",306,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_static","","",306,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",306,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim","","",306,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument","","",306,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",306,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",306,[[["self"],["genericparam"]]]],[11,"visit_generics","","",306,[[["self"],["generics"]]]],[11,"visit_ident","","",306,[[["self"],["ident"]]]],[11,"visit_impl_item","","",306,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",306,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",306,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",306,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",306,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim","","",306,[[["self"],["implitemverbatim"]]]],[11,"visit_index","","",306,[[["self"],["index"]]]],[11,"visit_item","","",306,[[["self"],["item"]]]],[11,"visit_item_const","","",306,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",306,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate","","",306,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",306,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",306,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",306,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",306,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",306,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",306,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",306,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",306,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",306,[[["self"],["itemtrait"]]]],[11,"visit_item_type","","",306,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",306,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",306,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim","","",306,[[["self"],["itemverbatim"]]]],[11,"visit_label","","",306,[[["self"],["label"]]]],[11,"visit_lifetime","","",306,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",306,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",306,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",306,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",306,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",306,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",306,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",306,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",306,[[["self"],["litint"]]]],[11,"visit_lit_str","","",306,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",306,[[["self"],["litverbatim"]]]],[11,"visit_local","","",306,[[["self"],["local"]]]],[11,"visit_macro","","",306,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",306,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",306,[[["self"],["member"]]]],[11,"visit_meta","","",306,[[["self"],["meta"]]]],[11,"visit_meta_list","","",306,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",306,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig","","",306,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish","","",306,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",306,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",306,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",306,[[["self"],["pat"]]]],[11,"visit_pat_box","","",306,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",306,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",306,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",306,[[["self"],["patmacro"]]]],[11,"visit_pat_path","","",306,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",306,[[["self"],["patrange"]]]],[11,"visit_pat_ref","","",306,[[["self"],["patref"]]]],[11,"visit_pat_slice","","",306,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",306,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",306,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",306,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim","","",306,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild","","",306,[[["self"],["patwild"]]]],[11,"visit_path","","",306,[[["self"],["path"]]]],[11,"visit_path_arguments","","",306,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",306,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",306,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",306,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",306,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",306,[[["self"],["qself"]]]],[11,"visit_range_limits","","",306,[[["self"],["rangelimits"]]]],[11,"visit_return_type","","",306,[[["self"],["returntype"]]]],[11,"visit_span","","",306,[[["self"],["span"]]]],[11,"visit_stmt","","",306,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",306,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",306,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",306,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",306,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",306,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",306,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",306,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim","","",306,[[["self"],["traititemverbatim"]]]],[11,"visit_type","","",306,[[["self"],["type"]]]],[11,"visit_type_array","","",306,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",306,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",306,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",306,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",306,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",306,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",306,[[["self"],["typenever"]]]],[11,"visit_type_param","","",306,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",306,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",306,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",306,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",306,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",306,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",306,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",306,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",306,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",306,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",306,[[["self"],["unop"]]]],[11,"visit_use_glob","","",306,[[["self"],["useglob"]]]],[11,"visit_use_group","","",306,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",306,[[["self"],["usename"]]]],[11,"visit_use_path","","",306,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",306,[[["self"],["userename"]]]],[11,"visit_use_tree","","",306,[[["self"],["usetree"]]]],[11,"visit_variant","","",306,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",306,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",306,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",306,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",306,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",306,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",306,[[["self"],["wherepredicate"]]]],[11,"fmt","syn::synom","",307,[[["self"],["formatter"]],["result"]]],[11,"description","","",307,[[["self"]],["str"]]],[11,"fmt","","",307,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",282,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",282,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",282,N],[11,"span","","",282,[[["self"]],["span"]]],[11,"into","","",282,[[["self"]],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,N],[11,"from","","",282,[[["t"]],["t"]]],[11,"to_string","","",282,[[["self"]],["string"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"try_into","","",282,[[["self"]],["result"]]],[11,"get_type_id","","",282,[[["self"]],["typeid"]]],[11,"not_found","","",282,[[["str"],["str"]],["e"]]],[11,"eq","","",282,[[["self"],["ident"]],["bool"]]],[11,"eq","","",282,[[["self"],["t"]],["bool"]]],[11,"hash","","",282,N],[11,"fmt","","",282,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",282,[[["self"]],["ident"]]],[11,"partial_cmp","","",282,[[["self"],["ident"]],["option",["ordering"]]]],[11,"fmt","","",282,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",282,[[["self"],["ident"]],["ordering"]]],[11,"to_tokens","","",282,N],[11,"span","syn::token","",188,[[["self"]],["span"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"not_found","","",188,[[["str"],["str"]],["e"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"not_found","","",191,[[["str"],["str"]],["e"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"not_found","","",192,[[["str"],["str"]],["e"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"not_found","","",193,[[["str"],["str"]],["e"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"not_found","","",194,[[["str"],["str"]],["e"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"not_found","","",195,[[["str"],["str"]],["e"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"not_found","","",196,[[["str"],["str"]],["e"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"span","","",203,[[["self"]],["span"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,N],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"not_found","","",231,[[["str"],["str"]],["e"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,N],[11,"from","","",232,[[["t"]],["t"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"not_found","","",232,[[["str"],["str"]],["e"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"not_found","","",233,[[["str"],["str"]],["e"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,N],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"not_found","","",234,[[["str"],["str"]],["e"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,N],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"not_found","","",235,[[["str"],["str"]],["e"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"not_found","","",236,[[["str"],["str"]],["e"]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,N],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"not_found","","",237,[[["str"],["str"]],["e"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,N],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"not_found","","",238,[[["str"],["str"]],["e"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"not_found","","",239,[[["str"],["str"]],["e"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,N],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"not_found","","",240,[[["str"],["str"]],["e"]]],[11,"span","","",241,[[["self"]],["span"]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"not_found","","",241,[[["str"],["str"]],["e"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,N],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"not_found","","",242,[[["str"],["str"]],["e"]]],[11,"span","","",243,[[["self"]],["span"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,N],[11,"from","","",243,[[["t"]],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"not_found","","",243,[[["str"],["str"]],["e"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,N],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"not_found","","",244,[[["str"],["str"]],["e"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"not_found","","",245,[[["str"],["str"]],["e"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,N],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"not_found","","",246,[[["str"],["str"]],["e"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,N],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"not_found","","",247,[[["str"],["str"]],["e"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"not_found","","",248,[[["str"],["str"]],["e"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,N],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"not_found","","",249,[[["str"],["str"]],["e"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,N],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"not_found","","",250,[[["str"],["str"]],["e"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"not_found","","",251,[[["str"],["str"]],["e"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"not_found","","",252,[[["str"],["str"]],["e"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,N],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"not_found","","",253,[[["str"],["str"]],["e"]]],[11,"span","","",254,[[["self"]],["span"]]],[11,"into","","",254,[[["self"]],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,N],[11,"from","","",254,[[["t"]],["t"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"try_into","","",254,[[["self"]],["result"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"not_found","","",254,[[["str"],["str"]],["e"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,N],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"not_found","","",255,[[["str"],["str"]],["e"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"not_found","","",256,[[["str"],["str"]],["e"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,N],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"not_found","","",257,[[["str"],["str"]],["e"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,N],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"not_found","","",258,[[["str"],["str"]],["e"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,N],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"not_found","","",259,[[["str"],["str"]],["e"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,N],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"not_found","","",260,[[["str"],["str"]],["e"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,N],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"not_found","","",261,[[["str"],["str"]],["e"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,N],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"not_found","","",262,[[["str"],["str"]],["e"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,N],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"not_found","","",263,[[["str"],["str"]],["e"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"into","","",264,[[["self"]],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,N],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"try_into","","",264,[[["self"]],["result"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"not_found","","",264,[[["str"],["str"]],["e"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,N],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"not_found","","",265,[[["str"],["str"]],["e"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"into","","",266,[[["self"]],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,N],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"try_into","","",266,[[["self"]],["result"]]],[11,"get_type_id","","",266,[[["self"]],["typeid"]]],[11,"not_found","","",266,[[["str"],["str"]],["e"]]],[11,"span","","",267,[[["self"]],["span"]]],[11,"into","","",267,[[["self"]],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,N],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"try_into","","",267,[[["self"]],["result"]]],[11,"get_type_id","","",267,[[["self"]],["typeid"]]],[11,"not_found","","",267,[[["str"],["str"]],["e"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"into","","",268,[[["self"]],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,N],[11,"from","","",268,[[["t"]],["t"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"try_into","","",268,[[["self"]],["result"]]],[11,"get_type_id","","",268,[[["self"]],["typeid"]]],[11,"not_found","","",268,[[["str"],["str"]],["e"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"into","","",269,[[["self"]],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,N],[11,"from","","",269,[[["t"]],["t"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"try_into","","",269,[[["self"]],["result"]]],[11,"get_type_id","","",269,[[["self"]],["typeid"]]],[11,"not_found","","",269,[[["str"],["str"]],["e"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"into","","",270,[[["self"]],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,N],[11,"from","","",270,[[["t"]],["t"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"try_into","","",270,[[["self"]],["result"]]],[11,"get_type_id","","",270,[[["self"]],["typeid"]]],[11,"not_found","","",270,[[["str"],["str"]],["e"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"into","","",271,[[["self"]],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,N],[11,"from","","",271,[[["t"]],["t"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"try_into","","",271,[[["self"]],["result"]]],[11,"get_type_id","","",271,[[["self"]],["typeid"]]],[11,"not_found","","",271,[[["str"],["str"]],["e"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"into","","",272,[[["self"]],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,N],[11,"from","","",272,[[["t"]],["t"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"try_into","","",272,[[["self"]],["result"]]],[11,"get_type_id","","",272,[[["self"]],["typeid"]]],[11,"not_found","","",272,[[["str"],["str"]],["e"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"into","","",273,[[["self"]],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,N],[11,"from","","",273,[[["t"]],["t"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"try_into","","",273,[[["self"]],["result"]]],[11,"get_type_id","","",273,[[["self"]],["typeid"]]],[11,"not_found","","",273,[[["str"],["str"]],["e"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"into","","",274,[[["self"]],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,N],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"try_into","","",274,[[["self"]],["result"]]],[11,"get_type_id","","",274,[[["self"]],["typeid"]]],[11,"not_found","","",274,[[["str"],["str"]],["e"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"into","","",275,[[["self"]],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,N],[11,"from","","",275,[[["t"]],["t"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"try_into","","",275,[[["self"]],["result"]]],[11,"get_type_id","","",275,[[["self"]],["typeid"]]],[11,"not_found","","",275,[[["str"],["str"]],["e"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"into","","",276,[[["self"]],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,N],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"try_into","","",276,[[["self"]],["result"]]],[11,"get_type_id","","",276,[[["self"]],["typeid"]]],[11,"not_found","","",276,[[["str"],["str"]],["e"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"into","","",277,[[["self"]],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,N],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"try_into","","",277,[[["self"]],["result"]]],[11,"get_type_id","","",277,[[["self"]],["typeid"]]],[11,"not_found","","",277,[[["str"],["str"]],["e"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"into","","",278,[[["self"]],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,N],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"try_into","","",278,[[["self"]],["result"]]],[11,"get_type_id","","",278,[[["self"]],["typeid"]]],[11,"not_found","","",278,[[["str"],["str"]],["e"]]],[11,"span","","",279,[[["self"]],["span"]]],[11,"into","","",279,[[["self"]],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,N],[11,"from","","",279,[[["t"]],["t"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"try_into","","",279,[[["self"]],["result"]]],[11,"get_type_id","","",279,[[["self"]],["typeid"]]],[11,"not_found","","",279,[[["str"],["str"]],["e"]]],[11,"span","","",280,[[["self"]],["span"]]],[11,"into","","",280,[[["self"]],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,N],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"try_into","","",280,[[["self"]],["result"]]],[11,"get_type_id","","",280,[[["self"]],["typeid"]]],[11,"not_found","","",280,[[["str"],["str"]],["e"]]],[11,"span","","",281,[[["self"]],["span"]]],[11,"into","","",281,[[["self"]],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,N],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"try_into","","",281,[[["self"]],["result"]]],[11,"get_type_id","","",281,[[["self"]],["typeid"]]],[11,"not_found","","",281,[[["str"],["str"]],["e"]]],[11,"into","syn::buffer","",292,[[["self"]],["u"]]],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"try_into","","",292,[[["self"]],["result"]]],[11,"get_type_id","","",292,[[["self"]],["typeid"]]],[11,"not_found","","",292,[[["str"],["str"]],["e"]]],[11,"into","","",293,[[["self"]],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,N],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"try_into","","",293,[[["self"]],["result"]]],[11,"get_type_id","","",293,[[["self"]],["typeid"]]],[11,"not_found","","",293,[[["str"],["str"]],["e"]]],[11,"span","syn::punctuated","",295,[[["self"]],["span"]]],[11,"into","","",295,[[["self"]],["u"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,N],[11,"from","","",295,[[["t"]],["t"]]],[11,"into_iter","","",295,[[["self"]],["i"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"try_into","","",295,[[["self"]],["result"]]],[11,"get_type_id","","",295,[[["self"]],["typeid"]]],[11,"not_found","","",295,[[["str"],["str"]],["e"]]],[11,"into","","",296,[[["self"]],["u"]]],[11,"from","","",296,[[["t"]],["t"]]],[11,"into_iter","","",296,[[["self"]],["i"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"try_into","","",296,[[["self"]],["result"]]],[11,"get_type_id","","",296,[[["self"]],["typeid"]]],[11,"not_found","","",296,[[["str"],["str"]],["e"]]],[11,"into","","",297,[[["self"]],["u"]]],[11,"from","","",297,[[["t"]],["t"]]],[11,"into_iter","","",297,[[["self"]],["i"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"try_into","","",297,[[["self"]],["result"]]],[11,"get_type_id","","",297,[[["self"]],["typeid"]]],[11,"not_found","","",297,[[["str"],["str"]],["e"]]],[11,"into","","",298,[[["self"]],["u"]]],[11,"from","","",298,[[["t"]],["t"]]],[11,"into_iter","","",298,[[["self"]],["i"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"try_into","","",298,[[["self"]],["result"]]],[11,"get_type_id","","",298,[[["self"]],["typeid"]]],[11,"not_found","","",298,[[["str"],["str"]],["e"]]],[11,"into","","",299,[[["self"]],["u"]]],[11,"from","","",299,[[["t"]],["t"]]],[11,"into_iter","","",299,[[["self"]],["i"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"try_into","","",299,[[["self"]],["result"]]],[11,"get_type_id","","",299,[[["self"]],["typeid"]]],[11,"not_found","","",299,[[["str"],["str"]],["e"]]],[11,"into","","",300,[[["self"]],["u"]]],[11,"from","","",300,[[["t"]],["t"]]],[11,"into_iter","","",300,[[["self"]],["i"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"try_into","","",300,[[["self"]],["result"]]],[11,"get_type_id","","",300,[[["self"]],["typeid"]]],[11,"not_found","","",300,[[["str"],["str"]],["e"]]],[11,"into","","",301,[[["self"]],["u"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"into_iter","","",301,[[["self"]],["i"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"try_into","","",301,[[["self"]],["result"]]],[11,"get_type_id","","",301,[[["self"]],["typeid"]]],[11,"not_found","","",301,[[["str"],["str"]],["e"]]],[11,"span","","",294,[[["self"]],["span"]]],[11,"into","","",294,[[["self"]],["u"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"try_into","","",294,[[["self"]],["result"]]],[11,"get_type_id","","",294,[[["self"]],["typeid"]]],[11,"not_found","","",294,[[["str"],["str"]],["e"]]],[11,"visit_abi","syn::visit","",306,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",306,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured","","",306,[[["self"],["argcaptured"]]]],[11,"visit_arg_self","","",306,[[["self"],["argself"]]]],[11,"visit_arg_self_ref","","",306,[[["self"],["argselfref"]]]],[11,"visit_arm","","",306,[[["self"],["arm"]]]],[11,"visit_attr_style","","",306,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",306,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",306,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",306,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",306,[[["self"],["binop"]]]],[11,"visit_binding","","",306,[[["self"],["binding"]]]],[11,"visit_block","","",306,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",306,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",306,[[["self"],["constparam"]]]],[11,"visit_data","","",306,[[["self"],["data"]]]],[11,"visit_data_enum","","",306,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",306,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",306,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",306,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",306,[[["self"],["expr"]]]],[11,"visit_expr_array","","",306,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",306,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",306,[[["self"],["exprassignop"]]]],[11,"visit_expr_binary","","",306,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",306,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",306,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",306,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",306,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",306,[[["self"],["exprcast"]]]],[11,"visit_expr_catch","","",306,[[["self"],["exprcatch"]]]],[11,"visit_expr_closure","","",306,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",306,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",306,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",306,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",306,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",306,[[["self"],["exprif"]]]],[11,"visit_expr_if_let","","",306,[[["self"],["expriflet"]]]],[11,"visit_expr_in_place","","",306,[[["self"],["exprinplace"]]]],[11,"visit_expr_index","","",306,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",306,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",306,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",306,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",306,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",306,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",306,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",306,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",306,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",306,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",306,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",306,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",306,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",306,[[["self"],["exprtry"]]]],[11,"visit_expr_tuple","","",306,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",306,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",306,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",306,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim","","",306,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while","","",306,[[["self"],["exprwhile"]]]],[11,"visit_expr_while_let","","",306,[[["self"],["exprwhilelet"]]]],[11,"visit_expr_yield","","",306,[[["self"],["expryield"]]]],[11,"visit_field","","",306,[[["self"],["field"]]]],[11,"visit_field_pat","","",306,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",306,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",306,[[["self"],["fields"]]]],[11,"visit_fields_named","","",306,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",306,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",306,[[["self"],["file"]]]],[11,"visit_fn_arg","","",306,[[["self"],["fnarg"]]]],[11,"visit_fn_decl","","",306,[[["self"],["fndecl"]]]],[11,"visit_foreign_item","","",306,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",306,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_static","","",306,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",306,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim","","",306,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument","","",306,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",306,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",306,[[["self"],["genericparam"]]]],[11,"visit_generics","","",306,[[["self"],["generics"]]]],[11,"visit_ident","","",306,[[["self"],["ident"]]]],[11,"visit_impl_item","","",306,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",306,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",306,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",306,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",306,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim","","",306,[[["self"],["implitemverbatim"]]]],[11,"visit_index","","",306,[[["self"],["index"]]]],[11,"visit_item","","",306,[[["self"],["item"]]]],[11,"visit_item_const","","",306,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",306,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate","","",306,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",306,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",306,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",306,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",306,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",306,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",306,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",306,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",306,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",306,[[["self"],["itemtrait"]]]],[11,"visit_item_type","","",306,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",306,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",306,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim","","",306,[[["self"],["itemverbatim"]]]],[11,"visit_label","","",306,[[["self"],["label"]]]],[11,"visit_lifetime","","",306,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",306,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",306,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",306,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",306,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",306,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",306,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",306,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",306,[[["self"],["litint"]]]],[11,"visit_lit_str","","",306,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",306,[[["self"],["litverbatim"]]]],[11,"visit_local","","",306,[[["self"],["local"]]]],[11,"visit_macro","","",306,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",306,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",306,[[["self"],["member"]]]],[11,"visit_meta","","",306,[[["self"],["meta"]]]],[11,"visit_meta_list","","",306,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",306,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig","","",306,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish","","",306,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",306,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",306,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",306,[[["self"],["pat"]]]],[11,"visit_pat_box","","",306,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",306,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",306,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",306,[[["self"],["patmacro"]]]],[11,"visit_pat_path","","",306,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",306,[[["self"],["patrange"]]]],[11,"visit_pat_ref","","",306,[[["self"],["patref"]]]],[11,"visit_pat_slice","","",306,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",306,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",306,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",306,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim","","",306,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild","","",306,[[["self"],["patwild"]]]],[11,"visit_path","","",306,[[["self"],["path"]]]],[11,"visit_path_arguments","","",306,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",306,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",306,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",306,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",306,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",306,[[["self"],["qself"]]]],[11,"visit_range_limits","","",306,[[["self"],["rangelimits"]]]],[11,"visit_return_type","","",306,[[["self"],["returntype"]]]],[11,"visit_span","","",306,[[["self"],["span"]]]],[11,"visit_stmt","","",306,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",306,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",306,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",306,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",306,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",306,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",306,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",306,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim","","",306,[[["self"],["traititemverbatim"]]]],[11,"visit_type","","",306,[[["self"],["type"]]]],[11,"visit_type_array","","",306,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",306,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",306,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",306,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",306,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",306,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",306,[[["self"],["typenever"]]]],[11,"visit_type_param","","",306,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",306,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",306,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",306,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",306,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",306,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",306,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",306,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",306,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",306,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",306,[[["self"],["unop"]]]],[11,"visit_use_glob","","",306,[[["self"],["useglob"]]]],[11,"visit_use_group","","",306,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",306,[[["self"],["usename"]]]],[11,"visit_use_path","","",306,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",306,[[["self"],["userename"]]]],[11,"visit_use_tree","","",306,[[["self"],["usetree"]]]],[11,"visit_variant","","",306,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",306,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",306,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",306,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",306,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",306,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",306,[[["self"],["wherepredicate"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["synstructure"]={"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",N,N],[12,"binding","","The name which this BindingInfo will bind to.",0,N],[12,"style","","The type of binding which this BindingInfo will create.",0,N],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn::Variant`, however this type may also be used as the sole variant for a struct.",N,N],[12,"attrs","","",1,N],[12,"ident","","",1,N],[12,"fields","","",1,N],[12,"discriminant","","",1,N],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",N,N],[12,"prefix","","",2,N],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides utilities for creating custom derive trait implementations.",N,N],[4,"BindStyle","","The type of binding to use when generating a pattern.",N,N],[13,"Move","","`x`",3,N],[13,"MoveMut","","`mut x`",3,N],[13,"Ref","","`ref x`",3,N],[13,"RefMut","","`ref mut x`",3,N],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type which implements `Display`.",N,[[["t"]],["string"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["bindstyle"]]],[11,"eq","","",3,[[["self"],["bindstyle"]],["bool"]]],[11,"hash","","",3,N],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["bindinginfo"]]],[11,"eq","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"hash","","",0,N],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,[[["self"]],["field"]]],[11,"pat","","Generates the pattern fragment for this field binding.",0,[[["self"]],["tokenstream"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,[[["self"]],["vec",["ident"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["variantast"]]],[11,"eq","","",1,[[["self"],["variantast"]],["bool"]]],[11,"ne","","",1,[[["self"],["variantast"]],["bool"]]],[11,"hash","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["variantinfo"]]],[11,"eq","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"hash","","",2,N],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,N],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,N],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,[[["self"]],["variantast"]]],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,[[["self"]],["bool"]]],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,[[["self"]],["tokenstream"]]],[11,"construct","","Generates the token stream required to construct the current variant.",2,[[["self"],["f"]],["tokenstream"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,[[["self"],["f"]],["self"]]],[11,"remove_binding","","Remove the binding at the given index.",2,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,[[["self"]],["vec",["ident"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["structure"]]],[11,"eq","","",4,[[["self"],["structure"]],["bool"]]],[11,"ne","","",4,[[["self"],["structure"]],["bool"]]],[11,"hash","","",4,N],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,[[["deriveinput"]],["self"]]],[11,"variants","","Returns a slice of the variants in this Structure.",4,N],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,N],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,[[["self"]],["deriveinput"]]],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,[[["self"]],["bool"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"remove_variant","","Remove the variant at the given index.",4,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,[[["self"]],["vec",["ident"]]]],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when the trait to be derived needs some extra generic parameters.",4,[[["self"],["genericparam"]],["self"]]],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,[[["self"],["traitbound"],["option"]]]],[11,"bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"gen_impl","","Generate an impl block for the given struct. This impl block will automatically use hygiene tricks to avoid polluting the caller's namespace, and will automatically add trait bounds for generic type parameters.",4,[[["self"],["tokenstream"]],["tokenstream"]]],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming `TokenStream` into a `synstructure::Structure` object, and pass it into the inner function.",N,N],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["thread_profiler"]={"doc":"","items":[[5,"write_profile","thread_profiler","",N,[[["str"]]]],[5,"register_thread_with_profiler","","",N,[[["string"]]]],[14,"profile_scope","","",N,N]],"paths":[]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["duration"]]],[11,"eq","","",4,[[["self"],["duration"]],["bool"]]],[11,"ne","","",4,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["duration"]],["bool"]]],[11,"le","","",4,[[["self"],["duration"]],["bool"]]],[11,"gt","","",4,[[["self"],["duration"]],["bool"]]],[11,"ge","","",4,[[["self"],["duration"]],["bool"]]],[11,"cmp","","",4,[[["self"],["duration"]],["ordering"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",4,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"neg","","",4,[[["self"]],["duration"]]],[11,"add","","",4,[[["self"],["duration"]],["duration"]]],[11,"sub","","",4,[[["self"],["duration"]],["duration"]]],[11,"mul","","",4,[[["self"],["i32"]],["duration"]]],[11,"div","","",4,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outofrangeerror"]]],[11,"eq","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"clone","","",6,[[["self"]],["precisetime"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,[[["self"],["precisetime"]],["duration"]]],[11,"clone","","",7,[[["self"]],["steadytime"]]],[11,"partial_cmp","","",7,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"cmp","","",7,[[["self"],["steadytime"]],["ordering"]]],[11,"eq","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,[[],["steadytime"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",7,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"add","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["webrender"]={"doc":"A GPU based renderer for the web.","items":[[0,"channel","webrender::api","",N,N],[3,"Payload","webrender::api::channel","",N,N],[12,"epoch","","An epoch used to get the proper payload for a pipeline id frame request.",0,N],[12,"pipeline_id","","A pipeline id to key the payload with, along with the epoch.",0,N],[12,"display_list_data","","",0,N],[8,"PayloadSenderHelperMethods","","A helper to handle the interface difference between `IpcBytesSender` and `Sender<Vec<u8>>`.",N,N],[10,"send_payload","","",1,[[["self"],["payload"]],["result",["error"]]]],[8,"PayloadReceiverHelperMethods","","",N,N],[10,"recv_payload","","",2,[[["self"]],["result",["payload","error"]]]],[10,"to_mpsc_receiver","","",2,[[["self"]],["receiver",["payload"]]]],[6,"PayloadSender","","Handles the channel implementation when in process channels are enabled.",N,N],[6,"PayloadReceiver","","",N,N],[3,"MsgReceiver","","",N,N],[3,"MsgSender","","",N,N],[5,"payload_channel","","",N,[[],["result",["error"]]]],[5,"msg_channel","","",N,[[],["result",["error"]]]],[3,"TextDisplayItem","webrender::api","",N,N],[12,"font_key","","",3,N],[12,"color","","",3,N],[12,"glyph_options","","",3,N],[3,"Transaction","","A Transaction is a group of commands to apply atomically to a document.",N,N],[12,"resource_updates","","",4,N],[3,"PicturePixel","","Geometry in the coordinate system of a Picture (intermediate surface) in physical pixels.",N,N],[4,"NinePatchBorderSource","","",N,N],[13,"Image","","",5,N],[13,"Gradient","","",5,N],[13,"RadialGradient","","",5,N],[3,"IdNamespace","","",N,N],[12,"0","","",6,N],[4,"FontLCDFilter","","",N,N],[13,"None","","",7,N],[13,"Default","","",7,N],[13,"Light","","",7,N],[13,"Legacy","","",7,N],[4,"BorderStyle","","",N,N],[13,"None","","",8,N],[13,"Solid","","",8,N],[13,"Double","","",8,N],[13,"Dotted","","",8,N],[13,"Dashed","","",8,N],[13,"Hidden","","",8,N],[13,"Groove","","",8,N],[13,"Ridge","","",8,N],[13,"Inset","","",8,N],[13,"Outset","","",8,N],[4,"FilterOp","","",N,N],[13,"Blur","","",9,N],[13,"Brightness","","",9,N],[13,"Contrast","","",9,N],[13,"Grayscale","","",9,N],[13,"HueRotate","","",9,N],[13,"Invert","","",9,N],[13,"Opacity","","",9,N],[13,"Saturate","","",9,N],[13,"Sepia","","",9,N],[13,"DropShadow","","",9,N],[13,"ColorMatrix","","",9,N],[6,"BlobImageResult","","",N,N],[6,"ScrollToLayoutTransform","","",N,N],[3,"BorderRadius","","",N,N],[12,"top_left","","",10,N],[12,"top_right","","",10,N],[12,"bottom_left","","",10,N],[12,"bottom_right","","",10,N],[4,"SpecificDisplayItem","","",N,N],[13,"Clip","","",11,N],[13,"ScrollFrame","","",11,N],[13,"StickyFrame","","",11,N],[13,"Rectangle","","",11,N],[13,"ClearRectangle","","",11,N],[13,"Line","","",11,N],[13,"Text","","",11,N],[13,"Image","","",11,N],[13,"YuvImage","","",11,N],[13,"Border","","",11,N],[13,"BoxShadow","","",11,N],[13,"Gradient","","",11,N],[13,"RadialGradient","","",11,N],[13,"ClipChain","","",11,N],[13,"Iframe","","",11,N],[13,"PushStackingContext","","",11,N],[13,"PopStackingContext","","",11,N],[13,"PushReferenceFrame","","",11,N],[13,"PopReferenceFrame","","",11,N],[13,"SetGradientStops","","",11,N],[13,"PushShadow","","",11,N],[13,"PopAllShadows","","",11,N],[4,"AddFont","","",N,N],[13,"Raw","","",12,N],[13,"Native","","",12,N],[4,"ExtendMode","","",N,N],[13,"Clamp","","",13,N],[13,"Repeat","","",13,N],[3,"HitTestItem","","",N,N],[12,"pipeline","","The pipeline that the display item that was hit belongs to.",14,N],[12,"tag","","The tag of the hit display item.",14,N],[12,"point_in_viewport","","The hit point in the coordinate space of the \"viewport\" of the display item. The viewport is the scroll node formed by the root reference frame of the display item's pipeline.",14,N],[12,"point_relative_to_item","","The coordinates of the original hit test point relative to the origin of this item. This is useful for calculating things like text offsets in the client.",14,N],[6,"ScrollLayerRect","","",N,N],[4,"ScrollClamping","","",N,N],[13,"ToContentBounds","","",15,N],[13,"NoClamping","","",15,N],[4,"BlobImageError","","",N,N],[13,"Oom","","",16,N],[13,"InvalidKey","","",16,N],[13,"InvalidData","","",16,N],[13,"Other","","",16,N],[6,"LayoutToScrollTransform","","",N,N],[3,"ImageKey","","",N,N],[12,"0","","",17,N],[12,"1","","",17,N],[4,"ResourceUpdate","","",N,N],[13,"AddImage","","",18,N],[13,"UpdateImage","","",18,N],[13,"DeleteImage","","",18,N],[13,"AddFont","","",18,N],[13,"DeleteFont","","",18,N],[13,"AddFontInstance","","",18,N],[13,"DeleteFontInstance","","",18,N],[3,"BorderWidths","","",N,N],[12,"left","","",19,N],[12,"top","","",19,N],[12,"right","","",19,N],[12,"bottom","","",19,N],[4,"ExternalImageType","","",N,N],[13,"TextureHandle","","",20,N],[13,"Buffer","","",20,N],[6,"DeviceIntSize","","",N,N],[6,"PipelineSourceId","","This type carries no valuable semantics for WR. However, it reflects the fact that clients (Servo) may generate pipelines by different semi-independent sources. These pipelines still belong to the same `IdNamespace` and the same `DocumentId`. Having this extra Id field enables them to generate `PipelineId` without collision.",N,N],[3,"ClipChainItem","","",N,N],[12,"id","","",21,N],[12,"parent","","",21,N],[3,"HitTestFlags","","",N,N],[6,"DeviceUintRect","","",N,N],[3,"SyntheticItalics","","",N,N],[12,"angle","","",22,N],[3,"RenderApi","","",N,N],[3,"GlyphDimensions","","",N,N],[12,"left","","",23,N],[12,"top","","",23,N],[12,"width","","",23,N],[12,"height","","",23,N],[12,"advance","","",23,N],[6,"WorldToLayoutTransform","","",N,N],[6,"LayoutSize","","",N,N],[3,"ClipDisplayItem","","",N,N],[12,"id","","",24,N],[12,"image_mask","","",24,N],[4,"YuvColorSpace","","",N,N],[13,"Rec601","","",25,N],[13,"Rec709","","",25,N],[3,"PushStackingContextDisplayItem","","",N,N],[12,"stacking_context","","",26,N],[3,"ExternalImageData","","",N,N],[12,"id","","",27,N],[12,"channel_index","","",27,N],[12,"image_type","","",27,N],[3,"ClipChainId","","",N,N],[12,"0","","",28,N],[12,"1","","",28,N],[4,"AlphaType","","",N,N],[13,"Alpha","","",29,N],[13,"PremultipliedAlpha","","",29,N],[3,"Shadow","","",N,N],[12,"offset","","",30,N],[12,"color","","",30,N],[12,"blur_radius","","",30,N],[3,"AddFontInstance","","",N,N],[12,"key","","",31,N],[12,"font_key","","",31,N],[12,"glyph_size","","",31,N],[12,"options","","",31,N],[12,"platform_options","","",31,N],[12,"variations","","",31,N],[3,"ImageDescriptor","","",N,N],[12,"format","","",32,N],[12,"size","","",32,N],[12,"stride","","",32,N],[12,"offset","","",32,N],[12,"is_opaque","","",32,N],[12,"allow_mipmaps","","",32,N],[4,"YuvData","","",N,N],[13,"NV12","","",33,N],[13,"PlanarYCbCr","","",33,N],[13,"InterleavedYCbCr","","",33,N],[3,"BuiltDisplayListIter","","",N,N],[3,"GradientStop","","",N,N],[12,"offset","","",34,N],[12,"color","","",34,N],[17,"YUV_COLOR_SPACES","","",N,N],[6,"LayoutRectAu","","",N,N],[3,"YuvImageDisplayItem","","",N,N],[12,"yuv_data","","",35,N],[12,"color_space","","",35,N],[12,"image_rendering","","",35,N],[3,"ReferenceFrame","","",N,N],[12,"transform","","",36,N],[12,"perspective","","",36,N],[12,"id","","",36,N],[3,"ScrollNodeState","","",N,N],[12,"id","","",37,N],[12,"scroll_offset","","",37,N],[3,"FontVariation","","",N,N],[12,"tag","","",38,N],[12,"value","","",38,N],[3,"GlyphOptions","","",N,N],[12,"render_mode","","",39,N],[12,"flags","","",39,N],[6,"LayoutToWorldTransform","","",N,N],[4,"PropertyBinding","","A binding property can either be a specific value (the normal, non-animated case) or point to a binding location to fetch the current value from. Note that Binding has also a non-animated value, the value is used for the case where the animation is still in-delay phase (i.e. the animation doesn't produce any animation values).",N,N],[13,"Value","","",40,N],[13,"Binding","","",40,N],[3,"HitTestResult","","",N,N],[12,"items","","",41,N],[3,"DisplayItemRef","","",N,N],[3,"ColorF","","Represents RGBA screen colors with floating point numbers.",N,N],[12,"r","","",42,N],[12,"g","","",42,N],[12,"b","","",42,N],[12,"a","","",42,N],[3,"DynamicProperties","","When using `generate_frame()`, a list of `PropertyValue` structures can optionally be supplied to provide the current value of any animated properties.",N,N],[12,"transforms","","",43,N],[12,"floats","","",43,N],[3,"WorldPixel","","Geometry in the document's coordinate space (logical pixels).",N,N],[4,"ClipMode","","",N,N],[13,"Clip","","",44,N],[13,"ClipOut","","",44,N],[3,"BoxShadowDisplayItem","","",N,N],[12,"box_bounds","","",45,N],[12,"offset","","",45,N],[12,"color","","",45,N],[12,"blur_radius","","",45,N],[12,"spread_radius","","",45,N],[12,"border_radius","","",45,N],[12,"clip_mode","","",45,N],[4,"BoxShadowClipMode","","",N,N],[13,"Outset","","",46,N],[13,"Inset","","",46,N],[6,"ScrollLayerPoint","","",N,N],[6,"WorldVector2D","","",N,N],[3,"ResourceId","","",N,N],[12,"0","","",47,N],[6,"DeviceUintSize","","",N,N],[6,"ItemTag","","A tag that can be used to identify items during hit testing. If the tag is missing then the item doesn't take part in hit testing at all. This is composed of two numbers. In Servo, the first is an identifier while the second is used to select the cursor that should be used during mouse movement. In Gecko, the first is a scrollframe identifier, while the second is used to store various flags that APZ needs to properly process input events.",N,N],[3,"RasterizedBlobImage","","",N,N],[12,"size","","",48,N],[12,"data","","",48,N],[3,"AddImage","","",N,N],[12,"key","","",49,N],[12,"descriptor","","",49,N],[12,"data","","",49,N],[12,"tiling","","",49,N],[6,"DeviceUintPoint","","",N,N],[3,"RadialGradient","","",N,N],[12,"center","","",50,N],[12,"radius","","",50,N],[12,"start_offset","","",50,N],[12,"end_offset","","",50,N],[12,"extend_mode","","",50,N],[3,"ExternalImageId","","An arbitrary identifier for an external image provided by the application. It must be a unique identifier for each external image.",N,N],[12,"0","","",51,N],[3,"NinePatchBorder","","",N,N],[12,"source","","Describes what to use as the 9-patch source image. If this is an image, it will be stretched to fill the size given by width x height.",52,N],[12,"width","","The width of the 9-part image.",52,N],[12,"height","","The height of the 9-part image.",52,N],[12,"slice","","Distances from each edge where the image should be sliced up. These values are in 9-part-image space (the same space as width and height), and the resulting image parts will be used to fill the corresponding parts of the border as given by the border widths. This can lead to stretching. Slices can be overlapping. In that case, the same pixels from the 9-part image will show up in multiple parts of the resulting border.",52,N],[12,"fill","","Controls whether the center of the 9 patch image is rendered or ignored. The center is never rendered if the slices are overlapping.",52,N],[12,"repeat_horizontal","","Determines what happens if the horizontal side parts of the 9-part image have a different size than the horizontal parts of the border.",52,N],[12,"repeat_vertical","","Determines what happens if the vertical side parts of the 9-part image have a different size than the vertical parts of the border.",52,N],[12,"outset","","The outset for the border. TODO(mrobinson): This should be removed and handled by the client.",52,N],[3,"ZoomFactor","","Represents a zoom factor.",N,N],[4,"GlyphRasterSpace","","",N,N],[13,"Local","","",53,N],[13,"Screen","","",53,N],[3,"Tiles","","Offset in number of tiles.",N,N],[3,"BlobImageDescriptor","","",N,N],[12,"size","","",54,N],[12,"offset","","",54,N],[12,"format","","",54,N],[6,"LayoutTransform","","",N,N],[4,"ScrollSensitivity","","",N,N],[13,"ScriptAndInputEvents","","",55,N],[13,"Script","","",55,N],[3,"DocumentId","","",N,N],[12,"0","","",56,N],[12,"1","","",56,N],[4,"FrameMsg","","",N,N],[13,"UpdateEpoch","","",57,N],[13,"HitTest","","",57,N],[13,"SetPan","","",57,N],[13,"EnableFrameOutput","","",57,N],[13,"Scroll","","",57,N],[13,"ScrollNodeWithId","","",57,N],[13,"GetScrollNodeState","","",57,N],[13,"UpdateDynamicProperties","","",57,N],[13,"AppendDynamicProperties","","",57,N],[3,"ItemRange","","",N,N],[6,"DeviceVector2D","","",N,N],[3,"PropertyValue","","The current value of an animated property. This is supplied by the calling code.",N,N],[12,"key","","",58,N],[12,"value","","",58,N],[6,"LayoutPoint3D","","",N,N],[6,"LayoutSizeAu","","",N,N],[4,"LineOrientation","","",N,N],[13,"Vertical","","",59,N],[13,"Horizontal","","",59,N],[3,"StickyFrameDisplayItem","","",N,N],[12,"id","","",60,N],[12,"margins","","The margins that should be maintained between the edge of the parent viewport and this sticky frame. A margin of None indicates that the sticky frame should not stick at all to that particular edge of the viewport.",60,N],[12,"vertical_offset_bounds","","The minimum and maximum vertical offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",60,N],[12,"horizontal_offset_bounds","","The minimum and maximum horizontal offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",60,N],[12,"previously_applied_offset","","The amount of offset that has already been applied to the sticky frame. A positive y component this field means that a top-sticky item was in a scrollframe that has been scrolled down, such that the sticky item's position needed to be offset downwards by `previously_applied_offset.y`. A negative y component corresponds to the upward offset applied due to bottom-stickiness. The x-axis works analogously.",60,N],[6,"PictureIntRect","","",N,N],[3,"ClearCache","","Mask for clearing caches in debug commands.",N,N],[3,"SaveState","","",N,N],[3,"LayoutPixel","","Geometry in a stacking context's local coordinate space (logical pixels).",N,N],[3,"BlobImageRequest","","",N,N],[12,"key","","",61,N],[12,"tile","","",61,N],[6,"ScrollLayerVector2D","","",N,N],[3,"PropertyBindingKey","","A unique key that is used for connecting animated property values to bindings in the display list.",N,N],[12,"id","","",62,N],[6,"DevicePixelScale","","Scaling ratio from world pixels to device pixels.",N,N],[3,"StickyOffsetBounds","","The minimum and maximum allowable offset for a sticky frame in a single dimension.",N,N],[12,"min","","The minimum offset for this frame, typically a negative value, which specifies how far in the negative direction the sticky frame can offset its contents in this dimension.",63,N],[12,"max","","The maximum offset for this frame, typically a positive value, which specifies how far in the positive direction the sticky frame can offset its contents in this dimension.",63,N],[6,"DocumentLayer","","Documents are rendered in the ascending order of their associated layer values.",N,N],[3,"TexelRect","","Stores two coordinates in texel space. The coordinates are stored in texel coordinates because the texture atlas may grow. Storing them as texel coords and normalizing the UVs in the vertex shader means nothing needs to be updated on the CPU when the texture size changes.",N,N],[12,"uv0","","",64,N],[12,"uv1","","",64,N],[3,"NormalBorder","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[12,"top","","",65,N],[12,"bottom","","",65,N],[12,"radius","","",65,N],[4,"LineStyle","","",N,N],[13,"Solid","","",66,N],[13,"Dotted","","",66,N],[13,"Dashed","","",66,N],[13,"Wavy","","",66,N],[3,"PipelineId","","From the point of view of WR, `PipelineId` is completely opaque and generic as long as it's clonable, serializable, comparable, and hashable.",N,N],[12,"0","","",67,N],[12,"1","","",67,N],[3,"FontInstanceFlags","","",N,N],[6,"DeviceIntSideOffsets","","",N,N],[4,"DebugCommand","","",N,N],[13,"EnableProfiler","","Display the frame profiler on screen.",68,N],[13,"EnableTextureCacheDebug","","Display all texture cache pages on screen.",68,N],[13,"EnableRenderTargetDebug","","Display intermediate render targets on screen.",68,N],[13,"EnableGpuTimeQueries","","Display GPU timing results.",68,N],[13,"EnableGpuSampleQueries","","Display GPU overdraw results",68,N],[13,"EnableDualSourceBlending","","Configure if dual-source blending is used, if available.",68,N],[13,"EnableNewFrameIndicator","","Show an indicator that moves every time a frame is rendered.",68,N],[13,"EnableNewSceneIndicator","","Show an indicator that moves every time a scene is built.",68,N],[13,"FetchDocuments","","Fetch current documents and display lists.",68,N],[13,"FetchPasses","","Fetch current passes and batches.",68,N],[13,"FetchClipScrollTree","","Fetch clip-scroll tree.",68,N],[13,"FetchRenderTasks","","Fetch render tasks.",68,N],[13,"FetchScreenshot","","Fetch screenshot.",68,N],[13,"SaveCapture","","Save a capture of all the documents state.",68,N],[13,"LoadCapture","","Load a capture of all the documents state.",68,N],[13,"ClearCaches","","Clear cached resources, forcing them to be re-uploaded from templates.",68,N],[13,"InvalidateGpuCache","","Invalidate GPU cache, forcing the update from the CPU mirror.",68,N],[3,"IframeDisplayItem","","",N,N],[12,"clip_id","","",69,N],[12,"pipeline_id","","",69,N],[12,"ignore_missing_pipeline","","",69,N],[3,"GlyphInstance","","",N,N],[12,"index","","",70,N],[12,"point","","",70,N],[3,"ExternalScrollId","","An external identifier that uniquely identifies a scroll frame independent of its ClipId, which may change from frame to frame. This should be unique within a pipeline. WebRender makes no attempt to ensure uniqueness. The zero value is reserved for use by the root scroll node of every pipeline, which always has an external id.",N,N],[12,"0","","",71,N],[12,"1","","",71,N],[6,"LayoutToWorldScale","","Scaling ratio from layout to world. Used for cases where we know the layout is in world space, or specifically want to treat it this way.",N,N],[6,"GlyphIndex","","",N,N],[3,"PrimitiveInfo","","",N,N],[12,"rect","","",72,N],[12,"clip_rect","","",72,N],[12,"is_backface_visible","","",72,N],[12,"tag","","",72,N],[3,"RadialGradientDisplayItem","","",N,N],[12,"gradient","","",73,N],[12,"tile_size","","",73,N],[12,"tile_spacing","","",73,N],[4,"TextureTarget","","",N,N],[13,"Default","","",74,N],[13,"Array","","",74,N],[13,"Rect","","",74,N],[13,"External","","",74,N],[3,"CapturedDocument","","Information about a loaded capture of each document that is returned by `RenderBackend`.",N,N],[12,"document_id","","",75,N],[12,"root_pipeline_id","","",75,N],[12,"window_size","","",75,N],[3,"DevicePixel","","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",N,N],[3,"RectangleDisplayItem","","",N,N],[12,"color","","",76,N],[4,"SceneMsg","","",N,N],[13,"UpdateEpoch","","",77,N],[13,"SetPageZoom","","",77,N],[13,"SetPinchZoom","","",77,N],[13,"SetRootPipeline","","",77,N],[13,"RemovePipeline","","",77,N],[13,"SetDisplayList","","",77,N],[12,"list_descriptor","webrender::api::SceneMsg","",77,N],[12,"epoch","","",77,N],[12,"pipeline_id","","",77,N],[12,"background","","",77,N],[12,"viewport_size","","",77,N],[12,"content_size","","",77,N],[12,"preserve_frame_state","","",77,N],[13,"SetWindowParameters","webrender::api","",77,N],[12,"window_size","webrender::api::SceneMsg","",77,N],[12,"inner_rect","","",77,N],[12,"device_pixel_ratio","","",77,N],[4,"ScrollLocation","webrender::api","",N,N],[13,"Delta","","Scroll by a certain amount.",78,N],[13,"Start","","Scroll to very top of element.",78,N],[13,"End","","Scroll to very bottom of element.",78,N],[4,"TransformStyle","","",N,N],[13,"Flat","","",79,N],[13,"Preserve3D","","",79,N],[3,"FontInstancePlatformOptions","","",N,N],[12,"lcd_filter","","",80,N],[12,"hinting","","",80,N],[3,"ScrollFrameDisplayItem","","",N,N],[12,"clip_id","","",81,N],[12,"scroll_frame_id","","",81,N],[12,"external_id","","",81,N],[12,"image_mask","","",81,N],[12,"scroll_sensitivity","","",81,N],[6,"DeviceIntLength","","",N,N],[3,"LineDisplayItem","","",N,N],[12,"orientation","","",82,N],[12,"wavy_line_thickness","","",82,N],[12,"color","","",82,N],[12,"style","","",82,N],[3,"ExternalEvent","","An opaque pointer-sized value.",N,N],[5,"as_scroll_parent_rect","","",N,[[["typedrect"]],["typedrect",["f32","scrolllayerpixel"]]]],[4,"FontHinting","","",N,N],[13,"None","","",83,N],[13,"Mono","","",83,N],[13,"Light","","",83,N],[13,"Normal","","",83,N],[13,"LCD","","",83,N],[3,"BorderDisplayItem","","",N,N],[12,"widths","","",84,N],[12,"details","","",84,N],[3,"BorderSide","","",N,N],[12,"color","","",85,N],[12,"style","","",85,N],[6,"LayoutVector3D","","",N,N],[6,"LayoutRect","","",N,N],[6,"ScrollToWorldTransform","","",N,N],[3,"PropertyBindingId","","",N,N],[3,"ImageDisplayItem","","",N,N],[12,"image_key","","",86,N],[12,"stretch_size","","",86,N],[12,"tile_spacing","","",86,N],[12,"image_rendering","","",86,N],[12,"alpha_type","","",86,N],[3,"FontInstanceOptions","","",N,N],[12,"render_mode","","",87,N],[12,"flags","","",87,N],[12,"bg_color","","When bg_color.a is != 0 and render_mode is FontRenderMode::Subpixel, the text will be rendered with bg_color.r/g/b as an opaque estimated background color.",87,N],[12,"synthetic_italics","","",87,N],[6,"ScrollLayerSize","","",N,N],[8,"BlobImageResources","","",N,N],[10,"get_font_data","","",88,[[["self"],["fontkey"]],["fonttemplate"]]],[10,"get_image","","",88,[[["self"],["imagekey"]],["option"]]],[6,"WorldVector3D","","",N,N],[4,"ClipId","","",N,N],[13,"Spatial","","",89,N],[13,"Clip","","",89,N],[13,"ClipChain","","",89,N],[4,"YuvFormat","","",N,N],[13,"NV12","","",90,N],[13,"PlanarYCbCr","","",90,N],[13,"InterleavedYCbCr","","",90,N],[8,"RenderNotifier","","",N,N],[10,"clone","","",91,[[["self"]],["box",["rendernotifier"]]]],[10,"wake_up","","",91,N],[10,"new_frame_ready","","",91,N],[11,"external_event","","",91,N],[11,"shut_down","","",91,N],[3,"UpdateImage","","",N,N],[12,"key","","",92,N],[12,"descriptor","","",92,N],[12,"data","","",92,N],[12,"dirty_rect","","",92,N],[6,"TileOffset","","",N,N],[6,"DisplayItem","","",N,N],[6,"DeviceRect","","",N,N],[4,"FontTemplate","","",N,N],[13,"Raw","","",93,N],[13,"Native","","",93,N],[6,"PictureIntSize","","",N,N],[4,"RepeatMode","","",N,N],[13,"Stretch","","",94,N],[13,"Repeat","","",94,N],[13,"Round","","",94,N],[13,"Space","","",94,N],[6,"WorldRect","","",N,N],[3,"FontInstanceKey","","",N,N],[12,"0","","",95,N],[12,"1","","",95,N],[8,"BlobImageRenderer","","",N,N],[10,"add","","",96,N],[10,"update","","",96,N],[10,"delete","","",96,N],[10,"request","","",96,N],[10,"resolve","","",96,[[["self"],["blobimagerequest"]],["result",["rasterizedblobimage","blobimageerror"]]]],[10,"delete_font","","",96,N],[10,"delete_font_instance","","",96,N],[10,"clear_namespace","","",96,N],[4,"ImageData","","",N,N],[13,"Raw","","",97,N],[13,"Blob","","",97,N],[13,"External","","",97,N],[3,"StackingContext","","",N,N],[12,"transform_style","","",98,N],[12,"mix_blend_mode","","",98,N],[12,"clip_node_id","","",98,N],[12,"glyph_raster_space","","",98,N],[3,"GenericDisplayItem","","The DI is generic over the specifics, while allows to use the \"complete\" version of it for convenient serialization.",N,N],[12,"item","","",99,N],[12,"clip_and_scroll","","",99,N],[12,"info","","",99,N],[3,"RenderApiSender","","",N,N],[3,"NativeFontHandle","","",N,N],[12,"pathname","","",100,N],[12,"index","","",100,N],[6,"BlobImageData","","",N,N],[6,"LayoutPoint","","",N,N],[3,"ImageMask","","",N,N],[12,"image","","",101,N],[12,"rect","","",101,N],[12,"repeat","","",101,N],[3,"FontKey","","",N,N],[12,"0","","",102,N],[12,"1","","",102,N],[6,"LayoutPrimitiveInfo","","",N,N],[4,"BorderRadiusKind","","",N,N],[13,"Uniform","","",103,N],[13,"NonUniform","","",103,N],[4,"LocalClip","","",N,N],[13,"Rect","","",104,N],[13,"RoundedRect","","",104,N],[3,"BuiltDisplayListDescriptor","","Describes the memory layout of a display list.",N,N],[3,"CaptureBits","","Bit flags for WR stages to store in a capture.",N,N],[3,"TransactionMsg","","Represents a transaction in the format sent through the channel.",N,N],[12,"scene_ops","","",105,N],[12,"frame_ops","","",105,N],[12,"resource_updates","","",105,N],[12,"generate_frame","","",105,N],[12,"use_scene_builder_thread","","",105,N],[4,"ImageRendering","","",N,N],[13,"Auto","","",106,N],[13,"CrispEdges","","",106,N],[13,"Pixelated","","",106,N],[6,"PictureIntPoint","","",N,N],[3,"ClipAndScrollInfo","","",N,N],[12,"scroll_node_id","","",107,N],[12,"clip_node_id","","",107,N],[3,"ComplexClipRegion","","",N,N],[12,"rect","","The boundaries of the rectangle.",108,N],[12,"radii","","Border radii of this rectangle.",108,N],[12,"mode","","Whether we are clipping inside or outside the region.",108,N],[17,"MAX_TEXT_RUN_LENGTH","","",N,N],[6,"LayoutPointAu","","",N,N],[6,"LayoutVector2D","","",N,N],[4,"ApiMsg","","",N,N],[13,"UpdateResources","","Add/remove/update images and fonts.",109,N],[13,"GetGlyphDimensions","","Gets the glyph dimensions",109,N],[13,"GetGlyphIndices","","Gets the glyph indices from a string",109,N],[13,"CloneApi","","Adds a new document namespace.",109,N],[13,"AddDocument","","Adds a new document with given initial size.",109,N],[13,"UpdateDocument","","A message targeted at a particular document.",109,N],[13,"DeleteDocument","","Deletes an existing document.",109,N],[13,"ExternalEvent","","An opaque handle that must be passed to the render notifier. It is used by Gecko to forward gecko-specific messages to the render thread preserving the ordering within the other messages.",109,N],[13,"ClearNamespace","","Removes all resources associated with a namespace.",109,N],[13,"MemoryPressure","","Flush from the caches anything that isn't necessary, to free some memory.",109,N],[13,"DebugCommand","","Change debugging options.",109,N],[13,"WakeUp","","Wakes the render backend's event loop up. Needed when an event is communicated through another channel.",109,N],[13,"WakeSceneBuilder","","",109,N],[13,"FlushSceneBuilder","","",109,N],[13,"ShutDown","","",109,N],[3,"DisplayListBuilder","","",N,N],[12,"data","","",110,N],[12,"pipeline_id","","",110,N],[6,"WorldPoint3D","","",N,N],[6,"DeviceSize","","",N,N],[17,"YUV_FORMATS","","",N,N],[4,"BorderDetails","","",N,N],[13,"Normal","","",111,N],[13,"NinePatch","","",111,N],[3,"PremultipliedColorF","","Represents pre-multiplied RGBA colors with floating point numbers.",N,N],[12,"r","","",112,N],[12,"g","","",112,N],[12,"b","","",112,N],[12,"a","","",112,N],[6,"DevicePoint","","",N,N],[3,"ColorU","","Represents RGBA screen colors with one byte per channel.",N,N],[12,"r","","",113,N],[12,"g","","",113,N],[12,"b","","",113,N],[12,"a","","",113,N],[3,"GradientDisplayItem","","",N,N],[12,"gradient","","",114,N],[12,"tile_size","","",114,N],[12,"tile_spacing","","",114,N],[3,"Epoch","","",N,N],[12,"0","","",115,N],[3,"ScrollLayerPixel","","Geometry in a layer's scrollable parent coordinate space (logical pixels).",N,N],[3,"BuiltDisplayList","","A display list.",N,N],[6,"TileSize","","",N,N],[3,"AuxIter","","",N,N],[6,"LayoutToDeviceScale","","A complete scaling ratio from layout space to device pixel space.",N,N],[6,"DeviceIntRect","","",N,N],[5,"as_scroll_parent_vector","","",N,[[["typedvector2d"]],["typedvector2d",["f32","scrolllayerpixel"]]]],[4,"FontRenderMode","","",N,N],[13,"Mono","","",116,N],[13,"Alpha","","",116,N],[13,"Subpixel","","",116,N],[3,"PushReferenceFrameDisplayListItem","","",N,N],[12,"reference_frame","","",117,N],[4,"ImageFormat","","",N,N],[13,"R8","","",118,N],[13,"BGRA8","","",118,N],[13,"RGBAF32","","",118,N],[13,"RG8","","",118,N],[13,"RGBAI32","","",118,N],[6,"WorldSize","","",N,N],[6,"DeviceIntPoint","","",N,N],[4,"MixBlendMode","","",N,N],[13,"Normal","","",119,N],[13,"Multiply","","",119,N],[13,"Screen","","",119,N],[13,"Overlay","","",119,N],[13,"Darken","","",119,N],[13,"Lighten","","",119,N],[13,"ColorDodge","","",119,N],[13,"ColorBurn","","",119,N],[13,"HardLight","","",119,N],[13,"SoftLight","","",119,N],[13,"Difference","","",119,N],[13,"Exclusion","","",119,N],[13,"Hue","","",119,N],[13,"Saturation","","",119,N],[13,"Color","","",119,N],[13,"Luminosity","","",119,N],[3,"Gradient","","",N,N],[12,"start_point","","",120,N],[12,"end_point","","",120,N],[12,"extend_mode","","",120,N],[6,"WorldPoint","","",N,N],[3,"BinaryRecorder","webrender","",N,N],[3,"ProgramBinary","","",N,N],[3,"ProgramCache","","",N,N],[3,"ProgramSources","","",N,N],[3,"CpuProfile","","",N,N],[12,"frame_id","","",121,N],[12,"backend_time_ns","","",121,N],[12,"composite_time_ns","","",121,N],[12,"draw_calls","","",121,N],[3,"DebugFlags","","",N,N],[3,"ExternalImage","","The data that an external client should provide about an external image. The timestamp is used to test if the renderer should upload new texture data this frame. For instance, if providing video frames, the application could call wr.render() whenever a new video frame is ready. If the callback increments the returned timestamp for a given image, the renderer will know to re-upload the image data to the GPU. Note that the UV coords are supplied in texel-space!",N,N],[12,"uv","","",122,N],[12,"source","","",122,N],[3,"GpuProfile","","",N,N],[12,"frame_id","","",123,N],[12,"paint_time_ns","","",123,N],[3,"GraphicsApiInfo","","",N,N],[12,"kind","","",124,N],[12,"renderer","","",124,N],[12,"version","","",124,N],[3,"PipelineInfo","","",N,N],[12,"epochs","","",125,N],[12,"removed_pipelines","","",125,N],[3,"Renderer","","The renderer is responsible for submitting to the GPU the work prepared by the RenderBackend.",N,N],[12,"device","","",126,N],[12,"gpu_glyph_renderer","","",126,N],[12,"gpu_profile","","",126,N],[12,"renderer_errors","","",126,N],[3,"RendererOptions","","",N,N],[12,"device_pixel_ratio","","",127,N],[12,"resource_override_path","","",127,N],[12,"enable_aa","","",127,N],[12,"enable_dithering","","",127,N],[12,"max_recorded_profiles","","",127,N],[12,"enable_scrollbars","","",127,N],[12,"precache_shaders","","",127,N],[12,"renderer_kind","","",127,N],[12,"enable_subpixel_aa","","",127,N],[12,"clear_color","","",127,N],[12,"enable_clear_scissor","","",127,N],[12,"max_texture_size","","",127,N],[12,"scatter_gpu_cache_updates","","",127,N],[12,"upload_method","","",127,N],[12,"workers","","",127,N],[12,"blob_image_renderer","","",127,N],[12,"recorder","","",127,N],[12,"thread_listener","","",127,N],[12,"enable_render_on_scroll","","",127,N],[12,"cached_programs","","",127,N],[12,"debug_flags","","",127,N],[12,"renderer_id","","",127,N],[12,"disable_dual_source_blending","","",127,N],[12,"scene_builder_hooks","","",127,N],[12,"sampler","","",127,N],[12,"chase_primitive","","",127,N],[3,"RendererStats","","",N,N],[12,"total_draw_calls","","",128,N],[12,"alpha_target_count","","",128,N],[12,"color_target_count","","",128,N],[4,"ChasePrimitive","","",N,N],[13,"Nothing","","",129,N],[13,"LocalRect","","",129,N],[4,"RendererKind","","",N,N],[13,"Native","","",130,N],[13,"OSMesa","","",130,N],[4,"ExternalImageSource","","",N,N],[13,"RawData","","",131,N],[13,"NativeTexture","","",131,N],[13,"Invalid","","",131,N],[4,"GraphicsApi","","",N,N],[13,"OpenGL","","",132,N],[5,"intersect_for_tile","","",N,[[["deviceuintrect"],["deviceuintsize"],["tilesize"],["tileoffset"]],["option",["deviceuintrect"]]]],[11,"clone","","",133,[[["self"]],["programsources"]]],[11,"eq","","",133,[[["self"],["programsources"]],["bool"]]],[11,"ne","","",133,[[["self"],["programsources"]],["bool"]]],[11,"hash","","",133,N],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"new","","",134,[[["option",["box"]]],["rc"]]],[11,"clone","","",129,[[["self"]],["chaseprimitive"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"eq","","",129,[[["self"],["chaseprimitive"]],["bool"]]],[11,"ne","","",129,[[["self"],["chaseprimitive"]],["bool"]]],[11,"default","","",129,[[],["self"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"new","","",135,[[["pathbuf"]],["binaryrecorder"]]],[11,"write_msg","","",135,[[["self"],["u32"],["apimsg"]]]],[11,"write_payload","","",135,N],[11,"eq","","",136,[[["self"],["debugflags"]],["bool"]]],[11,"ne","","",136,[[["self"],["debugflags"]],["bool"]]],[11,"clone","","",136,[[["self"]],["debugflags"]]],[11,"partial_cmp","","",136,[[["self"],["debugflags"]],["option",["ordering"]]]],[11,"lt","","",136,[[["self"],["debugflags"]],["bool"]]],[11,"le","","",136,[[["self"],["debugflags"]],["bool"]]],[11,"gt","","",136,[[["self"],["debugflags"]],["bool"]]],[11,"ge","","",136,[[["self"],["debugflags"]],["bool"]]],[11,"cmp","","",136,[[["self"],["debugflags"]],["ordering"]]],[11,"hash","","",136,N],[11,"default","","",136,[[],["debugflags"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[18,"PROFILER_DBG","","",136,N],[18,"RENDER_TARGET_DBG","","",136,N],[18,"TEXTURE_CACHE_DBG","","",136,N],[18,"GPU_TIME_QUERIES","","",136,N],[18,"GPU_SAMPLE_QUERIES","","",136,N],[18,"DISABLE_BATCHING","","",136,N],[18,"EPOCHS","","",136,N],[18,"COMPACT_PROFILER","","",136,N],[18,"ECHO_DRIVER_MESSAGES","","",136,N],[18,"NEW_FRAME_INDICATOR","","",136,N],[18,"NEW_SCENE_INDICATOR","","",136,N],[11,"empty","","Returns an empty set of flags.",136,[[],["debugflags"]]],[11,"all","","Returns the set containing all flags.",136,[[],["debugflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",136,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",136,[[["u32"]],["option",["debugflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",136,[[["u32"]],["debugflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",136,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,[[["self"],["debugflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,[[["self"],["debugflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",136,[[["self"],["debugflags"]]]],[11,"remove","","Removes the specified flags in-place.",136,[[["self"],["debugflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",136,[[["self"],["debugflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",136,[[["self"],["debugflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",136,[[["self"],["debugflags"]],["debugflags"]]],[11,"bitor_assign","","Adds the set of flags.",136,[[["self"],["debugflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,[[["self"],["debugflags"]],["debugflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",136,[[["self"],["debugflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",136,[[["self"],["debugflags"]],["debugflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",136,[[["self"],["debugflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",136,[[["self"],["debugflags"]],["debugflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",136,[[["self"],["debugflags"]]]],[11,"not","","Returns the complement of this set of flags.",136,[[["self"]],["debugflags"]]],[11,"extend","","",136,[[["self"],["t"]]]],[11,"from_iter","","",136,[[["t"]],["debugflags"]]],[11,"clone","","",132,[[["self"]],["graphicsapi"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"eq","","",132,[[["self"],["graphicsapi"]],["bool"]]],[11,"clone","","",124,[[["self"]],["graphicsapiinfo"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"clone","","",130,[[["self"]],["rendererkind"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"new","","Initializes webrender and creates a `Renderer` and `RenderApiSender`.",126,[[["rc",["gl"]],["box",["rendernotifier"]],["rendereroptions"]],["result",["renderererror"]]]],[11,"get_max_texture_size","","",126,[[["self"]],["u32"]]],[11,"get_graphics_api_info","","",126,[[["self"]],["graphicsapiinfo"]]],[11,"current_epoch","","Returns the Epoch of the current frame in a pipeline.",126,[[["self"],["pipelineid"]],["option",["epoch"]]]],[11,"flush_pipeline_info","","",126,[[["self"]],["pipelineinfo"]]],[11,"update_program_cache","","",126,[[["self"],["rc",["programcache"]]]]],[11,"update","","Processes the result queue.",126,[[["self"]]]],[11,"set_external_image_handler","","Set a callback for handling external images.",126,[[["self"],["box",["externalimagehandler"]]]]],[11,"set_output_image_handler","","Set a callback for handling external outputs.",126,[[["self"],["box",["outputimagehandler"]]]]],[11,"get_frame_profiles","","Retrieve (and clear) the current list of recorded frame profiles.",126,N],[11,"render","","Renders the current frame.",126,[[["self"],["deviceuintsize"]],["result",["rendererstats","vec"]]]],[11,"get_debug_flags","","",126,[[["self"]],["debugflags"]]],[11,"set_debug_flags","","",126,[[["self"],["debugflags"]]]],[11,"set_debug_flag","","",126,[[["self"],["debugflags"],["bool"]]]],[11,"toggle_debug_flags","","",126,[[["self"],["debugflags"]]]],[11,"save_cpu_profile","","",126,[[["self"],["str"]]]],[11,"read_pixels_into","","Pass-through to `Device::read_pixels_into`, used by Gecko's WR bindings.",126,N],[11,"read_pixels_rgba8","","",126,[[["self"],["deviceuintrect"]],["vec",["u8"]]]],[11,"read_gpu_cache","","",126,N],[11,"deinit","","",126,[[["self"]]]],[11,"default","","",127,[[],["self"]]],[11,"empty","","",128,[[],["self"]]],[11,"default","","",125,[[],["pipelineinfo"]]],[7,"WEBRENDER_RECORDING_HEADER","","",N,N],[17,"MAX_VERTEX_TEXTURE_WIDTH","","",N,N],[8,"ApiRecordingReceiver","","",N,N],[10,"write_msg","","",137,[[["self"],["u32"],["apimsg"]]]],[10,"write_payload","","",137,N],[8,"ProgramCacheObserver","","The interfaces that an application can implement to handle ProgramCache update",N,N],[10,"notify_binary_added","","",138,[[["self"],["arc"]]]],[10,"notify_program_binary_failed","","",138,[[["self"],["arc"]]]],[8,"AsyncPropertySampler","","Allows callers to hook into the main render_backend loop and provide additional frame ops for generate_frame transactions. These functions are all called from the render backend thread.",N,N],[10,"register","","This is called exactly once, when the render backend thread is started and before it processes anything.",139,[[["self"]]]],[10,"sample","","This is called for each transaction with the generate_frame flag set (i.e. that will trigger a render). The list of frame messages returned are processed as though they were part of the original transaction.",139,[[["self"]],["vec",["framemsg"]]]],[10,"deregister","","This is called exactly once, when the render backend thread is about to terminate.",139,[[["self"]]]],[8,"OutputImageHandler","","Allows callers to receive a texture with the contents of a specific pipeline copied to it. Lock should return the native texture handle and the size of the texture. Unlock will only be called if the lock() call succeeds, when WR has issued the GL commands to copy the output to the texture handle.",N,N],[10,"lock","","",140,[[["self"],["pipelineid"]],["option"]]],[10,"unlock","","",140,[[["self"],["pipelineid"]]]],[8,"ExternalImageHandler","","The interfaces that an application can implement to support providing external image buffers. When the the application passes an external image to WR, it should kepp that external image life time. People could check the epoch id in RenderNotifier at the client side to make sure that the external image is not used by WR. Then, do the clean up for that external image.",N,N],[10,"lock","","Lock the external image. Then, WR could start to read the image content. The WR client should not change the image content until the unlock() call.",141,[[["self"],["externalimageid"],["u8"]],["externalimage"]]],[10,"unlock","","Unlock the external image. The WR should not read the image content after this call.",141,[[["self"],["externalimageid"],["u8"]]]],[8,"SceneBuilderHooks","","Allows callers to hook in at certain points of the async scene build. These functions are all called from the scene builder thread.",N,N],[10,"register","","This is called exactly once, when the scene builder thread is started and before it processes anything.",142,[[["self"]]]],[10,"pre_scene_swap","","This is called before each scene swap occurs.",142,[[["self"],["u64"]]]],[10,"post_scene_swap","","This is called after each scene swap occurs. The PipelineInfo contains the updated epochs and pipelines removed in the new scene compared to the old scene.",142,[[["self"],["pipelineinfo"],["u64"]]]],[10,"post_resource_update","","This is called after a resource update operation on the scene builder thread, in the case where resource updates were applied without a scene build.",142,[[["self"]]]],[10,"poke","","This is a generic callback which provides an opportunity to run code on the scene builder thread. This is called as part of the main message loop of the scene builder thread, but outside of any specific message handler.",142,[[["self"]]]],[10,"deregister","","This is called exactly once, when the scene builder thread is about to terminate.",142,[[["self"]]]],[8,"ThreadListener","","",N,N],[10,"thread_started","","",143,[[["self"],["str"]]]],[10,"thread_stopped","","",143,[[["self"],["str"]]]],[11,"to_data","webrender::api::channel","Convert the payload to a raw byte vector, in order for it to be efficiently shared via shmem, for example.",0,[[["self"]],["vec",["u8"]]]],[11,"from_data","","Deserializes the given payload from a raw byte vector.",0,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"eq","webrender::api","",17,[[["self"],["imagekey"]],["bool"]]],[11,"ne","","",17,[[["self"],["imagekey"]],["bool"]]],[11,"eq","","",144,[[["self"],["clearcache"]],["bool"]]],[11,"ne","","",144,[[["self"],["clearcache"]],["bool"]]],[11,"eq","","",22,[[["self"],["syntheticitalics"]],["bool"]]],[11,"ne","","",22,[[["self"],["syntheticitalics"]],["bool"]]],[11,"eq","","",84,[[["self"],["borderdisplayitem"]],["bool"]]],[11,"ne","","",84,[[["self"],["borderdisplayitem"]],["bool"]]],[11,"eq","","",70,[[["self"],["glyphinstance"]],["bool"]]],[11,"ne","","",70,[[["self"],["glyphinstance"]],["bool"]]],[11,"eq","","",3,[[["self"],["textdisplayitem"]],["bool"]]],[11,"ne","","",3,[[["self"],["textdisplayitem"]],["bool"]]],[11,"eq","","",59,[[["self"],["lineorientation"]],["bool"]]],[11,"eq","","",29,[[["self"],["alphatype"]],["bool"]]],[11,"eq","","",89,[[["self"],["clipid"]],["bool"]]],[11,"ne","","",89,[[["self"],["clipid"]],["bool"]]],[11,"eq","","",46,[[["self"],["boxshadowclipmode"]],["bool"]]],[11,"eq","","",145,[[["self"],["picturepixel"]],["bool"]]],[11,"eq","","",32,[[["self"],["imagedescriptor"]],["bool"]]],[11,"ne","","",32,[[["self"],["imagedescriptor"]],["bool"]]],[11,"eq","","",86,[[["self"],["imagedisplayitem"]],["bool"]]],[11,"ne","","",86,[[["self"],["imagedisplayitem"]],["bool"]]],[11,"eq","","",74,[[["self"],["texturetarget"]],["bool"]]],[11,"eq","","",36,[[["self"],["referenceframe"]],["bool"]]],[11,"ne","","",36,[[["self"],["referenceframe"]],["bool"]]],[11,"eq","","",80,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"ne","","",80,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"eq","","",6,[[["self"],["idnamespace"]],["bool"]]],[11,"ne","","",6,[[["self"],["idnamespace"]],["bool"]]],[11,"eq","","",146,[[["self"],["capturebits"]],["bool"]]],[11,"ne","","",146,[[["self"],["capturebits"]],["bool"]]],[11,"eq","","",69,[[["self"],["iframedisplayitem"]],["bool"]]],[11,"ne","","",69,[[["self"],["iframedisplayitem"]],["bool"]]],[11,"eq","","",53,[[["self"],["glyphrasterspace"]],["bool"]]],[11,"ne","","",53,[[["self"],["glyphrasterspace"]],["bool"]]],[11,"eq","","",147,[[["self"],["tiles"]],["bool"]]],[11,"eq","","",119,[[["self"],["mixblendmode"]],["bool"]]],[11,"eq","","",81,[[["self"],["scrollframedisplayitem"]],["bool"]]],[11,"ne","","",81,[[["self"],["scrollframedisplayitem"]],["bool"]]],[11,"eq","","",76,[[["self"],["rectangledisplayitem"]],["bool"]]],[11,"ne","","",76,[[["self"],["rectangledisplayitem"]],["bool"]]],[11,"eq","","",73,[[["self"],["radialgradientdisplayitem"]],["bool"]]],[11,"ne","","",73,[[["self"],["radialgradientdisplayitem"]],["bool"]]],[11,"eq","","",39,[[["self"],["glyphoptions"]],["bool"]]],[11,"ne","","",39,[[["self"],["glyphoptions"]],["bool"]]],[11,"eq","","",20,[[["self"],["externalimagetype"]],["bool"]]],[11,"ne","","",20,[[["self"],["externalimagetype"]],["bool"]]],[11,"eq","","",19,[[["self"],["borderwidths"]],["bool"]]],[11,"ne","","",19,[[["self"],["borderwidths"]],["bool"]]],[11,"eq","","",101,[[["self"],["imagemask"]],["bool"]]],[11,"ne","","",101,[[["self"],["imagemask"]],["bool"]]],[11,"eq","","",102,[[["self"],["fontkey"]],["bool"]]],[11,"ne","","",102,[[["self"],["fontkey"]],["bool"]]],[11,"eq","","",8,[[["self"],["borderstyle"]],["bool"]]],[11,"eq","","",115,[[["self"],["epoch"]],["bool"]]],[11,"ne","","",115,[[["self"],["epoch"]],["bool"]]],[11,"eq","","",116,[[["self"],["fontrendermode"]],["bool"]]],[11,"eq","","",42,[[["self"],["colorf"]],["bool"]]],[11,"ne","","",42,[[["self"],["colorf"]],["bool"]]],[11,"eq","","",63,[[["self"],["stickyoffsetbounds"]],["bool"]]],[11,"ne","","",63,[[["self"],["stickyoffsetbounds"]],["bool"]]],[11,"eq","","",148,[[["self"],["itemrange"]],["bool"]]],[11,"ne","","",148,[[["self"],["itemrange"]],["bool"]]],[11,"eq","","",21,[[["self"],["clipchainitem"]],["bool"]]],[11,"ne","","",21,[[["self"],["clipchainitem"]],["bool"]]],[11,"eq","","",94,[[["self"],["repeatmode"]],["bool"]]],[11,"eq","","",5,[[["self"],["ninepatchbordersource"]],["bool"]]],[11,"ne","","",5,[[["self"],["ninepatchbordersource"]],["bool"]]],[11,"eq","","",62,[[["self"],["propertybindingkey"]],["bool"]]],[11,"ne","","",62,[[["self"],["propertybindingkey"]],["bool"]]],[11,"eq","","",149,[[["self"],["devicepixel"]],["bool"]]],[11,"eq","","",50,[[["self"],["radialgradient"]],["bool"]]],[11,"ne","","",50,[[["self"],["radialgradient"]],["bool"]]],[11,"eq","","",66,[[["self"],["linestyle"]],["bool"]]],[11,"eq","","",150,[[["self"],["propertybindingid"]],["bool"]]],[11,"ne","","",150,[[["self"],["propertybindingid"]],["bool"]]],[11,"eq","","",35,[[["self"],["yuvimagedisplayitem"]],["bool"]]],[11,"ne","","",35,[[["self"],["yuvimagedisplayitem"]],["bool"]]],[11,"eq","","",98,[[["self"],["stackingcontext"]],["bool"]]],[11,"ne","","",98,[[["self"],["stackingcontext"]],["bool"]]],[11,"eq","","",13,[[["self"],["extendmode"]],["bool"]]],[11,"eq","","",14,[[["self"],["hittestitem"]],["bool"]]],[11,"ne","","",14,[[["self"],["hittestitem"]],["bool"]]],[11,"eq","","",99,[[["self"],["genericdisplayitem"]],["bool"]]],[11,"ne","","",99,[[["self"],["genericdisplayitem"]],["bool"]]],[11,"eq","","",61,[[["self"],["blobimagerequest"]],["bool"]]],[11,"ne","","",61,[[["self"],["blobimagerequest"]],["bool"]]],[11,"eq","","",11,[[["self"],["specificdisplayitem"]],["bool"]]],[11,"ne","","",11,[[["self"],["specificdisplayitem"]],["bool"]]],[11,"eq","","",106,[[["self"],["imagerendering"]],["bool"]]],[11,"eq","","",95,[[["self"],["fontinstancekey"]],["bool"]]],[11,"ne","","",95,[[["self"],["fontinstancekey"]],["bool"]]],[11,"eq","","",9,[[["self"],["filterop"]],["bool"]]],[11,"ne","","",9,[[["self"],["filterop"]],["bool"]]],[11,"eq","","",111,[[["self"],["borderdetails"]],["bool"]]],[11,"ne","","",111,[[["self"],["borderdetails"]],["bool"]]],[11,"eq","","",120,[[["self"],["gradient"]],["bool"]]],[11,"ne","","",120,[[["self"],["gradient"]],["bool"]]],[11,"eq","","",45,[[["self"],["boxshadowdisplayitem"]],["bool"]]],[11,"ne","","",45,[[["self"],["boxshadowdisplayitem"]],["bool"]]],[11,"eq","","",60,[[["self"],["stickyframedisplayitem"]],["bool"]]],[11,"ne","","",60,[[["self"],["stickyframedisplayitem"]],["bool"]]],[11,"eq","","",10,[[["self"],["borderradius"]],["bool"]]],[11,"ne","","",10,[[["self"],["borderradius"]],["bool"]]],[11,"eq","","",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"ne","","",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"eq","","",152,[[["self"],["hittestflags"]],["bool"]]],[11,"ne","","",152,[[["self"],["hittestflags"]],["bool"]]],[11,"eq","","",83,[[["self"],["fonthinting"]],["bool"]]],[11,"eq","","",27,[[["self"],["externalimagedata"]],["bool"]]],[11,"ne","","",27,[[["self"],["externalimagedata"]],["bool"]]],[11,"eq","","",25,[[["self"],["yuvcolorspace"]],["bool"]]],[11,"eq","","",118,[[["self"],["imageformat"]],["bool"]]],[11,"eq","","",44,[[["self"],["clipmode"]],["bool"]]],[11,"eq","","",40,[[["self"],["propertybinding"]],["bool"]]],[11,"ne","","",40,[[["self"],["propertybinding"]],["bool"]]],[11,"eq","","",65,[[["self"],["normalborder"]],["bool"]]],[11,"ne","","",65,[[["self"],["normalborder"]],["bool"]]],[11,"eq","","",104,[[["self"],["localclip"]],["bool"]]],[11,"ne","","",104,[[["self"],["localclip"]],["bool"]]],[11,"eq","","",153,[[["self"],["layoutpixel"]],["bool"]]],[11,"eq","","",117,[[["self"],["pushreferenceframedisplaylistitem"]],["bool"]]],[11,"ne","","",117,[[["self"],["pushreferenceframedisplaylistitem"]],["bool"]]],[11,"eq","","",85,[[["self"],["borderside"]],["bool"]]],[11,"ne","","",85,[[["self"],["borderside"]],["bool"]]],[11,"eq","","",108,[[["self"],["complexclipregion"]],["bool"]]],[11,"ne","","",108,[[["self"],["complexclipregion"]],["bool"]]],[11,"eq","","",107,[[["self"],["clipandscrollinfo"]],["bool"]]],[11,"ne","","",107,[[["self"],["clipandscrollinfo"]],["bool"]]],[11,"eq","","",26,[[["self"],["pushstackingcontextdisplayitem"]],["bool"]]],[11,"ne","","",26,[[["self"],["pushstackingcontextdisplayitem"]],["bool"]]],[11,"eq","","",38,[[["self"],["fontvariation"]],["bool"]]],[11,"eq","","",79,[[["self"],["transformstyle"]],["bool"]]],[11,"eq","","",87,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"ne","","",87,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"eq","","",7,[[["self"],["fontlcdfilter"]],["bool"]]],[11,"eq","","",71,[[["self"],["externalscrollid"]],["bool"]]],[11,"ne","","",71,[[["self"],["externalscrollid"]],["bool"]]],[11,"eq","","",72,[[["self"],["primitiveinfo"]],["bool"]]],[11,"ne","","",72,[[["self"],["primitiveinfo"]],["bool"]]],[11,"eq","","",90,[[["self"],["yuvformat"]],["bool"]]],[11,"eq","","",30,[[["self"],["shadow"]],["bool"]]],[11,"ne","","",30,[[["self"],["shadow"]],["bool"]]],[11,"eq","","",24,[[["self"],["clipdisplayitem"]],["bool"]]],[11,"ne","","",24,[[["self"],["clipdisplayitem"]],["bool"]]],[11,"eq","","",34,[[["self"],["gradientstop"]],["bool"]]],[11,"ne","","",34,[[["self"],["gradientstop"]],["bool"]]],[11,"eq","","",67,[[["self"],["pipelineid"]],["bool"]]],[11,"ne","","",67,[[["self"],["pipelineid"]],["bool"]]],[11,"eq","","",33,[[["self"],["yuvdata"]],["bool"]]],[11,"ne","","",33,[[["self"],["yuvdata"]],["bool"]]],[11,"eq","","",113,[[["self"],["coloru"]],["bool"]]],[11,"ne","","",113,[[["self"],["coloru"]],["bool"]]],[11,"eq","","",28,[[["self"],["clipchainid"]],["bool"]]],[11,"ne","","",28,[[["self"],["clipchainid"]],["bool"]]],[11,"eq","","",55,[[["self"],["scrollsensitivity"]],["bool"]]],[11,"eq","","",56,[[["self"],["documentid"]],["bool"]]],[11,"ne","","",56,[[["self"],["documentid"]],["bool"]]],[11,"eq","","",154,[[["self"],["worldpixel"]],["bool"]]],[11,"eq","","",112,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"ne","","",112,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"eq","","",52,[[["self"],["ninepatchborder"]],["bool"]]],[11,"ne","","",52,[[["self"],["ninepatchborder"]],["bool"]]],[11,"eq","","",51,[[["self"],["externalimageid"]],["bool"]]],[11,"ne","","",51,[[["self"],["externalimageid"]],["bool"]]],[11,"eq","","",103,[[["self"],["borderradiuskind"]],["bool"]]],[11,"eq","","",155,[[["self"],["scrolllayerpixel"]],["bool"]]],[11,"eq","","",82,[[["self"],["linedisplayitem"]],["bool"]]],[11,"ne","","",82,[[["self"],["linedisplayitem"]],["bool"]]],[11,"eq","","",114,[[["self"],["gradientdisplayitem"]],["bool"]]],[11,"ne","","",114,[[["self"],["gradientdisplayitem"]],["bool"]]],[11,"sub_assign","","Disables all flags enabled in the set.",146,N],[11,"sub_assign","","Disables all flags enabled in the set.",152,N],[11,"sub_assign","","Disables all flags enabled in the set.",151,N],[11,"sub_assign","","Disables all flags enabled in the set.",144,N],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",151,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",144,[[["self"],["clearcache"]],["clearcache"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",146,[[["self"],["capturebits"]],["capturebits"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",152,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"serialize","","",40,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",32,[[["self"],["__s"]],["result"]]],[11,"serialize","","",92,[[["self"],["__s"]],["result"]]],[11,"serialize","","",79,[[["self"],["__s"]],["result"]]],[11,"serialize","","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","","",115,[[["self"],["__s"]],["result"]]],[11,"serialize","","",37,[[["self"],["__s"]],["result"]]],[11,"serialize","","",117,[[["self"],["__s"]],["result"]]],[11,"serialize","","",39,[[["self"],["__s"]],["result"]]],[11,"serialize","","",81,[[["self"],["__s"]],["result"]]],[11,"serialize","","",35,[[["self"],["__s"]],["result"]]],[11,"serialize","","",95,[[["self"],["__s"]],["result"]]],[11,"serialize","","",76,[[["self"],["__s"]],["result"]]],[11,"serialize","","",41,[[["self"],["__s"]],["result"]]],[11,"serialize","","",80,[[["self"],["__s"]],["result"]]],[11,"serialize","","",27,[[["self"],["__s"]],["result"]]],[11,"serialize","","",73,[[["self"],["__s"]],["result"]]],[11,"serialize","","",46,[[["self"],["__s"]],["result"]]],[11,"serialize","","",97,[[["self"],["__s"]],["result"]]],[11,"serialize","","",100,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",72,[[["self"],["__s"]],["result"]]],[11,"serialize","","",44,[[["self"],["__s"]],["result"]]],[11,"serialize","","",66,[[["self"],["__s"]],["result"]]],[11,"serialize","","",67,[[["self"],["__s"]],["result"]]],[11,"serialize","","",68,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",78,[[["self"],["__s"]],["result"]]],[11,"serialize","","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","","",152,[[["self"],["__s"]],["result"]]],[11,"serialize","","",55,[[["self"],["__s"]],["result"]]],[11,"serialize","","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","","",33,[[["self"],["__s"]],["result"]]],[11,"serialize","","",148,[[["self"],["__s"]],["result"]]],[11,"serialize","","",71,[[["self"],["__s"]],["result"]]],[11,"serialize","","",42,[[["self"],["__s"]],["result"]]],[11,"serialize","","",29,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",118,[[["self"],["__s"]],["result"]]],[11,"serialize","","",50,[[["self"],["__s"]],["result"]]],[11,"serialize","","",114,[[["self"],["__s"]],["result"]]],[11,"serialize","","",101,[[["self"],["__s"]],["result"]]],[11,"serialize","","",104,[[["self"],["__s"]],["result"]]],[11,"serialize","","",58,[[["self"],["__s"]],["result"]]],[11,"serialize","","",18,[[["self"],["__s"]],["result"]]],[11,"serialize","","",99,[[["self"],["__s"]],["result"]]],[11,"serialize","","",53,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",120,[[["self"],["__s"]],["result"]]],[11,"serialize","","",57,[[["self"],["__s"]],["result"]]],[11,"serialize","","",113,[[["self"],["__s"]],["result"]]],[11,"serialize","","",63,[[["self"],["__s"]],["result"]]],[11,"serialize","","",86,[[["self"],["__s"]],["result"]]],[11,"serialize","","",156,[[["self"],["__s"]],["result"]]],[11,"serialize","","",64,[[["self"],["__s"]],["result"]]],[11,"serialize","","",38,[[["self"],["__s"]],["result"]]],[11,"serialize","","",150,[[["self"],["__s"]],["result"]]],[11,"serialize","","",87,[[["self"],["__s"]],["result"]]],[11,"serialize","","",70,[[["self"],["__s"]],["result"]]],[11,"serialize","","",157,[[["self"],["__s"]],["result"]]],[11,"serialize","","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",158,[[["self"],["__s"]],["result"]]],[11,"serialize","","",59,[[["self"],["__s"]],["result"]]],[11,"serialize","","",60,[[["self"],["__s"]],["result"]]],[11,"serialize","","",107,[[["self"],["__s"]],["result"]]],[11,"serialize","","",65,[[["self"],["__s"]],["result"]]],[11,"serialize","","",109,[[["self"],["__s"]],["result"]]],[11,"serialize","","",85,[[["self"],["__s"]],["result"]]],[11,"serialize","","",112,[[["self"],["__s"]],["result"]]],[11,"serialize","webrender::api::channel","",159,[[["self"],["s"]],["result"]]],[11,"serialize","webrender::api","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","","",22,[[["self"],["__s"]],["result"]]],[11,"serialize","","",36,[[["self"],["__s"]],["result"]]],[11,"serialize","","",77,[[["self"],["__s"]],["result"]]],[11,"serialize","","",90,[[["self"],["__s"]],["result"]]],[11,"serialize","","",62,[[["self"],["__s"]],["result"]]],[11,"serialize","","",111,[[["self"],["__s"]],["result"]]],[11,"serialize","","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","","",45,[[["self"],["__s"]],["result"]]],[11,"serialize","","",83,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",116,[[["self"],["__s"]],["result"]]],[11,"serialize","","",151,[[["self"],["__s"]],["result"]]],[11,"serialize","","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","","",146,[[["self"],["__s"]],["result"]]],[11,"serialize","","",74,[[["self"],["__s"]],["result"]]],[11,"serialize","","",160,[[["self"],["__s"]],["result"]]],[11,"serialize","","",98,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","","",43,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",69,[[["self"],["__s"]],["result"]]],[11,"serialize","","",108,[[["self"],["__s"]],["result"]]],[11,"serialize","","",19,[[["self"],["__s"]],["result"]]],[11,"serialize","","",28,[[["self"],["__s"]],["result"]]],[11,"serialize","","",94,[[["self"],["__s"]],["result"]]],[11,"serialize","","",102,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",153,[[["self"],["__s"]],["result"]]],[11,"serialize","webrender::api::channel","",161,[[["self"],["s"]],["result"]]],[11,"serialize","webrender::api","",49,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",144,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",75,[[["self"],["__s"]],["result"]]],[11,"serialize","","",52,[[["self"],["__s"]],["result"]]],[11,"serialize","","",119,[[["self"],["__s"]],["result"]]],[11,"serialize","","",103,[[["self"],["__s"]],["result"]]],[11,"serialize","","",106,[[["self"],["__s"]],["result"]]],[11,"serialize","","",84,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",105,[[["self"],["__s"]],["result"]]],[11,"serialize","","",47,[[["self"],["__s"]],["result"]]],[11,"serialize","","",89,[[["self"],["__s"]],["result"]]],[11,"serialize","","",31,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",82,[[["self"],["__s"]],["result"]]],[11,"hash","","",39,N],[11,"hash","","",67,N],[11,"hash","","",155,N],[11,"hash","","",46,N],[11,"hash","","",112,N],[11,"hash","","",90,N],[11,"hash","","",13,N],[11,"hash","","",28,N],[11,"hash","","",119,N],[11,"hash","","",116,N],[11,"hash","","",102,N],[11,"hash","","",147,N],[11,"hash","","",56,N],[11,"hash","","",107,N],[11,"hash","","",38,N],[11,"hash","","",83,N],[11,"hash","","",22,N],[11,"hash","","",148,N],[11,"hash","","",87,N],[11,"hash","","",25,N],[11,"hash","","",151,N],[11,"hash","","",115,N],[11,"hash","","",74,N],[11,"hash","","",71,N],[11,"hash","","",27,N],[11,"hash","","",20,N],[11,"hash","","",89,N],[11,"hash","","",113,N],[11,"hash","","",144,N],[11,"hash","","",51,N],[11,"hash","","",145,N],[11,"hash","","",79,N],[11,"hash","","",95,N],[11,"hash","","",17,N],[11,"hash","","",8,N],[11,"hash","","",150,N],[11,"hash","","",6,N],[11,"hash","","",61,N],[11,"hash","","",152,N],[11,"hash","","",153,N],[11,"hash","","",80,N],[11,"hash","","",106,N],[11,"hash","","",118,N],[11,"hash","","",33,N],[11,"hash","","",146,N],[11,"hash","","",149,N],[11,"hash","","",7,N],[11,"hash","","",154,N],[11,"hash","","",29,N],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",146,N],[11,"bitand_assign","","Disables all flags disabled in the set.",151,N],[11,"bitand_assign","","Disables all flags disabled in the set.",144,N],[11,"bitand_assign","","Disables all flags disabled in the set.",152,N],[11,"drop","","",162,N],[11,"bitxor_assign","","Toggles the set of flags.",144,N],[11,"bitxor_assign","","Toggles the set of flags.",152,N],[11,"bitxor_assign","","Toggles the set of flags.",146,N],[11,"bitxor_assign","","Toggles the set of flags.",151,N],[11,"not","","",44,[[["self"]],["clipmode"]]],[11,"not","","Returns the complement of this set of flags.",152,[[["self"]],["hittestflags"]]],[11,"not","","Returns the complement of this set of flags.",146,[[["self"]],["capturebits"]]],[11,"not","","Returns the complement of this set of flags.",144,[[["self"]],["clearcache"]]],[11,"not","","Returns the complement of this set of flags.",151,[[["self"]],["fontinstanceflags"]]],[11,"bitor_assign","","Adds the set of flags.",152,N],[11,"bitor_assign","","Adds the set of flags.",151,N],[11,"bitor_assign","","Adds the set of flags.",144,N],[11,"bitor_assign","","Adds the set of flags.",146,N],[11,"clone","","",26,[[["self"]],["pushstackingcontextdisplayitem"]]],[11,"clone","","",3,[[["self"]],["textdisplayitem"]]],[11,"clone","","",158,[[["self"]],["zoomfactor"]]],[11,"clone","","",12,[[["self"]],["addfont"]]],[11,"clone","","",104,[[["self"]],["localclip"]]],[11,"clone","","",32,[[["self"]],["imagedescriptor"]]],[11,"clone","","",144,[[["self"]],["clearcache"]]],[11,"clone","","",76,[[["self"]],["rectangledisplayitem"]]],[11,"clone","","",11,[[["self"]],["specificdisplayitem"]]],[11,"clone","","",35,[[["self"]],["yuvimagedisplayitem"]]],[11,"clone","","",97,[[["self"]],["imagedata"]]],[11,"clone","","",31,[[["self"]],["addfontinstance"]]],[11,"clone","","",27,[[["self"]],["externalimagedata"]]],[11,"clone","","",119,[[["self"]],["mixblendmode"]]],[11,"clone","","",102,[[["self"]],["fontkey"]]],[11,"clone","","",108,[[["self"]],["complexclipregion"]]],[11,"clone","","",115,[[["self"]],["epoch"]]],[11,"clone","","",44,[[["self"]],["clipmode"]]],[11,"clone","","",73,[[["self"]],["radialgradientdisplayitem"]]],[11,"clone","","",163,[[["self"]],["savestate"]]],[11,"clone","","",117,[[["self"]],["pushreferenceframedisplaylistitem"]]],[11,"clone","","",13,[[["self"]],["extendmode"]]],[11,"clone","","",109,[[["self"]],["apimsg"]]],[11,"clone","","",6,[[["self"]],["idnamespace"]]],[11,"clone","","",49,[[["self"]],["addimage"]]],[11,"clone","","",156,[[["self"]],["builtdisplaylistdescriptor"]]],[11,"clone","","",55,[[["self"]],["scrollsensitivity"]]],[11,"clone","","",24,[[["self"]],["clipdisplayitem"]]],[11,"clone","","",53,[[["self"]],["glyphrasterspace"]]],[11,"clone","","",10,[[["self"]],["borderradius"]]],[11,"clone","","",116,[[["self"]],["fontrendermode"]]],[11,"clone","","",83,[[["self"]],["fonthinting"]]],[11,"clone","","",146,[[["self"]],["capturebits"]]],[11,"clone","","",107,[[["self"]],["clipandscrollinfo"]]],[11,"clone","","",149,[[["self"]],["devicepixel"]]],[11,"clone","","",154,[[["self"]],["worldpixel"]]],[11,"clone","","",84,[[["self"]],["borderdisplayitem"]]],[11,"clone","","",86,[[["self"]],["imagedisplayitem"]]],[11,"clone","","",151,[[["self"]],["fontinstanceflags"]]],[11,"clone","","",42,[[["self"]],["colorf"]]],[11,"clone","","",68,[[["self"]],["debugcommand"]]],[11,"clone","","",70,[[["self"]],["glyphinstance"]]],[11,"clone","","",34,[[["self"]],["gradientstop"]]],[11,"clone","","",79,[[["self"]],["transformstyle"]]],[11,"clone","","",16,[[["self"]],["blobimageerror"]]],[11,"clone","","",59,[[["self"]],["lineorientation"]]],[11,"clone","","",29,[[["self"]],["alphatype"]]],[11,"clone","","",61,[[["self"]],["blobimagerequest"]]],[11,"clone","","",118,[[["self"]],["imageformat"]]],[11,"clone","","",33,[[["self"]],["yuvdata"]]],[11,"clone","","",36,[[["self"]],["referenceframe"]]],[11,"clone","","",25,[[["self"]],["yuvcolorspace"]]],[11,"clone","","",67,[[["self"]],["pipelineid"]]],[11,"clone","","",106,[[["self"]],["imagerendering"]]],[11,"clone","","",58,[[["self"]],["propertyvalue"]]],[11,"clone","","",14,[[["self"]],["hittestitem"]]],[11,"clone","","",101,[[["self"]],["imagemask"]]],[11,"clone","","",30,[[["self"]],["shadow"]]],[11,"clone","","",145,[[["self"]],["picturepixel"]]],[11,"clone","","",164,[[["self"]],["builtdisplaylist"]]],[11,"clone","","",85,[[["self"]],["borderside"]]],[11,"clone","","",51,[[["self"]],["externalimageid"]]],[11,"clone","","",82,[[["self"]],["linedisplayitem"]]],[11,"clone","","",38,[[["self"]],["fontvariation"]]],[11,"clone","","",7,[[["self"]],["fontlcdfilter"]]],[11,"clone","","",155,[[["self"]],["scrolllayerpixel"]]],[11,"clone","","",37,[[["self"]],["scrollnodestate"]]],[11,"clone","","",77,[[["self"]],["scenemsg"]]],[11,"clone","","",100,[[["self"]],["nativefonthandle"]]],[11,"clone","","",113,[[["self"]],["coloru"]]],[11,"clone","","",22,[[["self"]],["syntheticitalics"]]],[11,"clone","","",52,[[["self"]],["ninepatchborder"]]],[11,"clone","","",99,[[["self"]],["genericdisplayitem"]]],[11,"clone","","",45,[[["self"]],["boxshadowdisplayitem"]]],[11,"clone","","",71,[[["self"]],["externalscrollid"]]],[11,"clone","","",81,[[["self"]],["scrollframedisplayitem"]]],[11,"clone","","",18,[[["self"]],["resourceupdate"]]],[11,"clone","","",152,[[["self"]],["hittestflags"]]],[11,"clone","","",74,[[["self"]],["texturetarget"]]],[11,"clone","","",47,[[["self"]],["resourceid"]]],[11,"clone","","",98,[[["self"]],["stackingcontext"]]],[11,"clone","","",64,[[["self"]],["texelrect"]]],[11,"clone","","",62,[[["self"]],["propertybindingkey"]]],[11,"clone","","",43,[[["self"]],["dynamicproperties"]]],[11,"clone","","",60,[[["self"]],["stickyframedisplayitem"]]],[11,"clone","","",19,[[["self"]],["borderwidths"]]],[11,"clone","","",5,[[["self"]],["ninepatchbordersource"]]],[11,"clone","","",95,[[["self"]],["fontinstancekey"]]],[11,"clone","","",15,[[["self"]],["scrollclamping"]]],[11,"clone","","",157,[[["self"]],["renderapisender"]]],[11,"clone","","",114,[[["self"]],["gradientdisplayitem"]]],[11,"clone","","",112,[[["self"]],["premultipliedcolorf"]]],[11,"clone","","",90,[[["self"]],["yuvformat"]]],[11,"clone","","",72,[[["self"]],["primitiveinfo"]]],[11,"clone","webrender::api::channel","",159,[[["self"]],["msgsender"]]],[11,"clone","webrender::api","",28,[[["self"]],["clipchainid"]]],[11,"clone","webrender::api::channel","",0,[[["self"]],["payload"]]],[11,"clone","webrender::api","",80,[[["self"]],["fontinstanceplatformoptions"]]],[11,"clone","","",105,[[["self"]],["transactionmsg"]]],[11,"clone","","",56,[[["self"]],["documentid"]]],[11,"clone","","",94,[[["self"]],["repeatmode"]]],[11,"clone","","",40,[[["self"]],["propertybinding"]]],[11,"clone","","",63,[[["self"]],["stickyoffsetbounds"]]],[11,"clone","","",120,[[["self"]],["gradient"]]],[11,"clone","","",148,[[["self"]],["itemrange"]]],[11,"clone","","",78,[[["self"]],["scrolllocation"]]],[11,"clone","","",23,[[["self"]],["glyphdimensions"]]],[11,"clone","","",147,[[["self"]],["tiles"]]],[11,"clone","","",75,[[["self"]],["captureddocument"]]],[11,"clone","","",150,[[["self"]],["propertybindingid"]]],[11,"clone","","",87,[[["self"]],["fontinstanceoptions"]]],[11,"clone","","",39,[[["self"]],["glyphoptions"]]],[11,"clone","","",20,[[["self"]],["externalimagetype"]]],[11,"clone","","",17,[[["self"]],["imagekey"]]],[11,"clone","","",66,[[["self"]],["linestyle"]]],[11,"clone","","",9,[[["self"]],["filterop"]]],[11,"clone","","",65,[[["self"]],["normalborder"]]],[11,"clone","","",92,[[["self"]],["updateimage"]]],[11,"clone","","",57,[[["self"]],["framemsg"]]],[11,"clone","","",50,[[["self"]],["radialgradient"]]],[11,"clone","","",21,[[["self"]],["clipchainitem"]]],[11,"clone","","",46,[[["self"]],["boxshadowclipmode"]]],[11,"clone","","",160,[[["self"]],["externalevent"]]],[11,"clone","","",41,[[["self"]],["hittestresult"]]],[11,"clone","","",111,[[["self"]],["borderdetails"]]],[11,"clone","","",54,[[["self"]],["blobimagedescriptor"]]],[11,"clone","","",110,[[["self"]],["displaylistbuilder"]]],[11,"clone","","",93,[[["self"]],["fonttemplate"]]],[11,"clone","","",153,[[["self"]],["layoutpixel"]]],[11,"clone","","",165,[[["self"]],["auxiter"]]],[11,"clone","","",89,[[["self"]],["clipid"]]],[11,"clone","","",103,[[["self"]],["borderradiuskind"]]],[11,"clone","","",8,[[["self"]],["borderstyle"]]],[11,"clone","","",69,[[["self"]],["iframedisplayitem"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",144,[[["self"],["clearcache"]],["clearcache"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",151,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",146,[[["self"],["capturebits"]],["capturebits"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",152,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"extend","","",151,N],[11,"extend","","",146,N],[11,"extend","","",152,N],[11,"extend","","",144,N],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",144,[[["self"],["clearcache"]],["clearcache"]]],[11,"sub","","Returns the set difference of the two sets of flags.",151,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",146,[[["self"],["capturebits"]],["capturebits"]]],[11,"sub","","Returns the set difference of the two sets of flags.",152,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"cmp","","",6,[[["self"],["idnamespace"]],["ordering"]]],[11,"cmp","","",83,[[["self"],["fonthinting"]],["ordering"]]],[11,"cmp","","",113,[[["self"],["coloru"]],["ordering"]]],[11,"cmp","","",116,[[["self"],["fontrendermode"]],["ordering"]]],[11,"cmp","","",155,[[["self"],["scrolllayerpixel"]],["ordering"]]],[11,"cmp","","",145,[[["self"],["picturepixel"]],["ordering"]]],[11,"cmp","","",102,[[["self"],["fontkey"]],["ordering"]]],[11,"cmp","","",22,[[["self"],["syntheticitalics"]],["ordering"]]],[11,"cmp","","",144,[[["self"],["clearcache"]],["ordering"]]],[11,"cmp","","",112,[[["self"],["premultipliedcolorf"]],["ordering"]]],[11,"cmp","","",152,[[["self"],["hittestflags"]],["ordering"]]],[11,"cmp","","",151,[[["self"],["fontinstanceflags"]],["ordering"]]],[11,"cmp","","",95,[[["self"],["fontinstancekey"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["extendmode"]],["ordering"]]],[11,"cmp","","",146,[[["self"],["capturebits"]],["ordering"]]],[11,"cmp","","",39,[[["self"],["glyphoptions"]],["ordering"]]],[11,"cmp","","",154,[[["self"],["worldpixel"]],["ordering"]]],[11,"cmp","","",149,[[["self"],["devicepixel"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["fontlcdfilter"]],["ordering"]]],[11,"cmp","","",147,[[["self"],["tiles"]],["ordering"]]],[11,"cmp","","",87,[[["self"],["fontinstanceoptions"]],["ordering"]]],[11,"cmp","","",153,[[["self"],["layoutpixel"]],["ordering"]]],[11,"cmp","","",38,[[["self"],["fontvariation"]],["ordering"]]],[11,"cmp","","",80,[[["self"],["fontinstanceplatformoptions"]],["ordering"]]],[11,"cmp","","",115,[[["self"],["epoch"]],["ordering"]]],[11,"default","","",156,[[],["builtdisplaylistdescriptor"]]],[11,"default","","",39,[[],["glyphoptions"]]],[11,"default","","",22,[[],["syntheticitalics"]]],[11,"default","","",148,[[],["itemrange"]]],[11,"default","","",87,[[],["fontinstanceoptions"]]],[11,"default","","",164,[[],["builtdisplaylist"]]],[11,"default","","",41,[[],["hittestresult"]]],[11,"default","","",151,[[],["fontinstanceflags"]]],[11,"default","","",80,[[],["fontinstanceplatformoptions"]]],[11,"next","","",165,[[["self"]],["option"]]],[11,"size_hint","","",165,N],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"send_payload","webrender::api::channel","",159,[[["self"],["payload"]],["result",["error"]]]],[11,"fmt","webrender::api","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"deserialize","","",15,[[["__d"]],["result",["scrollclamping"]]]],[11,"deserialize","","",42,[[["__d"]],["result",["colorf"]]]],[11,"deserialize_in_place","","",42,[[["__d"],["colorf"]],["result"]]],[11,"deserialize","","",106,[[["__d"]],["result",["imagerendering"]]]],[11,"deserialize","","",52,[[["__d"]],["result",["ninepatchborder"]]]],[11,"deserialize_in_place","","",52,[[["__d"],["ninepatchborder"]],["result"]]],[11,"deserialize","","",69,[[["__d"]],["result",["iframedisplayitem"]]]],[11,"deserialize_in_place","","",69,[[["__d"],["iframedisplayitem"]],["result"]]],[11,"deserialize","","",68,[[["__d"]],["result",["debugcommand"]]]],[11,"deserialize","","",50,[[["__d"]],["result",["radialgradient"]]]],[11,"deserialize_in_place","","",50,[[["__d"],["radialgradient"]],["result"]]],[11,"deserialize","","",152,[[["__d"]],["result",["hittestflags"]]]],[11,"deserialize_in_place","","",152,[[["__d"],["hittestflags"]],["result"]]],[11,"deserialize","","",7,[[["__d"]],["result",["fontlcdfilter"]]]],[11,"deserialize","","",156,[[["__d"]],["result",["builtdisplaylistdescriptor"]]]],[11,"deserialize_in_place","","",156,[[["__d"],["builtdisplaylistdescriptor"]],["result"]]],[11,"deserialize","","",63,[[["__d"]],["result",["stickyoffsetbounds"]]]],[11,"deserialize_in_place","","",63,[[["__d"],["stickyoffsetbounds"]],["result"]]],[11,"deserialize","","",77,[[["__d"]],["result",["scenemsg"]]]],[11,"deserialize","","",49,[[["__d"]],["result",["addimage"]]]],[11,"deserialize_in_place","","",49,[[["__d"],["addimage"]],["result"]]],[11,"deserialize","","",97,[[["__d"]],["result",["imagedata"]]]],[11,"deserialize","","",84,[[["__d"]],["result",["borderdisplayitem"]]]],[11,"deserialize_in_place","","",84,[[["__d"],["borderdisplayitem"]],["result"]]],[11,"deserialize","","",82,[[["__d"]],["result",["linedisplayitem"]]]],[11,"deserialize_in_place","","",82,[[["__d"],["linedisplayitem"]],["result"]]],[11,"deserialize","","",43,[[["__d"]],["result",["dynamicproperties"]]]],[11,"deserialize_in_place","","",43,[[["__d"],["dynamicproperties"]],["result"]]],[11,"deserialize","","",28,[[["__d"]],["result",["clipchainid"]]]],[11,"deserialize_in_place","","",28,[[["__d"],["clipchainid"]],["result"]]],[11,"deserialize","","",160,[[["__d"]],["result",["externalevent"]]]],[11,"deserialize_in_place","","",160,[[["__d"],["externalevent"]],["result"]]],[11,"deserialize","","",67,[[["__d"]],["result",["pipelineid"]]]],[11,"deserialize_in_place","","",67,[[["__d"],["pipelineid"]],["result"]]],[11,"deserialize","","",10,[[["__d"]],["result",["borderradius"]]]],[11,"deserialize_in_place","","",10,[[["__d"],["borderradius"]],["result"]]],[11,"deserialize","","",36,[[["__d"]],["result",["referenceframe"]]]],[11,"deserialize_in_place","","",36,[[["__d"],["referenceframe"]],["result"]]],[11,"deserialize","","",104,[[["__d"]],["result",["localclip"]]]],[11,"deserialize","","",17,[[["__d"]],["result",["imagekey"]]]],[11,"deserialize_in_place","","",17,[[["__d"],["imagekey"]],["result"]]],[11,"deserialize","","",55,[[["__d"]],["result",["scrollsensitivity"]]]],[11,"deserialize","","",150,[[["__d"]],["result",["propertybindingid"]]]],[11,"deserialize_in_place","","",150,[[["__d"],["propertybindingid"]],["result"]]],[11,"deserialize","","",117,[[["__d"]],["result",["pushreferenceframedisplaylistitem"]]]],[11,"deserialize_in_place","","",117,[[["__d"],["pushreferenceframedisplaylistitem"]],["result"]]],[11,"deserialize","","",58,[[["__d"]],["result",["propertyvalue"]]]],[11,"deserialize_in_place","","",58,[[["__d"],["propertyvalue"]],["result"]]],[11,"deserialize","","",22,[[["__d"]],["result",["syntheticitalics"]]]],[11,"deserialize_in_place","","",22,[[["__d"],["syntheticitalics"]],["result"]]],[11,"deserialize","","",46,[[["__d"]],["result",["boxshadowclipmode"]]]],[11,"deserialize","","",71,[[["__d"]],["result",["externalscrollid"]]]],[11,"deserialize_in_place","","",71,[[["__d"],["externalscrollid"]],["result"]]],[11,"deserialize","","",11,[[["__d"]],["result",["specificdisplayitem"]]]],[11,"deserialize","","",95,[[["__d"]],["result",["fontinstancekey"]]]],[11,"deserialize_in_place","","",95,[[["__d"],["fontinstancekey"]],["result"]]],[11,"deserialize","","",85,[[["__d"]],["result",["borderside"]]]],[11,"deserialize_in_place","","",85,[[["__d"],["borderside"]],["result"]]],[11,"deserialize","","",102,[[["__d"]],["result",["fontkey"]]]],[11,"deserialize_in_place","","",102,[[["__d"],["fontkey"]],["result"]]],[11,"deserialize","","",86,[[["__d"]],["result",["imagedisplayitem"]]]],[11,"deserialize_in_place","","",86,[[["__d"],["imagedisplayitem"]],["result"]]],[11,"deserialize","","",103,[[["__d"]],["result",["borderradiuskind"]]]],[11,"deserialize","","",148,[[["__d"]],["result",["itemrange"]]]],[11,"deserialize_in_place","","",148,[[["__d"],["itemrange"]],["result"]]],[11,"deserialize","","",56,[[["__d"]],["result",["documentid"]]]],[11,"deserialize_in_place","","",56,[[["__d"],["documentid"]],["result"]]],[11,"deserialize","","",79,[[["__d"]],["result",["transformstyle"]]]],[11,"deserialize","","",8,[[["__d"]],["result",["borderstyle"]]]],[11,"deserialize","","",108,[[["__d"]],["result",["complexclipregion"]]]],[11,"deserialize_in_place","","",108,[[["__d"],["complexclipregion"]],["result"]]],[11,"deserialize","","",51,[[["__d"]],["result",["externalimageid"]]]],[11,"deserialize_in_place","","",51,[[["__d"],["externalimageid"]],["result"]]],[11,"deserialize","","",94,[[["__d"]],["result",["repeatmode"]]]],[11,"deserialize","","",53,[[["__d"]],["result",["glyphrasterspace"]]]],[11,"deserialize","","",74,[[["__d"]],["result",["texturetarget"]]]],[11,"deserialize","","",21,[[["__d"]],["result",["clipchainitem"]]]],[11,"deserialize_in_place","","",21,[[["__d"],["clipchainitem"]],["result"]]],[11,"deserialize","","",158,[[["__d"]],["result",["zoomfactor"]]]],[11,"deserialize_in_place","","",158,[[["__d"],["zoomfactor"]],["result"]]],[11,"deserialize","","",89,[[["__d"]],["result",["clipid"]]]],[11,"deserialize","","",60,[[["__d"]],["result",["stickyframedisplayitem"]]]],[11,"deserialize_in_place","","",60,[[["__d"],["stickyframedisplayitem"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result",["textdisplayitem"]]]],[11,"deserialize_in_place","","",3,[[["__d"],["textdisplayitem"]],["result"]]],[11,"deserialize","","",100,[[["__d"]],["result",["nativefonthandle"]]]],[11,"deserialize_in_place","","",100,[[["__d"],["nativefonthandle"]],["result"]]],[11,"deserialize","","",111,[[["__d"]],["result",["borderdetails"]]]],[11,"deserialize","","",9,[[["__d"]],["result",["filterop"]]]],[11,"deserialize","","",157,[[["__d"]],["result",["renderapisender"]]]],[11,"deserialize_in_place","","",157,[[["__d"],["renderapisender"]],["result"]]],[11,"deserialize","","",31,[[["__d"]],["result",["addfontinstance"]]]],[11,"deserialize_in_place","","",31,[[["__d"],["addfontinstance"]],["result"]]],[11,"deserialize","","",18,[[["__d"]],["result",["resourceupdate"]]]],[11,"deserialize","","",40,[[["__d"]],["result",["propertybinding"]]]],[11,"deserialize","","",78,[[["__d"]],["result",["scrolllocation"]]]],[11,"deserialize","","",119,[[["__d"]],["result",["mixblendmode"]]]],[11,"deserialize","","",113,[[["__d"]],["result",["coloru"]]]],[11,"deserialize_in_place","","",113,[[["__d"],["coloru"]],["result"]]],[11,"deserialize","","",33,[[["__d"]],["result",["yuvdata"]]]],[11,"deserialize","","",118,[[["__d"]],["result",["imageformat"]]]],[11,"deserialize","","",146,[[["__d"]],["result",["capturebits"]]]],[11,"deserialize_in_place","","",146,[[["__d"],["capturebits"]],["result"]]],[11,"deserialize","","",107,[[["__d"]],["result",["clipandscrollinfo"]]]],[11,"deserialize_in_place","","",107,[[["__d"],["clipandscrollinfo"]],["result"]]],[11,"deserialize","webrender::api::channel","",159,[[["d"]],["result",["msgsender"]]]],[11,"deserialize","webrender::api","",81,[[["__d"]],["result",["scrollframedisplayitem"]]]],[11,"deserialize_in_place","","",81,[[["__d"],["scrollframedisplayitem"]],["result"]]],[11,"deserialize","","",153,[[["__d"]],["result",["layoutpixel"]]]],[11,"deserialize","","",87,[[["__d"]],["result",["fontinstanceoptions"]]]],[11,"deserialize_in_place","","",87,[[["__d"],["fontinstanceoptions"]],["result"]]],[11,"deserialize","","",29,[[["__d"]],["result",["alphatype"]]]],[11,"deserialize","","",13,[[["__d"]],["result",["extendmode"]]]],[11,"deserialize","","",115,[[["__d"]],["result",["epoch"]]]],[11,"deserialize_in_place","","",115,[[["__d"],["epoch"]],["result"]]],[11,"deserialize","","",72,[[["__d"]],["result",["primitiveinfo"]]]],[11,"deserialize_in_place","","",72,[[["__d"],["primitiveinfo"]],["result"]]],[11,"deserialize","","",24,[[["__d"]],["result",["clipdisplayitem"]]]],[11,"deserialize_in_place","","",24,[[["__d"],["clipdisplayitem"]],["result"]]],[11,"deserialize","","",35,[[["__d"]],["result",["yuvimagedisplayitem"]]]],[11,"deserialize_in_place","","",35,[[["__d"],["yuvimagedisplayitem"]],["result"]]],[11,"deserialize","","",37,[[["__d"]],["result",["scrollnodestate"]]]],[11,"deserialize_in_place","","",37,[[["__d"],["scrollnodestate"]],["result"]]],[11,"deserialize","","",39,[[["__d"]],["result",["glyphoptions"]]]],[11,"deserialize_in_place","","",39,[[["__d"],["glyphoptions"]],["result"]]],[11,"deserialize","","",27,[[["__d"]],["result",["externalimagedata"]]]],[11,"deserialize_in_place","","",27,[[["__d"],["externalimagedata"]],["result"]]],[11,"deserialize","","",14,[[["__d"]],["result",["hittestitem"]]]],[11,"deserialize_in_place","","",14,[[["__d"],["hittestitem"]],["result"]]],[11,"deserialize","","",99,[[["__d"]],["result",["genericdisplayitem"]]]],[11,"deserialize_in_place","","",99,[[["__d"],["genericdisplayitem"]],["result"]]],[11,"deserialize","","",38,[[["__d"]],["result",["fontvariation"]]]],[11,"deserialize_in_place","","",38,[[["__d"],["fontvariation"]],["result"]]],[11,"deserialize","","",98,[[["__d"]],["result",["stackingcontext"]]]],[11,"deserialize_in_place","","",98,[[["__d"],["stackingcontext"]],["result"]]],[11,"deserialize","","",65,[[["__d"]],["result",["normalborder"]]]],[11,"deserialize_in_place","","",65,[[["__d"],["normalborder"]],["result"]]],[11,"deserialize","","",76,[[["__d"]],["result",["rectangledisplayitem"]]]],[11,"deserialize_in_place","","",76,[[["__d"],["rectangledisplayitem"]],["result"]]],[11,"deserialize","","",57,[[["__d"]],["result",["framemsg"]]]],[11,"deserialize","","",116,[[["__d"]],["result",["fontrendermode"]]]],[11,"deserialize","","",114,[[["__d"]],["result",["gradientdisplayitem"]]]],[11,"deserialize_in_place","","",114,[[["__d"],["gradientdisplayitem"]],["result"]]],[11,"deserialize","","",20,[[["__d"]],["result",["externalimagetype"]]]],[11,"deserialize","","",44,[[["__d"]],["result",["clipmode"]]]],[11,"deserialize","","",26,[[["__d"]],["result",["pushstackingcontextdisplayitem"]]]],[11,"deserialize_in_place","","",26,[[["__d"],["pushstackingcontextdisplayitem"]],["result"]]],[11,"deserialize","","",23,[[["__d"]],["result",["glyphdimensions"]]]],[11,"deserialize_in_place","","",23,[[["__d"],["glyphdimensions"]],["result"]]],[11,"deserialize","","",30,[[["__d"]],["result",["shadow"]]]],[11,"deserialize_in_place","","",30,[[["__d"],["shadow"]],["result"]]],[11,"deserialize","","",101,[[["__d"]],["result",["imagemask"]]]],[11,"deserialize_in_place","","",101,[[["__d"],["imagemask"]],["result"]]],[11,"deserialize","","",70,[[["__d"]],["result",["glyphinstance"]]]],[11,"deserialize_in_place","","",70,[[["__d"],["glyphinstance"]],["result"]]],[11,"deserialize","","",73,[[["__d"]],["result",["radialgradientdisplayitem"]]]],[11,"deserialize_in_place","","",73,[[["__d"],["radialgradientdisplayitem"]],["result"]]],[11,"deserialize","","",109,[[["__d"]],["result",["apimsg"]]]],[11,"deserialize","","",6,[[["__d"]],["result",["idnamespace"]]]],[11,"deserialize_in_place","","",6,[[["__d"],["idnamespace"]],["result"]]],[11,"deserialize","","",47,[[["__d"]],["result",["resourceid"]]]],[11,"deserialize_in_place","","",47,[[["__d"],["resourceid"]],["result"]]],[11,"deserialize","","",32,[[["__d"]],["result",["imagedescriptor"]]]],[11,"deserialize_in_place","","",32,[[["__d"],["imagedescriptor"]],["result"]]],[11,"deserialize","","",75,[[["__d"]],["result",["captureddocument"]]]],[11,"deserialize_in_place","","",75,[[["__d"],["captureddocument"]],["result"]]],[11,"deserialize","","",64,[[["__d"]],["result",["texelrect"]]]],[11,"deserialize_in_place","","",64,[[["__d"],["texelrect"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result",["ninepatchbordersource"]]]],[11,"deserialize","","",59,[[["__d"]],["result",["lineorientation"]]]],[11,"deserialize","","",12,[[["__d"]],["result",["addfont"]]]],[11,"deserialize","","",151,[[["__d"]],["result",["fontinstanceflags"]]]],[11,"deserialize_in_place","","",151,[[["__d"],["fontinstanceflags"]],["result"]]],[11,"deserialize","","",83,[[["__d"]],["result",["fonthinting"]]]],[11,"deserialize","","",34,[[["__d"]],["result",["gradientstop"]]]],[11,"deserialize_in_place","","",34,[[["__d"],["gradientstop"]],["result"]]],[11,"deserialize","","",90,[[["__d"]],["result",["yuvformat"]]]],[11,"deserialize","","",112,[[["__d"]],["result",["premultipliedcolorf"]]]],[11,"deserialize_in_place","","",112,[[["__d"],["premultipliedcolorf"]],["result"]]],[11,"deserialize","webrender::api::channel","",161,[[["d"]],["result",["msgreceiver"]]]],[11,"deserialize","webrender::api","",66,[[["__d"]],["result",["linestyle"]]]],[11,"deserialize","","",41,[[["__d"]],["result",["hittestresult"]]]],[11,"deserialize_in_place","","",41,[[["__d"],["hittestresult"]],["result"]]],[11,"deserialize","","",120,[[["__d"]],["result",["gradient"]]]],[11,"deserialize_in_place","","",120,[[["__d"],["gradient"]],["result"]]],[11,"deserialize","","",25,[[["__d"]],["result",["yuvcolorspace"]]]],[11,"deserialize","","",105,[[["__d"]],["result",["transactionmsg"]]]],[11,"deserialize_in_place","","",105,[[["__d"],["transactionmsg"]],["result"]]],[11,"deserialize","","",45,[[["__d"]],["result",["boxshadowdisplayitem"]]]],[11,"deserialize_in_place","","",45,[[["__d"],["boxshadowdisplayitem"]],["result"]]],[11,"deserialize","","",80,[[["__d"]],["result",["fontinstanceplatformoptions"]]]],[11,"deserialize_in_place","","",80,[[["__d"],["fontinstanceplatformoptions"]],["result"]]],[11,"deserialize","","",62,[[["__d"]],["result",["propertybindingkey"]]]],[11,"deserialize_in_place","","",62,[[["__d"],["propertybindingkey"]],["result"]]],[11,"deserialize","","",144,[[["__d"]],["result",["clearcache"]]]],[11,"deserialize_in_place","","",144,[[["__d"],["clearcache"]],["result"]]],[11,"deserialize","","",92,[[["__d"]],["result",["updateimage"]]]],[11,"deserialize_in_place","","",92,[[["__d"],["updateimage"]],["result"]]],[11,"deserialize","","",19,[[["__d"]],["result",["borderwidths"]]]],[11,"deserialize_in_place","","",19,[[["__d"],["borderwidths"]],["result"]]],[11,"recv_payload","webrender::api::channel","",161,[[["self"]],["result",["payload","error"]]]],[11,"to_mpsc_receiver","","",161,[[["self"]],["receiver",["payload"]]]],[11,"partial_cmp","webrender::api","",6,[[["self"],["idnamespace"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["idnamespace"]],["bool"]]],[11,"le","","",6,[[["self"],["idnamespace"]],["bool"]]],[11,"gt","","",6,[[["self"],["idnamespace"]],["bool"]]],[11,"ge","","",6,[[["self"],["idnamespace"]],["bool"]]],[11,"partial_cmp","","",149,[[["self"],["devicepixel"]],["option",["ordering"]]]],[11,"partial_cmp","","",95,[[["self"],["fontinstancekey"]],["option",["ordering"]]]],[11,"lt","","",95,[[["self"],["fontinstancekey"]],["bool"]]],[11,"le","","",95,[[["self"],["fontinstancekey"]],["bool"]]],[11,"gt","","",95,[[["self"],["fontinstancekey"]],["bool"]]],[11,"ge","","",95,[[["self"],["fontinstancekey"]],["bool"]]],[11,"partial_cmp","","",151,[[["self"],["fontinstanceflags"]],["option",["ordering"]]]],[11,"lt","","",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"le","","",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"gt","","",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"ge","","",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"partial_cmp","","",87,[[["self"],["fontinstanceoptions"]],["option",["ordering"]]]],[11,"lt","","",87,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"le","","",87,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"gt","","",87,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"ge","","",87,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"partial_cmp","","",102,[[["self"],["fontkey"]],["option",["ordering"]]]],[11,"lt","","",102,[[["self"],["fontkey"]],["bool"]]],[11,"le","","",102,[[["self"],["fontkey"]],["bool"]]],[11,"gt","","",102,[[["self"],["fontkey"]],["bool"]]],[11,"ge","","",102,[[["self"],["fontkey"]],["bool"]]],[11,"partial_cmp","","",38,[[["self"],["fontvariation"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["fontvariation"]],["bool"]]],[11,"le","","",38,[[["self"],["fontvariation"]],["bool"]]],[11,"gt","","",38,[[["self"],["fontvariation"]],["bool"]]],[11,"ge","","",38,[[["self"],["fontvariation"]],["bool"]]],[11,"partial_cmp","","",22,[[["self"],["syntheticitalics"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["syntheticitalics"]],["bool"]]],[11,"le","","",22,[[["self"],["syntheticitalics"]],["bool"]]],[11,"gt","","",22,[[["self"],["syntheticitalics"]],["bool"]]],[11,"ge","","",22,[[["self"],["syntheticitalics"]],["bool"]]],[11,"partial_cmp","","",116,[[["self"],["fontrendermode"]],["option",["ordering"]]]],[11,"partial_cmp","","",113,[[["self"],["coloru"]],["option",["ordering"]]]],[11,"lt","","",113,[[["self"],["coloru"]],["bool"]]],[11,"le","","",113,[[["self"],["coloru"]],["bool"]]],[11,"gt","","",113,[[["self"],["coloru"]],["bool"]]],[11,"ge","","",113,[[["self"],["coloru"]],["bool"]]],[11,"partial_cmp","","",112,[[["self"],["premultipliedcolorf"]],["option",["ordering"]]]],[11,"lt","","",112,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"le","","",112,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"gt","","",112,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"ge","","",112,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["fontlcdfilter"]],["option",["ordering"]]]],[11,"partial_cmp","","",39,[[["self"],["glyphoptions"]],["option",["ordering"]]]],[11,"lt","","",39,[[["self"],["glyphoptions"]],["bool"]]],[11,"le","","",39,[[["self"],["glyphoptions"]],["bool"]]],[11,"gt","","",39,[[["self"],["glyphoptions"]],["bool"]]],[11,"ge","","",39,[[["self"],["glyphoptions"]],["bool"]]],[11,"partial_cmp","","",153,[[["self"],["layoutpixel"]],["option",["ordering"]]]],[11,"partial_cmp","","",146,[[["self"],["capturebits"]],["option",["ordering"]]]],[11,"lt","","",146,[[["self"],["capturebits"]],["bool"]]],[11,"le","","",146,[[["self"],["capturebits"]],["bool"]]],[11,"gt","","",146,[[["self"],["capturebits"]],["bool"]]],[11,"ge","","",146,[[["self"],["capturebits"]],["bool"]]],[11,"partial_cmp","","",83,[[["self"],["fonthinting"]],["option",["ordering"]]]],[11,"partial_cmp","","",152,[[["self"],["hittestflags"]],["option",["ordering"]]]],[11,"lt","","",152,[[["self"],["hittestflags"]],["bool"]]],[11,"le","","",152,[[["self"],["hittestflags"]],["bool"]]],[11,"gt","","",152,[[["self"],["hittestflags"]],["bool"]]],[11,"ge","","",152,[[["self"],["hittestflags"]],["bool"]]],[11,"partial_cmp","","",145,[[["self"],["picturepixel"]],["option",["ordering"]]]],[11,"partial_cmp","","",115,[[["self"],["epoch"]],["option",["ordering"]]]],[11,"lt","","",115,[[["self"],["epoch"]],["bool"]]],[11,"le","","",115,[[["self"],["epoch"]],["bool"]]],[11,"gt","","",115,[[["self"],["epoch"]],["bool"]]],[11,"ge","","",115,[[["self"],["epoch"]],["bool"]]],[11,"partial_cmp","","",80,[[["self"],["fontinstanceplatformoptions"]],["option",["ordering"]]]],[11,"lt","","",80,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"le","","",80,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"gt","","",80,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"ge","","",80,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["extendmode"]],["option",["ordering"]]]],[11,"partial_cmp","","",154,[[["self"],["worldpixel"]],["option",["ordering"]]]],[11,"partial_cmp","","",147,[[["self"],["tiles"]],["option",["ordering"]]]],[11,"partial_cmp","","",155,[[["self"],["scrolllayerpixel"]],["option",["ordering"]]]],[11,"partial_cmp","","",144,[[["self"],["clearcache"]],["option",["ordering"]]]],[11,"lt","","",144,[[["self"],["clearcache"]],["bool"]]],[11,"le","","",144,[[["self"],["clearcache"]],["bool"]]],[11,"gt","","",144,[[["self"],["clearcache"]],["bool"]]],[11,"ge","","",144,[[["self"],["clearcache"]],["bool"]]],[11,"from","","",40,[[["t"]],["propertybinding"]]],[11,"from","","",113,[[["colorf"]],["coloru"]]],[11,"from","","",42,[[["coloru"]],["colorf"]]],[11,"from","","",104,[[["typedrect",["f32","layoutpixel"]]],["localclip"]]],[11,"from_iter","","",146,[[["t"]],["capturebits"]]],[11,"from_iter","","",152,[[["t"]],["hittestflags"]]],[11,"from_iter","","",151,[[["t"]],["fontinstanceflags"]]],[11,"from_iter","","",144,[[["t"]],["clearcache"]]],[11,"bitor","","Returns the union of the two sets of flags.",146,[[["self"],["capturebits"]],["capturebits"]]],[11,"bitor","","Returns the union of the two sets of flags.",151,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",152,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",144,[[["self"],["clearcache"]],["clearcache"]]],[11,"recv","webrender::api::channel","",161,[[["self"]],["result",["error"]]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"send","","",159,[[["self"],["t"]],["result",["error"]]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"into","webrender::api","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"new","","",4,[[],["transaction"]]],[11,"skip_scene_builder","","",4,N],[11,"use_scene_builder_thread","","",4,N],[11,"is_empty","","",4,[[["self"]],["bool"]]],[11,"update_epoch","","",4,N],[11,"set_root_pipeline","","Sets the root pipeline.",4,N],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",4,N],[11,"set_display_list","","Supplies a new frame to WebRender.",4,N],[11,"update_resources","","",4,N],[11,"set_window_parameters","","",4,N],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",4,N],[11,"scroll_node_with_id","","",4,N],[11,"set_page_zoom","","",4,N],[11,"set_pinch_zoom","","",4,N],[11,"set_pan","","",4,N],[11,"generate_frame","","Generate a new frame. When it's done and a RenderNotifier has been set in `webrender::Renderer`, [new_frame_ready()][notifier] gets called. Note that the notifier is called even if the frame generation was a no-op; the arguments passed to `new_frame_ready` will provide information as to what happened.",4,N],[11,"update_dynamic_properties","","Supply a list of animated property bindings that should be used to resolve bindings in the current display list.",4,N],[11,"append_dynamic_properties","","Add to the list of animated property bindings that should be used to resolve bindings in the current display list. This is a convenience method so the caller doesn't have to figure out all the dynamic properties before setting them on the transaction but can do them incrementally.",4,N],[11,"enable_frame_output","","Enable copying of the output of this pipeline id to an external texture for callers to consume.",4,N],[11,"get_frame_ops","","Consumes this object and just returns the frame ops.",4,[[["self"]],["vec",["framemsg"]]]],[11,"add_image","","",4,N],[11,"update_image","","",4,N],[11,"delete_image","","",4,N],[11,"add_raw_font","","",4,N],[11,"add_native_font","","",4,N],[11,"delete_font","","",4,N],[11,"add_font_instance","","",4,N],[11,"delete_font_instance","","",4,N],[11,"merge","","",4,N],[11,"clear","","",4,N],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"is_hidden","","",8,[[["self"]],["bool"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"zero","","",10,[[],["borderradius"]]],[11,"uniform","","",10,[[["f32"]],["borderradius"]]],[11,"uniform_size","","",10,[[["typedsize2d",["f32","layoutpixel"]]],["borderradius"]]],[11,"is_uniform","","",10,[[["self"]],["option",["f32"]]]],[11,"is_uniform_size","","",10,[[["self"]],["option",["typedsize2d"]]]],[11,"is_zero","","",10,[[["self"]],["bool"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[18,"DUMMY","","",17,N],[11,"new","","",17,[[["idnamespace"],["u32"]],["imagekey"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[18,"FIND_ALL","","",152,N],[18,"POINT_RELATIVE_TO_PIPELINE_VIEWPORT","","",152,N],[11,"empty","","Returns an empty set of flags.",152,[[],["hittestflags"]]],[11,"all","","Returns the set containing all flags.",152,[[],["hittestflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",152,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",152,[[["u8"]],["option",["hittestflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",152,[[["u8"]],["hittestflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",152,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",152,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",152,[[["self"],["hittestflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",152,[[["self"],["hittestflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",152,N],[11,"remove","","Removes the specified flags in-place.",152,N],[11,"toggle","","Toggles the specified flags in-place.",152,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",152,N],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[18,"ANGLE_SCALE","","",22,N],[11,"from_degrees","","",22,[[["f32"]],["syntheticitalics"]]],[11,"to_degrees","","",22,[[["self"]],["f32"]]],[11,"to_radians","","",22,[[["self"]],["f32"]]],[11,"to_skew","","",22,[[["self"]],["f32"]]],[11,"enabled","","",22,[[],["syntheticitalics"]]],[11,"disabled","","",22,[[],["syntheticitalics"]]],[11,"is_enabled","","",22,[[["self"]],["bool"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"get_namespace_id","","",162,[[["self"]],["idnamespace"]]],[11,"clone_sender","","",162,[[["self"]],["renderapisender"]]],[11,"add_document","","",162,[[["self"],["typedsize2d",["u32","devicepixel"]],["i8"]],["documentid"]]],[11,"delete_document","","",162,N],[11,"generate_font_key","","",162,[[["self"]],["fontkey"]]],[11,"generate_font_instance_key","","",162,[[["self"]],["fontinstancekey"]]],[11,"get_glyph_dimensions","","Gets the dimensions for the supplied glyph keys",162,[[["self"],["fontinstancekey"],["vec",["u32"]]],["vec",["option"]]]],[11,"get_glyph_indices","","Gets the glyph indices for the supplied string. These can be used to construct GlyphKeys.",162,[[["self"],["fontkey"],["str"]],["vec",["option"]]]],[11,"generate_image_key","","Creates an `ImageKey`.",162,[[["self"]],["imagekey"]]],[11,"update_resources","","Add/remove/update resources such as images and fonts.",162,N],[11,"send_external_event","","",162,N],[11,"notify_memory_pressure","","",162,N],[11,"shut_down","","",162,N],[11,"generate_property_binding_key","","Create a new unique key that can be used for animated property bindings.",162,[[["self"]],["propertybindingkey"]]],[11,"send_transaction","","",162,N],[11,"hit_test","","Does a hit test on display items in the specified document, at the given point. If a pipeline_id is specified, it is used to further restrict the hit results so that only items inside that pipeline are matched. If the HitTestFlags argument contains the FIND_ALL flag, then the vector of hit results will contain all display items that match, ordered from front to back.",162,[[["self"],["documentid"],["option",["pipelineid"]],["typedpoint2d",["f32","worldpixel"]],["hittestflags"]],["hittestresult"]]],[11,"set_window_parameters","","",162,N],[11,"get_scroll_node_state","","",162,[[["self"],["documentid"]],["vec",["scrollnodestate"]]]],[11,"wake_scene_builder","","",162,N],[11,"flush_scene_builder","","Block until a round-trip to the scene builder thread has completed. This ensures that any transactions (including ones deferred to the scene builder thread) have been processed.",162,N],[11,"save_capture","","Save a capture of the current frame state for debugging.",162,N],[11,"load_capture","","Load a capture of the current frame state for debugging.",162,[[["self"],["pathbuf"]],["vec",["captureddocument"]]]],[11,"send_debug_cmd","","",162,N],[11,"into","","",162,[[["self"]],["u"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"get_feature_string","","",25,[[["self"]],["str"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"new","","",32,[[["u32"],["u32"],["imageformat"],["bool"],["bool"]],["imagedescriptor"]]],[11,"compute_stride","","",32,[[["self"]],["u32"]]],[11,"compute_total_size","","",32,[[["self"]],["u32"]]],[11,"full_rect","","",32,[[["self"]],["typedrect",["u32","devicepixel"]]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"get_format","","",33,[[["self"]],["yuvformat"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"new","","",166,[[["builtdisplaylist"]],["builtdisplaylistiter"]]],[11,"new_with_list_and_data","","",166,N],[11,"display_list","","",166,[[["self"]],["builtdisplaylist"]]],[11,"next","","",166,[[["self"]],["option",["displayitemref"]]]],[11,"next_raw","","Gets the next display item, even if it's a dummy. Also doesn't handle peeking and may leave irrelevant ranges live (so a Clip may have GradientStops if for some reason you ask).",166,[[["self"]],["option",["displayitemref"]]]],[11,"as_ref","","",166,[[["self"]],["displayitemref"]]],[11,"starting_stacking_context","","",166,[[["self"]],["option"]]],[11,"skip_current_stacking_context","","",166,N],[11,"current_stacking_context_empty","","",166,[[["self"]],["bool"]]],[11,"peek","","",166,[[["self"]],["option",["displayitemref"]]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"display_item","","",167,[[["self"]],["genericdisplayitem"]]],[11,"rect","","",167,[[["self"]],["typedrect",["f32","layoutpixel"]]]],[11,"get_layout_primitive_info","","",167,[[["self"],["typedvector2d"]],["primitiveinfo",["layoutpixel"]]]],[11,"clip_rect","","",167,[[["self"]],["typedrect"]]],[11,"clip_and_scroll","","",167,[[["self"]],["clipandscrollinfo"]]],[11,"item","","",167,[[["self"]],["specificdisplayitem"]]],[11,"complex_clip","","",167,N],[11,"gradient_stops","","",167,[[["self"]],["itemrange",["gradientstop"]]]],[11,"glyphs","","",167,[[["self"]],["itemrange",["glyphinstance"]]]],[11,"filters","","",167,[[["self"]],["itemrange",["filterop"]]]],[11,"clip_chain_items","","",167,[[["self"]],["itemrange",["clipid"]]]],[11,"display_list","","",167,[[["self"]],["builtdisplaylist"]]],[11,"is_backface_visible","","",167,[[["self"]],["bool"]]],[11,"sub_iter","","",167,[[["self"]],["builtdisplaylistiter"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"new","","Constructs a new `ColorF` from its components.",42,[[["f32"],["f32"],["f32"],["f32"]],["colorf"]]],[11,"scale_rgb","","Multiply the RGB channels (but not alpha) with a given factor.",42,[[["self"],["f32"]],["colorf"]]],[11,"scale_alpha","","",42,[[["self"],["f32"]],["colorf"]]],[11,"to_array","","",42,N],[11,"premultiplied","","Multiply the RGB components with the alpha channel.",42,[[["self"]],["premultipliedcolorf"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"new","","Construct a new zoom factor.",158,[[["f32"]],["zoomfactor"]]],[11,"get","","Get the zoom factor as an untyped float.",158,[[["self"]],["f32"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"is_empty","","",148,[[["self"]],["bool"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[18,"IMAGES","","",144,N],[18,"GLYPHS","","",144,N],[18,"GLYPH_DIMENSIONS","","",144,N],[18,"RENDER_TASKS","","",144,N],[18,"TEXTURE_CACHE","","",144,N],[11,"empty","","Returns an empty set of flags.",144,[[],["clearcache"]]],[11,"all","","Returns the set containing all flags.",144,[[],["clearcache"]]],[11,"bits","","Returns the raw value of the flags currently stored.",144,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",144,[[["u8"]],["option",["clearcache"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",144,[[["u8"]],["clearcache"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",144,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",144,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",144,[[["self"],["clearcache"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",144,[[["self"],["clearcache"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",144,N],[11,"remove","","Removes the specified flags in-place.",144,N],[11,"toggle","","Toggles the specified flags in-place.",144,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",144,N],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"with","","",62,[[["self"],["t"]],["propertyvalue"]]],[11,"new","","",62,[[["u64"]],["propertybindingkey"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"new","","",63,[[["f32"],["f32"]],["stickyoffsetbounds"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"new","","",64,[[["f32"],["f32"],["f32"],["f32"]],["texelrect"]]],[11,"invalid","","",64,[[],["texelrect"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"dummy","","",67,[[],["pipelineid"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[18,"SYNTHETIC_BOLD","","",151,N],[18,"EMBEDDED_BITMAPS","","",151,N],[18,"SUBPIXEL_BGR","","",151,N],[18,"TRANSPOSE","","",151,N],[18,"FLIP_X","","",151,N],[18,"FLIP_Y","","",151,N],[18,"SUBPIXEL_POSITION","","",151,N],[18,"FORCE_GDI","","",151,N],[18,"FONT_SMOOTHING","","",151,N],[18,"FORCE_AUTOHINT","","",151,N],[18,"NO_AUTOHINT","","",151,N],[18,"VERTICAL_LAYOUT","","",151,N],[18,"LCD_VERTICAL","","",151,N],[11,"empty","","Returns an empty set of flags.",151,[[],["fontinstanceflags"]]],[11,"all","","Returns the set containing all flags.",151,[[],["fontinstanceflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",151,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",151,[[["u32"]],["option",["fontinstanceflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",151,[[["u32"]],["fontinstanceflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",151,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",151,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",151,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",151,N],[11,"remove","","Removes the specified flags in-place.",151,N],[11,"toggle","","Toggles the specified flags in-place.",151,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",151,N],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"pipeline_id","","",71,[[["self"]],["pipelineid"]]],[11,"is_root","","",71,[[["self"]],["bool"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"new","","",72,[[["typedrect",["f32","layoutpixel"]]],["primitiveinfo",["layoutpixel"]]]],[11,"with_clip_rect","","",72,[[["typedrect",["f32","layoutpixel"]],["typedrect",["f32","layoutpixel"]]],["primitiveinfo",["layoutpixel"]]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from_raw","","",160,[[["usize"]],["externalevent"]]],[11,"unwrap","","Consumes self to make it obvious that the event should be forwarded only once.",160,[[["self"]],["usize"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"new","","",150,[[["u64"]],["propertybindingid"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"root_scroll_node","","",89,[[["pipelineid"]],["clipid"]]],[11,"root_reference_frame","","",89,[[["pipelineid"]],["clipid"]]],[11,"pipeline_id","","",89,[[["self"]],["pipelineid"]]],[11,"is_root_scroll_node","","",89,[[["self"]],["bool"]]],[11,"is_root_reference_frame","","",89,[[["self"]],["bool"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"get_plane_num","","",90,[[["self"]],["usize"]]],[11,"get_feature_string","","",90,[[["self"]],["str"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"new","","",95,[[["idnamespace"],["u32"]],["fontinstancekey"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"new","","",97,[[["vec",["u8"]]],["imagedata"]]],[11,"new_shared","","",97,[[["arc",["vec"]]],["imagedata"]]],[11,"new_blob_image","","",97,[[["vec",["u8"]]],["imagedata"]]],[11,"is_blob","","",97,[[["self"]],["bool"]]],[11,"uses_texture_cache","","",97,[[["self"]],["bool"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"new","","",157,[[["msgsender",["apimsg"]],["msgsender",["payload"]]],["renderapisender"]]],[11,"create_api","","Creates a new resource API object with a dedicated namespace.",157,[[["self"]],["renderapi"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"new","","",102,[[["idnamespace"],["u32"]],["fontkey"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"clip_rect","","",104,[[["self"]],["typedrect"]]],[11,"create_with_offset","","",104,[[["self"],["typedvector2d"]],["localclip"]]],[11,"clip_by","","",104,[[["self"],["typedrect"]],["localclip"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[18,"SCENE","","",146,N],[18,"FRAME","","",146,N],[11,"empty","","Returns an empty set of flags.",146,[[],["capturebits"]]],[11,"all","","Returns the set containing all flags.",146,[[],["capturebits"]]],[11,"bits","","Returns the raw value of the flags currently stored.",146,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",146,[[["u8"]],["option",["capturebits"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",146,[[["u8"]],["capturebits"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",146,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",146,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",146,[[["self"],["capturebits"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",146,[[["self"],["capturebits"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",146,N],[11,"remove","","Removes the specified flags in-place.",146,N],[11,"toggle","","Toggles the specified flags in-place.",146,N],[11,"set","","Inserts or removes the specified flags depending on the passed value.",146,N],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"is_empty","","",105,[[["self"]],["bool"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"simple","","",107,[[["clipid"]],["clipandscrollinfo"]]],[11,"new","","",107,[[["clipid"],["clipid"]],["clipandscrollinfo"]]],[11,"clip_node_id","","",107,[[["self"]],["clipid"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"new","","Create a new complex clip region.",108,[[["typedrect",["f32","layoutpixel"]],["borderradius"],["clipmode"]],["complexclipregion"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"new","","",110,[[["pipelineid"],["typedsize2d",["f32","layoutpixel"]]],["displaylistbuilder"]]],[11,"with_capacity","","",110,[[["pipelineid"],["typedsize2d",["f32","layoutpixel"]],["usize"]],["displaylistbuilder"]]],[11,"content_size","","Return the content size for this display list",110,[[["self"]],["typedsize2d",["f32","layoutpixel"]]]],[11,"save","","Saves the current display list state, so it may be `restore()`'d.",110,N],[11,"restore","","Restores the state of the builder to when `save()` was last called.",110,N],[11,"clear_save","","Discards the builder's save (indicating the attempted operation was successful).",110,N],[11,"print_display_list","","",110,N],[11,"push_rect","","",110,N],[11,"push_clear_rect","","",110,N],[11,"push_line","","",110,N],[11,"push_image","","",110,N],[11,"push_yuv_image","","Push a yuv image. All planar data in yuv image should use the same buffer type.",110,N],[11,"push_text","","",110,N],[11,"create_gradient","","",110,[[["self"],["typedpoint2d",["f32","layoutpixel"]],["typedpoint2d",["f32","layoutpixel"]],["vec",["gradientstop"]],["extendmode"]],["gradient"]]],[11,"create_radial_gradient","","",110,[[["self"],["typedpoint2d",["f32","layoutpixel"]],["typedsize2d",["f32","layoutpixel"]],["vec",["gradientstop"]],["extendmode"]],["radialgradient"]]],[11,"push_border","","",110,N],[11,"push_box_shadow","","",110,N],[11,"push_gradient","","Pushes a linear gradient to be displayed.",110,N],[11,"push_radial_gradient","","Pushes a radial gradient to be displayed.",110,N],[11,"push_reference_frame","","",110,[[["self"],["primitiveinfo"],["option",["propertybinding"]],["option",["typedtransform3d"]]],["clipid"]]],[11,"pop_reference_frame","","",110,N],[11,"push_stacking_context","","",110,N],[11,"pop_stacking_context","","",110,N],[11,"push_stops","","",110,N],[11,"define_scroll_frame","","",110,[[["self"],["option",["externalscrollid"]],["typedrect",["f32","layoutpixel"]],["typedrect",["f32","layoutpixel"]],["i"],["option",["imagemask"]],["scrollsensitivity"]],["clipid"]]],[11,"define_scroll_frame_with_parent","","",110,[[["self"],["clipid"],["option",["externalscrollid"]],["typedrect",["f32","layoutpixel"]],["typedrect",["f32","layoutpixel"]],["i"],["option",["imagemask"]],["scrollsensitivity"]],["clipid"]]],[11,"define_clip_chain","","",110,[[["self"],["option",["clipchainid"]],["i"]],["clipchainid"]]],[11,"define_clip","","",110,[[["self"],["typedrect",["f32","layoutpixel"]],["i"],["option",["imagemask"]]],["clipid"]]],[11,"define_clip_with_parent","","",110,[[["self"],["clipid"],["typedrect",["f32","layoutpixel"]],["i"],["option",["imagemask"]]],["clipid"]]],[11,"define_sticky_frame","","",110,[[["self"],["typedrect",["f32","layoutpixel"]],["typedsideoffsets2d",["option","unknownunit"]],["stickyoffsetbounds"],["stickyoffsetbounds"],["typedvector2d",["f32","layoutpixel"]]],["clipid"]]],[11,"push_clip_id","","",110,N],[11,"push_clip_and_scroll_info","","",110,N],[11,"pop_clip_id","","",110,N],[11,"push_iframe","","",110,N],[11,"push_shadow","","",110,N],[11,"pop_all_shadows","","",110,N],[11,"finalize","","",110,N],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[18,"BLACK","","",112,N],[18,"TRANSPARENT","","",112,N],[18,"WHITE","","",112,N],[11,"to_array","","",112,N],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"new","","Constructs a new additive `ColorU` from its components.",113,[[["u8"],["u8"],["u8"],["u8"]],["coloru"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"invalid","","",115,[[],["epoch"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"from_data","","",164,[[["vec",["u8"]],["builtdisplaylistdescriptor"]],["builtdisplaylist"]]],[11,"into_data","","",164,N],[11,"data","","",164,N],[11,"item_slice","","",164,N],[11,"descriptor","","",164,[[["self"]],["builtdisplaylistdescriptor"]]],[11,"times","","",164,N],[11,"total_clip_nodes","","",164,[[["self"]],["usize"]]],[11,"total_spatial_nodes","","",164,[[["self"]],["usize"]]],[11,"iter","","",164,[[["self"]],["builtdisplaylistiter"]]],[11,"get","","",164,[[["self"],["itemrange"]],["auxiter"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"new","","",165,N],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"into_iter","","",165,[[["self"]],["i"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"par_bridge","","",165,[[["self"]],["iterbridge"]]],[11,"limit_by","","",116,[[["self"],["fontrendermode"]],["fontrendermode"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"bytes_per_pixel","","",118,[[["self"]],["u32"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]]],"paths":[[3,"Payload"],[8,"PayloadSenderHelperMethods"],[8,"PayloadReceiverHelperMethods"],[3,"TextDisplayItem"],[3,"Transaction"],[4,"NinePatchBorderSource"],[3,"IdNamespace"],[4,"FontLCDFilter"],[4,"BorderStyle"],[4,"FilterOp"],[3,"BorderRadius"],[4,"SpecificDisplayItem"],[4,"AddFont"],[4,"ExtendMode"],[3,"HitTestItem"],[4,"ScrollClamping"],[4,"BlobImageError"],[3,"ImageKey"],[4,"ResourceUpdate"],[3,"BorderWidths"],[4,"ExternalImageType"],[3,"ClipChainItem"],[3,"SyntheticItalics"],[3,"GlyphDimensions"],[3,"ClipDisplayItem"],[4,"YuvColorSpace"],[3,"PushStackingContextDisplayItem"],[3,"ExternalImageData"],[3,"ClipChainId"],[4,"AlphaType"],[3,"Shadow"],[3,"AddFontInstance"],[3,"ImageDescriptor"],[4,"YuvData"],[3,"GradientStop"],[3,"YuvImageDisplayItem"],[3,"ReferenceFrame"],[3,"ScrollNodeState"],[3,"FontVariation"],[3,"GlyphOptions"],[4,"PropertyBinding"],[3,"HitTestResult"],[3,"ColorF"],[3,"DynamicProperties"],[4,"ClipMode"],[3,"BoxShadowDisplayItem"],[4,"BoxShadowClipMode"],[3,"ResourceId"],[3,"RasterizedBlobImage"],[3,"AddImage"],[3,"RadialGradient"],[3,"ExternalImageId"],[3,"NinePatchBorder"],[4,"GlyphRasterSpace"],[3,"BlobImageDescriptor"],[4,"ScrollSensitivity"],[3,"DocumentId"],[4,"FrameMsg"],[3,"PropertyValue"],[4,"LineOrientation"],[3,"StickyFrameDisplayItem"],[3,"BlobImageRequest"],[3,"PropertyBindingKey"],[3,"StickyOffsetBounds"],[3,"TexelRect"],[3,"NormalBorder"],[4,"LineStyle"],[3,"PipelineId"],[4,"DebugCommand"],[3,"IframeDisplayItem"],[3,"GlyphInstance"],[3,"ExternalScrollId"],[3,"PrimitiveInfo"],[3,"RadialGradientDisplayItem"],[4,"TextureTarget"],[3,"CapturedDocument"],[3,"RectangleDisplayItem"],[4,"SceneMsg"],[4,"ScrollLocation"],[4,"TransformStyle"],[3,"FontInstancePlatformOptions"],[3,"ScrollFrameDisplayItem"],[3,"LineDisplayItem"],[4,"FontHinting"],[3,"BorderDisplayItem"],[3,"BorderSide"],[3,"ImageDisplayItem"],[3,"FontInstanceOptions"],[8,"BlobImageResources"],[4,"ClipId"],[4,"YuvFormat"],[8,"RenderNotifier"],[3,"UpdateImage"],[4,"FontTemplate"],[4,"RepeatMode"],[3,"FontInstanceKey"],[8,"BlobImageRenderer"],[4,"ImageData"],[3,"StackingContext"],[3,"GenericDisplayItem"],[3,"NativeFontHandle"],[3,"ImageMask"],[3,"FontKey"],[4,"BorderRadiusKind"],[4,"LocalClip"],[3,"TransactionMsg"],[4,"ImageRendering"],[3,"ClipAndScrollInfo"],[3,"ComplexClipRegion"],[4,"ApiMsg"],[3,"DisplayListBuilder"],[4,"BorderDetails"],[3,"PremultipliedColorF"],[3,"ColorU"],[3,"GradientDisplayItem"],[3,"Epoch"],[4,"FontRenderMode"],[3,"PushReferenceFrameDisplayListItem"],[4,"ImageFormat"],[4,"MixBlendMode"],[3,"Gradient"],[3,"CpuProfile"],[3,"ExternalImage"],[3,"GpuProfile"],[3,"GraphicsApiInfo"],[3,"PipelineInfo"],[3,"Renderer"],[3,"RendererOptions"],[3,"RendererStats"],[4,"ChasePrimitive"],[4,"RendererKind"],[4,"ExternalImageSource"],[4,"GraphicsApi"],[3,"ProgramSources"],[3,"ProgramCache"],[3,"BinaryRecorder"],[3,"DebugFlags"],[8,"ApiRecordingReceiver"],[8,"ProgramCacheObserver"],[8,"AsyncPropertySampler"],[8,"OutputImageHandler"],[8,"ExternalImageHandler"],[8,"SceneBuilderHooks"],[8,"ThreadListener"],[3,"ClearCache"],[3,"PicturePixel"],[3,"CaptureBits"],[3,"Tiles"],[3,"ItemRange"],[3,"DevicePixel"],[3,"PropertyBindingId"],[3,"FontInstanceFlags"],[3,"HitTestFlags"],[3,"LayoutPixel"],[3,"WorldPixel"],[3,"ScrollLayerPixel"],[3,"BuiltDisplayListDescriptor"],[3,"RenderApiSender"],[3,"ZoomFactor"],[3,"MsgSender"],[3,"ExternalEvent"],[3,"MsgReceiver"],[3,"RenderApi"],[3,"SaveState"],[3,"BuiltDisplayList"],[3,"AuxIter"],[3,"BuiltDisplayListIter"],[3,"DisplayItemRef"]]};
searchIndex["webrender_api"]={"doc":"","items":[[3,"Transaction","webrender_api","A Transaction is a group of commands to apply atomically to a document.",N,N],[12,"resource_updates","","",0,N],[3,"TransactionMsg","","Represents a transaction in the format sent through the channel.",N,N],[12,"scene_ops","","",1,N],[12,"frame_ops","","",1,N],[12,"resource_updates","","",1,N],[12,"generate_frame","","",1,N],[12,"use_scene_builder_thread","","",1,N],[3,"AddImage","","",N,N],[12,"key","","",2,N],[12,"descriptor","","",2,N],[12,"data","","",2,N],[12,"tiling","","",2,N],[3,"UpdateImage","","",N,N],[12,"key","","",3,N],[12,"descriptor","","",3,N],[12,"data","","",3,N],[12,"dirty_rect","","",3,N],[3,"HitTestItem","","",N,N],[12,"pipeline","","The pipeline that the display item that was hit belongs to.",4,N],[12,"tag","","The tag of the hit display item.",4,N],[12,"point_in_viewport","","The hit point in the coordinate space of the \"viewport\" of the display item. The viewport is the scroll node formed by the root reference frame of the display item's pipeline.",4,N],[12,"point_relative_to_item","","The coordinates of the original hit test point relative to the origin of this item. This is useful for calculating things like text offsets in the client.",4,N],[3,"HitTestResult","","",N,N],[12,"items","","",5,N],[3,"HitTestFlags","","",N,N],[3,"AddFontInstance","","",N,N],[12,"key","","",6,N],[12,"font_key","","",6,N],[12,"glyph_size","","",6,N],[12,"options","","",6,N],[12,"platform_options","","",6,N],[12,"variations","","",6,N],[3,"CaptureBits","","Bit flags for WR stages to store in a capture.",N,N],[3,"ClearCache","","Mask for clearing caches in debug commands.",N,N],[3,"CapturedDocument","","Information about a loaded capture of each document that is returned by `RenderBackend`.",N,N],[12,"document_id","","",7,N],[12,"root_pipeline_id","","",7,N],[12,"window_size","","",7,N],[3,"Epoch","","",N,N],[12,"0","","",8,N],[3,"IdNamespace","","",N,N],[12,"0","","",9,N],[3,"DocumentId","","",N,N],[12,"0","","",10,N],[12,"1","","",10,N],[3,"PipelineId","","From the point of view of WR, `PipelineId` is completely opaque and generic as long as it's clonable, serializable, comparable, and hashable.",N,N],[12,"0","","",11,N],[12,"1","","",11,N],[3,"ResourceId","","",N,N],[12,"0","","",12,N],[3,"ExternalEvent","","An opaque pointer-sized value.",N,N],[3,"RenderApiSender","","",N,N],[3,"RenderApi","","",N,N],[3,"ScrollNodeState","","",N,N],[12,"id","","",13,N],[12,"scroll_offset","","",13,N],[3,"ZoomFactor","","Represents a zoom factor.",N,N],[3,"PropertyBindingId","","",N,N],[3,"PropertyBindingKey","","A unique key that is used for connecting animated property values to bindings in the display list.",N,N],[12,"id","","",14,N],[3,"PropertyValue","","The current value of an animated property. This is supplied by the calling code.",N,N],[12,"key","","",15,N],[12,"value","","",15,N],[3,"DynamicProperties","","When using `generate_frame()`, a list of `PropertyValue` structures can optionally be supplied to provide the current value of any animated properties.",N,N],[12,"transforms","","",16,N],[12,"floats","","",16,N],[3,"PremultipliedColorF","","Represents pre-multiplied RGBA colors with floating point numbers.",N,N],[12,"r","","",17,N],[12,"g","","",17,N],[12,"b","","",17,N],[12,"a","","",17,N],[3,"ColorF","","Represents RGBA screen colors with floating point numbers.",N,N],[12,"r","","",18,N],[12,"g","","",18,N],[12,"b","","",18,N],[12,"a","","",18,N],[3,"ColorU","","Represents RGBA screen colors with one byte per channel.",N,N],[12,"r","","",19,N],[12,"g","","",19,N],[12,"b","","",19,N],[12,"a","","",19,N],[3,"ClipAndScrollInfo","","",N,N],[12,"scroll_node_id","","",20,N],[12,"clip_node_id","","",20,N],[3,"GenericDisplayItem","","The DI is generic over the specifics, while allows to use the \"complete\" version of it for convenient serialization.",N,N],[12,"item","","",21,N],[12,"clip_and_scroll","","",21,N],[12,"info","","",21,N],[3,"PrimitiveInfo","","",N,N],[12,"rect","","",22,N],[12,"clip_rect","","",22,N],[12,"is_backface_visible","","",22,N],[12,"tag","","",22,N],[3,"ClipDisplayItem","","",N,N],[12,"id","","",23,N],[12,"image_mask","","",23,N],[3,"StickyOffsetBounds","","The minimum and maximum allowable offset for a sticky frame in a single dimension.",N,N],[12,"min","","The minimum offset for this frame, typically a negative value, which specifies how far in the negative direction the sticky frame can offset its contents in this dimension.",24,N],[12,"max","","The maximum offset for this frame, typically a positive value, which specifies how far in the positive direction the sticky frame can offset its contents in this dimension.",24,N],[3,"StickyFrameDisplayItem","","",N,N],[12,"id","","",25,N],[12,"margins","","The margins that should be maintained between the edge of the parent viewport and this sticky frame. A margin of None indicates that the sticky frame should not stick at all to that particular edge of the viewport.",25,N],[12,"vertical_offset_bounds","","The minimum and maximum vertical offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",25,N],[12,"horizontal_offset_bounds","","The minimum and maximum horizontal offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",25,N],[12,"previously_applied_offset","","The amount of offset that has already been applied to the sticky frame. A positive y component this field means that a top-sticky item was in a scrollframe that has been scrolled down, such that the sticky item's position needed to be offset downwards by `previously_applied_offset.y`. A negative y component corresponds to the upward offset applied due to bottom-stickiness. The x-axis works analogously.",25,N],[3,"ScrollFrameDisplayItem","","",N,N],[12,"clip_id","","",26,N],[12,"scroll_frame_id","","",26,N],[12,"external_id","","",26,N],[12,"image_mask","","",26,N],[12,"scroll_sensitivity","","",26,N],[3,"RectangleDisplayItem","","",N,N],[12,"color","","",27,N],[3,"LineDisplayItem","","",N,N],[12,"orientation","","",28,N],[12,"wavy_line_thickness","","",28,N],[12,"color","","",28,N],[12,"style","","",28,N],[3,"TextDisplayItem","","",N,N],[12,"font_key","","",29,N],[12,"color","","",29,N],[12,"glyph_options","","",29,N],[3,"NormalBorder","","",N,N],[12,"left","","",30,N],[12,"right","","",30,N],[12,"top","","",30,N],[12,"bottom","","",30,N],[12,"radius","","",30,N],[3,"NinePatchBorder","","",N,N],[12,"source","","Describes what to use as the 9-patch source image. If this is an image, it will be stretched to fill the size given by width x height.",31,N],[12,"width","","The width of the 9-part image.",31,N],[12,"height","","The height of the 9-part image.",31,N],[12,"slice","","Distances from each edge where the image should be sliced up. These values are in 9-part-image space (the same space as width and height), and the resulting image parts will be used to fill the corresponding parts of the border as given by the border widths. This can lead to stretching. Slices can be overlapping. In that case, the same pixels from the 9-part image will show up in multiple parts of the resulting border.",31,N],[12,"fill","","Controls whether the center of the 9 patch image is rendered or ignored. The center is never rendered if the slices are overlapping.",31,N],[12,"repeat_horizontal","","Determines what happens if the horizontal side parts of the 9-part image have a different size than the horizontal parts of the border.",31,N],[12,"repeat_vertical","","Determines what happens if the vertical side parts of the 9-part image have a different size than the vertical parts of the border.",31,N],[12,"outset","","The outset for the border. TODO(mrobinson): This should be removed and handled by the client.",31,N],[3,"BorderDisplayItem","","",N,N],[12,"widths","","",32,N],[12,"details","","",32,N],[3,"BorderRadius","","",N,N],[12,"top_left","","",33,N],[12,"top_right","","",33,N],[12,"bottom_left","","",33,N],[12,"bottom_right","","",33,N],[3,"BorderWidths","","",N,N],[12,"left","","",34,N],[12,"top","","",34,N],[12,"right","","",34,N],[12,"bottom","","",34,N],[3,"BorderSide","","",N,N],[12,"color","","",35,N],[12,"style","","",35,N],[3,"BoxShadowDisplayItem","","",N,N],[12,"box_bounds","","",36,N],[12,"offset","","",36,N],[12,"color","","",36,N],[12,"blur_radius","","",36,N],[12,"spread_radius","","",36,N],[12,"border_radius","","",36,N],[12,"clip_mode","","",36,N],[3,"Shadow","","",N,N],[12,"offset","","",37,N],[12,"color","","",37,N],[12,"blur_radius","","",37,N],[3,"Gradient","","",N,N],[12,"start_point","","",38,N],[12,"end_point","","",38,N],[12,"extend_mode","","",38,N],[3,"GradientDisplayItem","","",N,N],[12,"gradient","","",39,N],[12,"tile_size","","",39,N],[12,"tile_spacing","","",39,N],[3,"GradientStop","","",N,N],[12,"offset","","",40,N],[12,"color","","",40,N],[3,"RadialGradient","","",N,N],[12,"center","","",41,N],[12,"radius","","",41,N],[12,"start_offset","","",41,N],[12,"end_offset","","",41,N],[12,"extend_mode","","",41,N],[3,"ClipChainItem","","",N,N],[12,"id","","",42,N],[12,"parent","","",42,N],[3,"RadialGradientDisplayItem","","",N,N],[12,"gradient","","",43,N],[12,"tile_size","","",43,N],[12,"tile_spacing","","",43,N],[3,"PushReferenceFrameDisplayListItem","","",N,N],[12,"reference_frame","","",44,N],[3,"ReferenceFrame","","",N,N],[12,"transform","","",45,N],[12,"perspective","","",45,N],[12,"id","","",45,N],[3,"PushStackingContextDisplayItem","","",N,N],[12,"stacking_context","","",46,N],[3,"StackingContext","","",N,N],[12,"transform_style","","",47,N],[12,"mix_blend_mode","","",47,N],[12,"clip_node_id","","",47,N],[12,"glyph_raster_space","","",47,N],[3,"IframeDisplayItem","","",N,N],[12,"clip_id","","",48,N],[12,"pipeline_id","","",48,N],[12,"ignore_missing_pipeline","","",48,N],[3,"ImageDisplayItem","","",N,N],[12,"image_key","","",49,N],[12,"stretch_size","","",49,N],[12,"tile_spacing","","",49,N],[12,"image_rendering","","",49,N],[12,"alpha_type","","",49,N],[3,"YuvImageDisplayItem","","",N,N],[12,"yuv_data","","",50,N],[12,"color_space","","",50,N],[12,"image_rendering","","",50,N],[3,"ImageMask","","",N,N],[12,"image","","",51,N],[12,"rect","","",51,N],[12,"repeat","","",51,N],[3,"ComplexClipRegion","","",N,N],[12,"rect","","The boundaries of the rectangle.",52,N],[12,"radii","","Border radii of this rectangle.",52,N],[12,"mode","","Whether we are clipping inside or outside the region.",52,N],[3,"ClipChainId","","",N,N],[12,"0","","",53,N],[12,"1","","",53,N],[3,"ExternalScrollId","","An external identifier that uniquely identifies a scroll frame independent of its ClipId, which may change from frame to frame. This should be unique within a pipeline. WebRender makes no attempt to ensure uniqueness. The zero value is reserved for use by the root scroll node of every pipeline, which always has an external id.",N,N],[12,"0","","",54,N],[12,"1","","",54,N],[3,"ItemRange","","",N,N],[3,"BuiltDisplayList","","A display list.",N,N],[3,"BuiltDisplayListDescriptor","","Describes the memory layout of a display list.",N,N],[3,"BuiltDisplayListIter","","",N,N],[3,"DisplayItemRef","","",N,N],[3,"AuxIter","","",N,N],[3,"SaveState","","",N,N],[3,"DisplayListBuilder","","",N,N],[12,"data","","",55,N],[12,"pipeline_id","","",55,N],[3,"NativeFontHandle","","",N,N],[12,"pathname","","",56,N],[12,"index","","",56,N],[3,"GlyphDimensions","","",N,N],[12,"left","","",57,N],[12,"top","","",57,N],[12,"width","","",57,N],[12,"height","","",57,N],[12,"advance","","",57,N],[3,"FontKey","","",N,N],[12,"0","","",58,N],[12,"1","","",58,N],[3,"FontVariation","","",N,N],[12,"tag","","",59,N],[12,"value","","",59,N],[3,"GlyphOptions","","",N,N],[12,"render_mode","","",60,N],[12,"flags","","",60,N],[3,"FontInstanceFlags","","",N,N],[3,"SyntheticItalics","","",N,N],[12,"angle","","",61,N],[3,"FontInstanceOptions","","",N,N],[12,"render_mode","","",62,N],[12,"flags","","",62,N],[12,"bg_color","","When bg_color.a is != 0 and render_mode is FontRenderMode::Subpixel, the text will be rendered with bg_color.r/g/b as an opaque estimated background color.",62,N],[12,"synthetic_italics","","",62,N],[3,"FontInstancePlatformOptions","","",N,N],[12,"lcd_filter","","",63,N],[12,"hinting","","",63,N],[3,"FontInstanceKey","","",N,N],[12,"0","","",64,N],[12,"1","","",64,N],[3,"GlyphInstance","","",N,N],[12,"index","","",65,N],[12,"point","","",65,N],[3,"ImageKey","","",N,N],[12,"0","","",66,N],[12,"1","","",66,N],[3,"ExternalImageId","","An arbitrary identifier for an external image provided by the application. It must be a unique identifier for each external image.",N,N],[12,"0","","",67,N],[3,"ExternalImageData","","",N,N],[12,"id","","",68,N],[12,"channel_index","","",68,N],[12,"image_type","","",68,N],[3,"ImageDescriptor","","",N,N],[12,"format","","",69,N],[12,"size","","",69,N],[12,"stride","","",69,N],[12,"offset","","",69,N],[12,"is_opaque","","",69,N],[12,"allow_mipmaps","","",69,N],[3,"BlobImageDescriptor","","",N,N],[12,"size","","",70,N],[12,"offset","","",70,N],[12,"format","","",70,N],[3,"RasterizedBlobImage","","",N,N],[12,"size","","",71,N],[12,"data","","",71,N],[3,"BlobImageRequest","","",N,N],[12,"key","","",72,N],[12,"tile","","",72,N],[3,"DevicePixel","","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",N,N],[3,"PicturePixel","","Geometry in the coordinate system of a Picture (intermediate surface) in physical pixels.",N,N],[3,"LayoutPixel","","Geometry in a stacking context's local coordinate space (logical pixels).",N,N],[3,"ScrollLayerPixel","","Geometry in a layer's scrollable parent coordinate space (logical pixels).",N,N],[3,"WorldPixel","","Geometry in the document's coordinate space (logical pixels).",N,N],[3,"Tiles","","Offset in number of tiles.",N,N],[3,"TexelRect","","Stores two coordinates in texel space. The coordinates are stored in texel coordinates because the texture atlas may grow. Storing them as texel coords and normalizing the UVs in the vertex shader means nothing needs to be updated on the CPU when the texture size changes.",N,N],[12,"uv0","","",73,N],[12,"uv1","","",73,N],[4,"ResourceUpdate","","",N,N],[13,"AddImage","","",74,N],[13,"UpdateImage","","",74,N],[13,"DeleteImage","","",74,N],[13,"AddFont","","",74,N],[13,"DeleteFont","","",74,N],[13,"AddFontInstance","","",74,N],[13,"DeleteFontInstance","","",74,N],[4,"AddFont","","",N,N],[13,"Raw","","",75,N],[13,"Native","","",75,N],[4,"SceneMsg","","",N,N],[13,"UpdateEpoch","","",76,N],[13,"SetPageZoom","","",76,N],[13,"SetPinchZoom","","",76,N],[13,"SetRootPipeline","","",76,N],[13,"RemovePipeline","","",76,N],[13,"SetDisplayList","","",76,N],[12,"list_descriptor","webrender_api::SceneMsg","",76,N],[12,"epoch","","",76,N],[12,"pipeline_id","","",76,N],[12,"background","","",76,N],[12,"viewport_size","","",76,N],[12,"content_size","","",76,N],[12,"preserve_frame_state","","",76,N],[13,"SetWindowParameters","webrender_api","",76,N],[12,"window_size","webrender_api::SceneMsg","",76,N],[12,"inner_rect","","",76,N],[12,"device_pixel_ratio","","",76,N],[4,"FrameMsg","webrender_api","",N,N],[13,"UpdateEpoch","","",77,N],[13,"HitTest","","",77,N],[13,"SetPan","","",77,N],[13,"EnableFrameOutput","","",77,N],[13,"Scroll","","",77,N],[13,"ScrollNodeWithId","","",77,N],[13,"GetScrollNodeState","","",77,N],[13,"UpdateDynamicProperties","","",77,N],[13,"AppendDynamicProperties","","",77,N],[4,"DebugCommand","","",N,N],[13,"EnableProfiler","","Display the frame profiler on screen.",78,N],[13,"EnableTextureCacheDebug","","Display all texture cache pages on screen.",78,N],[13,"EnableRenderTargetDebug","","Display intermediate render targets on screen.",78,N],[13,"EnableGpuTimeQueries","","Display GPU timing results.",78,N],[13,"EnableGpuSampleQueries","","Display GPU overdraw results",78,N],[13,"EnableDualSourceBlending","","Configure if dual-source blending is used, if available.",78,N],[13,"EnableNewFrameIndicator","","Show an indicator that moves every time a frame is rendered.",78,N],[13,"EnableNewSceneIndicator","","Show an indicator that moves every time a scene is built.",78,N],[13,"FetchDocuments","","Fetch current documents and display lists.",78,N],[13,"FetchPasses","","Fetch current passes and batches.",78,N],[13,"FetchClipScrollTree","","Fetch clip-scroll tree.",78,N],[13,"FetchRenderTasks","","Fetch render tasks.",78,N],[13,"FetchScreenshot","","Fetch screenshot.",78,N],[13,"SaveCapture","","Save a capture of all the documents state.",78,N],[13,"LoadCapture","","Load a capture of all the documents state.",78,N],[13,"ClearCaches","","Clear cached resources, forcing them to be re-uploaded from templates.",78,N],[13,"InvalidateGpuCache","","Invalidate GPU cache, forcing the update from the CPU mirror.",78,N],[4,"ApiMsg","","",N,N],[13,"UpdateResources","","Add/remove/update images and fonts.",79,N],[13,"GetGlyphDimensions","","Gets the glyph dimensions",79,N],[13,"GetGlyphIndices","","Gets the glyph indices from a string",79,N],[13,"CloneApi","","Adds a new document namespace.",79,N],[13,"AddDocument","","Adds a new document with given initial size.",79,N],[13,"UpdateDocument","","A message targeted at a particular document.",79,N],[13,"DeleteDocument","","Deletes an existing document.",79,N],[13,"ExternalEvent","","An opaque handle that must be passed to the render notifier. It is used by Gecko to forward gecko-specific messages to the render thread preserving the ordering within the other messages.",79,N],[13,"ClearNamespace","","Removes all resources associated with a namespace.",79,N],[13,"MemoryPressure","","Flush from the caches anything that isn't necessary, to free some memory.",79,N],[13,"DebugCommand","","Change debugging options.",79,N],[13,"WakeUp","","Wakes the render backend's event loop up. Needed when an event is communicated through another channel.",79,N],[13,"WakeSceneBuilder","","",79,N],[13,"FlushSceneBuilder","","",79,N],[13,"ShutDown","","",79,N],[4,"ScrollClamping","","",N,N],[13,"ToContentBounds","","",80,N],[13,"NoClamping","","",80,N],[4,"ScrollLocation","","",N,N],[13,"Delta","","Scroll by a certain amount.",81,N],[13,"Start","","Scroll to very top of element.",81,N],[13,"End","","Scroll to very bottom of element.",81,N],[4,"PropertyBinding","","A binding property can either be a specific value (the normal, non-animated case) or point to a binding location to fetch the current value from. Note that Binding has also a non-animated value, the value is used for the case where the animation is still in-delay phase (i.e. the animation doesn't produce any animation values).",N,N],[13,"Value","","",82,N],[13,"Binding","","",82,N],[4,"SpecificDisplayItem","","",N,N],[13,"Clip","","",83,N],[13,"ScrollFrame","","",83,N],[13,"StickyFrame","","",83,N],[13,"Rectangle","","",83,N],[13,"ClearRectangle","","",83,N],[13,"Line","","",83,N],[13,"Text","","",83,N],[13,"Image","","",83,N],[13,"YuvImage","","",83,N],[13,"Border","","",83,N],[13,"BoxShadow","","",83,N],[13,"Gradient","","",83,N],[13,"RadialGradient","","",83,N],[13,"ClipChain","","",83,N],[13,"Iframe","","",83,N],[13,"PushStackingContext","","",83,N],[13,"PopStackingContext","","",83,N],[13,"PushReferenceFrame","","",83,N],[13,"PopReferenceFrame","","",83,N],[13,"SetGradientStops","","",83,N],[13,"PushShadow","","",83,N],[13,"PopAllShadows","","",83,N],[4,"ScrollSensitivity","","",N,N],[13,"ScriptAndInputEvents","","",84,N],[13,"Script","","",84,N],[4,"LineOrientation","","",N,N],[13,"Vertical","","",85,N],[13,"Horizontal","","",85,N],[4,"LineStyle","","",N,N],[13,"Solid","","",86,N],[13,"Dotted","","",86,N],[13,"Dashed","","",86,N],[13,"Wavy","","",86,N],[4,"RepeatMode","","",N,N],[13,"Stretch","","",87,N],[13,"Repeat","","",87,N],[13,"Round","","",87,N],[13,"Space","","",87,N],[4,"NinePatchBorderSource","","",N,N],[13,"Image","","",88,N],[13,"Gradient","","",88,N],[13,"RadialGradient","","",88,N],[4,"BorderDetails","","",N,N],[13,"Normal","","",89,N],[13,"NinePatch","","",89,N],[4,"BorderRadiusKind","","",N,N],[13,"Uniform","","",90,N],[13,"NonUniform","","",90,N],[4,"BorderStyle","","",N,N],[13,"None","","",91,N],[13,"Solid","","",91,N],[13,"Double","","",91,N],[13,"Dotted","","",91,N],[13,"Dashed","","",91,N],[13,"Hidden","","",91,N],[13,"Groove","","",91,N],[13,"Ridge","","",91,N],[13,"Inset","","",91,N],[13,"Outset","","",91,N],[4,"BoxShadowClipMode","","",N,N],[13,"Outset","","",92,N],[13,"Inset","","",92,N],[4,"ExtendMode","","",N,N],[13,"Clamp","","",93,N],[13,"Repeat","","",93,N],[4,"TransformStyle","","",N,N],[13,"Flat","","",94,N],[13,"Preserve3D","","",94,N],[4,"GlyphRasterSpace","","",N,N],[13,"Local","","",95,N],[13,"Screen","","",95,N],[4,"MixBlendMode","","",N,N],[13,"Normal","","",96,N],[13,"Multiply","","",96,N],[13,"Screen","","",96,N],[13,"Overlay","","",96,N],[13,"Darken","","",96,N],[13,"Lighten","","",96,N],[13,"ColorDodge","","",96,N],[13,"ColorBurn","","",96,N],[13,"HardLight","","",96,N],[13,"SoftLight","","",96,N],[13,"Difference","","",96,N],[13,"Exclusion","","",96,N],[13,"Hue","","",96,N],[13,"Saturation","","",96,N],[13,"Color","","",96,N],[13,"Luminosity","","",96,N],[4,"FilterOp","","",N,N],[13,"Blur","","",97,N],[13,"Brightness","","",97,N],[13,"Contrast","","",97,N],[13,"Grayscale","","",97,N],[13,"HueRotate","","",97,N],[13,"Invert","","",97,N],[13,"Opacity","","",97,N],[13,"Saturate","","",97,N],[13,"Sepia","","",97,N],[13,"DropShadow","","",97,N],[13,"ColorMatrix","","",97,N],[4,"ImageRendering","","",N,N],[13,"Auto","","",98,N],[13,"CrispEdges","","",98,N],[13,"Pixelated","","",98,N],[4,"AlphaType","","",N,N],[13,"Alpha","","",99,N],[13,"PremultipliedAlpha","","",99,N],[4,"YuvColorSpace","","",N,N],[13,"Rec601","","",100,N],[13,"Rec709","","",100,N],[4,"YuvData","","",N,N],[13,"NV12","","",101,N],[13,"PlanarYCbCr","","",101,N],[13,"InterleavedYCbCr","","",101,N],[4,"YuvFormat","","",N,N],[13,"NV12","","",102,N],[13,"PlanarYCbCr","","",102,N],[13,"InterleavedYCbCr","","",102,N],[4,"LocalClip","","",N,N],[13,"Rect","","",103,N],[13,"RoundedRect","","",103,N],[4,"ClipMode","","",N,N],[13,"Clip","","",104,N],[13,"ClipOut","","",104,N],[4,"ClipId","","",N,N],[13,"Spatial","","",105,N],[13,"Clip","","",105,N],[13,"ClipChain","","",105,N],[4,"FontTemplate","","",N,N],[13,"Raw","","",106,N],[13,"Native","","",106,N],[4,"FontRenderMode","","",N,N],[13,"Mono","","",107,N],[13,"Alpha","","",107,N],[13,"Subpixel","","",107,N],[4,"FontLCDFilter","","",N,N],[13,"None","","",108,N],[13,"Default","","",108,N],[13,"Light","","",108,N],[13,"Legacy","","",108,N],[4,"FontHinting","","",N,N],[13,"None","","",109,N],[13,"Mono","","",109,N],[13,"Light","","",109,N],[13,"Normal","","",109,N],[13,"LCD","","",109,N],[4,"TextureTarget","","",N,N],[13,"Default","","",110,N],[13,"Array","","",110,N],[13,"Rect","","",110,N],[13,"External","","",110,N],[4,"ExternalImageType","","",N,N],[13,"TextureHandle","","",111,N],[13,"Buffer","","",111,N],[4,"ImageFormat","","",N,N],[13,"R8","","",112,N],[13,"BGRA8","","",112,N],[13,"RGBAF32","","",112,N],[13,"RG8","","",112,N],[13,"RGBAI32","","",112,N],[4,"ImageData","","",N,N],[13,"Raw","","",113,N],[13,"Blob","","",113,N],[13,"External","","",113,N],[4,"BlobImageError","","",N,N],[13,"Oom","","",114,N],[13,"InvalidKey","","",114,N],[13,"InvalidData","","",114,N],[13,"Other","","",114,N],[5,"as_scroll_parent_rect","","",N,[[["layoutrect"]],["scrolllayerrect"]]],[5,"as_scroll_parent_vector","","",N,[[["layoutvector2d"]],["scrolllayervector2d"]]],[11,"clone","","",74,[[["self"]],["resourceupdate"]]],[11,"new","","",0,[[],["self"]]],[11,"skip_scene_builder","","",0,[[["self"]]]],[11,"use_scene_builder_thread","","",0,[[["self"]]]],[11,"is_empty","","",0,[[["self"]],["bool"]]],[11,"update_epoch","","",0,[[["self"],["pipelineid"],["epoch"]]]],[11,"set_root_pipeline","","Sets the root pipeline.",0,[[["self"],["pipelineid"]]]],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",0,[[["self"],["pipelineid"]]]],[11,"set_display_list","","Supplies a new frame to WebRender.",0,N],[11,"update_resources","","",0,[[["self"],["vec",["resourceupdate"]]]]],[11,"set_window_parameters","","",0,[[["self"],["deviceuintsize"],["deviceuintrect"],["f32"]]]],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",0,[[["self"],["scrolllocation"],["worldpoint"]]]],[11,"scroll_node_with_id","","",0,[[["self"],["layoutpoint"],["externalscrollid"],["scrollclamping"]]]],[11,"set_page_zoom","","",0,[[["self"],["zoomfactor"]]]],[11,"set_pinch_zoom","","",0,[[["self"],["zoomfactor"]]]],[11,"set_pan","","",0,[[["self"],["deviceintpoint"]]]],[11,"generate_frame","","Generate a new frame. When it's done and a RenderNotifier has been set in `webrender::Renderer`, [new_frame_ready()][notifier] gets called. Note that the notifier is called even if the frame generation was a no-op; the arguments passed to `new_frame_ready` will provide information as to what happened.",0,[[["self"]]]],[11,"update_dynamic_properties","","Supply a list of animated property bindings that should be used to resolve bindings in the current display list.",0,[[["self"],["dynamicproperties"]]]],[11,"append_dynamic_properties","","Add to the list of animated property bindings that should be used to resolve bindings in the current display list. This is a convenience method so the caller doesn't have to figure out all the dynamic properties before setting them on the transaction but can do them incrementally.",0,[[["self"],["dynamicproperties"]]]],[11,"enable_frame_output","","Enable copying of the output of this pipeline id to an external texture for callers to consume.",0,[[["self"],["pipelineid"],["bool"]]]],[11,"get_frame_ops","","Consumes this object and just returns the frame ops.",0,[[["self"]],["vec",["framemsg"]]]],[11,"add_image","","",0,[[["self"],["imagekey"],["imagedescriptor"],["imagedata"],["option",["tilesize"]]]]],[11,"update_image","","",0,[[["self"],["imagekey"],["imagedescriptor"],["imagedata"],["option",["deviceuintrect"]]]]],[11,"delete_image","","",0,[[["self"],["imagekey"]]]],[11,"add_raw_font","","",0,[[["self"],["fontkey"],["vec",["u8"]],["u32"]]]],[11,"add_native_font","","",0,[[["self"],["fontkey"],["nativefonthandle"]]]],[11,"delete_font","","",0,[[["self"],["fontkey"]]]],[11,"add_font_instance","","",0,[[["self"],["fontinstancekey"],["fontkey"],["au"],["option",["fontinstanceoptions"]],["option",["fontinstanceplatformoptions"]],["vec",["fontvariation"]]]]],[11,"delete_font_instance","","",0,[[["self"],["fontinstancekey"]]]],[11,"merge","","",0,[[["self"],["vec",["resourceupdate"]]]]],[11,"clear","","",0,[[["self"]]]],[11,"clone","","",1,[[["self"]],["transactionmsg"]]],[11,"is_empty","","",1,[[["self"]],["bool"]]],[11,"clone","","",2,[[["self"]],["addimage"]]],[11,"clone","","",3,[[["self"]],["updateimage"]]],[11,"clone","","",75,[[["self"]],["addfont"]]],[11,"clone","","",4,[[["self"]],["hittestitem"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["hittestitem"]],["bool"]]],[11,"ne","","",4,[[["self"],["hittestitem"]],["bool"]]],[11,"clone","","",5,[[["self"]],["hittestresult"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["hittestresult"]]],[11,"eq","","",115,[[["self"],["hittestflags"]],["bool"]]],[11,"ne","","",115,[[["self"],["hittestflags"]],["bool"]]],[11,"clone","","",115,[[["self"]],["hittestflags"]]],[11,"partial_cmp","","",115,[[["self"],["hittestflags"]],["option",["ordering"]]]],[11,"lt","","",115,[[["self"],["hittestflags"]],["bool"]]],[11,"le","","",115,[[["self"],["hittestflags"]],["bool"]]],[11,"gt","","",115,[[["self"],["hittestflags"]],["bool"]]],[11,"ge","","",115,[[["self"],["hittestflags"]],["bool"]]],[11,"cmp","","",115,[[["self"],["hittestflags"]],["ordering"]]],[11,"hash","","",115,N],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[18,"FIND_ALL","","",115,N],[18,"POINT_RELATIVE_TO_PIPELINE_VIEWPORT","","",115,N],[11,"empty","","Returns an empty set of flags.",115,[[],["hittestflags"]]],[11,"all","","Returns the set containing all flags.",115,[[],["hittestflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",115,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",115,[[["u8"]],["option",["hittestflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",115,[[["u8"]],["hittestflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",115,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",115,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",115,[[["self"],["hittestflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",115,[[["self"],["hittestflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",115,[[["self"],["hittestflags"]]]],[11,"remove","","Removes the specified flags in-place.",115,[[["self"],["hittestflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",115,[[["self"],["hittestflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",115,[[["self"],["hittestflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",115,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"bitor_assign","","Adds the set of flags.",115,[[["self"],["hittestflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",115,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",115,[[["self"],["hittestflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",115,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",115,[[["self"],["hittestflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",115,[[["self"],["hittestflags"]],["hittestflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",115,[[["self"],["hittestflags"]]]],[11,"not","","Returns the complement of this set of flags.",115,[[["self"]],["hittestflags"]]],[11,"extend","","",115,[[["self"],["t"]]]],[11,"from_iter","","",115,[[["t"]],["hittestflags"]]],[11,"clone","","",6,[[["self"]],["addfontinstance"]]],[11,"clone","","",76,[[["self"]],["scenemsg"]]],[11,"clone","","",77,[[["self"]],["framemsg"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"eq","","",116,[[["self"],["capturebits"]],["bool"]]],[11,"ne","","",116,[[["self"],["capturebits"]],["bool"]]],[11,"clone","","",116,[[["self"]],["capturebits"]]],[11,"partial_cmp","","",116,[[["self"],["capturebits"]],["option",["ordering"]]]],[11,"lt","","",116,[[["self"],["capturebits"]],["bool"]]],[11,"le","","",116,[[["self"],["capturebits"]],["bool"]]],[11,"gt","","",116,[[["self"],["capturebits"]],["bool"]]],[11,"ge","","",116,[[["self"],["capturebits"]],["bool"]]],[11,"cmp","","",116,[[["self"],["capturebits"]],["ordering"]]],[11,"hash","","",116,N],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[18,"SCENE","","",116,N],[18,"FRAME","","",116,N],[11,"empty","","Returns an empty set of flags.",116,[[],["capturebits"]]],[11,"all","","Returns the set containing all flags.",116,[[],["capturebits"]]],[11,"bits","","Returns the raw value of the flags currently stored.",116,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",116,[[["u8"]],["option",["capturebits"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",116,[[["u8"]],["capturebits"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",116,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",116,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",116,[[["self"],["capturebits"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",116,[[["self"],["capturebits"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",116,[[["self"],["capturebits"]]]],[11,"remove","","Removes the specified flags in-place.",116,[[["self"],["capturebits"]]]],[11,"toggle","","Toggles the specified flags in-place.",116,[[["self"],["capturebits"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",116,[[["self"],["capturebits"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",116,[[["self"],["capturebits"]],["capturebits"]]],[11,"bitor_assign","","Adds the set of flags.",116,[[["self"],["capturebits"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",116,[[["self"],["capturebits"]],["capturebits"]]],[11,"bitxor_assign","","Toggles the set of flags.",116,[[["self"],["capturebits"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",116,[[["self"],["capturebits"]],["capturebits"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",116,[[["self"],["capturebits"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",116,[[["self"],["capturebits"]],["capturebits"]]],[11,"sub_assign","","Disables all flags enabled in the set.",116,[[["self"],["capturebits"]]]],[11,"not","","Returns the complement of this set of flags.",116,[[["self"]],["capturebits"]]],[11,"extend","","",116,[[["self"],["t"]]]],[11,"from_iter","","",116,[[["t"]],["capturebits"]]],[11,"eq","","",117,[[["self"],["clearcache"]],["bool"]]],[11,"ne","","",117,[[["self"],["clearcache"]],["bool"]]],[11,"clone","","",117,[[["self"]],["clearcache"]]],[11,"partial_cmp","","",117,[[["self"],["clearcache"]],["option",["ordering"]]]],[11,"lt","","",117,[[["self"],["clearcache"]],["bool"]]],[11,"le","","",117,[[["self"],["clearcache"]],["bool"]]],[11,"gt","","",117,[[["self"],["clearcache"]],["bool"]]],[11,"ge","","",117,[[["self"],["clearcache"]],["bool"]]],[11,"cmp","","",117,[[["self"],["clearcache"]],["ordering"]]],[11,"hash","","",117,N],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[18,"IMAGES","","",117,N],[18,"GLYPHS","","",117,N],[18,"GLYPH_DIMENSIONS","","",117,N],[18,"RENDER_TASKS","","",117,N],[18,"TEXTURE_CACHE","","",117,N],[11,"empty","","Returns an empty set of flags.",117,[[],["clearcache"]]],[11,"all","","Returns the set containing all flags.",117,[[],["clearcache"]]],[11,"bits","","Returns the raw value of the flags currently stored.",117,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",117,[[["u8"]],["option",["clearcache"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",117,[[["u8"]],["clearcache"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",117,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",117,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",117,[[["self"],["clearcache"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",117,[[["self"],["clearcache"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",117,[[["self"],["clearcache"]]]],[11,"remove","","Removes the specified flags in-place.",117,[[["self"],["clearcache"]]]],[11,"toggle","","Toggles the specified flags in-place.",117,[[["self"],["clearcache"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",117,[[["self"],["clearcache"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",117,[[["self"],["clearcache"]],["clearcache"]]],[11,"bitor_assign","","Adds the set of flags.",117,[[["self"],["clearcache"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",117,[[["self"],["clearcache"]],["clearcache"]]],[11,"bitxor_assign","","Toggles the set of flags.",117,[[["self"],["clearcache"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",117,[[["self"],["clearcache"]],["clearcache"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",117,[[["self"],["clearcache"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",117,[[["self"],["clearcache"]],["clearcache"]]],[11,"sub_assign","","Disables all flags enabled in the set.",117,[[["self"],["clearcache"]]]],[11,"not","","Returns the complement of this set of flags.",117,[[["self"]],["clearcache"]]],[11,"extend","","",117,[[["self"],["t"]]]],[11,"from_iter","","",117,[[["t"]],["clearcache"]]],[11,"clone","","",7,[[["self"]],["captureddocument"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",78,[[["self"]],["debugcommand"]]],[11,"clone","","",79,[[["self"]],["apimsg"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["epoch"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"hash","","",8,N],[11,"cmp","","",8,[[["self"],["epoch"]],["ordering"]]],[11,"eq","","",8,[[["self"],["epoch"]],["bool"]]],[11,"ne","","",8,[[["self"],["epoch"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["epoch"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["epoch"]],["bool"]]],[11,"le","","",8,[[["self"],["epoch"]],["bool"]]],[11,"gt","","",8,[[["self"],["epoch"]],["bool"]]],[11,"ge","","",8,[[["self"],["epoch"]],["bool"]]],[11,"invalid","","",8,[[],["epoch"]]],[11,"clone","","",9,[[["self"]],["idnamespace"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["idnamespace"]],["bool"]]],[11,"ne","","",9,[[["self"],["idnamespace"]],["bool"]]],[11,"hash","","",9,N],[11,"cmp","","",9,[[["self"],["idnamespace"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["idnamespace"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["idnamespace"]],["bool"]]],[11,"le","","",9,[[["self"],["idnamespace"]],["bool"]]],[11,"gt","","",9,[[["self"],["idnamespace"]],["bool"]]],[11,"ge","","",9,[[["self"],["idnamespace"]],["bool"]]],[11,"clone","","",10,[[["self"]],["documentid"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,N],[11,"eq","","",10,[[["self"],["documentid"]],["bool"]]],[11,"ne","","",10,[[["self"],["documentid"]],["bool"]]],[11,"clone","","",11,[[["self"]],["pipelineid"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"hash","","",11,N],[11,"eq","","",11,[[["self"],["pipelineid"]],["bool"]]],[11,"ne","","",11,[[["self"],["pipelineid"]],["bool"]]],[11,"dummy","","",11,[[],["self"]]],[11,"clone","","",12,[[["self"]],["resourceid"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",118,[[["self"]],["externalevent"]]],[11,"from_raw","","",118,[[["usize"]],["self"]]],[11,"unwrap","","Consumes self to make it obvious that the event should be forwarded only once.",118,[[["self"]],["usize"]]],[11,"clone","","",80,[[["self"]],["scrollclamping"]]],[11,"clone","","",119,[[["self"]],["renderapisender"]]],[11,"new","","",119,[[["msgsender",["apimsg"]],["payloadsender"]],["self"]]],[11,"create_api","","Creates a new resource API object with a dedicated namespace.",119,[[["self"]],["renderapi"]]],[11,"get_namespace_id","","",120,[[["self"]],["idnamespace"]]],[11,"clone_sender","","",120,[[["self"]],["renderapisender"]]],[11,"add_document","","",120,[[["self"],["deviceuintsize"],["documentlayer"]],["documentid"]]],[11,"delete_document","","",120,[[["self"],["documentid"]]]],[11,"generate_font_key","","",120,[[["self"]],["fontkey"]]],[11,"generate_font_instance_key","","",120,[[["self"]],["fontinstancekey"]]],[11,"get_glyph_dimensions","","Gets the dimensions for the supplied glyph keys",120,[[["self"],["fontinstancekey"],["vec",["glyphindex"]]],["vec",["option"]]]],[11,"get_glyph_indices","","Gets the glyph indices for the supplied string. These can be used to construct GlyphKeys.",120,[[["self"],["fontkey"],["str"]],["vec",["option"]]]],[11,"generate_image_key","","Creates an `ImageKey`.",120,[[["self"]],["imagekey"]]],[11,"update_resources","","Add/remove/update resources such as images and fonts.",120,[[["self"],["vec",["resourceupdate"]]]]],[11,"send_external_event","","",120,[[["self"],["externalevent"]]]],[11,"notify_memory_pressure","","",120,[[["self"]]]],[11,"shut_down","","",120,[[["self"]]]],[11,"generate_property_binding_key","","Create a new unique key that can be used for animated property bindings.",120,[[["self"]],["propertybindingkey"]]],[11,"send_transaction","","",120,[[["self"],["documentid"],["transaction"]]]],[11,"hit_test","","Does a hit test on display items in the specified document, at the given point. If a pipeline_id is specified, it is used to further restrict the hit results so that only items inside that pipeline are matched. If the HitTestFlags argument contains the FIND_ALL flag, then the vector of hit results will contain all display items that match, ordered from front to back.",120,[[["self"],["documentid"],["option",["pipelineid"]],["worldpoint"],["hittestflags"]],["hittestresult"]]],[11,"set_window_parameters","","",120,[[["self"],["documentid"],["deviceuintsize"],["deviceuintrect"],["f32"]]]],[11,"get_scroll_node_state","","",120,[[["self"],["documentid"]],["vec",["scrollnodestate"]]]],[11,"wake_scene_builder","","",120,[[["self"]]]],[11,"flush_scene_builder","","Block until a round-trip to the scene builder thread has completed. This ensures that any transactions (including ones deferred to the scene builder thread) have been processed.",120,[[["self"]]]],[11,"save_capture","","Save a capture of the current frame state for debugging.",120,[[["self"],["pathbuf"],["capturebits"]]]],[11,"load_capture","","Load a capture of the current frame state for debugging.",120,[[["self"],["pathbuf"]],["vec",["captureddocument"]]]],[11,"send_debug_cmd","","",120,[[["self"],["debugcommand"]]]],[11,"drop","","",120,[[["self"]]]],[11,"clone","","",13,[[["self"]],["scrollnodestate"]]],[11,"clone","","",81,[[["self"]],["scrolllocation"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"clone","","",121,[[["self"]],["zoomfactor"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new zoom factor.",121,[[["f32"]],["zoomfactor"]]],[11,"get","","Get the zoom factor as an untyped float.",121,[[["self"]],["f32"]]],[11,"clone","","",122,[[["self"]],["propertybindingid"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"eq","","",122,[[["self"],["propertybindingid"]],["bool"]]],[11,"ne","","",122,[[["self"],["propertybindingid"]],["bool"]]],[11,"hash","","",122,N],[11,"new","","",122,[[["u64"]],["self"]]],[11,"clone","","",14,[[["self"]],["propertybindingkey"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["propertybindingkey"]],["bool"]]],[11,"ne","","",14,[[["self"],["propertybindingkey"]],["bool"]]],[11,"with","","",14,[[["self"],["t"]],["propertyvalue"]]],[11,"new","","",14,[[["u64"]],["self"]]],[11,"clone","","",82,[[["self"]],["propertybinding"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"eq","","",82,[[["self"],["propertybinding"]],["bool"]]],[11,"ne","","",82,[[["self"],["propertybinding"]],["bool"]]],[11,"from","","",82,[[["t"]],["propertybinding"]]],[11,"clone","","",15,[[["self"]],["propertyvalue"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["dynamicproperties"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[0,"channel","","",N,N],[3,"Payload","webrender_api::channel","",N,N],[12,"epoch","","An epoch used to get the proper payload for a pipeline id frame request.",123,N],[12,"pipeline_id","","A pipeline id to key the payload with, along with the epoch.",123,N],[12,"display_list_data","","",123,N],[3,"MsgReceiver","","",N,N],[3,"MsgSender","","",N,N],[5,"payload_channel","","",N,[[],["result",["error"]]]],[5,"msg_channel","","",N,[[],["result",["error"]]]],[6,"PayloadSender","","Handles the channel implementation when in process channels are enabled.",N,N],[6,"PayloadReceiver","","",N,N],[8,"PayloadSenderHelperMethods","","A helper to handle the interface difference between `IpcBytesSender` and `Sender<Vec<u8>>`.",N,N],[10,"send_payload","","",124,[[["self"],["payload"]],["result",["error"]]]],[8,"PayloadReceiverHelperMethods","","",N,N],[10,"recv_payload","","",125,[[["self"]],["result",["payload","error"]]]],[10,"to_mpsc_receiver","","",125,[[["self"]],["receiver",["payload"]]]],[11,"clone","","",123,[[["self"]],["payload"]]],[11,"to_data","","Convert the payload to a raw byte vector, in order for it to be efficiently shared via shmem, for example.",123,[[["self"]],["vec",["u8"]]]],[11,"from_data","","Deserializes the given payload from a raw byte vector.",123,N],[11,"send_payload","","",126,[[["self"],["payload"]],["result",["error"]]]],[11,"recv_payload","","",127,[[["self"]],["result",["payload","error"]]]],[11,"to_mpsc_receiver","","",127,[[["self"]],["receiver",["payload"]]]],[11,"recv","","",128,[[["self"]],["result",["error"]]]],[11,"clone","","",129,[[["self"]],["msgsender"]]],[11,"send","","",129,[[["self"],["t"]],["result",["error"]]]],[11,"serialize","","",128,[[["self"],["s"]],["result"]]],[11,"serialize","","",129,[[["self"],["s"]],["result"]]],[11,"deserialize","","",128,[[["d"]],["result",["msgreceiver"]]]],[11,"deserialize","","",129,[[["d"]],["result",["msgsender"]]]],[11,"clone","webrender_api","",17,[[["self"]],["premultipliedcolorf"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"ne","","",17,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["premultipliedcolorf"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"le","","",17,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"gt","","",17,[[["self"],["premultipliedcolorf"]],["bool"]]],[11,"ge","","",17,[[["self"],["premultipliedcolorf"]],["bool"]]],[18,"BLACK","","",17,N],[18,"TRANSPARENT","","",17,N],[18,"WHITE","","",17,N],[11,"to_array","","",17,N],[11,"clone","","",18,[[["self"]],["colorf"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["colorf"]],["bool"]]],[11,"ne","","",18,[[["self"],["colorf"]],["bool"]]],[11,"new","","Constructs a new `ColorF` from its components.",18,[[["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"scale_rgb","","Multiply the RGB channels (but not alpha) with a given factor.",18,[[["self"],["f32"]],["self"]]],[11,"scale_alpha","","",18,[[["self"],["f32"]],["self"]]],[11,"to_array","","",18,N],[11,"premultiplied","","Multiply the RGB components with the alpha channel.",18,[[["self"]],["premultipliedcolorf"]]],[11,"cmp","","",17,[[["self"],["self"]],["ordering"]]],[11,"hash","","",17,[[["self"],["h"]]]],[11,"clone","","",19,[[["self"]],["coloru"]]],[11,"hash","","",19,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["coloru"]],["bool"]]],[11,"ne","","",19,[[["self"],["coloru"]],["bool"]]],[11,"partial_cmp","","",19,[[["self"],["coloru"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["coloru"]],["bool"]]],[11,"le","","",19,[[["self"],["coloru"]],["bool"]]],[11,"gt","","",19,[[["self"],["coloru"]],["bool"]]],[11,"ge","","",19,[[["self"],["coloru"]],["bool"]]],[11,"cmp","","",19,[[["self"],["coloru"]],["ordering"]]],[11,"new","","Constructs a new additive `ColorU` from its components.",19,[[["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"from","","",19,[[["colorf"]],["self"]]],[11,"from","","",18,[[["coloru"]],["self"]]],[11,"clone","","",20,[[["self"]],["clipandscrollinfo"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"hash","","",20,N],[11,"eq","","",20,[[["self"],["clipandscrollinfo"]],["bool"]]],[11,"ne","","",20,[[["self"],["clipandscrollinfo"]],["bool"]]],[11,"simple","","",20,[[["clipid"]],["clipandscrollinfo"]]],[11,"new","","",20,[[["clipid"],["clipid"]],["clipandscrollinfo"]]],[11,"clip_node_id","","",20,[[["self"]],["clipid"]]],[11,"clone","","",21,[[["self"]],["genericdisplayitem"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["genericdisplayitem"]],["bool"]]],[11,"ne","","",21,[[["self"],["genericdisplayitem"]],["bool"]]],[11,"clone","","",22,[[["self"]],["primitiveinfo"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["primitiveinfo"]],["bool"]]],[11,"ne","","",22,[[["self"],["primitiveinfo"]],["bool"]]],[11,"clone","","",83,[[["self"]],["specificdisplayitem"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["specificdisplayitem"]],["bool"]]],[11,"ne","","",83,[[["self"],["specificdisplayitem"]],["bool"]]],[11,"clone","","",23,[[["self"]],["clipdisplayitem"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["clipdisplayitem"]],["bool"]]],[11,"ne","","",23,[[["self"],["clipdisplayitem"]],["bool"]]],[11,"clone","","",24,[[["self"]],["stickyoffsetbounds"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["stickyoffsetbounds"]],["bool"]]],[11,"ne","","",24,[[["self"],["stickyoffsetbounds"]],["bool"]]],[11,"new","","",24,[[["f32"],["f32"]],["stickyoffsetbounds"]]],[11,"clone","","",25,[[["self"]],["stickyframedisplayitem"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["stickyframedisplayitem"]],["bool"]]],[11,"ne","","",25,[[["self"],["stickyframedisplayitem"]],["bool"]]],[11,"clone","","",84,[[["self"]],["scrollsensitivity"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"eq","","",84,[[["self"],["scrollsensitivity"]],["bool"]]],[11,"clone","","",26,[[["self"]],["scrollframedisplayitem"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["scrollframedisplayitem"]],["bool"]]],[11,"ne","","",26,[[["self"],["scrollframedisplayitem"]],["bool"]]],[11,"clone","","",27,[[["self"]],["rectangledisplayitem"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["rectangledisplayitem"]],["bool"]]],[11,"ne","","",27,[[["self"],["rectangledisplayitem"]],["bool"]]],[11,"clone","","",28,[[["self"]],["linedisplayitem"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["linedisplayitem"]],["bool"]]],[11,"ne","","",28,[[["self"],["linedisplayitem"]],["bool"]]],[11,"clone","","",85,[[["self"]],["lineorientation"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",85,[[["self"],["lineorientation"]],["bool"]]],[11,"clone","","",86,[[["self"]],["linestyle"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["linestyle"]],["bool"]]],[11,"clone","","",29,[[["self"]],["textdisplayitem"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["textdisplayitem"]],["bool"]]],[11,"ne","","",29,[[["self"],["textdisplayitem"]],["bool"]]],[11,"clone","","",30,[[["self"]],["normalborder"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["normalborder"]],["bool"]]],[11,"ne","","",30,[[["self"],["normalborder"]],["bool"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"clone","","",87,[[["self"]],["repeatmode"]]],[11,"eq","","",87,[[["self"],["repeatmode"]],["bool"]]],[11,"clone","","",88,[[["self"]],["ninepatchbordersource"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"eq","","",88,[[["self"],["ninepatchbordersource"]],["bool"]]],[11,"ne","","",88,[[["self"],["ninepatchbordersource"]],["bool"]]],[11,"clone","","",31,[[["self"]],["ninepatchborder"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["ninepatchborder"]],["bool"]]],[11,"ne","","",31,[[["self"],["ninepatchborder"]],["bool"]]],[11,"clone","","",89,[[["self"]],["borderdetails"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"eq","","",89,[[["self"],["borderdetails"]],["bool"]]],[11,"ne","","",89,[[["self"],["borderdetails"]],["bool"]]],[11,"clone","","",32,[[["self"]],["borderdisplayitem"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["borderdisplayitem"]],["bool"]]],[11,"ne","","",32,[[["self"],["borderdisplayitem"]],["bool"]]],[11,"clone","","",90,[[["self"]],["borderradiuskind"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["borderradiuskind"]],["bool"]]],[11,"clone","","",33,[[["self"]],["borderradius"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["borderradius"]],["bool"]]],[11,"ne","","",33,[[["self"],["borderradius"]],["bool"]]],[11,"clone","","",34,[[["self"]],["borderwidths"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["borderwidths"]],["bool"]]],[11,"ne","","",34,[[["self"],["borderwidths"]],["bool"]]],[11,"clone","","",35,[[["self"]],["borderside"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["borderside"]],["bool"]]],[11,"ne","","",35,[[["self"],["borderside"]],["bool"]]],[11,"clone","","",91,[[["self"]],["borderstyle"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"eq","","",91,[[["self"],["borderstyle"]],["bool"]]],[11,"hash","","",91,N],[11,"is_hidden","","",91,[[["self"]],["bool"]]],[11,"clone","","",92,[[["self"]],["boxshadowclipmode"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"hash","","",92,N],[11,"eq","","",92,[[["self"],["boxshadowclipmode"]],["bool"]]],[11,"clone","","",36,[[["self"]],["boxshadowdisplayitem"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["boxshadowdisplayitem"]],["bool"]]],[11,"ne","","",36,[[["self"],["boxshadowdisplayitem"]],["bool"]]],[11,"clone","","",37,[[["self"]],["shadow"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["shadow"]],["bool"]]],[11,"ne","","",37,[[["self"],["shadow"]],["bool"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["extendmode"]]],[11,"hash","","",93,N],[11,"eq","","",93,[[["self"],["extendmode"]],["bool"]]],[11,"cmp","","",93,[[["self"],["extendmode"]],["ordering"]]],[11,"partial_cmp","","",93,[[["self"],["extendmode"]],["option",["ordering"]]]],[11,"clone","","",38,[[["self"]],["gradient"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["gradient"]],["bool"]]],[11,"ne","","",38,[[["self"],["gradient"]],["bool"]]],[11,"clone","","",39,[[["self"]],["gradientdisplayitem"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["gradientdisplayitem"]],["bool"]]],[11,"ne","","",39,[[["self"],["gradientdisplayitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["gradientstop"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["gradientstop"]],["bool"]]],[11,"ne","","",40,[[["self"],["gradientstop"]],["bool"]]],[11,"clone","","",41,[[["self"]],["radialgradient"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["radialgradient"]],["bool"]]],[11,"ne","","",41,[[["self"],["radialgradient"]],["bool"]]],[11,"clone","","",42,[[["self"]],["clipchainitem"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["clipchainitem"]],["bool"]]],[11,"ne","","",42,[[["self"],["clipchainitem"]],["bool"]]],[11,"clone","","",43,[[["self"]],["radialgradientdisplayitem"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["radialgradientdisplayitem"]],["bool"]]],[11,"ne","","",43,[[["self"],["radialgradientdisplayitem"]],["bool"]]],[11,"clone","","",44,[[["self"]],["pushreferenceframedisplaylistitem"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["pushreferenceframedisplaylistitem"]],["bool"]]],[11,"ne","","",44,[[["self"],["pushreferenceframedisplaylistitem"]],["bool"]]],[11,"clone","","",45,[[["self"]],["referenceframe"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["referenceframe"]],["bool"]]],[11,"ne","","",45,[[["self"],["referenceframe"]],["bool"]]],[11,"clone","","",46,[[["self"]],["pushstackingcontextdisplayitem"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["pushstackingcontextdisplayitem"]],["bool"]]],[11,"ne","","",46,[[["self"],["pushstackingcontextdisplayitem"]],["bool"]]],[11,"clone","","",47,[[["self"]],["stackingcontext"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["stackingcontext"]],["bool"]]],[11,"ne","","",47,[[["self"],["stackingcontext"]],["bool"]]],[11,"clone","","",94,[[["self"]],["transformstyle"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"hash","","",94,N],[11,"eq","","",94,[[["self"],["transformstyle"]],["bool"]]],[11,"clone","","",95,[[["self"]],["glyphrasterspace"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"eq","","",95,[[["self"],["glyphrasterspace"]],["bool"]]],[11,"ne","","",95,[[["self"],["glyphrasterspace"]],["bool"]]],[11,"clone","","",96,[[["self"]],["mixblendmode"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"hash","","",96,N],[11,"eq","","",96,[[["self"],["mixblendmode"]],["bool"]]],[11,"clone","","",97,[[["self"]],["filterop"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["filterop"]],["bool"]]],[11,"ne","","",97,[[["self"],["filterop"]],["bool"]]],[11,"clone","","",48,[[["self"]],["iframedisplayitem"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["iframedisplayitem"]],["bool"]]],[11,"ne","","",48,[[["self"],["iframedisplayitem"]],["bool"]]],[11,"clone","","",49,[[["self"]],["imagedisplayitem"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["imagedisplayitem"]],["bool"]]],[11,"ne","","",49,[[["self"],["imagedisplayitem"]],["bool"]]],[11,"clone","","",98,[[["self"]],["imagerendering"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"hash","","",98,N],[11,"eq","","",98,[[["self"],["imagerendering"]],["bool"]]],[11,"clone","","",99,[[["self"]],["alphatype"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"hash","","",99,N],[11,"eq","","",99,[[["self"],["alphatype"]],["bool"]]],[11,"clone","","",50,[[["self"]],["yuvimagedisplayitem"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["yuvimagedisplayitem"]],["bool"]]],[11,"ne","","",50,[[["self"],["yuvimagedisplayitem"]],["bool"]]],[11,"clone","","",100,[[["self"]],["yuvcolorspace"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"hash","","",100,N],[11,"eq","","",100,[[["self"],["yuvcolorspace"]],["bool"]]],[11,"get_feature_string","","",100,[[["self"]],["str"]]],[11,"clone","","",101,[[["self"]],["yuvdata"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"hash","","",101,N],[11,"eq","","",101,[[["self"],["yuvdata"]],["bool"]]],[11,"ne","","",101,[[["self"],["yuvdata"]],["bool"]]],[11,"get_format","","",101,[[["self"]],["yuvformat"]]],[11,"clone","","",102,[[["self"]],["yuvformat"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"hash","","",102,N],[11,"eq","","",102,[[["self"],["yuvformat"]],["bool"]]],[11,"get_plane_num","","",102,[[["self"]],["usize"]]],[11,"get_feature_string","","",102,[[["self"]],["str"]]],[11,"clone","","",51,[[["self"]],["imagemask"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["imagemask"]],["bool"]]],[11,"ne","","",51,[[["self"],["imagemask"]],["bool"]]],[11,"clone","","",103,[[["self"]],["localclip"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"eq","","",103,[[["self"],["localclip"]],["bool"]]],[11,"ne","","",103,[[["self"],["localclip"]],["bool"]]],[11,"from","","",103,[[["layoutrect"]],["self"]]],[11,"clip_rect","","",103,[[["self"]],["layoutrect"]]],[11,"create_with_offset","","",103,[[["self"],["layoutvector2d"]],["localclip"]]],[11,"clip_by","","",103,[[["self"],["layoutrect"]],["localclip"]]],[11,"clone","","",104,[[["self"]],["clipmode"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"eq","","",104,[[["self"],["clipmode"]],["bool"]]],[11,"not","","",104,[[["self"]],["clipmode"]]],[11,"clone","","",52,[[["self"]],["complexclipregion"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["complexclipregion"]],["bool"]]],[11,"ne","","",52,[[["self"],["complexclipregion"]],["bool"]]],[11,"zero","","",33,[[],["borderradius"]]],[11,"uniform","","",33,[[["f32"]],["borderradius"]]],[11,"uniform_size","","",33,[[["layoutsize"]],["borderradius"]]],[11,"is_uniform","","",33,[[["self"]],["option",["f32"]]]],[11,"is_uniform_size","","",33,[[["self"]],["option",["layoutsize"]]]],[11,"is_zero","","",33,[[["self"]],["bool"]]],[11,"new","","Create a new complex clip region.",52,[[["layoutrect"],["borderradius"],["clipmode"]],["self"]]],[11,"clone","","",53,[[["self"]],["clipchainid"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"hash","","",53,N],[11,"eq","","",53,[[["self"],["clipchainid"]],["bool"]]],[11,"ne","","",53,[[["self"],["clipchainid"]],["bool"]]],[11,"clone","","",105,[[["self"]],["clipid"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"hash","","",105,N],[11,"eq","","",105,[[["self"],["clipid"]],["bool"]]],[11,"ne","","",105,[[["self"],["clipid"]],["bool"]]],[11,"root_scroll_node","","",105,[[["pipelineid"]],["clipid"]]],[11,"root_reference_frame","","",105,[[["pipelineid"]],["clipid"]]],[11,"pipeline_id","","",105,[[["self"]],["pipelineid"]]],[11,"is_root_scroll_node","","",105,[[["self"]],["bool"]]],[11,"is_root_reference_frame","","",105,[[["self"]],["bool"]]],[11,"clone","","",54,[[["self"]],["externalscrollid"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"hash","","",54,N],[11,"eq","","",54,[[["self"],["externalscrollid"]],["bool"]]],[11,"ne","","",54,[[["self"],["externalscrollid"]],["bool"]]],[11,"pipeline_id","","",54,[[["self"]],["pipelineid"]]],[11,"is_root","","",54,[[["self"]],["bool"]]],[11,"clone","","",130,[[["self"]],["itemrange"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"hash","","",130,N],[11,"eq","","",130,[[["self"],["itemrange"]],["bool"]]],[11,"ne","","",130,[[["self"],["itemrange"]],["bool"]]],[11,"default","","",130,[[],["self"]]],[11,"is_empty","","",130,[[["self"]],["bool"]]],[11,"clone","","",131,[[["self"]],["builtdisplaylist"]]],[11,"default","","",131,[[],["builtdisplaylist"]]],[11,"clone","","",132,[[["self"]],["builtdisplaylistdescriptor"]]],[11,"default","","",132,[[],["builtdisplaylistdescriptor"]]],[11,"clone","","",133,[[["self"]],["auxiter"]]],[11,"from_data","","",131,[[["vec",["u8"]],["builtdisplaylistdescriptor"]],["builtdisplaylist"]]],[11,"into_data","","",131,N],[11,"data","","",131,N],[11,"item_slice","","",131,N],[11,"descriptor","","",131,[[["self"]],["builtdisplaylistdescriptor"]]],[11,"times","","",131,N],[11,"total_clip_nodes","","",131,[[["self"]],["usize"]]],[11,"total_spatial_nodes","","",131,[[["self"]],["usize"]]],[11,"iter","","",131,[[["self"]],["builtdisplaylistiter"]]],[11,"get","","",131,[[["self"],["itemrange"]],["auxiter"]]],[11,"new","","",134,[[["builtdisplaylist"]],["self"]]],[11,"new_with_list_and_data","","",134,N],[11,"display_list","","",134,[[["self"]],["builtdisplaylist"]]],[11,"next","","",134,[[["self"]],["option",["displayitemref"]]]],[11,"next_raw","","Gets the next display item, even if it's a dummy. Also doesn't handle peeking and may leave irrelevant ranges live (so a Clip may have GradientStops if for some reason you ask).",134,[[["self"]],["option",["displayitemref"]]]],[11,"as_ref","","",134,[[["self"]],["displayitemref"]]],[11,"starting_stacking_context","","",134,[[["self"]],["option"]]],[11,"skip_current_stacking_context","","",134,[[["self"]]]],[11,"current_stacking_context_empty","","",134,[[["self"]],["bool"]]],[11,"peek","","",134,[[["self"]],["option",["displayitemref"]]]],[11,"display_item","","",135,[[["self"]],["displayitem"]]],[11,"rect","","",135,[[["self"]],["layoutrect"]]],[11,"get_layout_primitive_info","","",135,[[["self"],["layoutvector2d"]],["layoutprimitiveinfo"]]],[11,"clip_rect","","",135,[[["self"]],["layoutrect"]]],[11,"clip_and_scroll","","",135,[[["self"]],["clipandscrollinfo"]]],[11,"item","","",135,[[["self"]],["specificdisplayitem"]]],[11,"complex_clip","","",135,N],[11,"gradient_stops","","",135,[[["self"]],["itemrange",["gradientstop"]]]],[11,"glyphs","","",135,[[["self"]],["itemrange",["glyphinstance"]]]],[11,"filters","","",135,[[["self"]],["itemrange",["filterop"]]]],[11,"clip_chain_items","","",135,[[["self"]],["itemrange",["clipid"]]]],[11,"display_list","","",135,[[["self"]],["builtdisplaylist"]]],[11,"is_backface_visible","","",135,[[["self"]],["bool"]]],[11,"sub_iter","","",135,[[["self"]],["builtdisplaylistiter"]]],[11,"new","","",133,N],[11,"next","","",133,[[["self"]],["option"]]],[11,"size_hint","","",133,N],[11,"clone","","",136,[[["self"]],["savestate"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"clone","","",55,[[["self"]],["displaylistbuilder"]]],[11,"new","","",55,[[["pipelineid"],["layoutsize"]],["self"]]],[11,"with_capacity","","",55,[[["pipelineid"],["layoutsize"],["usize"]],["self"]]],[11,"content_size","","Return the content size for this display list",55,[[["self"]],["layoutsize"]]],[11,"save","","Saves the current display list state, so it may be `restore()`'d.",55,[[["self"]]]],[11,"restore","","Restores the state of the builder to when `save()` was last called.",55,[[["self"]]]],[11,"clear_save","","Discards the builder's save (indicating the attempted operation was successful).",55,[[["self"]]]],[11,"print_display_list","","",55,[[["self"]]]],[11,"push_rect","","",55,[[["self"],["layoutprimitiveinfo"],["colorf"]]]],[11,"push_clear_rect","","",55,[[["self"],["layoutprimitiveinfo"]]]],[11,"push_line","","",55,[[["self"],["layoutprimitiveinfo"],["f32"],["lineorientation"],["colorf"],["linestyle"]]]],[11,"push_image","","",55,[[["self"],["layoutprimitiveinfo"],["layoutsize"],["layoutsize"],["imagerendering"],["alphatype"],["imagekey"]]]],[11,"push_yuv_image","","Push a yuv image. All planar data in yuv image should use the same buffer type.",55,[[["self"],["layoutprimitiveinfo"],["yuvdata"],["yuvcolorspace"],["imagerendering"]]]],[11,"push_text","","",55,N],[11,"create_gradient","","",55,[[["self"],["layoutpoint"],["layoutpoint"],["vec",["gradientstop"]],["extendmode"]],["gradient"]]],[11,"create_radial_gradient","","",55,[[["self"],["layoutpoint"],["layoutsize"],["vec",["gradientstop"]],["extendmode"]],["radialgradient"]]],[11,"push_border","","",55,[[["self"],["layoutprimitiveinfo"],["borderwidths"],["borderdetails"]]]],[11,"push_box_shadow","","",55,[[["self"],["layoutprimitiveinfo"],["layoutrect"],["layoutvector2d"],["colorf"],["f32"],["f32"],["borderradius"],["boxshadowclipmode"]]]],[11,"push_gradient","","Pushes a linear gradient to be displayed.",55,[[["self"],["layoutprimitiveinfo"],["gradient"],["layoutsize"],["layoutsize"]]]],[11,"push_radial_gradient","","Pushes a radial gradient to be displayed.",55,[[["self"],["layoutprimitiveinfo"],["radialgradient"],["layoutsize"],["layoutsize"]]]],[11,"push_reference_frame","","",55,[[["self"],["layoutprimitiveinfo"],["option",["propertybinding"]],["option",["layouttransform"]]],["clipid"]]],[11,"pop_reference_frame","","",55,[[["self"]]]],[11,"push_stacking_context","","",55,[[["self"],["layoutprimitiveinfo"],["option",["clipid"]],["transformstyle"],["mixblendmode"],["vec",["filterop"]],["glyphrasterspace"]]]],[11,"pop_stacking_context","","",55,[[["self"]]]],[11,"push_stops","","",55,N],[11,"define_scroll_frame","","",55,[[["self"],["option",["externalscrollid"]],["layoutrect"],["layoutrect"],["i"],["option",["imagemask"]],["scrollsensitivity"]],["clipid"]]],[11,"define_scroll_frame_with_parent","","",55,[[["self"],["clipid"],["option",["externalscrollid"]],["layoutrect"],["layoutrect"],["i"],["option",["imagemask"]],["scrollsensitivity"]],["clipid"]]],[11,"define_clip_chain","","",55,[[["self"],["option",["clipchainid"]],["i"]],["clipchainid"]]],[11,"define_clip","","",55,[[["self"],["layoutrect"],["i"],["option",["imagemask"]]],["clipid"]]],[11,"define_clip_with_parent","","",55,[[["self"],["clipid"],["layoutrect"],["i"],["option",["imagemask"]]],["clipid"]]],[11,"define_sticky_frame","","",55,[[["self"],["layoutrect"],["sideoffsets2d",["option"]],["stickyoffsetbounds"],["stickyoffsetbounds"],["layoutvector2d"]],["clipid"]]],[11,"push_clip_id","","",55,[[["self"],["clipid"]]]],[11,"push_clip_and_scroll_info","","",55,[[["self"],["clipandscrollinfo"]]]],[11,"pop_clip_id","","",55,[[["self"]]]],[11,"push_iframe","","",55,[[["self"],["layoutprimitiveinfo"],["pipelineid"],["bool"]]]],[11,"push_shadow","","",55,[[["self"],["layoutprimitiveinfo"],["shadow"]]]],[11,"pop_all_shadows","","",55,[[["self"]]]],[11,"finalize","","",55,N],[11,"clone","","",56,[[["self"]],["nativefonthandle"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["glyphdimensions"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",58,[[["self"]],["fontkey"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"hash","","",58,N],[11,"eq","","",58,[[["self"],["fontkey"]],["bool"]]],[11,"ne","","",58,[[["self"],["fontkey"]],["bool"]]],[11,"cmp","","",58,[[["self"],["fontkey"]],["ordering"]]],[11,"partial_cmp","","",58,[[["self"],["fontkey"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["fontkey"]],["bool"]]],[11,"le","","",58,[[["self"],["fontkey"]],["bool"]]],[11,"gt","","",58,[[["self"],["fontkey"]],["bool"]]],[11,"ge","","",58,[[["self"],["fontkey"]],["bool"]]],[11,"new","","",58,[[["idnamespace"],["u32"]],["fontkey"]]],[11,"clone","","",106,[[["self"]],["fonttemplate"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"clone","","",107,[[["self"]],["fontrendermode"]]],[11,"hash","","",107,N],[11,"eq","","",107,[[["self"],["fontrendermode"]],["bool"]]],[11,"cmp","","",107,[[["self"],["fontrendermode"]],["ordering"]]],[11,"partial_cmp","","",107,[[["self"],["fontrendermode"]],["option",["ordering"]]]],[11,"limit_by","","",107,[[["self"],["fontrendermode"]],["fontrendermode"]]],[11,"clone","","",59,[[["self"]],["fontvariation"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"partial_cmp","","",59,[[["self"],["fontvariation"]],["option",["ordering"]]]],[11,"lt","","",59,[[["self"],["fontvariation"]],["bool"]]],[11,"le","","",59,[[["self"],["fontvariation"]],["bool"]]],[11,"gt","","",59,[[["self"],["fontvariation"]],["bool"]]],[11,"ge","","",59,[[["self"],["fontvariation"]],["bool"]]],[11,"cmp","","",59,[[["self"],["fontvariation"]],["ordering"]]],[11,"eq","","",59,[[["self"],["fontvariation"]],["bool"]]],[11,"hash","","",59,[[["self"],["h"]]]],[11,"clone","","",60,[[["self"]],["glyphoptions"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"hash","","",60,N],[11,"eq","","",60,[[["self"],["glyphoptions"]],["bool"]]],[11,"ne","","",60,[[["self"],["glyphoptions"]],["bool"]]],[11,"partial_cmp","","",60,[[["self"],["glyphoptions"]],["option",["ordering"]]]],[11,"lt","","",60,[[["self"],["glyphoptions"]],["bool"]]],[11,"le","","",60,[[["self"],["glyphoptions"]],["bool"]]],[11,"gt","","",60,[[["self"],["glyphoptions"]],["bool"]]],[11,"ge","","",60,[[["self"],["glyphoptions"]],["bool"]]],[11,"cmp","","",60,[[["self"],["glyphoptions"]],["ordering"]]],[11,"default","","",60,[[],["self"]]],[11,"eq","","",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"ne","","",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"clone","","",137,[[["self"]],["fontinstanceflags"]]],[11,"partial_cmp","","",137,[[["self"],["fontinstanceflags"]],["option",["ordering"]]]],[11,"lt","","",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"le","","",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"gt","","",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"ge","","",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"cmp","","",137,[[["self"],["fontinstanceflags"]],["ordering"]]],[11,"hash","","",137,N],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[18,"SYNTHETIC_BOLD","","",137,N],[18,"EMBEDDED_BITMAPS","","",137,N],[18,"SUBPIXEL_BGR","","",137,N],[18,"TRANSPOSE","","",137,N],[18,"FLIP_X","","",137,N],[18,"FLIP_Y","","",137,N],[18,"SUBPIXEL_POSITION","","",137,N],[18,"FORCE_GDI","","",137,N],[18,"FONT_SMOOTHING","","",137,N],[18,"FORCE_AUTOHINT","","",137,N],[18,"NO_AUTOHINT","","",137,N],[18,"VERTICAL_LAYOUT","","",137,N],[18,"LCD_VERTICAL","","",137,N],[11,"empty","","Returns an empty set of flags.",137,[[],["fontinstanceflags"]]],[11,"all","","Returns the set containing all flags.",137,[[],["fontinstanceflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",137,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",137,[[["u32"]],["option",["fontinstanceflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",137,[[["u32"]],["fontinstanceflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",137,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,[[["self"],["fontinstanceflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",137,[[["self"],["fontinstanceflags"]]]],[11,"remove","","Removes the specified flags in-place.",137,[[["self"],["fontinstanceflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",137,[[["self"],["fontinstanceflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",137,[[["self"],["fontinstanceflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",137,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"bitor_assign","","Adds the set of flags.",137,[[["self"],["fontinstanceflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",137,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",137,[[["self"],["fontinstanceflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",137,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",137,[[["self"],["fontinstanceflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",137,[[["self"],["fontinstanceflags"]],["fontinstanceflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",137,[[["self"],["fontinstanceflags"]]]],[11,"not","","Returns the complement of this set of flags.",137,[[["self"]],["fontinstanceflags"]]],[11,"extend","","",137,[[["self"],["t"]]]],[11,"from_iter","","",137,[[["t"]],["fontinstanceflags"]]],[11,"default","","",137,[[],["fontinstanceflags"]]],[11,"clone","","",61,[[["self"]],["syntheticitalics"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"hash","","",61,N],[11,"eq","","",61,[[["self"],["syntheticitalics"]],["bool"]]],[11,"ne","","",61,[[["self"],["syntheticitalics"]],["bool"]]],[11,"partial_cmp","","",61,[[["self"],["syntheticitalics"]],["option",["ordering"]]]],[11,"lt","","",61,[[["self"],["syntheticitalics"]],["bool"]]],[11,"le","","",61,[[["self"],["syntheticitalics"]],["bool"]]],[11,"gt","","",61,[[["self"],["syntheticitalics"]],["bool"]]],[11,"ge","","",61,[[["self"],["syntheticitalics"]],["bool"]]],[11,"cmp","","",61,[[["self"],["syntheticitalics"]],["ordering"]]],[18,"ANGLE_SCALE","","",61,N],[11,"from_degrees","","",61,[[["f32"]],["self"]]],[11,"to_degrees","","",61,[[["self"]],["f32"]]],[11,"to_radians","","",61,[[["self"]],["f32"]]],[11,"to_skew","","",61,[[["self"]],["f32"]]],[11,"enabled","","",61,[[],["self"]]],[11,"disabled","","",61,[[],["self"]]],[11,"is_enabled","","",61,[[["self"]],["bool"]]],[11,"default","","",61,[[],["self"]]],[11,"clone","","",62,[[["self"]],["fontinstanceoptions"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"hash","","",62,N],[11,"eq","","",62,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"ne","","",62,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"partial_cmp","","",62,[[["self"],["fontinstanceoptions"]],["option",["ordering"]]]],[11,"lt","","",62,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"le","","",62,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"gt","","",62,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"ge","","",62,[[["self"],["fontinstanceoptions"]],["bool"]]],[11,"cmp","","",62,[[["self"],["fontinstanceoptions"]],["ordering"]]],[11,"default","","",62,[[],["fontinstanceoptions"]]],[11,"clone","","",108,[[["self"]],["fontlcdfilter"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"hash","","",108,N],[11,"eq","","",108,[[["self"],["fontlcdfilter"]],["bool"]]],[11,"partial_cmp","","",108,[[["self"],["fontlcdfilter"]],["option",["ordering"]]]],[11,"cmp","","",108,[[["self"],["fontlcdfilter"]],["ordering"]]],[11,"clone","","",109,[[["self"]],["fonthinting"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"hash","","",109,N],[11,"eq","","",109,[[["self"],["fonthinting"]],["bool"]]],[11,"partial_cmp","","",109,[[["self"],["fonthinting"]],["option",["ordering"]]]],[11,"cmp","","",109,[[["self"],["fonthinting"]],["ordering"]]],[11,"clone","","",63,[[["self"]],["fontinstanceplatformoptions"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"hash","","",63,N],[11,"eq","","",63,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"ne","","",63,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"partial_cmp","","",63,[[["self"],["fontinstanceplatformoptions"]],["option",["ordering"]]]],[11,"lt","","",63,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"le","","",63,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"gt","","",63,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"ge","","",63,[[["self"],["fontinstanceplatformoptions"]],["bool"]]],[11,"cmp","","",63,[[["self"],["fontinstanceplatformoptions"]],["ordering"]]],[11,"default","","",63,[[],["fontinstanceplatformoptions"]]],[11,"clone","","",64,[[["self"]],["fontinstancekey"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"hash","","",64,N],[11,"eq","","",64,[[["self"],["fontinstancekey"]],["bool"]]],[11,"ne","","",64,[[["self"],["fontinstancekey"]],["bool"]]],[11,"cmp","","",64,[[["self"],["fontinstancekey"]],["ordering"]]],[11,"partial_cmp","","",64,[[["self"],["fontinstancekey"]],["option",["ordering"]]]],[11,"lt","","",64,[[["self"],["fontinstancekey"]],["bool"]]],[11,"le","","",64,[[["self"],["fontinstancekey"]],["bool"]]],[11,"gt","","",64,[[["self"],["fontinstancekey"]],["bool"]]],[11,"ge","","",64,[[["self"],["fontinstancekey"]],["bool"]]],[11,"new","","",64,[[["idnamespace"],["u32"]],["fontinstancekey"]]],[11,"clone","","",65,[[["self"]],["glyphinstance"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["glyphinstance"]],["bool"]]],[11,"ne","","",65,[[["self"],["glyphinstance"]],["bool"]]],[11,"clone","","",66,[[["self"]],["imagekey"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"hash","","",66,N],[11,"eq","","",66,[[["self"],["imagekey"]],["bool"]]],[11,"ne","","",66,[[["self"],["imagekey"]],["bool"]]],[18,"DUMMY","","",66,N],[11,"new","","",66,[[["idnamespace"],["u32"]],["self"]]],[11,"clone","","",67,[[["self"]],["externalimageid"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"eq","","",67,[[["self"],["externalimageid"]],["bool"]]],[11,"ne","","",67,[[["self"],["externalimageid"]],["bool"]]],[11,"hash","","",67,N],[11,"clone","","",110,[[["self"]],["texturetarget"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"hash","","",110,N],[11,"eq","","",110,[[["self"],["texturetarget"]],["bool"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",111,[[["self"]],["externalimagetype"]]],[11,"hash","","",111,N],[11,"eq","","",111,[[["self"],["externalimagetype"]],["bool"]]],[11,"ne","","",111,[[["self"],["externalimagetype"]],["bool"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["externalimagedata"]]],[11,"hash","","",68,N],[11,"eq","","",68,[[["self"],["externalimagedata"]],["bool"]]],[11,"ne","","",68,[[["self"],["externalimagedata"]],["bool"]]],[11,"clone","","",112,[[["self"]],["imageformat"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"hash","","",112,N],[11,"eq","","",112,[[["self"],["imageformat"]],["bool"]]],[11,"bytes_per_pixel","","",112,[[["self"]],["u32"]]],[11,"clone","","",69,[[["self"]],["imagedescriptor"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["imagedescriptor"]],["bool"]]],[11,"ne","","",69,[[["self"],["imagedescriptor"]],["bool"]]],[11,"new","","",69,[[["u32"],["u32"],["imageformat"],["bool"],["bool"]],["self"]]],[11,"compute_stride","","",69,[[["self"]],["u32"]]],[11,"compute_total_size","","",69,[[["self"]],["u32"]]],[11,"full_rect","","",69,[[["self"]],["deviceuintrect"]]],[11,"clone","","",113,[[["self"]],["imagedata"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"new","","",113,[[["vec",["u8"]]],["self"]]],[11,"new_shared","","",113,[[["arc",["vec"]]],["self"]]],[11,"new_blob_image","","",113,[[["blobimagedata"]],["self"]]],[11,"is_blob","","",113,[[["self"]],["bool"]]],[11,"uses_texture_cache","","",113,[[["self"]],["bool"]]],[11,"clone","","",70,[[["self"]],["blobimagedescriptor"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"clone","","",114,[[["self"]],["blobimageerror"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["blobimagerequest"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"eq","","",72,[[["self"],["blobimagerequest"]],["bool"]]],[11,"ne","","",72,[[["self"],["blobimagerequest"]],["bool"]]],[11,"hash","","",72,N],[11,"hash","","",138,N],[11,"clone","","",138,[[["self"]],["devicepixel"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"eq","","",138,[[["self"],["devicepixel"]],["bool"]]],[11,"cmp","","",138,[[["self"],["devicepixel"]],["ordering"]]],[11,"partial_cmp","","",138,[[["self"],["devicepixel"]],["option",["ordering"]]]],[11,"hash","","",139,N],[11,"clone","","",139,[[["self"]],["picturepixel"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"eq","","",139,[[["self"],["picturepixel"]],["bool"]]],[11,"cmp","","",139,[[["self"],["picturepixel"]],["ordering"]]],[11,"partial_cmp","","",139,[[["self"],["picturepixel"]],["option",["ordering"]]]],[11,"hash","","",140,N],[11,"clone","","",140,[[["self"]],["layoutpixel"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"eq","","",140,[[["self"],["layoutpixel"]],["bool"]]],[11,"cmp","","",140,[[["self"],["layoutpixel"]],["ordering"]]],[11,"partial_cmp","","",140,[[["self"],["layoutpixel"]],["option",["ordering"]]]],[11,"hash","","",141,N],[11,"clone","","",141,[[["self"]],["scrolllayerpixel"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"eq","","",141,[[["self"],["scrolllayerpixel"]],["bool"]]],[11,"cmp","","",141,[[["self"],["scrolllayerpixel"]],["ordering"]]],[11,"partial_cmp","","",141,[[["self"],["scrolllayerpixel"]],["option",["ordering"]]]],[11,"hash","","",142,N],[11,"clone","","",142,[[["self"]],["worldpixel"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"eq","","",142,[[["self"],["worldpixel"]],["bool"]]],[11,"cmp","","",142,[[["self"],["worldpixel"]],["ordering"]]],[11,"partial_cmp","","",142,[[["self"],["worldpixel"]],["option",["ordering"]]]],[11,"hash","","",143,N],[11,"clone","","",143,[[["self"]],["tiles"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"eq","","",143,[[["self"],["tiles"]],["bool"]]],[11,"cmp","","",143,[[["self"],["tiles"]],["ordering"]]],[11,"partial_cmp","","",143,[[["self"],["tiles"]],["option",["ordering"]]]],[11,"clone","","",73,[[["self"]],["texelrect"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","",73,[[["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"invalid","","",73,[[],["self"]]],[6,"TileSize","","",N,N],[6,"DocumentLayer","","Documents are rendered in the ascending order of their associated layer values.",N,N],[6,"PipelineSourceId","","This type carries no valuable semantics for WR. However, it reflects the fact that clients (Servo) may generate pipelines by different semi-independent sources. These pipelines still belong to the same `IdNamespace` and the same `DocumentId`. Having this extra Id field enables them to generate `PipelineId` without collision.",N,N],[6,"ItemTag","","A tag that can be used to identify items during hit testing. If the tag is missing then the item doesn't take part in hit testing at all. This is composed of two numbers. In Servo, the first is an identifier while the second is used to select the cursor that should be used during mouse movement. In Gecko, the first is a scrollframe identifier, while the second is used to store various flags that APZ needs to properly process input events.",N,N],[6,"DisplayItem","","",N,N],[6,"LayoutPrimitiveInfo","","",N,N],[6,"GlyphIndex","","",N,N],[6,"BlobImageData","","",N,N],[6,"BlobImageResult","","",N,N],[6,"DeviceIntRect","","",N,N],[6,"DeviceIntPoint","","",N,N],[6,"DeviceIntSize","","",N,N],[6,"DeviceIntLength","","",N,N],[6,"DeviceIntSideOffsets","","",N,N],[6,"DeviceUintRect","","",N,N],[6,"DeviceUintPoint","","",N,N],[6,"DeviceUintSize","","",N,N],[6,"DeviceRect","","",N,N],[6,"DevicePoint","","",N,N],[6,"DeviceVector2D","","",N,N],[6,"DeviceSize","","",N,N],[6,"PictureIntRect","","",N,N],[6,"PictureIntPoint","","",N,N],[6,"PictureIntSize","","",N,N],[6,"LayoutRect","","",N,N],[6,"LayoutPoint","","",N,N],[6,"LayoutPoint3D","","",N,N],[6,"LayoutVector2D","","",N,N],[6,"LayoutVector3D","","",N,N],[6,"LayoutSize","","",N,N],[6,"ScrollLayerRect","","",N,N],[6,"ScrollLayerPoint","","",N,N],[6,"ScrollLayerVector2D","","",N,N],[6,"ScrollLayerSize","","",N,N],[6,"WorldRect","","",N,N],[6,"WorldPoint","","",N,N],[6,"WorldSize","","",N,N],[6,"WorldPoint3D","","",N,N],[6,"WorldVector2D","","",N,N],[6,"WorldVector3D","","",N,N],[6,"TileOffset","","",N,N],[6,"DevicePixelScale","","Scaling ratio from world pixels to device pixels.",N,N],[6,"LayoutToWorldScale","","Scaling ratio from layout to world. Used for cases where we know the layout is in world space, or specifically want to treat it this way.",N,N],[6,"LayoutToDeviceScale","","A complete scaling ratio from layout space to device pixel space.",N,N],[6,"LayoutTransform","","",N,N],[6,"LayoutToScrollTransform","","",N,N],[6,"ScrollToLayoutTransform","","",N,N],[6,"LayoutToWorldTransform","","",N,N],[6,"WorldToLayoutTransform","","",N,N],[6,"ScrollToWorldTransform","","",N,N],[6,"LayoutPointAu","","",N,N],[6,"LayoutRectAu","","",N,N],[6,"LayoutSizeAu","","",N,N],[17,"YUV_COLOR_SPACES","","",N,N],[17,"YUV_FORMATS","","",N,N],[17,"MAX_TEXT_RUN_LENGTH","","",N,N],[8,"RenderNotifier","","",N,N],[10,"clone","","",144,[[["self"]],["box",["rendernotifier"]]]],[10,"wake_up","","",144,[[["self"]]]],[10,"new_frame_ready","","",144,[[["self"],["documentid"],["bool"],["bool"],["option",["u64"]]]]],[11,"external_event","","",144,[[["self"],["externalevent"]]]],[11,"shut_down","","",144,[[["self"]]]],[8,"BlobImageResources","","",N,N],[10,"get_font_data","","",145,[[["self"],["fontkey"]],["fonttemplate"]]],[10,"get_image","","",145,[[["self"],["imagekey"]],["option"]]],[8,"BlobImageRenderer","","",N,N],[10,"add","","",146,[[["self"],["imagekey"],["arc",["blobimagedata"]],["option",["tilesize"]]]]],[10,"update","","",146,[[["self"],["imagekey"],["arc",["blobimagedata"]],["option",["deviceuintrect"]]]]],[10,"delete","","",146,[[["self"],["imagekey"]]]],[10,"request","","",146,[[["self"],["blobimageresources"],["blobimagerequest"],["blobimagedescriptor"],["option",["deviceuintrect"]]]]],[10,"resolve","","",146,[[["self"],["blobimagerequest"]],["blobimageresult"]]],[10,"delete_font","","",146,[[["self"],["fontkey"]]]],[10,"delete_font_instance","","",146,[[["self"],["fontinstancekey"]]]],[10,"clear_namespace","","",146,[[["self"],["idnamespace"]]]],[11,"external_event","","",144,[[["self"],["externalevent"]]]],[11,"shut_down","","",144,[[["self"]]]],[11,"into","webrender_api::channel","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"new","webrender_api","",147,[[["typedrect",["f32","layoutpixel"]]],["self"]]],[11,"with_clip_rect","","",147,[[["typedrect",["f32","layoutpixel"]],["typedrect",["f32","layoutpixel"]]],["self"]]]],"paths":[[3,"Transaction"],[3,"TransactionMsg"],[3,"AddImage"],[3,"UpdateImage"],[3,"HitTestItem"],[3,"HitTestResult"],[3,"AddFontInstance"],[3,"CapturedDocument"],[3,"Epoch"],[3,"IdNamespace"],[3,"DocumentId"],[3,"PipelineId"],[3,"ResourceId"],[3,"ScrollNodeState"],[3,"PropertyBindingKey"],[3,"PropertyValue"],[3,"DynamicProperties"],[3,"PremultipliedColorF"],[3,"ColorF"],[3,"ColorU"],[3,"ClipAndScrollInfo"],[3,"GenericDisplayItem"],[3,"PrimitiveInfo"],[3,"ClipDisplayItem"],[3,"StickyOffsetBounds"],[3,"StickyFrameDisplayItem"],[3,"ScrollFrameDisplayItem"],[3,"RectangleDisplayItem"],[3,"LineDisplayItem"],[3,"TextDisplayItem"],[3,"NormalBorder"],[3,"NinePatchBorder"],[3,"BorderDisplayItem"],[3,"BorderRadius"],[3,"BorderWidths"],[3,"BorderSide"],[3,"BoxShadowDisplayItem"],[3,"Shadow"],[3,"Gradient"],[3,"GradientDisplayItem"],[3,"GradientStop"],[3,"RadialGradient"],[3,"ClipChainItem"],[3,"RadialGradientDisplayItem"],[3,"PushReferenceFrameDisplayListItem"],[3,"ReferenceFrame"],[3,"PushStackingContextDisplayItem"],[3,"StackingContext"],[3,"IframeDisplayItem"],[3,"ImageDisplayItem"],[3,"YuvImageDisplayItem"],[3,"ImageMask"],[3,"ComplexClipRegion"],[3,"ClipChainId"],[3,"ExternalScrollId"],[3,"DisplayListBuilder"],[3,"NativeFontHandle"],[3,"GlyphDimensions"],[3,"FontKey"],[3,"FontVariation"],[3,"GlyphOptions"],[3,"SyntheticItalics"],[3,"FontInstanceOptions"],[3,"FontInstancePlatformOptions"],[3,"FontInstanceKey"],[3,"GlyphInstance"],[3,"ImageKey"],[3,"ExternalImageId"],[3,"ExternalImageData"],[3,"ImageDescriptor"],[3,"BlobImageDescriptor"],[3,"RasterizedBlobImage"],[3,"BlobImageRequest"],[3,"TexelRect"],[4,"ResourceUpdate"],[4,"AddFont"],[4,"SceneMsg"],[4,"FrameMsg"],[4,"DebugCommand"],[4,"ApiMsg"],[4,"ScrollClamping"],[4,"ScrollLocation"],[4,"PropertyBinding"],[4,"SpecificDisplayItem"],[4,"ScrollSensitivity"],[4,"LineOrientation"],[4,"LineStyle"],[4,"RepeatMode"],[4,"NinePatchBorderSource"],[4,"BorderDetails"],[4,"BorderRadiusKind"],[4,"BorderStyle"],[4,"BoxShadowClipMode"],[4,"ExtendMode"],[4,"TransformStyle"],[4,"GlyphRasterSpace"],[4,"MixBlendMode"],[4,"FilterOp"],[4,"ImageRendering"],[4,"AlphaType"],[4,"YuvColorSpace"],[4,"YuvData"],[4,"YuvFormat"],[4,"LocalClip"],[4,"ClipMode"],[4,"ClipId"],[4,"FontTemplate"],[4,"FontRenderMode"],[4,"FontLCDFilter"],[4,"FontHinting"],[4,"TextureTarget"],[4,"ExternalImageType"],[4,"ImageFormat"],[4,"ImageData"],[4,"BlobImageError"],[3,"HitTestFlags"],[3,"CaptureBits"],[3,"ClearCache"],[3,"ExternalEvent"],[3,"RenderApiSender"],[3,"RenderApi"],[3,"ZoomFactor"],[3,"PropertyBindingId"],[3,"Payload"],[8,"PayloadSenderHelperMethods"],[8,"PayloadReceiverHelperMethods"],[6,"PayloadSender"],[6,"PayloadReceiver"],[3,"MsgReceiver"],[3,"MsgSender"],[3,"ItemRange"],[3,"BuiltDisplayList"],[3,"BuiltDisplayListDescriptor"],[3,"AuxIter"],[3,"BuiltDisplayListIter"],[3,"DisplayItemRef"],[3,"SaveState"],[3,"FontInstanceFlags"],[3,"DevicePixel"],[3,"PicturePixel"],[3,"LayoutPixel"],[3,"ScrollLayerPixel"],[3,"WorldPixel"],[3,"Tiles"],[8,"RenderNotifier"],[8,"BlobImageResources"],[8,"BlobImageRenderer"],[6,"LayoutPrimitiveInfo"]]};
searchIndex["yaml_rust"]={"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",N,N],[3,"YamlLoader","yaml_rust::yaml","",N,N],[3,"YamlIter","","",N,N],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",N,N],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,N],[13,"Integer","","YAML int is stored as i64.",0,N],[13,"String","","YAML scalar.",0,N],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,N],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,N],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",0,N],[13,"Alias","","Alias, not fully supported yet.",0,N],[13,"Null","","YAML null, e.g. `null` or `~`.",0,N],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,N],[6,"Array","","",N,N],[6,"Hash","","",N,N],[11,"clone","","",0,[[["self"]],["yaml"]]],[11,"eq","","",0,[[["self"],["yaml"]],["bool"]]],[11,"ne","","",0,[[["self"],["yaml"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["yaml"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["yaml"]],["bool"]]],[11,"le","","",0,[[["self"],["yaml"]],["bool"]]],[11,"gt","","",0,[[["self"],["yaml"]],["bool"]]],[11,"ge","","",0,[[["self"],["yaml"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",0,[[["self"],["yaml"]],["ordering"]]],[11,"hash","","",0,N],[11,"on_event","","",1,[[["self"],["event"],["marker"]]]],[11,"load_from_str","","",1,[[["str"]],["result",["vec","scanerror"]]]],[11,"as_bool","","",0,[[["self"]],["option",["bool"]]]],[11,"as_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"as_str","","",0,[[["self"]],["option",["str"]]]],[11,"as_hash","","",0,[[["self"]],["option",["hash"]]]],[11,"as_vec","","",0,[[["self"]],["option",["array"]]]],[11,"into_bool","","",0,[[["self"]],["option",["bool"]]]],[11,"into_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"into_string","","",0,[[["self"]],["option",["string"]]]],[11,"into_hash","","",0,[[["self"]],["option",["hash"]]]],[11,"into_vec","","",0,[[["self"]],["option",["array"]]]],[11,"is_null","","",0,[[["self"]],["bool"]]],[11,"is_badvalue","","",0,[[["self"]],["bool"]]],[11,"is_array","","",0,[[["self"]],["bool"]]],[11,"as_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"into_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"from_str","","",0,[[["str"]],["yaml"]]],[11,"index","","",0,[[["self"],["str"]],["yaml"]]],[11,"index","","",0,[[["self"],["usize"]],["yaml"]]],[11,"into_iter","","",0,N],[11,"next","","",2,[[["self"]],["option",["yaml"]]]],[0,"scanner","yaml_rust","",N,N],[3,"Marker","yaml_rust::scanner","",N,N],[3,"ScanError","","",N,N],[3,"Token","","",N,N],[12,"0","","",3,N],[12,"1","","",3,N],[3,"Scanner","","",N,N],[4,"TEncoding","","",N,N],[13,"Utf8","","",4,N],[4,"TScalarStyle","","",N,N],[13,"Any","","",5,N],[13,"Plain","","",5,N],[13,"SingleQuoted","","",5,N],[13,"DoubleQuoted","","",5,N],[13,"Literal","","",5,N],[13,"Foled","","",5,N],[4,"TokenType","","",N,N],[13,"NoToken","","",6,N],[13,"StreamStart","","",6,N],[13,"StreamEnd","","",6,N],[13,"VersionDirective","","major, minor",6,N],[13,"TagDirective","","handle, prefix",6,N],[13,"DocumentStart","","",6,N],[13,"DocumentEnd","","",6,N],[13,"BlockSequenceStart","","",6,N],[13,"BlockMappingStart","","",6,N],[13,"BlockEnd","","",6,N],[13,"FlowSequenceStart","","",6,N],[13,"FlowSequenceEnd","","",6,N],[13,"FlowMappingStart","","",6,N],[13,"FlowMappingEnd","","",6,N],[13,"BlockEntry","","",6,N],[13,"FlowEntry","","",6,N],[13,"Key","","",6,N],[13,"Value","","",6,N],[13,"Alias","","",6,N],[13,"Anchor","","",6,N],[13,"Tag","","handle, suffix",6,N],[13,"Scalar","","",6,N],[6,"ScanResult","","",N,N],[11,"clone","","",4,[[["self"]],["tencoding"]]],[11,"eq","","",4,[[["self"],["tencoding"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["tscalarstyle"]]],[11,"eq","","",5,[[["self"],["tscalarstyle"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["marker"]]],[11,"eq","","",7,[[["self"],["marker"]],["bool"]]],[11,"ne","","",7,[[["self"],["marker"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"index","","",7,[[["self"]],["usize"]]],[11,"line","","",7,[[["self"]],["usize"]]],[11,"col","","",7,[[["self"]],["usize"]]],[11,"clone","","",8,[[["self"]],["scanerror"]]],[11,"eq","","",8,[[["self"],["scanerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["scanerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,[[["marker"],["str"]],["scanerror"]]],[11,"marker","","",8,[[["self"]],["marker"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"cause","","",8,[[["self"]],["option",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["tokentype"]]],[11,"eq","","",6,[[["self"],["tokentype"]],["bool"]]],[11,"ne","","",6,[[["self"],["tokentype"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["token"]]],[11,"eq","","",3,[[["self"],["token"]],["bool"]]],[11,"ne","","",3,[[["self"],["token"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"next","","",9,[[["self"]],["option",["token"]]]],[11,"new","","Creates the YAML tokenizer.",9,[[["t"]],["scanner"]]],[11,"get_error","","",9,[[["self"]],["option",["scanerror"]]]],[11,"stream_started","","",9,[[["self"]],["bool"]]],[11,"stream_ended","","",9,[[["self"]],["bool"]]],[11,"mark","","",9,[[["self"]],["marker"]]],[11,"fetch_next_token","","",9,[[["self"]],["scanresult"]]],[11,"next_token","","",9,[[["self"]],["result",["option","scanerror"]]]],[11,"fetch_more_tokens","","",9,[[["self"]],["scanresult"]]],[0,"parser","yaml_rust","",N,N],[3,"Parser","yaml_rust::parser","",N,N],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",N,N],[13,"Nothing","","Reserved for internal use",10,N],[13,"StreamStart","","",10,N],[13,"StreamEnd","","",10,N],[13,"DocumentStart","","",10,N],[13,"DocumentEnd","","",10,N],[13,"Alias","","Refer to an anchor ID",10,N],[13,"Scalar","","Value, style, anchor_id, tag",10,N],[13,"SequenceStart","","Anchor ID",10,N],[13,"SequenceEnd","","",10,N],[13,"MappingStart","","Anchor ID",10,N],[13,"MappingEnd","","",10,N],[6,"ParseResult","","",N,N],[8,"EventReceiver","","",N,N],[10,"on_event","","",11,[[["self"],["event"]]]],[8,"MarkedEventReceiver","","",N,N],[10,"on_event","","",12,[[["self"],["event"],["marker"]]]],[11,"clone","","",10,[[["self"]],["event"]]],[11,"eq","","",10,[[["self"],["event"]],["bool"]]],[11,"ne","","",10,[[["self"],["event"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","",13,[[["t"]],["parser"]]],[11,"peek","","",13,[[["self"]],["result",["scanerror"]]]],[11,"next","","",13,[[["self"]],["parseresult"]]],[11,"load","","",13,[[["self"],["r"],["bool"]],["result",["scanerror"]]]],[0,"emitter","yaml_rust","",N,N],[3,"YamlEmitter","yaml_rust::emitter","",N,N],[4,"EmitError","","",N,N],[13,"FmtError","","",14,N],[13,"BadHashmapKey","","",14,N],[6,"EmitResult","","",N,N],[11,"clone","","",14,[[["self"]],["emiterror"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"cause","","",14,[[["self"]],["option",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from","","",14,[[["error"]],["self"]]],[11,"new","","",15,[[["write"]],["yamlemitter"]]],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",15,[[["self"],["bool"]]]],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",15,[[["self"]],["bool"]]],[11,"dump","","",15,[[["self"],["yaml"]],["emitresult"]]],[11,"on_event","yaml_rust::yaml","",1,N],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","yaml_rust::scanner","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into","yaml_rust::parser","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"into","yaml_rust::emitter","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
searchIndex["yoga"]={"doc":"","items":[[3,"Node","yoga","",N,N],[0,"prelude","","",N,N],[0,"types","","",N,N],[3,"Size","yoga::types","",N,N],[12,"width","","",0,N],[12,"height","","",0,N],[3,"Layout","","",N,N],[3,"Context","","",N,N],[4,"Align","","",N,N],[13,"Auto","","",1,N],[13,"FlexStart","","",1,N],[13,"Center","","",1,N],[13,"FlexEnd","","",1,N],[13,"Stretch","","",1,N],[13,"Baseline","","",1,N],[13,"SpaceBetween","","",1,N],[13,"SpaceAround","","",1,N],[4,"Dimension","","",N,N],[13,"Width","","",2,N],[13,"Height","","",2,N],[4,"Direction","","",N,N],[13,"Inherit","","",3,N],[13,"LTR","","",3,N],[13,"RTL","","",3,N],[4,"Display","","",N,N],[13,"Flex","","",4,N],[13,"None","","",4,N],[4,"Edge","","",N,N],[13,"Left","","",5,N],[13,"Top","","",5,N],[13,"Right","","",5,N],[13,"Bottom","","",5,N],[13,"Start","","",5,N],[13,"End","","",5,N],[13,"Horizontal","","",5,N],[13,"Vertical","","",5,N],[13,"All","","",5,N],[4,"FlexDirection","","",N,N],[13,"Column","","",6,N],[13,"ColumnReverse","","",6,N],[13,"Row","","",6,N],[13,"RowReverse","","",6,N],[4,"Justify","","",N,N],[13,"FlexStart","","",7,N],[13,"Center","","",7,N],[13,"FlexEnd","","",7,N],[13,"SpaceBetween","","",7,N],[13,"SpaceAround","","",7,N],[13,"SpaceEvenly","","",7,N],[4,"LogLevel","","",N,N],[13,"Error","","",8,N],[13,"Warn","","",8,N],[13,"Info","","",8,N],[13,"Debug","","",8,N],[13,"Verbose","","",8,N],[13,"Fatal","","",8,N],[4,"MeasureMode","","",N,N],[13,"Undefined","","",9,N],[13,"Exactly","","",9,N],[13,"AtMost","","",9,N],[4,"NodeType","","",N,N],[13,"Default","","",10,N],[13,"Text","","",10,N],[4,"Overflow","","",N,N],[13,"Visible","","",11,N],[13,"Hidden","","",11,N],[13,"Scroll","","",11,N],[4,"PositionType","","",N,N],[13,"Relative","","",12,N],[13,"Absolute","","",12,N],[4,"PrintOptions","","",N,N],[13,"Layout","","",13,N],[13,"Style","","",13,N],[13,"Children","","",13,N],[4,"StyleUnit","","",N,N],[13,"UndefinedValue","","",14,N],[13,"Point","","",14,N],[13,"Percent","","",14,N],[13,"Auto","","",14,N],[4,"Wrap","","",N,N],[13,"NoWrap","","",15,N],[13,"Wrap","","",15,N],[13,"WrapReverse","","",15,N],[4,"FlexStyle","","",N,N],[13,"AlignContent","","",16,N],[13,"AlignItems","","",16,N],[13,"AlignSelf","","",16,N],[13,"AspectRatio","","",16,N],[13,"BorderBottom","","",16,N],[13,"BorderEnd","","",16,N],[13,"BorderLeft","","",16,N],[13,"BorderRight","","",16,N],[13,"BorderStart","","",16,N],[13,"BorderTop","","",16,N],[13,"Border","","",16,N],[13,"Bottom","","",16,N],[13,"Display","","",16,N],[13,"End","","",16,N],[13,"Flex","","",16,N],[13,"FlexBasis","","",16,N],[13,"FlexDirection","","",16,N],[13,"FlexGrow","","",16,N],[13,"FlexShrink","","",16,N],[13,"FlexWrap","","",16,N],[13,"Height","","",16,N],[13,"JustifyContent","","",16,N],[13,"Left","","",16,N],[13,"Margin","","",16,N],[13,"MarginBottom","","",16,N],[13,"MarginEnd","","",16,N],[13,"MarginHorizontal","","",16,N],[13,"MarginLeft","","",16,N],[13,"MarginRight","","",16,N],[13,"MarginStart","","",16,N],[13,"MarginTop","","",16,N],[13,"MarginVertical","","",16,N],[13,"MaxHeight","","",16,N],[13,"MaxWidth","","",16,N],[13,"MinHeight","","",16,N],[13,"MinWidth","","",16,N],[13,"Overflow","","",16,N],[13,"Padding","","",16,N],[13,"PaddingBottom","","",16,N],[13,"PaddingEnd","","",16,N],[13,"PaddingHorizontal","","",16,N],[13,"PaddingLeft","","",16,N],[13,"PaddingRight","","",16,N],[13,"PaddingStart","","",16,N],[13,"PaddingTop","","",16,N],[13,"PaddingVertical","","",16,N],[13,"Position","","",16,N],[13,"Right","","",16,N],[13,"Start","","",16,N],[13,"Top","","",16,N],[13,"Width","","",16,N],[6,"NodeRef","","",N,N],[6,"BaselineFunc","","",N,N],[6,"MeasureFunc","","",N,N],[17,"Undefined","","",N,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"ne","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["flexstyle"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"le","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"gt","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"ge","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"cmp","","",16,[[["self"],["flexstyle"]],["ordering"]]],[11,"hash","","",16,N],[11,"clone","","",16,[[["self"]],["flexstyle"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["layout"]],["bool"]]],[11,"ne","","",17,[[["self"],["layout"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["layout"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["layout"]],["bool"]]],[11,"le","","",17,[[["self"],["layout"]],["bool"]]],[11,"gt","","",17,[[["self"],["layout"]],["bool"]]],[11,"ge","","",17,[[["self"],["layout"]],["bool"]]],[11,"cmp","","",17,[[["self"],["layout"]],["ordering"]]],[11,"hash","","",17,N],[11,"clone","","",17,[[["self"]],["layout"]]],[11,"new","","",17,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["layout"]]],[11,"left","","",17,[[["self"]],["f32"]]],[11,"right","","",17,[[["self"]],["f32"]]],[11,"top","","",17,[[["self"]],["f32"]]],[11,"bottom","","",17,[[["self"]],["f32"]]],[11,"width","","",17,[[["self"]],["f32"]]],[11,"height","","",17,[[["self"]],["f32"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"new","","",18,[[["t"]],["self"]]],[11,"deref","","",18,[[["self"]],["box"]]],[0,"traits","yoga","",N,N],[8,"Percent","yoga::traits","",N,N],[10,"percent","","",19,[[["self"]],["styleunit"]]],[8,"Point","","",N,N],[10,"point","","",20,[[["self"]],["styleunit"]]],[11,"fmt","yoga","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["node"]],["bool"]]],[11,"ne","","",21,[[["self"],["node"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["node"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["node"]],["bool"]]],[11,"le","","",21,[[["self"],["node"]],["bool"]]],[11,"gt","","",21,[[["self"],["node"]],["bool"]]],[11,"ge","","",21,[[["self"],["node"]],["bool"]]],[11,"cmp","","",21,[[["self"],["node"]],["ordering"]]],[11,"hash","","",21,N],[11,"new","","",21,[[],["node"]]],[11,"reset","","",21,[[["self"]]]],[11,"apply_styles","","",21,[[["self"],["i"]]]],[11,"apply_style","","",21,[[["self"],["flexstyle"]]]],[11,"insert_child","","",21,[[["self"],["node"],["u32"]]]],[11,"remove_child","","",21,[[["self"],["node"]]]],[11,"child_count","","",21,[[["self"]],["u32"]]],[11,"set_direction","","",21,[[["self"],["direction"]]]],[11,"set_flex_direction","","",21,[[["self"],["flexdirection"]]]],[11,"set_justify_content","","",21,[[["self"],["justify"]]]],[11,"set_align_content","","",21,[[["self"],["align"]]]],[11,"set_align_items","","",21,[[["self"],["align"]]]],[11,"set_align_self","","",21,[[["self"],["align"]]]],[11,"set_position_type","","",21,[[["self"],["positiontype"]]]],[11,"set_position","","",21,[[["self"],["edge"],["styleunit"]]]],[11,"set_flex_wrap","","",21,[[["self"],["wrap"]]]],[11,"set_overflow","","",21,[[["self"],["overflow"]]]],[11,"set_flex","","",21,[[["self"],["f32"]]]],[11,"set_flex_grow","","",21,[[["self"],["f32"]]]],[11,"set_flex_shrink","","",21,[[["self"],["f32"]]]],[11,"set_flex_basis","","",21,[[["self"],["styleunit"]]]],[11,"set_edge_position","","",21,[[["self"],["edge"],["f32"]]]],[11,"set_margin","","",21,[[["self"],["edge"],["styleunit"]]]],[11,"set_padding","","",21,[[["self"],["edge"],["styleunit"]]]],[11,"set_border","","",21,[[["self"],["edge"],["f32"]]]],[11,"set_width","","",21,[[["self"],["styleunit"]]]],[11,"set_height","","",21,[[["self"],["styleunit"]]]],[11,"set_min_width","","",21,[[["self"],["styleunit"]]]],[11,"set_min_height","","",21,[[["self"],["styleunit"]]]],[11,"set_max_width","","",21,[[["self"],["styleunit"]]]],[11,"set_max_height","","",21,[[["self"],["styleunit"]]]],[11,"set_aspect_ratio","","",21,[[["self"],["f32"]]]],[11,"calculate_layout","","",21,[[["self"],["f32"],["f32"],["direction"]]]],[11,"get_layout","","",21,[[["self"]],["layout"]]],[11,"get_child_count","","",21,[[["self"]],["u32"]]],[11,"get_child","","",21,[[["self"],["u32"]],["noderef"]]],[11,"get_style_direction","","",21,[[["self"]],["direction"]]],[11,"get_flex_direction","","",21,[[["self"]],["flexdirection"]]],[11,"get_justify_content","","",21,[[["self"]],["justify"]]],[11,"get_align_content","","",21,[[["self"]],["align"]]],[11,"get_align_items","","",21,[[["self"]],["align"]]],[11,"get_align_self","","",21,[[["self"]],["align"]]],[11,"get_position_type","","",21,[[["self"]],["positiontype"]]],[11,"get_flex_wrap","","",21,[[["self"]],["wrap"]]],[11,"get_overflow","","",21,[[["self"]],["overflow"]]],[11,"get_flex_grow","","",21,[[["self"]],["f32"]]],[11,"get_flex_shrink","","",21,[[["self"]],["f32"]]],[11,"get_flex_basis","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_left","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_right","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_top","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_bottom","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_start","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_end","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_left","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_right","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_top","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_bottom","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_start","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_end","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_left","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_right","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_top","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_bottom","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_start","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_end","","",21,[[["self"]],["styleunit"]]],[11,"get_style_border_left","","",21,[[["self"]],["f32"]]],[11,"get_style_border_right","","",21,[[["self"]],["f32"]]],[11,"get_style_border_top","","",21,[[["self"]],["f32"]]],[11,"get_style_border_bottom","","",21,[[["self"]],["f32"]]],[11,"get_style_border_start","","",21,[[["self"]],["f32"]]],[11,"get_style_border_end","","",21,[[["self"]],["f32"]]],[11,"get_style_width","","",21,[[["self"]],["styleunit"]]],[11,"get_style_height","","",21,[[["self"]],["styleunit"]]],[11,"get_style_min_width","","",21,[[["self"]],["styleunit"]]],[11,"get_style_min_height","","",21,[[["self"]],["styleunit"]]],[11,"get_style_max_width","","",21,[[["self"]],["styleunit"]]],[11,"get_style_max_height","","",21,[[["self"]],["styleunit"]]],[11,"get_layout_margin_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_start","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_end","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_start","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_end","","",21,[[["self"]],["f32"]]],[11,"get_layout_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_width","","",21,[[["self"]],["f32"]]],[11,"get_layout_height","","",21,[[["self"]],["f32"]]],[11,"get_layout_direction","","",21,[[["self"]],["direction"]]],[11,"is_dirty","","",21,[[["self"]],["bool"]]],[11,"copy_style","","",21,[[["self"],["node"]]]],[11,"set_display","","",21,[[["self"],["display"]]]],[11,"set_measure_func","","",21,[[["self"],["measurefunc"]]]],[11,"set_baseline_func","","",21,[[["self"],["baselinefunc"]]]],[11,"set_context","","",21,[[["self"],["option",["context"]]]]],[11,"get_context","","",21,[[["noderef"]],["option",["box"]]]],[11,"get_context_mut","","",21,[[["noderef"]],["option",["box"]]]],[11,"get_own_context","","",21,[[["self"]],["option",["box"]]]],[11,"get_own_context_mut","","",21,[[["self"]],["option",["box"]]]],[11,"drop_context","","",21,[[["self"]]]],[11,"drop","","",21,[[["self"]]]],[14,"unit","","",N,N],[14,"flex_style","","",N,N],[14,"style","","",N,N],[14,"make_styles","","",N,N],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"fmt","yoga::types","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["align"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["align"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["align"]],["ordering"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["align"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["dimension"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["dimension"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["dimension"]],["ordering"]]],[11,"hash","","",2,N],[11,"clone","","",2,[[["self"]],["dimension"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["direction"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["direction"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["direction"]],["ordering"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["direction"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["display"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["display"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["display"]],["ordering"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["display"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["edge"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["edge"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["edge"]],["ordering"]]],[11,"hash","","",5,N],[11,"clone","","",5,[[["self"]],["edge"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["flexdirection"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["flexdirection"]],["option",["ordering"]]]],[11,"cmp","","",6,[[["self"],["flexdirection"]],["ordering"]]],[11,"hash","","",6,N],[11,"clone","","",6,[[["self"]],["flexdirection"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["justify"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["justify"]],["option",["ordering"]]]],[11,"cmp","","",7,[[["self"],["justify"]],["ordering"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["justify"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["loglevel"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"cmp","","",8,[[["self"],["loglevel"]],["ordering"]]],[11,"hash","","",8,N],[11,"clone","","",8,[[["self"]],["loglevel"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["measuremode"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["measuremode"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["measuremode"]],["ordering"]]],[11,"hash","","",9,N],[11,"clone","","",9,[[["self"]],["measuremode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["nodetype"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["nodetype"]],["option",["ordering"]]]],[11,"cmp","","",10,[[["self"],["nodetype"]],["ordering"]]],[11,"hash","","",10,N],[11,"clone","","",10,[[["self"]],["nodetype"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["overflow"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["overflow"]],["option",["ordering"]]]],[11,"cmp","","",11,[[["self"],["overflow"]],["ordering"]]],[11,"hash","","",11,N],[11,"clone","","",11,[[["self"]],["overflow"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["positiontype"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["positiontype"]],["option",["ordering"]]]],[11,"cmp","","",12,[[["self"],["positiontype"]],["ordering"]]],[11,"hash","","",12,N],[11,"clone","","",12,[[["self"]],["positiontype"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["printoptions"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["printoptions"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["printoptions"]],["ordering"]]],[11,"hash","","",13,N],[11,"clone","","",13,[[["self"]],["printoptions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["size"]],["bool"]]],[11,"ne","","",0,[[["self"],["size"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["size"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["size"]],["bool"]]],[11,"le","","",0,[[["self"],["size"]],["bool"]]],[11,"gt","","",0,[[["self"],["size"]],["bool"]]],[11,"ge","","",0,[[["self"],["size"]],["bool"]]],[11,"clone","","",0,[[["self"]],["size"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"ne","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["styleunit"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"le","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"gt","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"ge","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"cmp","","",14,[[["self"],["styleunit"]],["ordering"]]],[11,"hash","","",14,N],[11,"clone","","",14,[[["self"]],["styleunit"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["wrap"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["wrap"]],["option",["ordering"]]]],[11,"cmp","","",15,[[["self"],["wrap"]],["ordering"]]],[11,"hash","","",15,N],[11,"clone","","",15,[[["self"]],["wrap"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]]],"paths":[[3,"Size"],[4,"Align"],[4,"Dimension"],[4,"Direction"],[4,"Display"],[4,"Edge"],[4,"FlexDirection"],[4,"Justify"],[4,"LogLevel"],[4,"MeasureMode"],[4,"NodeType"],[4,"Overflow"],[4,"PositionType"],[4,"PrintOptions"],[4,"StyleUnit"],[4,"Wrap"],[4,"FlexStyle"],[3,"Layout"],[3,"Context"],[8,"Percent"],[8,"Point"],[3,"Node"]]};
initSearch(searchIndex);
