var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"for_each_transition","","Iterates over each state",7,[[["self"],["f"]]]],[11,"for_each_ok_transition","","Iterates over each non-fail state",7,[[["self"],["f"]]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"for_each_transition","","",9,[[["self"],["f"]]]],[11,"for_each_ok_transition","","",9,[[["self"],["f"]]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[4,"backtrace_state"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["css_color_parser"]={"doc":"Easy-to-use Rust parser for CSS3 color strings. Lightweight. Reliable (Provides tests, handles all errors to avoid panic!s).","items":[[3,"Color","css_color_parser","Color in rgba format, where {red,green,blue} in 0..255, alpha in 0.0..1.0",N,N],[12,"r","","red channel, ranges from 0 to 255",0,N],[12,"g","","green channel, ranges from 0 to 255",0,N],[12,"b","","blue channel, ranges from 0 to 255",0,N],[12,"a","","alpha channel, ranges from 0.0 to 1.0",0,N],[3,"ColorParseError","","",N,N],[3,"NAMED_COLORS","","List of CSS3 named colors from http://www.w3.org/TR/css3-color.",N,N],[11,"clone","","",0,[[["self"]],["color"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["color"]],["bool"]]],[11,"ne","","",0,[[["self"],["color"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["parseinterror"]],["colorparseerror"]]],[11,"from","","",1,[[["parsefloaterror"]],["colorparseerror"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["colorparseerror"]]]],[11,"deref","","",2,[[["self"]],["hashmap"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"paths":[[3,"Color"],[3,"ColorParseError"],[3,"NAMED_COLORS"]]};
searchIndex["dtoa"]={"doc":"","items":[[5,"write","dtoa","",N,[[["w"],["v"]],["result",["usize"]]]],[8,"Floating","","",N,N],[10,"write","","",0,[[["self"],["w"]],["result",["usize"]]]],[14,"diyfp","","",N,N],[14,"dtoa","","",N,N]],"paths":[[8,"Floating"]]};
searchIndex["enum_extract"]={"doc":"This crate provides 2 macros, `extract!` and `let_extract!`. See their individual macro-level documentation for more information.","items":[[14,"extract","enum_extract","Extract the fields of a single variant from an enum, returning an `Option<T>` where `T` is either the single field, or a tuple of each of the fields in the order they are written.",N,N],[14,"let_extract","","Extract the fields of a single variant from an enum, binding them into the current scope.",N,N]],"paths":[]};
searchIndex["erased_serde"]={"doc":"This crate provides type-erased versions of Serde's `Serialize`, `Serializer` and `Deserializer` traits that can be used as trait objects.","items":[[3,"Error","erased_serde","Error when a `Serializer` or `Deserializer` trait object fails.",N,N],[5,"deserialize","","Deserialize a value of type `T` from the given trait object.",N,[[["deserializer"]],["result",["error"]]]],[5,"serialize","","Serialize the given type-erased serializable value.",N,[[["t"],["s"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"custom","","",0,[[["t"]],["self"]]],[11,"custom","","",0,[[["t"]],["self"]]],[8,"Deserializer","","An object-safe equivalent of Serde's `Deserializer` trait.",N,N],[10,"erased_deserialize_any","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_bool","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_u8","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_u16","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_u32","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_u64","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_i8","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_i16","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_i32","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_i64","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_i128","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_u128","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_f32","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_f64","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_char","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_str","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_string","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_bytes","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_byte_buf","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_option","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_unit","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_unit_struct","","",1,[[["self"],["str"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_newtype_struct","","",1,[[["self"],["str"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_seq","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_tuple","","",1,[[["self"],["usize"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_tuple_struct","","",1,[[["self"],["str"],["usize"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_map","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_struct","","",1,N],[10,"erased_deserialize_identifier","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_deserialize_enum","","",1,N],[10,"erased_deserialize_ignored_any","","",1,[[["self"],["visitor"]],["result",["out","error"]]]],[10,"erased_is_human_readable","","",1,[[["self"]],["bool"]]],[8,"Serialize","","An object-safe equivalent of Serde's `Serialize` trait.",N,N],[10,"erased_serialize","","",2,[[["self"],["serializer"]],["result",["ok","error"]]]],[8,"Serializer","","An object-safe equivalent of Serde's `Serializer` trait.",N,N],[10,"erased_serialize_bool","","",3,[[["self"],["bool"]],["result",["ok","error"]]]],[10,"erased_serialize_i8","","",3,[[["self"],["i8"]],["result",["ok","error"]]]],[10,"erased_serialize_i16","","",3,[[["self"],["i16"]],["result",["ok","error"]]]],[10,"erased_serialize_i32","","",3,[[["self"],["i32"]],["result",["ok","error"]]]],[10,"erased_serialize_i64","","",3,[[["self"],["i64"]],["result",["ok","error"]]]],[10,"erased_serialize_u8","","",3,[[["self"],["u8"]],["result",["ok","error"]]]],[10,"erased_serialize_u16","","",3,[[["self"],["u16"]],["result",["ok","error"]]]],[10,"erased_serialize_u32","","",3,[[["self"],["u32"]],["result",["ok","error"]]]],[10,"erased_serialize_u64","","",3,[[["self"],["u64"]],["result",["ok","error"]]]],[10,"erased_serialize_i128","","",3,[[["self"],["i128"]],["result",["ok","error"]]]],[10,"erased_serialize_u128","","",3,[[["self"],["u128"]],["result",["ok","error"]]]],[10,"erased_serialize_f32","","",3,[[["self"],["f32"]],["result",["ok","error"]]]],[10,"erased_serialize_f64","","",3,[[["self"],["f64"]],["result",["ok","error"]]]],[10,"erased_serialize_char","","",3,[[["self"],["char"]],["result",["ok","error"]]]],[10,"erased_serialize_str","","",3,[[["self"],["str"]],["result",["ok","error"]]]],[10,"erased_serialize_bytes","","",3,N],[10,"erased_serialize_none","","",3,[[["self"]],["result",["ok","error"]]]],[10,"erased_serialize_some","","",3,[[["self"],["serialize"]],["result",["ok","error"]]]],[10,"erased_serialize_unit","","",3,[[["self"]],["result",["ok","error"]]]],[10,"erased_serialize_unit_struct","","",3,[[["self"],["str"]],["result",["ok","error"]]]],[10,"erased_serialize_unit_variant","","",3,[[["self"],["str"],["u32"],["str"]],["result",["ok","error"]]]],[10,"erased_serialize_newtype_struct","","",3,[[["self"],["str"],["serialize"]],["result",["ok","error"]]]],[10,"erased_serialize_newtype_variant","","",3,[[["self"],["str"],["u32"],["str"],["serialize"]],["result",["ok","error"]]]],[10,"erased_serialize_seq","","",3,[[["self"],["option",["usize"]]],["result",["seq","error"]]]],[10,"erased_serialize_tuple","","",3,[[["self"],["usize"]],["result",["tuple","error"]]]],[10,"erased_serialize_tuple_struct","","",3,[[["self"],["str"],["usize"]],["result",["tuplestruct","error"]]]],[10,"erased_serialize_tuple_variant","","",3,[[["self"],["str"],["u32"],["str"],["usize"]],["result",["tuplevariant","error"]]]],[10,"erased_serialize_map","","",3,[[["self"],["option",["usize"]]],["result",["map","error"]]]],[10,"erased_serialize_struct","","",3,[[["self"],["str"],["usize"]],["result",["struct","error"]]]],[10,"erased_serialize_struct_variant","","",3,[[["self"],["str"],["u32"],["str"],["usize"]],["result",["structvariant","error"]]]],[10,"erased_is_human_readable","","",3,[[["self"]],["bool"]]],[14,"serialize_trait_object","","Implement `serde::Serialize` for a trait object that has `erased_serde::Serialize` as a supertrait.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"erase","","Convert any Serde `Deserializer` to a trait object.",1,[[["d"]],["deserializer"]]],[11,"erase","","Convert any Serde `Serializer` to a trait object.",3,[[["s"]],["serializer"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]]],"paths":[[3,"Error"],[8,"Deserializer"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["euclid"]={"doc":"A collection of strongly typed math tools for computer graphics with an inclination towards 2d graphics and layout.","items":[[3,"Length","euclid","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.",N,N],[12,"0","","",0,N],[3,"TypedScale","","A scaling factor between two different units of measurement.",N,N],[12,"0","","",1,N],[3,"TypedTransform2D","","A 2d transform stored as a 3 by 2 matrix in row-major order in memory.",N,N],[12,"m11","","",2,N],[12,"m12","","",2,N],[12,"m21","","",2,N],[12,"m22","","",2,N],[12,"m31","","",2,N],[12,"m32","","",2,N],[3,"TypedTransform3D","","A 3d transform stored as a 4 by 4 matrix in row-major order in memory.",N,N],[12,"m11","","",3,N],[12,"m12","","",3,N],[12,"m13","","",3,N],[12,"m14","","",3,N],[12,"m21","","",3,N],[12,"m22","","",3,N],[12,"m23","","",3,N],[12,"m24","","",3,N],[12,"m31","","",3,N],[12,"m32","","",3,N],[12,"m33","","",3,N],[12,"m34","","",3,N],[12,"m41","","",3,N],[12,"m42","","",3,N],[12,"m43","","",3,N],[12,"m44","","",3,N],[3,"TypedPoint2D","","A 2d Point tagged with a unit.",N,N],[12,"x","","",4,N],[12,"y","","",4,N],[3,"TypedPoint3D","","A 3d Point tagged with a unit.",N,N],[12,"x","","",5,N],[12,"y","","",5,N],[12,"z","","",5,N],[3,"TypedVector2D","","A 2d Vector tagged with a unit.",N,N],[12,"x","","",6,N],[12,"y","","",6,N],[3,"TypedVector3D","","A 3d Vector tagged with a unit.",N,N],[12,"x","","",7,N],[12,"y","","",7,N],[12,"z","","",7,N],[3,"BoolVector2D","","",N,N],[12,"x","","",8,N],[12,"y","","",8,N],[3,"BoolVector3D","","",N,N],[12,"x","","",9,N],[12,"y","","",9,N],[12,"z","","",9,N],[3,"HomogeneousVector","","Homogeneous vector in 3D space.",N,N],[12,"x","","",10,N],[12,"y","","",10,N],[12,"z","","",10,N],[12,"w","","",10,N],[3,"TypedRect","","A 2d Rectangle optionally tagged with a unit.",N,N],[12,"origin","","",11,N],[12,"size","","",11,N],[3,"Angle","","An angle in radians",N,N],[12,"radians","","",12,N],[3,"TypedRotation2D","","A transform that can represent rotations in 2d, represented as an angle in radians.",N,N],[12,"angle","","",13,N],[3,"TypedRotation3D","","A transform that can represent rotations in 3d, represented as a quaternion.",N,N],[12,"i","","",14,N],[12,"j","","",14,N],[12,"k","","",14,N],[12,"r","","",14,N],[3,"TypedSideOffsets2D","","",N,N],[12,"top","","",15,N],[12,"right","","",15,N],[12,"bottom","","",15,N],[12,"left","","",15,N],[3,"TypedSize2D","","",N,N],[12,"width","","",16,N],[12,"height","","",16,N],[3,"UnknownUnit","","The default unit.",N,N],[3,"Radians","","An angle in radians",N,N],[12,"radians","","",12,N],[5,"point2","","",N,[[["t"],["t"]],["typedpoint2d"]]],[5,"point3","","",N,[[["t"],["t"],["t"]],["typedpoint3d"]]],[5,"vec2","","Convenience constructor.",N,[[["t"],["t"]],["typedvector2d"]]],[5,"vec3","","Convenience constructor.",N,[[["t"],["t"],["t"]],["typedvector3d"]]],[5,"bvec2","","",N,[[["bool"],["bool"]],["boolvector2d"]]],[5,"bvec3","","",N,[[["bool"],["bool"],["bool"]],["boolvector3d"]]],[5,"rect","","Shorthand for `TypedRect::new(TypedPoint2D::new(x, y), TypedSize2D::new(w, h))`.",N,[[["t"],["t"],["t"],["t"]],["typedrect"]]],[5,"size2","","Shorthand for `TypedSize2D::new(w, h)`.",N,[[["t"],["t"]],["typedsize2d"]]],[0,"approxeq","","",N,N],[8,"ApproxEq","euclid::approxeq","Trait for testing approximate equality",N,N],[10,"approx_epsilon","","",17,[[],["eps"]]],[10,"approx_eq","","",17,[[["self"],["self"]],["bool"]]],[10,"approx_eq_eps","","",17,[[["self"],["self"],["eps"]],["bool"]]],[11,"clone","euclid","",10,[[["self"]],["self"]]],[11,"deserialize","","",10,[[["d"]],["result"]]],[11,"serialize","","",10,[[["self"],["s"]],["result"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"hash","","",10,[[["self"],["h"]]]],[11,"new","","Constructor taking scalar values directly.",10,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"to_point2d","","Convert into Cartesian 2D point.",10,[[["self"]],["option",["typedpoint2d"]]]],[11,"to_point3d","","Convert into Cartesian 3D point.",10,[[["self"]],["option",["typedpoint3d"]]]],[11,"from","","",10,[[["typedvector2d"]],["self"]]],[11,"from","","",10,[[["typedvector3d"]],["self"]]],[11,"from","","",10,[[["typedpoint2d"]],["self"]]],[11,"from","","",10,[[["typedpoint3d"]],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[0,"num","","A one-dimensional length, tagged with its units.",N,N],[8,"Zero","euclid::num","",N,N],[10,"zero","","",18,[[],["self"]]],[8,"One","","",N,N],[10,"one","","",19,[[],["self"]]],[8,"Round","","",N,N],[10,"round","","",20,[[["self"]],["self"]]],[8,"Floor","","",N,N],[10,"floor","","",21,[[["self"]],["self"]]],[8,"Ceil","","",N,N],[10,"ceil","","",22,[[["self"]],["self"]]],[11,"clone","euclid","",0,[[["self"]],["self"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"new","","",0,[[["t"]],["self"]]],[11,"get","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"add","","",0,[[["self"],["length"]],["length"]]],[11,"add_assign","","",0,[[["self"],["length"]]]],[11,"sub","","",0,N],[11,"sub_assign","","",0,[[["self"],["length"]]]],[11,"saturating_add","","",0,[[["self"],["length"]],["length"]]],[11,"saturating_sub","","",0,[[["self"],["length"]],["length"]]],[11,"div","","",0,[[["self"],["length"]],["typedscale"]]],[11,"mul","","",0,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div","","",0,[[["self"],["t"]],["self"]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"mul","","",0,[[["self"],["typedscale"]],["length"]]],[11,"div","","",0,[[["self"],["typedscale"]],["length"]]],[11,"neg","","",0,[[["self"]],["length"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",0,[[["self"]],["length"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",0,[[["self"]],["option",["length"]]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"zero","","",0,[[],["self"]]],[11,"lerp","","Linearly interpolate between this length and another length.",0,[[["self"],["self"],["t"]],["self"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"origin","","Constructor, setting all components to zero.",4,[[],["self"]]],[11,"zero","","",4,[[],["self"]]],[11,"to_3d","","Convert into a 3d point.",4,[[["self"]],["typedpoint3d"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",4,[[["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",4,[[["length"],["length"]],["self"]]],[11,"extend","","Create a 3d point from this one, using the specified z value.",4,[[["self"],["t"]],["typedpoint3d"]]],[11,"to_vector","","Cast this point into a vector.",4,[[["self"]],["typedvector2d"]]],[11,"yx","","Swap x and y.",4,[[["self"]],["self"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",4,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",4,[[["self"]],["length"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",4,[[["self"]],["point2d"]]],[11,"from_untyped","","Tag a unitless value with units.",4,[[["point2d"]],["self"]]],[11,"to_array","","",4,N],[11,"add_size","","",4,[[["self"],["typedsize2d"]],["self"]]],[11,"add","","",4,[[["self"],["typedsize2d"]],["self"]]],[11,"add_assign","","",4,[[["self"],["typedvector2d"]]]],[11,"sub_assign","","",4,[[["self"],["typedvector2d"]]]],[11,"add","","",4,[[["self"],["typedvector2d"]],["self"]]],[11,"sub","","",4,[[["self"],["self"]],["typedvector2d"]]],[11,"sub","","",4,[[["self"],["typedvector2d"]],["self"]]],[11,"min","","",4,[[["self"],["self"]],["self"]]],[11,"max","","",4,[[["self"],["self"]],["self"]]],[11,"mul","","",4,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",4,[[["self"],["t"]]]],[11,"div","","",4,[[["self"],["t"]],["self"]]],[11,"div_assign","","",4,[[["self"],["t"]]]],[11,"mul","","",4,[[["self"],["typedscale"]],["typedpoint2d"]]],[11,"div","","",4,[[["self"],["typedscale"]],["typedpoint2d"]]],[11,"round","","Rounds each component to the nearest integer value.",4,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",4,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",4,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",4,[[["self"]],["typedpoint2d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",4,[[["self"]],["option",["typedpoint2d"]]]],[11,"to_f32","","Cast into an `f32` point.",4,[[["self"]],["typedpoint2d",["f32"]]]],[11,"to_f64","","Cast into an `f64` point.",4,[[["self"]],["typedpoint2d",["f64"]]]],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["usize"]]]],[11,"to_u32","","Cast into an `u32` point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["u32"]]]],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["i32"]]]],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",4,[[["self"]],["typedpoint2d",["i64"]]]],[11,"lerp","","Linearly interpolate between this point and another point.",4,[[["self"],["self"],["t"]],["self"]]],[11,"approx_epsilon","","",4,[[],["self"]]],[11,"approx_eq","","",4,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",4,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",4,N],[11,"from","","",4,N],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"origin","","Constructor, setting all components to zero.",5,[[],["self"]]],[11,"to_array_4d","","",5,N],[11,"lerp","","Linearly interpolate between this point and another point.",5,[[["self"],["self"],["t"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",5,[[["t"],["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",5,[[["length"],["length"],["length"]],["self"]]],[11,"to_vector","","Cast this point into a vector.",5,[[["self"]],["typedvector3d"]]],[11,"xy","","Returns a 2d point using this point's x and y coordinates",5,[[["self"]],["typedpoint2d"]]],[11,"xz","","Returns a 2d point using this point's x and z coordinates",5,[[["self"]],["typedpoint2d"]]],[11,"yz","","Returns a 2d point using this point's x and z coordinates",5,[[["self"]],["typedpoint2d"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",5,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",5,[[["self"]],["length"]]],[11,"z_typed","","Returns self.z as a Length carrying the unit.",5,[[["self"]],["length"]]],[11,"to_array","","",5,N],[11,"to_untyped","","Drop the units, preserving only the numeric value.",5,[[["self"]],["point3d"]]],[11,"from_untyped","","Tag a unitless value with units.",5,[[["point3d"]],["self"]]],[11,"to_2d","","Convert into a 2d point.",5,[[["self"]],["typedpoint2d"]]],[11,"add_assign","","",5,[[["self"],["typedvector3d"]]]],[11,"sub_assign","","",5,[[["self"],["typedvector3d"]]]],[11,"add","","",5,[[["self"],["typedvector3d"]],["self"]]],[11,"sub","","",5,[[["self"],["self"]],["typedvector3d"]]],[11,"sub","","",5,[[["self"],["typedvector3d"]],["self"]]],[11,"mul","","",5,[[["self"],["t"]],["self"]]],[11,"div","","",5,[[["self"],["t"]],["self"]]],[11,"min","","",5,[[["self"],["self"]],["self"]]],[11,"max","","",5,[[["self"],["self"]],["self"]]],[11,"round","","Rounds each component to the nearest integer value.",5,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",5,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",5,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",5,[[["self"]],["typedpoint3d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",5,[[["self"]],["option",["typedpoint3d"]]]],[11,"to_f32","","Cast into an `f32` point.",5,[[["self"]],["typedpoint3d",["f32"]]]],[11,"to_f64","","Cast into an `f64` point.",5,[[["self"]],["typedpoint3d",["f64"]]]],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["usize"]]]],[11,"to_u32","","Cast into an `u32` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["u32"]]]],[11,"to_i32","","Cast into an `i32` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["i32"]]]],[11,"to_i64","","Cast into an `i64` point, truncating decimals if any.",5,[[["self"]],["typedpoint3d",["i64"]]]],[11,"approx_epsilon","","",5,[[],["self"]]],[11,"approx_eq","","",5,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",5,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",5,N],[11,"from","","",5,N],[11,"deserialize","","",11,[[["d"]],["result"]]],[11,"serialize","","",11,[[["self"],["s"]],["result"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor.",11,[[["typedpoint2d"],["typedsize2d"]],["self"]]],[11,"from_size","","Creates a rect of the given size, at offset zero.",11,[[["typedsize2d"]],["self"]]],[11,"intersects","","",11,[[["self"],["self"]],["bool"]]],[11,"max_x","","",11,[[["self"]],["t"]]],[11,"min_x","","",11,[[["self"]],["t"]]],[11,"max_y","","",11,[[["self"]],["t"]]],[11,"min_y","","",11,[[["self"]],["t"]]],[11,"max_x_typed","","",11,[[["self"]],["length"]]],[11,"min_x_typed","","",11,[[["self"]],["length"]]],[11,"max_y_typed","","",11,[[["self"]],["length"]]],[11,"min_y_typed","","",11,[[["self"]],["length"]]],[11,"intersection","","",11,[[["self"],["self"]],["option"]]],[11,"translate","","Returns the same rectangle, translated by a vector.",11,[[["self"],["typedvector2d"]],["self"]]],[11,"contains","","Returns true if this rectangle contains the point. Points are considered in the rectangle if they are on the left or top edge, but outside if they are on the right or bottom edge.",11,[[["self"],["typedpoint2d"]],["bool"]]],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always returns true if rect is empty, and always returns false if rect is nonempty but this rectangle is empty.",11,[[["self"],["self"]],["bool"]]],[11,"inflate","","",11,[[["self"],["t"],["t"]],["self"]]],[11,"inflate_typed","","",11,[[["self"],["length"],["length"]],["self"]]],[11,"top_right","","",11,[[["self"]],["typedpoint2d"]]],[11,"bottom_left","","",11,[[["self"]],["typedpoint2d"]]],[11,"bottom_right","","",11,[[["self"]],["typedpoint2d"]]],[11,"translate_by_size","","",11,[[["self"],["typedsize2d"]],["self"]]],[11,"inner_rect","","Calculate the size and position of an inner rectangle.",11,[[["self"],["typedsideoffsets2d"]],["self"]]],[11,"outer_rect","","Calculate the size and position of an outer rectangle.",11,[[["self"],["typedsideoffsets2d"]],["self"]]],[11,"from_points","","Returns the smallest rectangle defined by the top/bottom/left/right-most points provided as parameter.",11,[[["i"]],["self"]]],[11,"lerp","","Linearly interpolate between this rectangle and another rectangle.",11,[[["self"],["self"],["t"]],["self"]]],[11,"center","","",11,[[["self"]],["typedpoint2d"]]],[11,"union","","",11,[[["self"],["self"]],["self"]]],[11,"scale","","",11,[[["self"],["s"],["s"]],["self"]]],[11,"zero","","Constructor, setting all sides to zero.",11,[[],["self"]]],[11,"is_empty","","Returns true if the size is zero, regardless of the origin's value.",11,[[["self"]],["bool"]]],[11,"mul","","",11,[[["self"],["t"]],["self"]]],[11,"div","","",11,[[["self"],["t"]],["self"]]],[11,"mul","","",11,[[["self"],["typedscale"]],["typedrect"]]],[11,"div","","",11,[[["self"],["typedscale"]],["typedrect"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",11,[[["self"]],["rect"]]],[11,"from_untyped","","Tag a unitless value with units.",11,[[["rect"]],["typedrect"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",11,[[["self"]],["typedrect"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",11,[[["self"]],["option",["typedrect"]]]],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that the returned rectangle has the same set of pixel centers as the original one. Edges at offset 0.5 round up. Suitable for most places where integral device coordinates are needed, but note that any translation should be applied first to avoid pixel rounding errors. Note that this is not rounding to nearest integer if the values are negative. They are always rounding as floor(n + 0.5).",11,[[["self"]],["self"]]],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle contains the resulting rectangle.",11,[[["self"]],["self"]]],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle is contained in the resulting rectangle.",11,[[["self"]],["self"]]],[11,"to_f32","","Cast into an `f32` rectangle.",11,[[["self"]],["typedrect",["f32"]]]],[11,"to_f64","","Cast into an `f64` rectangle.",11,[[["self"]],["typedrect",["f64"]]]],[11,"to_usize","","Cast into an `usize` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["usize"]]]],[11,"to_u32","","Cast into an `u32` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["u32"]]]],[11,"to_i32","","Cast into an `i32` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["i32"]]]],[11,"to_i64","","Cast into an `i64` rectangle, truncating decimals if any.",11,[[["self"]],["typedrect",["i64"]]]],[11,"from","","",11,[[["typedsize2d"]],["self"]]],[11,"clone","","",12,[[["self"]],["angle"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["angle"]],["bool"]]],[11,"ne","","",12,[[["self"],["angle"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["angle"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["angle"]],["bool"]]],[11,"le","","",12,[[["self"],["angle"]],["bool"]]],[11,"gt","","",12,[[["self"],["angle"]],["bool"]]],[11,"ge","","",12,[[["self"],["angle"]],["bool"]]],[11,"hash","","",12,N],[11,"radians","","",12,[[["t"]],["self"]]],[11,"get","","",12,[[["self"]],["t"]]],[11,"degrees","","",12,[[["t"]],["self"]]],[11,"to_degrees","","",12,[[["self"]],["t"]]],[11,"positive","","Returns this angle in the [0..2*PI[ range.",12,[[["self"]],["self"]]],[11,"signed","","Returns this angle in the ]-PI..PI] range.",12,[[["self"]],["self"]]],[11,"sin_cos","","Returns (sin(self), cos(self)).",12,N],[11,"zero","","",12,[[],["self"]]],[11,"pi","","",12,[[],["self"]]],[11,"two_pi","","",12,[[],["self"]]],[11,"frac_pi_2","","",12,[[],["self"]]],[11,"frac_pi_3","","",12,[[],["self"]]],[11,"frac_pi_4","","",12,[[],["self"]]],[11,"add","","",12,[[["self"],["angle"]],["angle"]]],[11,"add_assign","","",12,[[["self"],["angle"]]]],[11,"sub","","",12,N],[11,"sub_assign","","",12,[[["self"],["angle"]]]],[11,"div","","",12,[[["self"],["angle"]],["t"]]],[11,"div","","",12,[[["self"],["t"]],["angle"]]],[11,"div_assign","","",12,[[["self"],["t"]]]],[11,"mul","","",12,[[["self"],["t"]],["angle"]]],[11,"mul_assign","","",12,[[["self"],["t"]]]],[11,"neg","","",12,[[["self"]],["self"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize","","",13,[[["d"]],["result"]]],[11,"serialize","","",13,[[["self"],["s"]],["result"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"new","","Creates a rotation from an angle in radians.",13,[[["angle"]],["self"]]],[11,"radians","","",13,[[["t"]],["self"]]],[11,"identity","","Creates the identity rotation.",13,[[],["self"]]],[11,"get_angle","","Returns self.angle as a strongly typed `Angle<T>`.",13,[[["self"]],["angle"]]],[11,"to_3d","","Creates a 3d rotation (around the z axis) from this 2d rotation.",13,[[["self"]],["typedrotation3d"]]],[11,"inverse","","Returns the inverse of this rotation.",13,[[["self"]],["typedrotation2d"]]],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",13,[[["self"],["typedrotation2d"]],["typedrotation2d"]]],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",13,[[["self"],["typedrotation2d"]],["typedrotation2d"]]],[11,"transform_point","","Returns the given 2d point transformed by this rotation.",13,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector","","Returns the given 2d vector transformed by this rotation.",13,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"to_transform","","Returns the matrix representation of this rotation.",13,[[["self"]],["typedtransform2d"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize","","",14,[[["d"]],["result"]]],[11,"serialize","","",14,[[["self"],["s"]],["result"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"hash","","",14,[[["self"],["h"]]]],[11,"quaternion","","Creates a rotation around from a quaternion representation.",14,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"vector_part","","Returns the vector part (i, j, k) of this quaternion.",14,[[["self"]],["vector3d"]]],[11,"identity","","Creates the identity rotation.",14,[[],["self"]]],[11,"unit_quaternion","","Creates a rotation around from a quaternion representation and normalizes it.",14,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"around_axis","","Creates a rotation around a given axis.",14,[[["typedvector3d"],["angle"]],["self"]]],[11,"around_x","","Creates a rotation around the x axis.",14,[[["angle"]],["self"]]],[11,"around_y","","Creates a rotation around the y axis.",14,[[["angle"]],["self"]]],[11,"around_z","","Creates a rotation around the z axis.",14,[[["angle"]],["self"]]],[11,"euler","","Creates a rotation from Euler angles.",14,[[["angle"],["angle"],["angle"]],["self"]]],[11,"inverse","","Returns the inverse of this rotation.",14,[[["self"]],["typedrotation3d"]]],[11,"norm","","Computes the norm of this quaternion",14,[[["self"]],["t"]]],[11,"square_norm","","",14,[[["self"]],["t"]]],[11,"normalize","","Returns a unit quaternion from this one.",14,[[["self"]],["self"]]],[11,"is_normalized","","",14,[[["self"]],["bool"]]],[11,"slerp","","Spherical linear interpolation between this rotation and another rotation.",14,[[["self"],["self"],["t"]],["self"]]],[11,"lerp","","Basic Linear interpolation between this rotation and another rotation.",14,[[["self"],["self"],["t"]],["self"]]],[11,"rotate_point3d","","Returns the given 3d point transformed by this rotation.",14,[[["self"],["typedpoint3d"]],["typedpoint3d"]]],[11,"rotate_point2d","","Returns the given 2d point transformed by this rotation then projected on the xy plane.",14,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"rotate_vector3d","","Returns the given 3d vector transformed by this rotation then projected on the xy plane.",14,[[["self"],["typedvector3d"]],["typedvector3d"]]],[11,"rotate_vector2d","","Returns the given 2d vector transformed by this rotation then projected on the xy plane.",14,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"to_transform","","Returns the matrix representation of this rotation.",14,[[["self"]],["typedtransform3d"]]],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",14,[[["self"],["typedrotation3d"]],["typedrotation3d"]]],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",14,[[["self"],["typedrotation3d"]],["typedrotation3d"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"approx_epsilon","","",14,[[],["t"]]],[11,"approx_eq","","",14,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",14,[[["self"],["self"],["t"]],["bool"]]],[11,"deserialize","","",1,[[["d"]],["result",["typedscale"]]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"new","","",1,[[["t"]],["self"]]],[11,"get","","",1,[[["self"]],["t"]]],[18,"ONE","","Identity scaling, could be used to safely transit from one space to another.",1,N],[11,"inv","","The inverse TypedScale (1.0 / self).",1,[[["self"]],["typedscale"]]],[11,"mul","","",1,[[["self"],["typedscale"]],["typedscale"]]],[11,"add","","",1,[[["self"],["typedscale"]],["typedscale"]]],[11,"sub","","",1,[[["self"],["typedscale"]],["typedscale"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,[[["self"]],["typedscale"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",1,[[["self"]],["option",["typedscale"]]]],[11,"transform_point","","Returns the given point transformed by this scale.",1,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector","","Returns the given vector transformed by this scale.",1,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"transform_size","","Returns the given vector transformed by this scale.",1,[[["self"],["typedsize2d"]],["typedsize2d"]]],[11,"transform_rect","","Returns the given rect transformed by this scale.",1,[[["self"],["typedrect"]],["typedrect"]]],[11,"inverse","","Returns the inverse of this scale.",1,[[["self"]],["typedscale"]]],[11,"is_identity","","Returns true if this scale has no effect.",1,[[["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["typedscale"]],["bool"]]],[11,"clone","","",1,[[["self"]],["typedscale"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize","","",15,[[["d"]],["result"]]],[11,"serialize","","",15,[[["self"],["s"]],["result"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking a scalar for each side.",15,[[["t"],["t"],["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking a typed Length for each side.",15,[[["length"],["length"],["length"],["length"]],["self"]]],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",15,[[["self"]],["length"]]],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",15,[[["t"]],["self"]]],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",15,[[["length"]],["self"]]],[11,"horizontal","","",15,[[["self"]],["t"]]],[11,"vertical","","",15,[[["self"]],["t"]]],[11,"horizontal_typed","","",15,[[["self"]],["length"]]],[11,"vertical_typed","","",15,[[["self"]],["length"]]],[11,"add","","",15,[[["self"],["self"]],["self"]]],[11,"zero","","Constructor, setting all sides to zero.",15,[[],["self"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize","","",16,[[["d"]],["result"]]],[11,"serialize","","",16,[[["self"],["s"]],["result"]]],[11,"eq","","",16,[[["self"],["self"]],["bool"]]],[11,"hash","","",16,[[["self"],["h"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values.",16,[[["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking scalar strongly typed lengths.",16,[[["length"],["length"]],["self"]]],[11,"round","","Rounds each component to the nearest integer value.",16,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",16,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",16,[[["self"]],["self"]]],[11,"add","","",16,[[["self"],["self"]],["self"]]],[11,"sub","","",16,[[["self"],["self"]],["self"]]],[11,"area","","",16,N],[11,"lerp","","Linearly interpolate between this size and another size.",16,[[["self"],["self"],["t"]],["self"]]],[11,"is_empty_or_negative","","",16,[[["self"]],["bool"]]],[11,"zero","","",16,[[],["self"]]],[11,"zero","","",16,[[],["self"]]],[11,"mul","","",16,[[["self"],["t"]],["self"]]],[11,"div","","",16,[[["self"],["t"]],["self"]]],[11,"mul","","",16,[[["self"],["typedscale"]],["typedsize2d"]]],[11,"div","","",16,[[["self"],["typedscale"]],["typedsize2d"]]],[11,"width_typed","","Returns self.width as a Length carrying the unit.",16,[[["self"]],["length"]]],[11,"height_typed","","Returns self.height as a Length carrying the unit.",16,[[["self"]],["length"]]],[11,"to_array","","",16,N],[11,"to_vector","","",16,[[["self"]],["typedvector2d"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",16,[[["self"]],["size2d"]]],[11,"from_untyped","","Tag a unitless value with units.",16,[[["size2d"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",16,[[["self"]],["typedsize2d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",16,[[["self"]],["option",["typedsize2d"]]]],[11,"to_f32","","Cast into an `f32` size.",16,[[["self"]],["typedsize2d",["f32"]]]],[11,"to_f64","","Cast into an `f64` size.",16,[[["self"]],["typedsize2d",["f64"]]]],[11,"to_usize","","Cast into an `uint` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["usize"]]]],[11,"to_u32","","Cast into an `u32` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["u32"]]]],[11,"to_i32","","Cast into an `i32` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["i32"]]]],[11,"to_i64","","Cast into an `i64` size, truncating decimals if any.",16,[[["self"]],["typedsize2d",["i64"]]]],[11,"abs","","",16,[[["self"]],["self"]]],[11,"is_positive","","",16,[[["self"]],["bool"]]],[11,"greater_than","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"lower_than","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"equal","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"not_equal","","",16,[[["self"],["self"]],["boolvector2d"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"row_major","","Create a transform specifying its matrix elements in row-major order.",2,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"column_major","","Create a transform specifying its matrix elements in column-major order.",2,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",2,N],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",2,N],[11,"to_row_arrays","","Returns an array containing this transform's 3 rows in (in row-major order) as arrays.",2,N],[11,"from_row_major_array","","Creates a transform from an array of 6 elements in row-major order.",2,N],[11,"from_row_arrays","","Creates a transform from 3 rows of 2 elements (row-major order).",2,N],[11,"to_untyped","","Drop the units, preserving only the numeric value.",2,[[["self"]],["transform2d"]]],[11,"from_untyped","","Tag a unitless value with units.",2,[[["transform2d"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",2,[[["self"]],["typedtransform2d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",2,[[["self"]],["option",["typedtransform2d"]]]],[11,"identity","","",2,[[],["self"]]],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",2,[[["self"],["typedtransform2d"]],["typedtransform2d"]]],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",2,[[["self"],["typedtransform2d"]],["typedtransform2d"]]],[11,"create_translation","","Returns a translation transform.",2,[[["t"],["t"]],["self"]]],[11,"post_translate","","Applies a translation after self's transformation and returns the resulting transform.",2,[[["self"],["typedvector2d"]],["self"]]],[11,"pre_translate","","Applies a translation before self's transformation and returns the resulting transform.",2,[[["self"],["typedvector2d"]],["self"]]],[11,"create_scale","","Returns a scale transform.",2,[[["t"],["t"]],["self"]]],[11,"post_scale","","Applies a scale after self's transformation and returns the resulting transform.",2,[[["self"],["t"],["t"]],["self"]]],[11,"pre_scale","","Applies a scale before self's transformation and returns the resulting transform.",2,[[["self"],["t"],["t"]],["self"]]],[11,"create_rotation","","Returns a rotation transform.",2,[[["angle"]],["self"]]],[11,"post_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,[[["self"],["angle"]],["self"]]],[11,"pre_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,[[["self"],["angle"]],["self"]]],[11,"transform_point","","Returns the given point transformed by this transform.",2,[[["self"],["typedpoint2d"]],["typedpoint2d"]]],[11,"transform_vector","","Returns the given vector transformed by this matrix.",2,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",2,[[["self"],["typedrect"]],["typedrect"]]],[11,"determinant","","Computes and returns the determinant of this transform.",2,[[["self"]],["t"]]],[11,"inverse","","Returns the inverse transform if possible.",2,[[["self"]],["option",["typedtransform2d"]]]],[11,"with_destination","","Returns the same transform with a different destination unit.",2,[[["self"]],["typedtransform2d"]]],[11,"with_source","","Returns the same transform with a different source unit.",2,[[["self"]],["typedtransform2d"]]],[11,"to_3d","","Create a 3D transform from the current transform",2,[[["self"]],["typedtransform3d"]]],[11,"default","","",2,[[],["self"]]],[11,"approx_eq","","",2,[[["self"],["self"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"row_major","","Create a transform specifying its components in row-major order.",3,[[["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"column_major","","Create a transform specifying its components in column-major order.",3,[[["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"identity","","",3,[[],["self"]]],[11,"row_major_2d","","Create a 4 by 4 transform representing a 2d transformation, specifying its components in row-major order.",3,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"ortho","","Create an orthogonal projection transform.",3,[[["t"],["t"],["t"],["t"],["t"],["t"]],["self"]]],[11,"is_2d","","Returns true if this transform can be represented with a `TypedTransform2D`.",3,[[["self"]],["bool"]]],[11,"to_2d","","Create a 2D transform picking the relevant terms from this transform.",3,[[["self"]],["typedtransform2d"]]],[11,"is_backface_visible","","Check whether shapes on the XY plane with Z pointing towards the screen transformed by this matrix would be facing back.",3,[[["self"]],["bool"]]],[11,"approx_eq","","",3,[[["self"],["self"]],["bool"]]],[11,"with_destination","","Returns the same transform with a different destination unit.",3,[[["self"]],["typedtransform3d"]]],[11,"with_source","","Returns the same transform with a different source unit.",3,[[["self"]],["typedtransform3d"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",3,[[["self"]],["transform3d"]]],[11,"from_untyped","","Tag a unitless value with units.",3,[[["transform3d"]],["self"]]],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",3,[[["self"],["typedtransform3d"]],["typedtransform3d"]]],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",3,[[["self"],["typedtransform3d"]],["typedtransform3d"]]],[11,"inverse","","Returns the inverse transform if possible.",3,[[["self"]],["option",["typedtransform3d"]]]],[11,"determinant","","Compute the determinant of the transform.",3,[[["self"]],["t"]]],[11,"mul_s","","Multiplies all of the transform's component by a scalar and returns the result.",3,[[["self"],["t"]],["self"]]],[11,"from_scale","","Convenience function to create a scale transform from a `TypedScale`.",3,[[["typedscale"]],["self"]]],[11,"transform_point2d_homogeneous","","Returns the homogeneous vector corresponding to the transformed 2d point.",3,[[["self"],["typedpoint2d"]],["homogeneousvector"]]],[11,"transform_point2d","","Returns the given 2d point transformed by this transform, if the transform makes sense, or `None` otherwise.",3,[[["self"],["typedpoint2d"]],["option",["typedpoint2d"]]]],[11,"transform_vector2d","","Returns the given 2d vector transformed by this matrix.",3,[[["self"],["typedvector2d"]],["typedvector2d"]]],[11,"transform_point3d_homogeneous","","Returns the homogeneous vector corresponding to the transformed 3d point.",3,[[["self"],["typedpoint3d"]],["homogeneousvector"]]],[11,"transform_point3d","","Returns the given 3d point transformed by this transform, if the transform makes sense, or `None` otherwise.",3,[[["self"],["typedpoint3d"]],["option",["typedpoint3d"]]]],[11,"transform_vector3d","","Returns the given 3d vector transformed by this matrix.",3,[[["self"],["typedvector3d"]],["typedvector3d"]]],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform, if the transform makes sense for it, or `None` otherwise.",3,[[["self"],["typedrect"]],["option",["typedrect"]]]],[11,"create_translation","","Create a 3d translation transform",3,[[["t"],["t"],["t"]],["self"]]],[11,"pre_translate","","Returns a transform with a translation applied before self's transformation.",3,[[["self"],["typedvector3d"]],["self"]]],[11,"post_translate","","Returns a transform with a translation applied after self's transformation.",3,[[["self"],["typedvector3d"]],["self"]]],[11,"create_scale","","Create a 3d scale transform",3,[[["t"],["t"],["t"]],["self"]]],[11,"pre_scale","","Returns a transform with a scale applied before self's transformation.",3,[[["self"],["t"],["t"],["t"]],["self"]]],[11,"post_scale","","Returns a transform with a scale applied after self's transformation.",3,[[["self"],["t"],["t"],["t"]],["self"]]],[11,"create_rotation","","Create a 3d rotation transform from an angle / axis. The supplied axis must be normalized.",3,[[["t"],["t"],["t"],["angle"]],["self"]]],[11,"post_rotate","","Returns a transform with a rotation applied after self's transformation.",3,[[["self"],["t"],["t"],["t"],["angle"]],["self"]]],[11,"pre_rotate","","Returns a transform with a rotation applied before self's transformation.",3,[[["self"],["t"],["t"],["t"],["angle"]],["self"]]],[11,"create_skew","","Create a 2d skew transform.",3,[[["angle"],["angle"]],["self"]]],[11,"create_perspective","","Create a simple perspective projection transform",3,[[["t"]],["self"]]],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",3,N],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",3,N],[11,"to_row_arrays","","Returns an array containing this transform's 4 rows in (in row-major order) as arrays.",3,N],[11,"to_column_arrays","","Returns an array containing this transform's 4 columns in (in row-major order, or 4 rows in column-major order) as arrays.",3,N],[11,"from_array","","Creates a transform from an array of 16 elements in row-major order.",3,N],[11,"from_row_arrays","","Creates a transform from 4 rows of 4 elements (row-major order).",3,N],[11,"cast","","Cast from one numeric representation to another, preserving the units.",3,[[["self"]],["typedtransform3d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",3,[[["self"]],["option",["typedtransform3d"]]]],[11,"default","","",3,[[],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize","","",6,[[["d"]],["result"]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"eq","","",6,[[["self"],["self"]],["bool"]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"zero","","Constructor, setting all components to zero.",6,[[],["self"]]],[11,"to_3d","","Convert into a 3d vector.",6,[[["self"]],["typedvector3d"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",6,[[["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",6,[[["length"],["length"]],["self"]]],[11,"extend","","Create a 3d vector from this one, using the specified z value.",6,[[["self"],["t"]],["typedvector3d"]]],[11,"to_point","","Cast this vector into a point.",6,[[["self"]],["typedpoint2d"]]],[11,"yx","","Swap x and y.",6,[[["self"]],["self"]]],[11,"to_size","","Cast this vector into a size.",6,[[["self"]],["typedsize2d"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",6,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",6,[[["self"]],["length"]]],[11,"to_untyped","","Drop the units, preserving only the numeric value.",6,[[["self"]],["vector2d"]]],[11,"from_untyped","","Tag a unit-less value with units.",6,[[["vector2d"]],["self"]]],[11,"to_array","","",6,N],[11,"angle_from_x_axis","","Returns the angle between this vector and the x axis between -PI and PI.",6,[[["self"]],["angle"]]],[11,"dot","","Dot product.",6,[[["self"],["self"]],["t"]]],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",6,[[["self"],["self"]],["t"]]],[11,"normalize","","",6,[[["self"]],["self"]]],[11,"robust_normalize","","Return the normalized vector even if the length is larger than the max value of Float.",6,[[["self"]],["self"]]],[11,"square_length","","",6,[[["self"]],["t"]]],[11,"length","","",6,[[["self"]],["t"]]],[11,"lerp","","Linearly interpolate between this vector and another vector.",6,[[["self"],["self"],["t"]],["self"]]],[11,"add","","",6,[[["self"],["self"]],["self"]]],[11,"add_assign","","",6,[[["self"],["self"]]]],[11,"sub_assign","","",6,[[["self"],["self"]]]],[11,"sub","","",6,[[["self"],["self"]],["self"]]],[11,"neg","","",6,[[["self"]],["self"]]],[11,"min","","",6,[[["self"],["self"]],["self"]]],[11,"max","","",6,[[["self"],["self"]],["self"]]],[11,"mul","","",6,[[["self"],["t"]],["self"]]],[11,"div","","",6,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",6,[[["self"],["t"]]]],[11,"div_assign","","",6,[[["self"],["t"]]]],[11,"mul","","",6,N],[11,"div","","",6,N],[11,"round","","Rounds each component to the nearest integer value.",6,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",6,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",6,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6,[[["self"]],["typedvector2d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",6,[[["self"]],["option",["typedvector2d"]]]],[11,"to_f32","","Cast into an `f32` vector.",6,[[["self"]],["typedvector2d",["f32"]]]],[11,"to_f64","","Cast into an `f64` vector.",6,[[["self"]],["typedvector2d",["f64"]]]],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["usize"]]]],[11,"to_u32","","Cast into an `u32` vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["u32"]]]],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["i32"]]]],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",6,[[["self"]],["typedvector2d",["i64"]]]],[11,"approx_epsilon","","",6,[[],["self"]]],[11,"approx_eq","","",6,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",6,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",6,N],[11,"from","","",6,N],[11,"abs","","",6,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"zero","","Constructor, setting all components to zero.",7,[[],["self"]]],[11,"to_array_4d","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructor taking scalar values directly.",7,[[["t"],["t"],["t"]],["self"]]],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",7,[[["length"],["length"],["length"]],["typedvector3d"]]],[11,"to_point","","Cast this vector into a point.",7,[[["self"]],["typedpoint3d"]]],[11,"xy","","Returns a 2d vector using this vector's x and y coordinates",7,[[["self"]],["typedvector2d"]]],[11,"xz","","Returns a 2d vector using this vector's x and z coordinates",7,[[["self"]],["typedvector2d"]]],[11,"yz","","Returns a 2d vector using this vector's x and z coordinates",7,[[["self"]],["typedvector2d"]]],[11,"x_typed","","Returns self.x as a Length carrying the unit.",7,[[["self"]],["length"]]],[11,"y_typed","","Returns self.y as a Length carrying the unit.",7,[[["self"]],["length"]]],[11,"z_typed","","Returns self.z as a Length carrying the unit.",7,[[["self"]],["length"]]],[11,"to_array","","",7,N],[11,"to_untyped","","Drop the units, preserving only the numeric value.",7,[[["self"]],["vector3d"]]],[11,"from_untyped","","Tag a unitless value with units.",7,[[["vector3d"]],["self"]]],[11,"to_2d","","Convert into a 2d vector.",7,[[["self"]],["typedvector2d"]]],[11,"dot","","",7,[[["self"],["self"]],["t"]]],[11,"cross","","",7,[[["self"],["self"]],["self"]]],[11,"normalize","","",7,[[["self"]],["self"]]],[11,"robust_normalize","","Return the normalized vector even if the length is larger than the max value of Float.",7,[[["self"]],["self"]]],[11,"square_length","","",7,[[["self"]],["t"]]],[11,"length","","",7,[[["self"]],["t"]]],[11,"lerp","","Linearly interpolate between this vector and another vector.",7,[[["self"],["self"],["t"]],["self"]]],[11,"add","","",7,[[["self"],["self"]],["self"]]],[11,"sub","","",7,[[["self"],["self"]],["self"]]],[11,"add_assign","","",7,[[["self"],["self"]]]],[11,"sub_assign","","",7,[[["self"],["self"]]]],[11,"neg","","",7,[[["self"]],["self"]]],[11,"mul","","",7,[[["self"],["t"]],["self"]]],[11,"div","","",7,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",7,[[["self"],["t"]]]],[11,"div_assign","","",7,[[["self"],["t"]]]],[11,"min","","",7,[[["self"],["self"]],["self"]]],[11,"max","","",7,[[["self"],["self"]],["self"]]],[11,"mul","","",7,N],[11,"div","","",7,N],[11,"round","","Rounds each component to the nearest integer value.",7,[[["self"]],["self"]]],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",7,[[["self"]],["self"]]],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",7,[[["self"]],["self"]]],[11,"cast","","Cast from one numeric representation to another, preserving the units.",7,[[["self"]],["typedvector3d"]]],[11,"try_cast","","Fallible cast from one numeric representation to another, preserving the units.",7,[[["self"]],["option",["typedvector3d"]]]],[11,"to_f32","","Cast into an `f32` vector.",7,[[["self"]],["typedvector3d",["f32"]]]],[11,"to_f64","","Cast into an `f64` vector.",7,[[["self"]],["typedvector3d",["f64"]]]],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["usize"]]]],[11,"to_u32","","Cast into an `u32` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["u32"]]]],[11,"to_i32","","Cast into an `i32` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["i32"]]]],[11,"to_i64","","Cast into an `i64` vector, truncating decimals if any.",7,[[["self"]],["typedvector3d",["i64"]]]],[11,"approx_epsilon","","",7,[[],["self"]]],[11,"approx_eq","","",7,[[["self"],["self"]],["bool"]]],[11,"approx_eq_eps","","",7,[[["self"],["self"],["self"]],["bool"]]],[11,"into","","",7,N],[11,"from","","",7,N],[11,"abs","","",7,[[["self"]],["self"]]],[11,"clone","","",8,[[["self"]],["boolvector2d"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["boolvector2d"]],["bool"]]],[11,"ne","","",8,[[["self"],["boolvector2d"]],["bool"]]],[11,"hash","","",8,N],[11,"clone","","",9,[[["self"]],["boolvector3d"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["boolvector3d"]],["bool"]]],[11,"ne","","",9,[[["self"],["boolvector3d"]],["bool"]]],[11,"hash","","",9,N],[11,"all","","",8,[[["self"]],["bool"]]],[11,"any","","",8,[[["self"]],["bool"]]],[11,"none","","",8,[[["self"]],["bool"]]],[11,"and","","",8,[[["self"],["self"]],["self"]]],[11,"or","","",8,[[["self"],["self"]],["self"]]],[11,"not","","",8,[[["self"]],["self"]]],[11,"select_point","","",8,[[["self"],["typedpoint2d"],["typedpoint2d"]],["typedpoint2d"]]],[11,"select_vector","","",8,[[["self"],["typedvector2d"],["typedvector2d"]],["typedvector2d"]]],[11,"select_size","","",8,[[["self"],["typedsize2d"],["typedsize2d"]],["typedsize2d"]]],[11,"all","","",9,[[["self"]],["bool"]]],[11,"any","","",9,[[["self"]],["bool"]]],[11,"none","","",9,[[["self"]],["bool"]]],[11,"and","","",9,[[["self"],["self"]],["self"]]],[11,"or","","",9,[[["self"],["self"]],["self"]]],[11,"not","","",9,[[["self"]],["self"]]],[11,"select_point","","",9,[[["self"],["typedpoint3d"],["typedpoint3d"]],["typedpoint3d"]]],[11,"select_vector","","",9,[[["self"],["typedvector3d"],["typedvector3d"]],["typedvector3d"]]],[11,"xy","","",9,[[["self"]],["boolvector2d"]]],[11,"xz","","",9,[[["self"]],["boolvector2d"]]],[11,"yz","","",9,[[["self"]],["boolvector2d"]]],[11,"greater_than","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"lower_than","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"equal","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"not_equal","","",6,[[["self"],["self"]],["boolvector2d"]]],[11,"greater_than","","",7,[[["self"],["self"]],["boolvector3d"]]],[11,"lower_than","","",7,[[["self"],["self"]],["boolvector3d"]]],[11,"equal","","",7,[[["self"],["self"]],["boolvector3d"]]],[11,"not_equal","","",7,[[["self"],["self"]],["boolvector3d"]]],[6,"Transform2D","","The default 2d transform type with no units.",N,N],[6,"Transform3D","","The default 3d transform type with no units.",N,N],[6,"Point2D","","Default 2d point type with no unit.",N,N],[6,"Point3D","","Default 3d point type with no unit.",N,N],[6,"Vector2D","","Default 2d vector type with no unit.",N,N],[6,"Vector3D","","Default 3d vector type with no unit.",N,N],[6,"Rect","","The default rectangle type with no unit.",N,N],[6,"Rotation2D","","The default 2d rotation type with no units.",N,N],[6,"Rotation3D","","The default 3d rotation type with no units.",N,N],[6,"SideOffsets2D","","The default side offset type with no unit.",N,N],[6,"Size2D","","Default 2d size type with no unit.",N,N],[6,"Matrix2D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"TypedMatrix2D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"Matrix4D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"TypedMatrix4D","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[6,"ScaleFactor","","Temporary alias to facilitate the transition to the new naming scheme",N,N],[8,"Trig","","Trait for basic trigonometry functions, so they can be used on generic numeric types",N,N],[10,"sin","","",23,[[["self"]],["self"]]],[10,"cos","","",23,[[["self"]],["self"]]],[10,"tan","","",23,[[["self"]],["self"]]],[10,"fast_atan2","","",23,[[["self"],["self"]],["self"]]],[10,"degrees_to_radians","","",23,[[["self"]],["self"]]],[10,"radians_to_degrees","","",23,[[["self"]],["self"]]],[11,"clone","","",24,[[["self"]],["unknownunit"]]],[11,"zero","","",0,[[],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"zero","","",16,[[],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N]],"paths":[[3,"Length"],[3,"TypedScale"],[3,"TypedTransform2D"],[3,"TypedTransform3D"],[3,"TypedPoint2D"],[3,"TypedPoint3D"],[3,"TypedVector2D"],[3,"TypedVector3D"],[3,"BoolVector2D"],[3,"BoolVector3D"],[3,"HomogeneousVector"],[3,"TypedRect"],[3,"Angle"],[3,"TypedRotation2D"],[3,"TypedRotation3D"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[8,"ApproxEq"],[8,"Zero"],[8,"One"],[8,"Round"],[8,"Floor"],[8,"Ceil"],[8,"Trig"],[3,"UnknownUnit"]]};
searchIndex["eval"]={"doc":"Eval is a powerful expression evaluator.","items":[[4,"Value","eval","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[3,"ExecOptions","","Execute options",N,N],[3,"Function","","Custom function",N,N],[12,"max_args","","Maximum number of arguments.",1,N],[12,"min_args","","Minimum number of arguments.",1,N],[12,"compiled","","Accept values and return a result which contains a value.",1,N],[3,"Expr","","Expression builder",N,N],[4,"Error","","Expression parsing error",N,N],[13,"UnsupportedOperator","","Unsupported operator yet.",2,N],[13,"CanNotExec","","This operator does not support execution.",2,N],[13,"StartWithNonValueOperator","","Your expression may start with non-value operator like ( + * )",2,N],[13,"UnpairedBrackets","","Unpaired brackets, left brackets count does not equal right brackets count",2,N],[13,"DuplicateValueNode","","Duplicate values node, you may have (2 3) but there is no operators between them",2,N],[13,"DuplicateOperatorNode","","Duplicate operators node, you may have (+ +) but there is no values between them",2,N],[13,"CommaNotWithFunction","","You have a comma(,) , but there is no function in front of it.",2,N],[13,"BracketNotWithFunction","","You have empty brackets () , but there is no function in front of it.",2,N],[13,"FunctionNotExists","","Function not exists.",2,N],[13,"ExpectedBoolean","","Expected a boolean but the given value isn't.",2,N],[13,"ExpectedIdentifier","","Expected ident.",2,N],[13,"ExpectedArray","","Expected array.",2,N],[13,"ExpectedObject","","Expected object.",2,N],[13,"ExpectedNumber","","Expect number.",2,N],[13,"NoFinalNode","","Failed to parse, no final expression.",2,N],[13,"ArgumentsGreater","","The number of arguments is greater than the maximum limit.",2,N],[13,"ArgumentsLess","","The number of arguments is less than the minimum limit.",2,N],[13,"UnsupportedTypes","","This two value types are different or do not support mathematical calculations.",2,N],[13,"InvalidRange","","Invalid range expression like `1..2..3`",2,N],[13,"CanNotAddChild","","Can not add child node.",2,N],[13,"Custom","","Custom error.",2,N],[5,"to_value","","Convert variable to `serde_json::Value`",N,[[["s"]],["value"]]],[5,"eval","","Evaluates the value of an expression.",N,[[["str"]],["result",["value","error"]]]],[11,"new","","Create a function with a closure.",1,[[["f"]],["function"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["error"]],["bool"]]],[11,"ne","","",2,[[["self"],["error"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"new","","Create an expression.",3,[[["t"]],["expr"]]],[11,"function","","Set function.",3,[[["self"],["t"],["f"]],["expr"]]],[11,"value","","Set value.",3,[[["self"],["t"],["v"]],["expr"]]],[11,"compile","","Compile an expression. An expression can be compiled only once and then invoked multiple times with different context and function. You can also execute a expression without compile.",3,[[["self"]],["result",["expr","error"]]]],[11,"exec","","Execute the expression.",3,[[["self"]],["result",["value","error"]]]],[11,"clone","","Returns a copy of the value. Notice that functions can not be cloned. The cloned expr's functions will be empty.",3,[[["self"]],["expr"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["expr"]],["bool"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result",["expr"]]]],[11,"new","","Create an option.",4,[[["expr"]],["execoptions"]]],[11,"contexts","","Set contexts.",4,N],[11,"functions","","Set functions.",4,[[["self"],["functions"]],["execoptions"]]],[11,"exec","","Execute the compiled expression.",4,[[["self"]],["result",["value","error"]]]],[6,"Context","","Custom context.",N,N],[6,"Contexts","","Custom contexts. The value of the last context is searched first.",N,N],[6,"Functions","","Custom functions.",N,N],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["value"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["value"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["value"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["usize"]],["value"]]],[11,"from","","",0,[[["u16"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["value"]]],[11,"from","","",0,[[["u64"]],["value"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["value"]]],[11,"from","","",0,[[["isize"]],["value"]]],[11,"from","","",0,[[["i16"]],["value"]]],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"paths":[[4,"Value"],[3,"Function"],[4,"Error"],[3,"Expr"],[3,"ExecOptions"]]};
searchIndex["failure"]={"doc":"An experimental new error-handling library. Guide-style introduction is available here.","items":[[3,"Backtrace","failure","A `Backtrace`.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Context","","An error with context around it.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,[[],["backtrace"]]],[11,"default","","",0,[[],["backtrace"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["compat"]]],[11,"eq","","",1,[[["self"],["compat"]],["bool"]]],[11,"ne","","",1,[[["self"],["compat"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["compat"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Unwraps this into the inner error.",1,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",1,[[["self"]],["e"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"new","","Creates a new context without an underlying error message.",2,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",2,[[["self"]],["d"]]],[11,"cause","","",2,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["d"]],["context"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,[[["e"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["f"]],["error"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,[[["box",["stderror"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",4,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",4,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",4,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",4,[[["self"]],["causes"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",4,[[["self"]],["fail"]]],[6,"Fallible","","A common result with an `Error`.",N,N],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",5,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,[[["self"],["f"]],["result",["context"]]]],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",6,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,[[["self"]],["compat"]]],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",6,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",6,[[["self"]],["causes"]]],[11,"next","","",7,[[["self"]],["option",["fail"]]]],[14,"bail","","Exits a function early with an `Error`.",N,N],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"]={"doc":"","items":[[5,"Fail","failure_derive","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["inflector"]={"doc":"Adds String based inflections for Rust. Snake, kebab, train, camel, sentence, class, and title cases as well as ordinalize, deordinalize, demodulize, deconstantize, and foreign key are supported as both traits and pure functions acting on String types. `rust use inflector::Inflector; let camel_case_string: String = \"some_string\".to_camel_case(); let is_camel_cased: bool= camel_case_string.is_camel_case(); assert!(is_camel_cased == true);`","items":[[0,"cases","inflector","Provides case inflections - Camel case - Class case - Kebab case - Train case - Screaming snake case - Table case - Sentence case - Snake case - Pascal case",N,N],[0,"classcase","inflector::cases","Provides conversion to and detection of class case strings.",N,N],[5,"to_class_case","inflector::cases::classcase","Converts a `&str` to `ClassCase` `String`",N,[[["str"]],["string"]]],[5,"is_class_case","","Determines if a `&str` is `ClassCase` `bool`",N,[[["str"]],["bool"]]],[0,"camelcase","inflector::cases","Provides conversion to and detection of camel case strings.",N,N],[5,"to_camel_case","inflector::cases::camelcase","Converts a `&str` to camelCase `String`",N,[[["str"]],["string"]]],[5,"is_camel_case","","Determines if a `&str` is camelCase bool``",N,[[["str"]],["bool"]]],[0,"snakecase","inflector::cases","Provides conversion to and detection of snake case strings.",N,N],[5,"to_snake_case","inflector::cases::snakecase","Converts a `&str` to `snake_case` `String`",N,[[["str"]],["string"]]],[5,"is_snake_case","","Determines of a `&str` is `snake_case`",N,[[["str"]],["bool"]]],[0,"screamingsnakecase","inflector::cases","Provides conversion to and detection of screaming snake case strings.",N,N],[5,"to_screaming_snake_case","inflector::cases::screamingsnakecase","Converts a `&str` to `SCREAMING_SNAKE_CASE` `String`",N,[[["str"]],["string"]]],[5,"is_screaming_snake_case","","Determines of a `&str` is `SCREAMING_SNAKE_CASE`",N,[[["str"]],["bool"]]],[0,"kebabcase","inflector::cases","Provides conversion to and detection of kebab case strings.",N,N],[5,"is_kebab_case","inflector::cases::kebabcase","Determines if a `&str` is `kebab-case`",N,[[["str"]],["bool"]]],[5,"to_kebab_case","","Converts a `&str` to `kebab-case` `String`",N,[[["str"]],["string"]]],[0,"traincase","inflector::cases","Provides conversion to and detection of train case strings.",N,N],[5,"is_train_case","inflector::cases::traincase","Determines if a `&str` is `Train-Case`",N,[[["str"]],["bool"]]],[5,"to_train_case","","Converts a `&str` to `Train-Case` `String`",N,[[["str"]],["string"]]],[0,"sentencecase","inflector::cases","Provides conversion to and detection of sentence case strings.",N,N],[5,"to_sentence_case","inflector::cases::sentencecase","Converts a `&str` to `Sentence case` `String`",N,[[["str"]],["string"]]],[5,"is_sentence_case","","Determines of a `&str` is `Sentence case`",N,[[["str"]],["bool"]]],[0,"titlecase","inflector::cases","Provides conversion to and detection of title case strings.",N,N],[5,"to_title_case","inflector::cases::titlecase","Converts a `&str` to `Title Case` `String`",N,[[["str"]],["string"]]],[5,"is_title_case","","Determines if a `&str` is `Title Case`",N,[[["str"]],["bool"]]],[0,"tablecase","inflector::cases","Provides conversion to and detection of table case strings.",N,N],[5,"to_table_case","inflector::cases::tablecase","Converts a `&str` to `table-case` `String`",N,[[["str"]],["string"]]],[5,"is_table_case","","Determines if a `&str` is `table-case`",N,[[["str"]],["bool"]]],[0,"pascalcase","inflector::cases","Provides conversion to pascal case strings.",N,N],[5,"to_pascal_case","inflector::cases::pascalcase","Converts a `&str` to pascalCase `String`",N,[[["str"]],["string"]]],[5,"is_pascal_case","","Determines if a `&str` is pascalCase bool``",N,[[["str"]],["bool"]]],[0,"numbers","inflector","Provides number inflections - Ordinalize - Deordinalize",N,N],[0,"ordinalize","inflector::numbers","Provides ordinalization of a string.",N,N],[5,"ordinalize","inflector::numbers::ordinalize","Orginalizes a `&str`",N,[[["str"]],["string"]]],[0,"deordinalize","inflector::numbers","Provides deordinalization of a string.",N,N],[5,"deordinalize","inflector::numbers::deordinalize","Deorginalizes a `&str`",N,[[["str"]],["string"]]],[0,"suffix","inflector","Provides suffix inflections - Foreign key",N,N],[0,"foreignkey","inflector::suffix","Provides foreign key conversion for String.",N,N],[5,"to_foreign_key","inflector::suffix::foreignkey","Converts a `&str` to a `foreign_key`",N,[[["str"]],["string"]]],[5,"is_foreign_key","","Determines if a `&str` is a `foreign_key`",N,[[["str"]],["bool"]]],[0,"string","inflector","Provides string inflections - Deconstantize - Demodulize - Pluralize - Singularize",N,N],[0,"demodulize","inflector::string","Provides demodulize a string.",N,N],[5,"demodulize","inflector::string::demodulize","Demodulize a `&str`",N,[[["str"]],["string"]]],[0,"deconstantize","inflector::string","Provides deconstantizea string.",N,N],[5,"deconstantize","inflector::string::deconstantize","Deconstantizes a `&str`",N,[[["str"]],["string"]]],[0,"pluralize","inflector::string","Provides conversion to plural strings.",N,N],[5,"to_plural","inflector::string::pluralize","Converts a `&str` to pluralized `String`",N,[[["str"]],["string"]]],[0,"singularize","inflector::string","Provides conversion to singular strings.",N,N],[5,"to_singular","inflector::string::singularize","Converts a `&str` to singularized `String`",N,[[["str"]],["string"]]],[8,"Inflector","inflector","",N,N],[10,"to_camel_case","","",0,[[["self"]],["string"]]],[10,"is_camel_case","","",0,[[["self"]],["bool"]]],[10,"to_pascal_case","","",0,[[["self"]],["string"]]],[10,"is_pascal_case","","",0,[[["self"]],["bool"]]],[10,"to_snake_case","","",0,[[["self"]],["string"]]],[10,"is_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_screaming_snake_case","","",0,[[["self"]],["string"]]],[10,"is_screaming_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_kebab_case","","",0,[[["self"]],["string"]]],[10,"is_kebab_case","","",0,[[["self"]],["bool"]]],[10,"to_train_case","","",0,[[["self"]],["string"]]],[10,"is_train_case","","",0,[[["self"]],["bool"]]],[10,"to_sentence_case","","",0,[[["self"]],["string"]]],[10,"is_sentence_case","","",0,[[["self"]],["bool"]]],[10,"to_title_case","","",0,[[["self"]],["string"]]],[10,"is_title_case","","",0,[[["self"]],["bool"]]],[10,"ordinalize","","",0,[[["self"]],["string"]]],[10,"deordinalize","","",0,[[["self"]],["string"]]],[10,"to_foreign_key","","",0,[[["self"]],["string"]]],[10,"is_foreign_key","","",0,[[["self"]],["bool"]]],[10,"demodulize","","",0,[[["self"]],["string"]]],[10,"deconstantize","","",0,[[["self"]],["string"]]],[10,"to_class_case","","",0,[[["self"]],["string"]]],[10,"is_class_case","","",0,[[["self"]],["bool"]]],[10,"to_table_case","","",0,[[["self"]],["string"]]],[10,"is_table_case","","",0,[[["self"]],["bool"]]],[10,"to_plural","","",0,[[["self"]],["string"]]],[10,"to_singular","","",0,[[["self"]],["string"]]],[8,"InflectorNumbers","","",N,N],[10,"ordinalize","","",1,[[["self"]],["string"]]]],"paths":[[8,"Inflector"],[8,"InflectorNumbers"]]};
searchIndex["itoa"]={"doc":"","items":[[3,"Buffer","itoa","A safe API for formatting integers to text.",N,N],[5,"write","","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N],[11,"default","","",0,[[],["buffer"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["i"]],["str"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"Buffer"]]};
searchIndex["jss"]={"doc":"JSS Rust Implementation of JSS for Rust. Use css styles without css with identical properties. Part of Rise-UI project.","items":[[0,"convert","jss","",N,N],[0,"parser","","",N,N],[0,"properties","","",N,N],[3,"GradientStop","jss::properties","",N,N],[12,"offset","","",0,N],[12,"color","","",0,N],[3,"Gradient","","",N,N],[12,"stops","","",1,N],[12,"from","","",1,N],[12,"to","","",1,N],[3,"BoxShadow","","",N,N],[12,"color","","",2,N],[12,"horizontal","","",2,N],[12,"vertical","","",2,N],[12,"blur","","",2,N],[12,"spread","","",2,N],[12,"inset","","",2,N],[3,"BorderRadius","","",N,N],[12,"bottom_right","","",3,N],[12,"bottom_left","","",3,N],[12,"top_right","","",3,N],[12,"top_left","","",3,N],[3,"Border","","",N,N],[12,"style","","",4,N],[12,"color","","",4,N],[12,"width","","",4,N],[3,"BorderStyles","","",N,N],[12,"bottom","","",5,N],[12,"right","","",5,N],[12,"left","","",5,N],[12,"top","","",5,N],[3,"Color","","",N,N],[12,"red","","",6,N],[12,"green","","",6,N],[12,"blue","","",6,N],[12,"alpha","","",6,N],[4,"Background","","",N,N],[13,"Gradient","","",7,N],[13,"Color","","",7,N],[4,"Visibility","","",N,N],[13,"Hidden","","",8,N],[13,"Visible","","",8,N],[4,"Transform","","",N,N],[13,"Translate","","",9,N],[13,"Skew","","",9,N],[13,"Rotate","","",9,N],[13,"None","","",9,N],[4,"BorderStyle","","",N,N],[13,"None","","",10,N],[13,"Solid","","",10,N],[13,"Double","","",10,N],[13,"Dotted","","",10,N],[13,"Dashed","","",10,N],[13,"Hidden","","",10,N],[13,"Groove","","",10,N],[13,"Ridge","","",10,N],[13,"Inset","","",10,N],[13,"Outset","","",10,N],[4,"Cursor","","",N,N],[13,"Auto","","",11,N],[13,"None","","",11,N],[13,"Default","","",11,N],[13,"Pointer","","",11,N],[13,"ContextMenu","","",11,N],[13,"Help","","",11,N],[13,"Progress","","",11,N],[13,"Wait","","",11,N],[13,"Cell","","",11,N],[13,"Crosshair","","",11,N],[13,"Text","","",11,N],[13,"VerticalText","","",11,N],[13,"Alias","","",11,N],[13,"Copy","","",11,N],[13,"Move","","",11,N],[13,"NoDrop","","",11,N],[13,"NotAllowed","","",11,N],[13,"Grab","","",11,N],[13,"Grabbing","","",11,N],[13,"EResize","","",11,N],[13,"NResize","","",11,N],[13,"NeResize","","",11,N],[13,"NwResize","","",11,N],[13,"SResize","","",11,N],[13,"SeResize","","",11,N],[13,"SwResize","","",11,N],[13,"WResize","","",11,N],[13,"EwResize","","",11,N],[13,"NsResize","","",11,N],[13,"NeswResize","","",11,N],[13,"NwseResize","","",11,N],[13,"ColResize","","",11,N],[13,"RowResize","","",11,N],[13,"AllScroll","","",11,N],[13,"ZoomIn","","",11,N],[13,"ZoomOut","","",11,N],[4,"Filter","","",N,N],[13,"Brightness","","",12,N],[13,"Grayscale","","",12,N],[13,"HueRotate","","",12,N],[13,"Saturate","","",12,N],[13,"Contrast","","",12,N],[13,"Invert","","",12,N],[13,"Sepia","","",12,N],[13,"Blur","","",12,N],[13,"None","","",12,N],[4,"Angle","","",N,N],[13,"Degrees","","",13,N],[13,"Radians","","",13,N],[4,"Length","","",N,N],[13,"Percent","","",14,N],[13,"Point","","",14,N],[4,"SharedUnit","","",N,N],[13,"Length","","",15,N],[13,"Angle","","",15,N],[13,"None","","",15,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["background"]],["bool"]]],[11,"ne","","",7,[[["self"],["background"]],["bool"]]],[11,"clone","","",7,[[["self"]],["background"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["gradientstop"]],["bool"]]],[11,"ne","","",0,[[["self"],["gradientstop"]],["bool"]]],[11,"clone","","",0,[[["self"]],["gradientstop"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["gradient"]],["bool"]]],[11,"ne","","",1,[[["self"],["gradient"]],["bool"]]],[11,"clone","","",1,[[["self"]],["gradient"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["boxshadow"]],["bool"]]],[11,"ne","","",2,[[["self"],["boxshadow"]],["bool"]]],[11,"clone","","",2,[[["self"]],["boxshadow"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["visibility"]],["bool"]]],[11,"clone","","",8,[[["self"]],["visibility"]]],[11,"into","","",8,[[["self"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["borderradius"]]],[11,"eq","","",3,[[["self"],["borderradius"]],["bool"]]],[11,"ne","","",3,[[["self"],["borderradius"]],["bool"]]],[11,"clone","","",3,[[["self"]],["borderradius"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["border"]],["bool"]]],[11,"ne","","",4,[[["self"],["border"]],["bool"]]],[11,"clone","","",4,[[["self"]],["border"]]],[11,"default","","",4,[[],["border"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["borderstyles"]]],[11,"eq","","",5,[[["self"],["borderstyles"]],["bool"]]],[11,"ne","","",5,[[["self"],["borderstyles"]],["bool"]]],[11,"clone","","",5,[[["self"]],["borderstyles"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["borderstyle"]],["bool"]]],[11,"clone","","",10,[[["self"]],["borderstyle"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["color"]],["bool"]]],[11,"ne","","",6,[[["self"],["color"]],["bool"]]],[11,"clone","","",6,[[["self"]],["color"]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"deserialize","","",6,[[["d"]],["result",["color"]]]],[11,"new","","",6,N],[11,"transparent","","",6,[[],["color"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","","",6,[[["csscolor"]],["color"]]],[11,"from","","",6,[[["str"]],["color"]]],[11,"from","","",6,[[["string"]],["color"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["angle"]],["bool"]]],[11,"ne","","",13,[[["self"],["angle"]],["bool"]]],[11,"clone","","",13,[[["self"]],["angle"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["length"]],["bool"]]],[11,"ne","","",14,[[["self"],["length"]],["bool"]]],[11,"clone","","",14,[[["self"]],["length"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["sharedunit"]],["bool"]]],[11,"ne","","",15,[[["self"],["sharedunit"]],["bool"]]],[11,"clone","","",15,[[["self"]],["sharedunit"]]],[11,"from","","",15,[[["lengthrepr"]],["sharedunit"]]],[11,"from","","",15,[[["anglerepr"]],["sharedunit"]]],[11,"from","","",15,[[["unitrepr"]],["sharedunit"]]],[11,"from","","",15,[[["str"]],["sharedunit"]]],[11,"from","","",15,[[["string"]],["sharedunit"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["cursor"]],["bool"]]],[11,"clone","","",11,[[["self"]],["cursor"]]],[11,"default","","",11,[[],["self"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["filter"]],["bool"]]],[11,"ne","","",12,[[["self"],["filter"]],["bool"]]],[11,"clone","","",12,[[["self"]],["filter"]]],[11,"serialize","","",12,[[["self"],["s"]],["result"]]],[11,"deserialize","","",12,[[["d"]],["result",["filter"]]]],[11,"from","","",12,[[["string"]],["filter"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["transform"]],["bool"]]],[11,"ne","","",9,[[["self"],["transform"]],["bool"]]],[11,"clone","","",9,[[["self"]],["transform"]]],[11,"is_none","","",9,[[["self"]],["bool"]]],[11,"serialize","","",9,[[["self"],["s"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result",["transform"]]]],[11,"from","","",9,[[["string"]],["transform"]]],[0,"parse","","",N,N],[3,"TransformFunction","jss::properties::parse","",N,N],[12,"args","","",16,N],[12,"name","","",16,N],[3,"GradientFunction","","",N,N],[12,"stops","","",17,N],[12,"angle","","",17,N],[3,"LengthRepr","","",N,N],[12,"value","","",18,N],[12,"unit","","",18,N],[3,"AngleRepr","","",N,N],[12,"value","","",19,N],[12,"angle","","",19,N],[3,"GradientStopRepr","","",N,N],[12,"color","","",20,N],[12,"offset","","",20,N],[3,"FilterFunction","","",N,N],[12,"name","","",21,N],[12,"value","","",21,N],[4,"UnitRepr","","",N,N],[13,"Length","","",22,N],[13,"Angle","","",22,N],[5,"transform_parse","","",N,N],[5,"fn_name","","",N,N],[5,"unit","","",N,N],[5,"length","","",N,N],[5,"angle","","",N,N],[5,"gradient_stop","","",N,N],[5,"filter_parse","","",N,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["unitrepr"]]],[11,"eq","","",22,[[["self"],["unitrepr"]],["bool"]]],[11,"ne","","",22,[[["self"],["unitrepr"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["lengthrepr"]]],[11,"eq","","",18,[[["self"],["lengthrepr"]],["bool"]]],[11,"ne","","",18,[[["self"],["lengthrepr"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["anglerepr"]]],[11,"eq","","",19,[[["self"],["anglerepr"]],["bool"]]],[11,"ne","","",19,[[["self"],["anglerepr"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["gradientstoprepr"]]],[11,"eq","","",20,[[["self"],["gradientstoprepr"]],["bool"]]],[11,"ne","","",20,[[["self"],["gradientstoprepr"]],["bool"]]],[11,"from","jss::properties","",12,[[["filterfunction"]],["filter"]]],[11,"from","","",9,[[["transformfunction"]],["transform"]]],[11,"fmt","jss::properties::parse","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["filterfunction"]]],[11,"eq","","",21,[[["self"],["filterfunction"]],["bool"]]],[11,"ne","","",21,[[["self"],["filterfunction"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["gradientfunction"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["transformfunction"]]],[11,"eq","","",16,[[["self"],["transformfunction"]],["bool"]]],[11,"ne","","",16,[[["self"],["transformfunction"]],["bool"]]],[0,"unit","jss::properties","",N,N],[5,"serialize","jss::properties::unit","",N,[[["option"],["s"]],["result"]]],[5,"deserialize","","",N,[[["d"]],["result",["option"]]]],[5,"parse_length","","",N,[[["str"]],["styleunit"]]],[6,"Transforms","jss::properties","",N,N],[6,"Filters","","",N,N],[0,"traits","jss","",N,N],[8,"TStyle","jss::traits","Operation over component - set and remove style properties",N,N],[10,"set_apperance_style","","Set appearance styles such like `Background`, `BorderStyle` etc..",23,[[["self"],["str"],["t"]],["result",["propertyerror"]]]],[10,"set_layout_style","","Set layout styles such like Flex properties, `Margin`, `Padding` etc..",23,[[["self"],["str"],["t"]],["result",["propertyerror"]]]],[10,"set_style","","Unified setter for any property",23,[[["self"],["str"],["t"]],["result",["propertyerror"]]]],[10,"remove_style","","Remove property from style",23,[[["self"],["str"]]]],[8,"TStyleContext","","Manipulate runtime context of current style - work with active element dimensions, set variables for runtime calculation and other data needed in runtime",N,N],[10,"set_dimension","","Set dimensions with size and position node on layout",24,[[["self"],["dimensiontype"],["option",["dimensions"]]]]],[10,"set_variable","","Set variables for runtime calculator after apply you can use that var inside calc expression",24,[[["self"],["string"],["variable"]]]],[10,"set_variables","","The same thing as `set_variable` but for enumeration items",24,[[["self"],["t"]]]],[8,"TStyleCollect","","Collecting/Save/Get finalized properties after calculation runtime middlewares, expressions, custom functions and other things. That return processed properties and warning errors",N,N],[10,"collect_layout_style","","Collect finalize layout styles with calculate expressions",25,N],[8,"TStyleStates","","Enabled states of current style, for create valid style by enabled states Example: \"default\"+\"hover\", \"default\"+\"active\", \"default\"+\"focus\", etc.. states ordering by prority - each subsequent state overlaps the properties of the previous state by key/value properties",N,N],[10,"enable_states","","",26,[[["self"],["vec",["string"]]]]],[8,"TParseMiddleware","","Parsing middleware an style object",N,N],[10,"name","","",27,[[["self"]],["string"]]],[10,"process_value","","Target method for process style property field",27,[[["self"],["propertykeyinfo"],["box",["deserializer"]],["style"]],["result",["parseerror"]]]],[0,"types","jss","All common functional types",N,N],[3,"PropertyKeyInfo","jss::types","Expanded info about property key - needed middleware, case, etc..",N,N],[12,"key_type","","",28,N],[12,"source","","",28,N],[12,"name","","",28,N],[12,"case","","",28,N],[3,"DefaultParseMiddleware","","Default context representation for Parsing Trait Trait `TParseMiddleware` implemented in jss_derive as proc-macro",N,N],[3,"Stylesheet","","Collection of styles",N,N],[3,"StyleBuilder","","",N,N],[3,"ParseOptions","","Options for parse style from uniform functions",N,N],[12,"from","","",29,N],[12,"style","","",29,N],[3,"DimensionsContext","","Style dimensions context",N,N],[12,"current","","",30,N],[12,"parent","","",30,N],[3,"Context","","Context with other needed info - for parse and prepares, aka dimensions screen, element measures, variables, and other.",N,N],[12,"variables","","",31,N],[12,"dimensions","","",31,N],[3,"CollectedStyle","","",N,N],[3,"Style","","Style element, with all element status, and context`s, with implementations of traits for parse unions of one element",N,N],[12,"states","","",32,N],[12,"context","","",32,N],[12,"collected","","",32,N],[12,"enabled_states","","",32,N],[3,"PropertiesStore","","Properties storage generic type",N,N],[12,"0","","",33,N],[3,"Properties","","All properties of styles of different types.",N,N],[12,"expressions","","Runtime Layout Calc Expressions (returned value for StyleUnit)",34,N],[12,"appearance","","Appearance properties store",34,N],[12,"layout","","Layout properties store with yoga `FlexStyle`",34,N],[4,"PropertyParseType","","Middleware enum with property type of current style field",N,N],[13,"Expression","","Calculator expression parser. For properties that use calc in runtime. Key started from \"~\"",35,N],[13,"Default","","Default parser middleware. Key without prefix for standart properties",35,N],[13,"Custom","","Custom parser middleware. Key started from \"@\"",35,N],[4,"SharedUnit","","Basic SharedUnit for unit based fields contains variant for exact value or runtime expression",N,N],[13,"StyleUnit","","Default Yoga Unit",36,N],[13,"CalcExpr","","Calculator expression (for runtime value)",36,N],[4,"Variable","","The value of the variable for calculations in runtime",N,N],[13,"Map","","",37,N],[13,"Number","","",37,N],[4,"PropertyError","","Errors associated with the properties of style",N,N],[13,"InvalidType","","",38,N],[12,"property","jss::types::PropertyError","",38,N],[12,"expected","","",38,N],[13,"InvalidKey","jss::types","",38,N],[12,"key","jss::types::PropertyError","",38,N],[13,"InvalidKeyCase","jss::types","",38,N],[12,"case","jss::types::PropertyError","",38,N],[12,"key","","",38,N],[13,"InvalidExpression","jss::types","",38,N],[12,"error","jss::types::PropertyError","",38,N],[12,"key","","",38,N],[13,"SharedUnitConvert","jss::types","",38,N],[12,"key","jss::types::PropertyError","",38,N],[4,"ParseError","jss::types","Errors associated with style parsing",N,N],[13,"InvalidSource","","",39,N],[12,"source_type","jss::types::ParseError","",39,N],[12,"error","","",39,N],[13,"InvalidValue","jss::types","",39,N],[12,"source_type","jss::types::ParseError","",39,N],[12,"property","","",39,N],[12,"error","","",39,N],[13,"DeserializeError","jss::types","",39,N],[12,"target","jss::types::ParseError","",39,N],[12,"error","","",39,N],[12,"key","","",39,N],[13,"MissingMiddleware","jss::types","",39,N],[12,"name","jss::types::ParseError","",39,N],[13,"PropertyError","jss::types","",39,N],[12,"error","jss::types::ParseError","",39,N],[13,"CustomError","jss::types","",39,N],[12,"error","jss::types::ParseError","",39,N],[13,"StateMissing","jss::types","",39,N],[12,"name","jss::types::ParseError","",39,N],[4,"ProcessingError","jss::types","Errors associated with the finalized calculation of properties",N,N],[13,"ExecFailed","","",40,N],[12,"error","jss::types::ProcessingError","",40,N],[12,"property","","",40,N],[13,"InvalidType","jss::types","",40,N],[12,"property","jss::types::ProcessingError","",40,N],[12,"expected","","",40,N],[4,"Case","jss::types","What format of properties keys to use and check when parsing Current allowed: snake_case, camelCase, kebab-case or ignore case Default: camelCase",N,N],[13,"Ignore","","",41,N],[13,"Snake","","",41,N],[13,"Kebab","","",41,N],[13,"Camel","","",41,N],[4,"SourceFormat","","From what data format to parse, currently available: JSON, YAML Default: JSON",N,N],[13,"Json","","",42,N],[13,"Yaml","","",42,N],[4,"DimensionType","","",N,N],[13,"Current","","",43,N],[13,"Parent","","",43,N],[4,"PropertyValue","","Values for union of appearance and layout",N,N],[13,"Appearance","","",44,N],[13,"Layout","","",44,N],[4,"Appearance","","Values for appearance styles properties",N,N],[13,"Background","","",45,N],[13,"Transforms","","",45,N],[13,"Filters","","",45,N],[13,"BorderRadius","","",45,N],[13,"BorderColor","","",45,N],[13,"BorderStyle","","",45,N],[13,"Auto","","",45,N],[4,"Layout","","Values for layout styles properties",N,N],[13,"FlexDirection","","",46,N],[13,"PositionType","","",46,N],[13,"AspectRatio","","",46,N],[13,"BorderWidth","","",46,N],[13,"FlexShrink","","",46,N],[13,"FlexFactor","","",46,N],[13,"Overflow","","",46,N],[13,"FlexGrow","","",46,N],[13,"Display","","",46,N],[13,"Justify","","",46,N],[13,"Align","","",46,N],[13,"Wrap","","",46,N],[13,"SharedUnit","","",46,N],[5,"pair_to_flex","","Convertor: create FlexStyle by property key and unit value",N,[[["string"],["styleunit"]],["result",["flexstyle","propertyerror"]]]],[5,"get_reflect_property_type","","",N,[[["str"]],["str"]]],[11,"default","","",47,[[],["stylebuilder"]]],[11,"middleware","","",47,[[["self"],["box",["tparsemiddleware"]]],["self"]]],[11,"case","","",47,[[["self"],["case"]],["self"]]],[11,"source_type","","",47,[[["self"],["sourceformat"]],["self"]]],[11,"source","","",47,[[["self"],["str"]],["self"]]],[11,"parse","","",47,[[["self"]],["result",["style","parseerror"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["propertyerror"]],["bool"]]],[11,"ne","","",38,[[["self"],["propertyerror"]],["bool"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["propertyparsetype"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["propertyparsetype"]],["bool"]]],[11,"clone","","",28,[[["self"]],["propertykeyinfo"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["propertykeyinfo"]],["bool"]]],[11,"ne","","",28,[[["self"],["propertykeyinfo"]],["bool"]]],[11,"new","","Create a new info instanse, this method return error if key isnt valid",28,[[["str"]],["result",["propertykeyinfo","propertyerror"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["defaultparsemiddleware"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["case"]]],[11,"eq","","",41,[[["self"],["case"]],["bool"]]],[11,"default","","",41,[[],["self"]]],[11,"is_valid","","",41,[[["self"],["string"]],["bool"]]],[11,"new","","",41,[[["str"]],["case"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["sourceformat"]]],[11,"eq","","",42,[[["self"],["sourceformat"]],["bool"]]],[11,"default","","",42,[[],["self"]]],[11,"default","","",29,[[],["parseoptions"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["parseoptions"]]],[11,"eq","","",29,[[["self"],["parseoptions"]],["bool"]]],[11,"ne","","",29,[[["self"],["parseoptions"]],["bool"]]],[11,"from","","",46,[[["sharedunit"]],["layout"]]],[11,"from","","",44,[[["sharedunit"]],["propertyvalue"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["sharedunit"]]],[11,"eq","","",36,[[["self"],["sharedunit"]],["bool"]]],[11,"ne","","",36,[[["self"],["sharedunit"]],["bool"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["dimensionscontext"]]],[11,"default","","",30,[[],["dimensionscontext"]]],[11,"eq","","",30,[[["self"],["dimensionscontext"]],["bool"]]],[11,"ne","","",30,[[["self"],["dimensionscontext"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["dimensiontype"]]],[11,"eq","","",43,[[["self"],["dimensiontype"]],["bool"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["context"]]],[11,"default","","",31,[[],["context"]]],[11,"eq","","",31,[[["self"],["context"]],["bool"]]],[11,"ne","","",31,[[["self"],["context"]],["bool"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["collectedstyle"]]],[11,"default","","",49,[[],["collectedstyle"]]],[11,"eq","","",49,[[["self"],["collectedstyle"]],["bool"]]],[11,"ne","","",49,[[["self"],["collectedstyle"]],["bool"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["style"]]],[11,"default","","",32,[[],["style"]]],[11,"eq","","",32,[[["self"],["style"]],["bool"]]],[11,"ne","","",32,[[["self"],["style"]],["bool"]]],[11,"set_dimension","","",31,[[["self"],["dimensiontype"],["option",["dimension"]]]]],[11,"set_variable","","",31,[[["self"],["string"],["variable"]]]],[11,"set_variables","","",31,[[["self"],["t"]]]],[11,"enable_states","","",32,[[["self"],["vec",["string"]]]]],[11,"collect_layout_style","","",32,N],[11,"set_style","","",34,[[["self"],["str"],["t"]],["result",["propertyerror"]]]],[11,"set_apperance_style","","",34,[[["self"],["str"],["t"]],["result",["propertyerror"]]]],[11,"set_layout_style","","",34,[[["self"],["str"],["t"]],["result",["propertyerror"]]]],[11,"remove_style","","",34,[[["self"],["str"]]]],[11,"name","","",48,[[["self"]],["string"]]],[11,"process_value","","",48,[[["self"],["propertykeyinfo"],["box",["deserializer"]],["style"]],["result",["parseerror"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["appearance"]]],[11,"eq","","",45,[[["self"],["appearance"]],["bool"]]],[11,"ne","","",45,[[["self"],["appearance"]],["bool"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["layout"]]],[11,"eq","","",46,[[["self"],["layout"]],["bool"]]],[11,"ne","","",46,[[["self"],["layout"]],["bool"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["propertyvalue"]]],[11,"eq","","",44,[[["self"],["propertyvalue"]],["bool"]]],[11,"ne","","",44,[[["self"],["propertyvalue"]],["bool"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["propertiesstore"]]],[11,"eq","","",33,[[["self"],["propertiesstore"]],["bool"]]],[11,"ne","","",33,[[["self"],["propertiesstore"]],["bool"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"default","","",34,[[],["properties"]]],[11,"clone","","",34,[[["self"]],["properties"]]],[11,"eq","","",34,[[["self"],["properties"]],["bool"]]],[11,"ne","","",34,[[["self"],["properties"]],["bool"]]],[11,"from","","",44,[[["appearance"]],["propertyvalue"]]],[11,"from","","",44,[[["layout"]],["propertyvalue"]]],[11,"default","","",33,[[],["propertiesstore"]]],[11,"clone","","",50,[[["self"]],["stylesheet"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["variable"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["variable"]],["bool"]]],[11,"ne","","",37,[[["self"],["variable"]],["bool"]]],[0,"values","","Values that you can using in setters",N,N],[3,"Dimensions","jss::types::values","",N,N],[4,"FlexDirection","","",N,N],[13,"Column","","",51,N],[13,"ColumnReverse","","",51,N],[13,"Row","","",51,N],[13,"RowReverse","","",51,N],[4,"PositionType","","",N,N],[13,"Relative","","",52,N],[13,"Absolute","","",52,N],[4,"Overflow","","",N,N],[13,"Visible","","",53,N],[13,"Hidden","","",53,N],[13,"Scroll","","",53,N],[4,"Display","","",N,N],[13,"Flex","","",54,N],[13,"None","","",54,N],[4,"Justify","","",N,N],[13,"FlexStart","","",55,N],[13,"Center","","",55,N],[13,"FlexEnd","","",55,N],[13,"SpaceBetween","","",55,N],[13,"SpaceAround","","",55,N],[13,"SpaceEvenly","","",55,N],[4,"Align","","",N,N],[13,"Auto","","",56,N],[13,"FlexStart","","",56,N],[13,"Center","","",56,N],[13,"FlexEnd","","",56,N],[13,"Stretch","","",56,N],[13,"Baseline","","",56,N],[13,"SpaceBetween","","",56,N],[13,"SpaceAround","","",56,N],[4,"Wrap","","",N,N],[13,"NoWrap","","",57,N],[13,"Wrap","","",57,N],[13,"WrapReverse","","",57,N],[3,"BorderStyles","","",N,N],[12,"bottom","","",5,N],[12,"right","","",5,N],[12,"left","","",5,N],[12,"top","","",5,N],[3,"Color","","",N,N],[12,"red","","",6,N],[12,"green","","",6,N],[12,"blue","","",6,N],[12,"alpha","","",6,N],[4,"SharedUnit","","Basic SharedUnit for unit based fields contains variant for exact value or runtime expression",N,N],[13,"StyleUnit","","Default Yoga Unit",36,N],[13,"CalcExpr","","Calculator expression (for runtime value)",36,N],[4,"BorderStyle","","",N,N],[13,"None","","",10,N],[13,"Solid","","",10,N],[13,"Double","","",10,N],[13,"Dotted","","",10,N],[13,"Dashed","","",10,N],[13,"Hidden","","",10,N],[13,"Groove","","",10,N],[13,"Ridge","","",10,N],[13,"Inset","","",10,N],[13,"Outset","","",10,N],[4,"Background","","",N,N],[13,"Gradient","","",7,N],[13,"Color","","",7,N],[6,"BorderWidth","","",N,N],[6,"AspectRatio","","",N,N],[6,"FlexShrink","","",N,N],[6,"FlexFactor","","",N,N],[6,"FlexGrow","","",N,N],[6,"Transforms","","",N,N],[6,"Filters","","",N,N],[6,"PropertiesExpressions","jss::types","Link type for calc expressions `PropertiesStore`",N,N],[6,"PropertiesApperance","","Link type for appearance `PropertiesStore`",N,N],[6,"PropertiesLayout","","Link type for layout `PropertiesStore`",N,N],[0,"utils","jss","Various utils",N,N],[5,"is_valid_transform","jss::utils","",N,[[["str"],["vec"]],["bool"]]],[5,"valid_args_scheme","","",N,[[["vec",["str"]],["vec"]],["bool"]]],[5,"extract_args_by_type","","",N,[[["str"],["vec"]],["transform"]]],[5,"apperance_keys_contains","","checking for a property in a group \"appearance\"",N,[[["str"]],["bool"]]],[5,"layout_keys_contains","","checking for a property in a group \"layout\"",N,[[["str"]],["bool"]]],[5,"generic_erase","","Parser that return erased deserialize object, by different source type",N,[[["str"],["sourceformat"]],["result",["vec","parseerror"]]]],[0,"setter","","Property setters without runtime type-checking Warning: Be careful when using: functions allow you to change properties without checking - which can lead to untracked errors during execution.",N,N],[5,"set_appearance_without_check","jss::utils::setter","Set basic appearance property without check",N,[[["properties"],["string"],["appearance"]]]],[5,"set_layout_without_check","","Set basic layout property without check",N,[[["properties"],["string"],["flexstyle"]]]],[5,"set_layout_unit_without_check","","Set shared layout property without check (expression or exact unit)",N,[[["properties"],["string"],["sharedunit"]],["result",["propertyerror"]]]],[5,"expected_type_error","","Create expected type error by property key",N,[[["string"]],["propertyerror"]]],[11,"from","jss::types","",46,[[["flexdirection"]],["layout"]]],[11,"from","","",46,[[["positiontype"]],["layout"]]],[11,"from","","",46,[[["overflow"]],["layout"]]],[11,"from","","",46,[[["display"]],["layout"]]],[11,"from","","",46,[[["justify"]],["layout"]]],[11,"from","","",46,[[["align"]],["layout"]]],[11,"from","","",46,[[["wrap"]],["layout"]]],[11,"into","jss::properties","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"erased_serialize","","",0,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"erased_serialize","","",1,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"erased_serialize","","",2,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"erased_serialize","","",3,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"erased_serialize","","",4,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"erased_serialize","","",5,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"erased_serialize","","",6,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"erased_serialize","","",7,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"erased_serialize","","",8,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"erased_serialize","","",9,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"erased_serialize","","",10,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"erased_serialize","","",11,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"erased_serialize","","",12,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","jss::types","",45,[[["background"]],["appearance"]]],[11,"from","","",44,[[["background"]],["propertyvalue"]]],[11,"from","","",45,[[["borderstyle"]],["appearance"]]],[11,"from","","",44,[[["borderstyle"]],["propertyvalue"]]],[11,"from","","",45,[[["filters"]],["appearance"]]],[11,"from","","",44,[[["filters"]],["propertyvalue"]]],[11,"from","","",45,[[["transforms"]],["appearance"]]],[11,"from","","",44,[[["transforms"]],["propertyvalue"]]],[11,"into","jss::properties::parse","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","jss::types","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"erased_serialize","","",33,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"erased_serialize","","",34,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"erased_serialize","","",36,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"erased_serialize","","",44,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"erased_serialize","","",45,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"erased_serialize","","",46,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","jss::types::values","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"erased_serialize","","",52,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"eq","","",57,[[["self"],["wrap"]],["bool"]]],[11,"eq","","",54,[[["self"],["display"]],["bool"]]],[11,"eq","","",53,[[["self"],["overflow"]],["bool"]]],[11,"eq","","",55,[[["self"],["justify"]],["bool"]]],[11,"eq","","",58,[[["self"],["layout"]],["bool"]]],[11,"ne","","",58,[[["self"],["layout"]],["bool"]]],[11,"eq","","",52,[[["self"],["positiontype"]],["bool"]]],[11,"eq","","",56,[[["self"],["align"]],["bool"]]],[11,"eq","","",51,[[["self"],["flexdirection"]],["bool"]]],[11,"hash","","",54,N],[11,"hash","","",58,N],[11,"hash","","",57,N],[11,"hash","","",56,N],[11,"hash","","",52,N],[11,"hash","","",55,N],[11,"hash","","",51,N],[11,"hash","","",53,N],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",56,[[["ygalign"]],["align"]]],[11,"from","","",57,[[["ygwrap"]],["wrap"]]],[11,"from","","",51,[[["ygflexdirection"]],["flexdirection"]]],[11,"from","","",53,[[["ygoverflow"]],["overflow"]]],[11,"from","","",52,[[["ygpositiontype"]],["positiontype"]]],[11,"from","","",55,[[["ygjustify"]],["justify"]]],[11,"partial_cmp","","",57,[[["self"],["wrap"]],["option",["ordering"]]]],[11,"partial_cmp","","",53,[[["self"],["overflow"]],["option",["ordering"]]]],[11,"partial_cmp","","",56,[[["self"],["align"]],["option",["ordering"]]]],[11,"partial_cmp","","",55,[[["self"],["justify"]],["option",["ordering"]]]],[11,"partial_cmp","","",52,[[["self"],["positiontype"]],["option",["ordering"]]]],[11,"partial_cmp","","",54,[[["self"],["display"]],["option",["ordering"]]]],[11,"partial_cmp","","",58,[[["self"],["layout"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["layout"]],["bool"]]],[11,"le","","",58,[[["self"],["layout"]],["bool"]]],[11,"gt","","",58,[[["self"],["layout"]],["bool"]]],[11,"ge","","",58,[[["self"],["layout"]],["bool"]]],[11,"partial_cmp","","",51,[[["self"],["flexdirection"]],["option",["ordering"]]]],[11,"serialize","","",54,[[["self"],["__s"]],["result"]]],[11,"serialize","","",57,[[["self"],["__s"]],["result"]]],[11,"serialize","","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","","",55,[[["self"],["__s"]],["result"]]],[11,"serialize","","",58,[[["self"],["__s"]],["result"]]],[11,"serialize","","",52,[[["self"],["__s"]],["result"]]],[11,"serialize","","",53,[[["self"],["__s"]],["result"]]],[11,"clone","","",52,[[["self"]],["positiontype"]]],[11,"clone","","",57,[[["self"]],["wrap"]]],[11,"clone","","",53,[[["self"]],["overflow"]]],[11,"clone","","",58,[[["self"]],["layout"]]],[11,"clone","","",51,[[["self"]],["flexdirection"]]],[11,"clone","","",54,[[["self"]],["display"]]],[11,"clone","","",56,[[["self"]],["align"]]],[11,"clone","","",55,[[["self"]],["justify"]]],[11,"deserialize","","",58,[[["__d"]],["result",["layout"]]]],[11,"deserialize_in_place","","",58,[[["__d"],["layout"]],["result"]]],[11,"deserialize","","",54,[[["__d"]],["result",["display"]]]],[11,"deserialize","","",53,[[["__d"]],["result",["overflow"]]]],[11,"deserialize","","",52,[[["__d"]],["result",["positiontype"]]]],[11,"deserialize","","",51,[[["__d"]],["result",["flexdirection"]]]],[11,"deserialize","","",57,[[["__d"]],["result",["wrap"]]]],[11,"deserialize","","",56,[[["__d"]],["result",["align"]]]],[11,"deserialize","","",55,[[["__d"]],["result",["justify"]]]],[11,"cmp","","",57,[[["self"],["wrap"]],["ordering"]]],[11,"cmp","","",55,[[["self"],["justify"]],["ordering"]]],[11,"cmp","","",53,[[["self"],["overflow"]],["ordering"]]],[11,"cmp","","",51,[[["self"],["flexdirection"]],["ordering"]]],[11,"cmp","","",52,[[["self"],["positiontype"]],["ordering"]]],[11,"cmp","","",56,[[["self"],["align"]],["ordering"]]],[11,"cmp","","",54,[[["self"],["display"]],["ordering"]]],[11,"cmp","","",58,[[["self"],["layout"]],["ordering"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"erased_serialize","","",51,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"erased_serialize","","",53,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"erased_serialize","","",54,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"erased_serialize","","",55,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"erased_serialize","","",56,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"erased_serialize","","",57,[[["self"],["serializer"]],["result",["ok","error"]]]],[11,"new","","",58,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["layout"]]],[11,"left","","",58,[[["self"]],["f32"]]],[11,"right","","",58,[[["self"]],["f32"]]],[11,"top","","",58,[[["self"]],["f32"]]],[11,"bottom","","",58,[[["self"]],["f32"]]],[11,"width","","",58,[[["self"]],["f32"]]],[11,"height","","",58,[[["self"]],["f32"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"erased_serialize","","",58,[[["self"],["serializer"]],["result",["ok","error"]]]]],"paths":[[3,"GradientStop"],[3,"Gradient"],[3,"BoxShadow"],[3,"BorderRadius"],[3,"Border"],[3,"BorderStyles"],[3,"Color"],[4,"Background"],[4,"Visibility"],[4,"Transform"],[4,"BorderStyle"],[4,"Cursor"],[4,"Filter"],[4,"Angle"],[4,"Length"],[4,"SharedUnit"],[3,"TransformFunction"],[3,"GradientFunction"],[3,"LengthRepr"],[3,"AngleRepr"],[3,"GradientStopRepr"],[3,"FilterFunction"],[4,"UnitRepr"],[8,"TStyle"],[8,"TStyleContext"],[8,"TStyleCollect"],[8,"TStyleStates"],[8,"TParseMiddleware"],[3,"PropertyKeyInfo"],[3,"ParseOptions"],[3,"DimensionsContext"],[3,"Context"],[3,"Style"],[3,"PropertiesStore"],[3,"Properties"],[4,"PropertyParseType"],[4,"SharedUnit"],[4,"Variable"],[4,"PropertyError"],[4,"ParseError"],[4,"ProcessingError"],[4,"Case"],[4,"SourceFormat"],[4,"DimensionType"],[4,"PropertyValue"],[4,"Appearance"],[4,"Layout"],[3,"StyleBuilder"],[3,"DefaultParseMiddleware"],[3,"CollectedStyle"],[3,"Stylesheet"],[4,"FlexDirection"],[4,"PositionType"],[4,"Overflow"],[4,"Display"],[4,"Justify"],[4,"Align"],[4,"Wrap"],[3,"Dimensions"]]};
searchIndex["jss_derive"]={"doc":"","items":[[5,"setters_style","jss_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"parser_style","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"],[4,"c_void"],[4,"FILE"],[4,"fpos_t"],[4,"DIR"],[4,"locale_t"],[4,"timezone"],[4,"fpos64_t"]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",N,N],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",N,N],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",N,N],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",N,N],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",N,N],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",N,N],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",N,N],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied Entry.",0,N],[13,"Vacant","","A vacant Entry.",0,N],[11,"new","","Creates a linked hash map.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,[[["usize"],["s"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,[[["self"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["k"]],["entry"]]],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,[[["self"]],["entries"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,[[["self"],["k"],["v"]],["option"]]],[11,"contains_key","","Checks if the map contains the given key.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,[[["self"],["q"]],["option"]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,[[["self"],["q"]],["option"]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"pop_front","","Removes the first entry.",1,[[["self"]],["option"]]],[11,"front","","Gets the first entry.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last entry.",1,[[["self"]],["option"]]],[11,"back","","Gets the last entry.",1,[[["self"]],["option"]]],[11,"len","","Returns the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",1,[[["self"]],["bool"]]],[11,"hasher","","Returns a reference to the map's hasher.",1,[[["self"]],["s"]]],[11,"clear","","Clears the map of all key-value pairs.",1,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,[[["self"]],["itermut"]]],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,[[["self"]],["keys"]]],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,[[["self"]],["values"]]],[11,"index","","",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","",1,[[["self"],["q"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"drop","","",1,[[["self"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next","","",5,[[["self"]],["option",["occupiedentry"]]]],[11,"size_hint","","",5,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"drop","","",3,[[["self"]]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"key","","Returns the entry key",0,[[["self"]],["k"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"key","","Gets a reference to the entry key",8,[[["self"]],["k"]]],[11,"get","","Gets a reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it",8,[[["self"]],["v"]]],[11,"key","","Gets a reference to the entry key",9,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,[[["self"],["v"]],["v"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["maplit"]={"doc":"Macros for container literals with specific type.","items":[[14,"hashmap","maplit","Create a HashMap from a list of key-value pairs",N,N],[14,"hashset","","Create a HashSet from a list of elements.",N,N],[14,"btreemap","","Create a BTreeMap from a list of key-value pairs",N,N],[14,"btreeset","","Create a BTreeSet from a list of elements.",N,N],[14,"convert_args","","Macro that converts the keys or key-value pairs passed to another maplit macro. The default conversion is to use the [`Into`] trait, if no custom conversion is passed.",N,N]],"paths":[]};
searchIndex["memchr"]={"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",N,N],[3,"Memchr2","","An iterator for Memchr2",N,N],[3,"Memchr3","","An iterator for Memchr3",N,N],[5,"memchr","","A safe interface to `memchr`.",N,N],[5,"memrchr","","A safe interface to `memrchr`.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["nom"]={"doc":"nom, eating data byte by byte","items":[[4,"CompareResult","nom","indicates wether a comparison was successful, an error, or if more data was needed",N,N],[13,"Ok","","",0,N],[13,"Incomplete","","",0,N],[13,"Error","","",0,N],[4,"ErrorKind","","indicates which parser returned an error",N,N],[13,"Custom","","",1,N],[13,"Tag","","",1,N],[13,"MapRes","","",1,N],[13,"MapOpt","","",1,N],[13,"Alt","","",1,N],[13,"IsNot","","",1,N],[13,"IsA","","",1,N],[13,"SeparatedList","","",1,N],[13,"SeparatedNonEmptyList","","",1,N],[13,"Many0","","",1,N],[13,"Many1","","",1,N],[13,"ManyTill","","",1,N],[13,"Count","","",1,N],[13,"TakeUntilAndConsume","","",1,N],[13,"TakeUntil","","",1,N],[13,"TakeUntilEitherAndConsume","","",1,N],[13,"TakeUntilEither","","",1,N],[13,"LengthValue","","",1,N],[13,"TagClosure","","",1,N],[13,"Alpha","","",1,N],[13,"Digit","","",1,N],[13,"HexDigit","","",1,N],[13,"OctDigit","","",1,N],[13,"AlphaNumeric","","",1,N],[13,"Space","","",1,N],[13,"MultiSpace","","",1,N],[13,"LengthValueFn","","",1,N],[13,"Eof","","",1,N],[13,"ExprOpt","","",1,N],[13,"ExprRes","","",1,N],[13,"CondReduce","","",1,N],[13,"Switch","","",1,N],[13,"TagBits","","",1,N],[13,"OneOf","","",1,N],[13,"NoneOf","","",1,N],[13,"Char","","",1,N],[13,"CrLf","","",1,N],[13,"RegexpMatch","","",1,N],[13,"RegexpMatches","","",1,N],[13,"RegexpFind","","",1,N],[13,"RegexpCapture","","",1,N],[13,"RegexpCaptures","","",1,N],[13,"TakeWhile1","","",1,N],[13,"Complete","","",1,N],[13,"Fix","","",1,N],[13,"Escaped","","",1,N],[13,"EscapedTransform","","",1,N],[13,"TagStr","","",1,N],[13,"IsNotStr","","",1,N],[13,"IsAStr","","",1,N],[13,"TakeWhile1Str","","",1,N],[13,"NonEmpty","","",1,N],[13,"ManyMN","","",1,N],[13,"TakeUntilAndConsumeStr","","",1,N],[13,"TakeUntilStr","","",1,N],[13,"Not","","",1,N],[13,"Permutation","","",1,N],[13,"Verify","","",1,N],[13,"TakeTill1","","",1,N],[13,"TakeUntilAndConsume1","","",1,N],[13,"TakeWhileMN","","",1,N],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",N,N],[13,"Unknown","","needs more data, but we do not know how much",2,N],[13,"Size","","contains the required data size",2,N],[4,"Err","","The `Err` enum indicates the parser was not successful",N,N],[13,"Incomplete","","There was not enough data",3,N],[13,"Error","","The parser had an error (recoverable)",3,N],[13,"Failure","","The parser had an unrecoverable error: we got to the right branch and we know other branches won't work, so backtrack as fast as possible",3,N],[4,"Endianness","","Configurable endianness",N,N],[13,"Big","","",4,N],[13,"Little","","",4,N],[5,"need_more","","",N,[[["i"],["needed"]],["iresult"]]],[5,"need_more_err","","",N,[[["i"],["needed"],["errorkind"]],["iresult"]]],[5,"slice_to_offsets","","",N,N],[5,"code_from_offset","","",N,N],[5,"reset_color","","",N,[[["vec"]]]],[5,"write_color","","",N,[[["vec"],["u8"]]]],[5,"print_codes","","",N,[[["hashmap"],["hashmap"]],["string"]]],[5,"error_to_u32","","",N,[[["errorkind"]],["u32"]]],[5,"newline","","Matches a newline character '\\n'",N,N],[5,"tab","","Matches a tab character '\\t'",N,N],[5,"anychar","","matches one byte as a character. Note that the input type will accept a `str`, but not a `&[u8]`, unlike many other nom parsers.",N,[[["t"]],["iresult",["char"]]]],[5,"tag_cl","","",N,N],[5,"print","","",N,[[["t"]],["iresult"]]],[5,"begin","","",N,N],[5,"crlf","","",N,[[["t"]],["iresult"]]],[5,"not_line_ending","","",N,[[["t"]],["iresult"]]],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",N,[[["t"]],["iresult"]]],[5,"eol","","",N,[[["t"]],["iresult"]]],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",N,[[["u8"]],["bool"]]],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",N,[[["u8"]],["bool"]]],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",N,[[["u8"]],["bool"]]],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",N,[[["u8"]],["bool"]]],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",N,[[["u8"]],["bool"]]],[5,"is_space","","Tests if byte is ASCII space or tab",N,[[["u8"]],["bool"]]],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult",["u32"]]]],[5,"alpha0","","Recognizes zero or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult",["u32"]]]],[5,"alpha1","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",N,[[["t"]],["iresult",["u32"]]]],[5,"digit","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"digit0","","Recognizes zero or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"digit1","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"hex_digit0","","Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"hex_digit1","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"oct_digit0","","Recognizes zero or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"oct_digit1","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"alphanumeric0","","Recognizes zero or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"alphanumeric1","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",N,[[["t"]],["iresult"]]],[5,"space","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"space0","","Recognizes zero or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"space1","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"multispace0","","Recognizes zero or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"multispace1","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"sized_buffer","","",N,N],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",N,N],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",N,N],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",N,N],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",N,N],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",N,N],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",N,N],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",N,N],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",N,N],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",N,N],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",N,N],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",N,N],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",N,N],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",N,N],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",N,N],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",N,N],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",N,N],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",N,N],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",N,N],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",N,N],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",N,N],[5,"hex_u32","","Recognizes a hex-encoded integer",N,N],[5,"non_empty","","Recognizes non empty buffers",N,[[["t"]],["iresult"]]],[5,"rest","","Return the remaining input.",N,[[["t"]],["iresult"]]],[5,"rest_s","","Return the remaining input, for strings.",N,[[["str"]],["iresult",["str","str"]]]],[5,"recognize_float","","",N,[[["t"]],["iresult",["u32"]]]],[5,"float","","Recognizes floating point number in a byte string and returns a f32",N,N],[5,"float_s","","Recognizes floating point number in a string and returns a f32",N,[[["str"]],["iresult",["str","f32"]]]],[5,"double","","Recognizes floating point number in a byte string and returns a f64",N,N],[5,"double_s","","Recognizes floating point number in a string and returns a f64",N,[[["str"]],["iresult",["str","f64"]]]],[0,"lib","","Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does it, albeit there it is not public.",N,N],[0,"std","nom::lib","",N,N],[0,"boxed","nom::lib::std","A pointer type for heap allocation.",N,N],[3,"Box","nom::lib::std::boxed","A pointer type for heap allocation.",N,N],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",N,N],[16,"Output","","",5,N],[10,"call_box","","",5,N],[0,"cmp","nom::lib::std","Functionality for ordering and comparison.",N,N],[8,"PartialEq","nom::lib::std::cmp","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",6,[[["self"],["rhs"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",N,N],[13,"Less","","An ordering where a compared value is less [than another].",7,N],[13,"Equal","","An ordering where a compared value is equal [to another].",7,N],[13,"Greater","","An ordering where a compared value is greater [than another].",7,N],[3,"Reverse","","A helper struct for reverse ordering.",N,N],[12,"0","","",8,N],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,[[["self"],["rhs"]],["bool"]]],[5,"min","","Compares and returns the minimum of two values.",N,[[["t"],["t"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",N,[[["t"],["t"]],["t"]]],[0,"collections","nom::lib::std","Collection types.",N,N],[0,"hash_map","nom::lib::std::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",N,N],[3,"ValuesMut","nom::lib::std::collections::hash_map","A mutable iterator over the values of a `HashMap`.",N,N],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",N,N],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",N,N],[3,"Iter","","An iterator over the entries of a `HashMap`.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Occupied","","An occupied entry.",11,N],[13,"Vacant","","A vacant entry.",11,N],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",N,N],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",N,N],[3,"Values","","An iterator over the values of a `HashMap`.",N,N],[3,"Keys","","An iterator over the keys of a `HashMap`.",N,N],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",N,N],[3,"HashMap","","A hash map implemented with linear probing and Robin Hood bucket stealing.",N,N],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",N,N],[0,"hash_set","nom::lib::std::collections","A hash set implemented as a `HashMap` where the value is `()`.",N,N],[3,"Intersection","nom::lib::std::collections::hash_set","A lazy iterator producing elements in the intersection of `HashSet`s.",N,N],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",N,N],[3,"Iter","","An iterator over the items of a `HashSet`.",N,N],[3,"Drain","","A draining iterator over the items of a `HashSet`.",N,N],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",N,N],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",N,N],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",N,N],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",N,N],[3,"BTreeMap","nom::lib::std::collections","A map based on a B-Tree.",N,N],[0,"btree_set","","A set based on a B-Tree.",N,N],[3,"Iter","nom::lib::std::collections::btree_set","An iterator over the items of a `BTreeSet`.",N,N],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",N,N],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",N,N],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",N,N],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",N,N],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",N,N],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",N,N],[3,"BTreeSet","","A set based on a B-Tree.",N,N],[0,"binary_heap","nom::lib::std::collections","A priority queue implemented with a binary heap.",N,N],[3,"BinaryHeap","nom::lib::std::collections::binary_heap","A priority queue implemented with a binary heap.",N,N],[3,"PeekMut","","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",N,N],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",N,N],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",N,N],[0,"vec_deque","nom::lib::std::collections","A double-ended queue implemented with a growable ring buffer.",N,N],[3,"VecDeque","nom::lib::std::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",N,N],[3,"Iter","","An iterator over the elements of a `VecDeque`.",N,N],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",N,N],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",N,N],[4,"CollectionAllocErr","nom::lib::std::collections","Augments `AllocErr` with a CapacityOverflow variant.",N,N],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the collection's maximum (usually `isize::MAX` bytes).",12,N],[13,"AllocErr","","Error due to the allocator (see the `AllocErr` type's docs).",12,N],[0,"btree_map","","A map based on a B-Tree.",N,N],[3,"Iter","nom::lib::std::collections::btree_map","An iterator over the entries of a `BTreeMap`.",N,N],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",N,N],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant entry.",13,N],[13,"Occupied","","An occupied entry.",13,N],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",N,N],[3,"Values","","An iterator over the values of a `BTreeMap`.",N,N],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",N,N],[3,"LinkedList","nom::lib::std::collections","A doubly-linked list with owned nodes.",N,N],[0,"linked_list","","A doubly-linked list with owned nodes.",N,N],[3,"Iter","nom::lib::std::collections::linked_list","An iterator over the elements of a `LinkedList`.",N,N],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",N,N],[4,"Bound","nom::lib::std::collections","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",14,N],[13,"Excluded","","An exclusive bound.",14,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",14,N],[0,"convert","nom::lib::std","Traits for conversions between types.",N,N],[5,"identity","nom::lib::std::convert","An identity function.",N,[[["t"]],["t"]]],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",16,[[["self"]],["t"]]],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",18,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",N,N],[16,"Error","","The type returned in the event of a conversion error.",19,N],[10,"try_into","","Performs the conversion.",19,[[["self"]],["result"]]],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",N,N],[16,"Error","","The type returned in the event of a conversion error.",20,N],[10,"try_from","","Performs the conversion.",20,[[["t"]],["result"]]],[0,"fmt","nom::lib::std","Utilities for formatting and printing `String`s.",N,N],[5,"format","nom::lib::std::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",N,[[["arguments"]],["string"]]],[8,"Display","","Format trait for an empty format, `{}`.",N,N],[10,"fmt","","Formats the value using the given formatter.",21,[[["self"],["formatter"]],["result",["error"]]]],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"UpperHex","","`X` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",22,[[["self"],["formatter"]],["result",["error"]]]],[8,"Debug","","`?` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",23,[[["self"],["formatter"]],["result",["error"]]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",N,N],[13,"Left","","Indication that contents should be left-aligned.",24,N],[13,"Right","","Indication that contents should be right-aligned.",24,N],[13,"Center","","Indication that contents should be center-aligned.",24,N],[8,"LowerHex","","`x` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",25,[[["self"],["formatter"]],["result",["error"]]]],[8,"Write","","A collection of methods that are required to format a message into a stream.",N,N],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",26,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",26,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",26,[[["self"],["arguments"]],["result",["error"]]]],[8,"Pointer","","`p` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",27,[[["self"],["formatter"]],["result",["error"]]]],[3,"Error","","The error type which is returned from formatting a message into a stream.",N,N],[8,"Octal","","`o` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",28,[[["self"],["formatter"]],["result",["error"]]]],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",N,N],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",N,N],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",N,[[["write"],["arguments"]],["result",["error"]]]],[6,"Result","","The type returned by formatter methods.",N,N],[8,"UpperExp","","`E` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",29,[[["self"],["formatter"]],["result",["error"]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"LowerExp","","`e` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",30,[[["self"],["formatter"]],["result",["error"]]]],[8,"Binary","","`b` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",31,[[["self"],["formatter"]],["result",["error"]]]],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",N,N],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",N,N],[0,"hash","nom::lib::std","Generic hashing support.",N,N],[8,"Hash","nom::lib::std::hash","A hashable type.",N,N],[10,"hash","","Feeds this value into the given [`Hasher`].",32,N],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",32,N],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",N,N],[10,"finish","","Returns the hash value for the values written so far.",33,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",33,N],[11,"write_u8","","Writes a single `u8` into this hasher.",33,N],[11,"write_u16","","Writes a single `u16` into this hasher.",33,N],[11,"write_u32","","Writes a single `u32` into this hasher.",33,N],[11,"write_u64","","Writes a single `u64` into this hasher.",33,N],[11,"write_u128","","Writes a single `u128` into this hasher.",33,N],[11,"write_usize","","Writes a single `usize` into this hasher.",33,N],[11,"write_i8","","Writes a single `i8` into this hasher.",33,N],[11,"write_i16","","Writes a single `i16` into this hasher.",33,N],[11,"write_i32","","Writes a single `i32` into this hasher.",33,N],[11,"write_i64","","Writes a single `i64` into this hasher.",33,N],[11,"write_i128","","Writes a single `i128` into this hasher.",33,N],[11,"write_isize","","Writes a single `isize` into this hasher.",33,N],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",N,N],[16,"Hasher","","Type of the hasher that will be created.",34,N],[10,"build_hasher","","Creates a new hasher.",34,N],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[0,"iter","nom::lib::std","Composable external iteration.",N,N],[3,"Rev","nom::lib::std::iter","A double-ended iterator with the direction inverted.",N,N],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",N,N],[3,"Cycle","","An iterator that repeats endlessly.",N,N],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",N,N],[3,"Chain","","An iterator that strings two iterators together.",N,N],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",N,N],[3,"Map","","An iterator that maps the values of `iter` with `f`.",N,N],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",N,N],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",N,N],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",N,N],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",N,N],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",N,N],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",N,N],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",N,N],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",N,N],[3,"Scan","","An iterator to maintain state while iterating another iterator.",N,N],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",N,N],[3,"Flatten","","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.",N,N],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",N,N],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",N,N],[3,"Empty","","An iterator that yields nothing.",N,N],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",N,N],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",35,[[["i"]],["self"]]],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",N,N],[3,"Once","","An iterator that yields an element exactly once.",N,N],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",36,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",36,N],[10,"into_iter","","Creates an iterator from a value.",36,N],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",N,[[["t"]],["repeat"]]],[5,"once","","Creates an iterator that yields an element exactly once.",N,[[["t"]],["once"]]],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",37,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",37,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",37,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",37,[[["self"],["p"]],["option"]]],[5,"empty","","Creates an iterator that yields nothing.",N,[[],["empty"]]],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",38,N],[10,"next","","Advances the iterator and returns the next value.",38,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",38,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",38,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",38,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",38,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",38,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",38,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",38,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",38,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",38,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",38,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",38,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",38,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",38,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",38,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",38,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",38,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",38,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",38,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",38,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",38,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",38,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",38,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",38,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",38,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",38,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",38,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",38,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",38,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",38,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",38,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",38,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",38,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",38,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",38,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",38,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",38,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",38,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",38,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",38,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",38,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",38,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",38,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",38,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",38,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",38,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",38,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",38,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",38,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",38,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",38,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",38,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",38,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",38,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",38,[[["self"],["i"]],["bool"]]],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`.",N,N],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",N,N],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",39,[[["i"]],["self"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",40,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",40,[[["self"]],["bool"]]],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`.",N,[[["f"]],["repeatwith"]]],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",N,N],[8,"FromIterator","","Conversion from an `Iterator`.",N,N],[10,"from_iter","","Creates a value from an iterator.",41,[[["t"]],["self"]]],[8,"Step","","Objects that can be stepped over in both directions.",N,N],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",42,[[["self"],["self"]],["option",["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning itself",42,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning itself",42,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result",42,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result",42,[[["self"]],["self"]]],[10,"add_usize","","Add an usize, returning None on overflow",42,[[["self"],["usize"]],["option"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",43,N],[3,"Repeat","","An iterator that repeats an element endlessly.",N,N],[0,"mem","nom::lib::std","Basic functions for dealing with memory.",N,N],[5,"forget","nom::lib::std::mem","Takes ownership and \"forgets\" about the value without running its destructor.",N,N],[5,"size_of","","Returns the size of a type in bytes.",N,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",N,[[],["bool"]]],[5,"zeroed","","Creates a value whose bytes are all zero.",N,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",N,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",N,N],[5,"replace","","Moves `src` into the referenced `dest`, returning the previous `dest` value.",N,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",N,N],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",N,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",N,N],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",N,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",N,N],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[0,"ops","nom::lib::std","Overloadable operators.",N,N],[8,"FnOnce","nom::lib::std::ops","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",44,N],[10,"call_once","","Performs the call operation.",44,N],[8,"Rem","","The remainder operator `%`.",N,N],[16,"Output","","The resulting type after applying the `%` operator.",45,N],[10,"rem","","Performs the `%` operation.",45,N],[8,"Shr","","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `>>` operator.",46,N],[10,"shr","","Performs the `>>` operation.",46,N],[8,"SubAssign","","The subtraction assignment operator `-=`.",N,N],[10,"sub_assign","","Performs the `-=` operation.",47,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",14,N],[13,"Excluded","","An exclusive bound.",14,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",14,N],[4,"GeneratorState","","The result of a generator resumption.",N,N],[13,"Yielded","","The generator suspended with a value.",48,N],[13,"Complete","","The generator completed with a return value.",48,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",49,N],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",50,N],[10,"deref","","Dereferences the value.",50,N],[8,"Not","","The unary logical negation operator `!`.",N,N],[16,"Output","","The resulting type after applying the `!` operator.",51,N],[10,"not","","Performs the unary `!` operation.",51,N],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",N,N],[10,"bitor_assign","","Performs the `|=` operation.",52,N],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",N,N],[16,"Output","","The returned type after indexing.",53,N],[10,"index","","Performs the indexing (`container[index]`) operation.",53,N],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[10,"start_bound","","Start index bound.",54,[[["self"]],["bound"]]],[10,"end_bound","","End index bound.",54,[[["self"]],["bound"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",54,[[["self"],["u"]],["bool"]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",N,N],[10,"shr_assign","","Performs the `>>=` operation.",55,N],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",56,N],[8,"Generator","","The trait implemented by builtin generator types.",N,N],[16,"Yield","","The type of value this generator yields.",57,N],[16,"Return","","The type of value this generator returns.",57,N],[10,"resume","","Resumes the execution of this generator.",57,[[["self"]],["generatorstate"]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",N,N],[10,"bitxor_assign","","Performs the `^=` operation.",58,N],[8,"Add","","The addition operator `+`.",N,N],[16,"Output","","The resulting type after applying the `+` operator.",59,N],[10,"add","","Performs the `+` operation.",59,N],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",N,N],[12,"start","","The lower bound of the range (inclusive).",60,N],[8,"RemAssign","","The remainder assignment operator `%=`.",N,N],[10,"rem_assign","","Performs the `%=` operation.",61,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",N,N],[10,"deref_mut","","Mutably dereferences the value.",62,N],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",N,N],[12,"start","","The lower bound of the range (inclusive).",63,N],[12,"end","","The upper bound of the range (exclusive).",63,N],[8,"BitAnd","","The bitwise AND operator `&`.",N,N],[16,"Output","","The resulting type after applying the `&` operator.",64,N],[10,"bitand","","Performs the `&` operation.",64,N],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",65,N],[8,"BitXor","","The bitwise XOR operator `^`.",N,N],[16,"Output","","The resulting type after applying the `^` operator.",66,N],[10,"bitxor","","Performs the `^` operation.",66,N],[8,"Neg","","The unary negation operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",67,N],[10,"neg","","Performs the unary `-` operation.",67,N],[8,"BitOr","","The bitwise OR operator `|`.",N,N],[16,"Output","","The resulting type after applying the `|` operator.",68,N],[10,"bitor","","Performs the `|` operation.",68,N],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",N,N],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",69,N],[8,"Sub","","The subtraction operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",70,N],[10,"sub","","Performs the `-` operation.",70,N],[8,"ShlAssign","","The left shift assignment operator `<<=`.",N,N],[10,"shl_assign","","Performs the `<<=` operation.",71,N],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",N,N],[12,"end","","The upper bound of the range (exclusive).",72,N],[8,"MulAssign","","The multiplication assignment operator `*=`.",N,N],[10,"mul_assign","","Performs the `*=` operation.",73,N],[8,"Div","","The division operator `/`.",N,N],[16,"Output","","The resulting type after applying the `/` operator.",74,N],[10,"div","","Performs the `/` operation.",74,N],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",N,N],[10,"bitand_assign","","Performs the `&=` operation.",75,N],[8,"Try","","A trait for customizing the behavior of the `?` operator.",N,N],[16,"Ok","","The type of this value when viewed as successful.",76,N],[16,"Error","","The type of this value when viewed as failed.",76,N],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",76,[[["self"]],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",76,N],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",76,N],[3,"RangeFull","","An unbounded range (`..`).",N,N],[8,"Shl","","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `<<` operator.",77,N],[10,"shl","","Performs the `<<` operation.",77,N],[8,"Mul","","The multiplication operator `*`.",N,N],[16,"Output","","The resulting type after applying the `*` operator.",78,N],[10,"mul","","Performs the `*` operation.",78,N],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",N,N],[12,"end","","The upper bound of the range (inclusive)",79,N],[8,"DivAssign","","The division assignment operator `/=`.",N,N],[10,"div_assign","","Performs the `/=` operation.",80,N],[8,"AddAssign","","The addition assignment operator `+=`.",N,N],[10,"add_assign","","Performs the `+=` operation.",81,N],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",N,N],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",N,N],[0,"option","nom::lib::std","Optional values.",N,N],[4,"Option","nom::lib::std::option","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",82,N],[13,"Some","","Some value `T`",82,N],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",N,N],[0,"result","nom::lib::std","Error handling with the `Result` type.",N,N],[4,"Result","nom::lib::std::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",83,N],[13,"Err","","Contains the error value",83,N],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",N,N],[0,"slice","nom::lib::std","A dynamically-sized view into a contiguous sequence, `[T]`.",N,N],[8,"SliceConcatExt","nom::lib::std::slice","An extension trait for concatenating slices",N,N],[16,"Output","","The resulting type after concatenation",84,N],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",84,N],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",84,N],[10,"connect","","",84,N],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",N,N],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",N,N],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time).",N,N],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[5,"from_mut","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[3,"Windows","","An iterator over overlapping subslices of length `size`.",N,N],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`], except that a mutable slice is returned.",N,N],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[3,"Iter","","Immutable slice iterator",N,N],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",N,N],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",N,N],[8,"SliceIndex","","A helper trait used for indexing operations.",N,N],[16,"Output","","The output type returned by methods.",85,N],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",85,[[["self"],["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",85,[[["self"],["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",85,N],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",85,N],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",85,N],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",85,N],[3,"IterMut","","Mutable slice iterator.",N,N],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",N,N],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",N,N],[0,"str","nom::lib::std","Unicode string slices.",N,N],[5,"from_boxed_utf8_unchecked","nom::lib::std::str","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",N,[[["box"]],["box",["str"]]]],[5,"from_utf8","","Converts a slice of bytes to a string slice.",N,N],[3,"RSplit","","Created with the method [`rsplit`].",N,N],[3,"Matches","","Created with the method [`matches`].",N,N],[3,"Lines","","An iterator over the lines of a string, as string slices.",N,N],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",N,N],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",N,N],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",N,N],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",N,N],[3,"SplitTerminator","","Created with the method [`split_terminator`].",N,N],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",N,N],[3,"MatchIndices","","Created with the method [`match_indices`].",N,N],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",N,N],[16,"Err","","The associated error which can be returned from parsing.",86,N],[10,"from_str","","Parses a string `s` to return a value of this type.",86,[[["str"]],["result"]]],[0,"pattern","","The string Pattern API.",N,N],[8,"Pattern","nom::lib::std::str::pattern","A string pattern.",N,N],[16,"Searcher","","Associated searcher for this pattern",87,N],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",87,N],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",87,[[["self"],["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",87,[[["self"],["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",87,[[["self"],["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",N,N],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",88,N],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",88,N],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",88,N],[8,"Searcher","","A searcher for a string pattern.",N,N],[10,"haystack","","Getter for the underlying string to be searched in",89,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",89,[[["self"]],["searchstep"]]],[11,"next_match","","Find the next `Match` result. See `next()`",89,[[["self"]],["option"]]],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",89,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",N,N],[10,"next_back","","Performs the next search step starting from the back.",90,[[["self"]],["searchstep"]]],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",90,[[["self"]],["option"]]],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",90,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",N,N],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",N,N],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",N,N],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",N,N],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",N,N],[3,"RMatches","nom::lib::std::str","Created with the method [`rmatches`].",N,N],[3,"LinesAny","","Created with the method [`lines_any`].",N,N],[3,"RSplitN","","Created with the method [`rsplitn`].",N,N],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",N,N],[3,"Bytes","","An iterator over the bytes of a string slice.",N,N],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",N,N],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",N,N],[3,"SplitN","","Created with the method [`splitn`].",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[3,"Split","","Created with the method [`split`].",N,N],[3,"Chars","","An iterator over the [`char`]s of a string slice.",N,N],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",N,N],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.",N,N],[0,"string","nom::lib::std","A UTF-8 encoded, growable string.",N,N],[3,"String","nom::lib::std::string","A UTF-8 encoded, growable string.",N,N],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",N,N],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",N,N],[4,"ParseError","","An error when parsing a `String`.",N,N],[8,"ToString","","A trait for converting a value to a `String`.",N,N],[10,"to_string","","Converts the given value to a `String`.",91,[[["self"]],["string"]]],[3,"Drain","","A draining iterator for `String`.",N,N],[0,"vec","nom::lib::std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",N,N],[3,"Vec","nom::lib::std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[3,"IntoIter","","An iterator that moves out of a vector.",N,N],[3,"Drain","","A draining iterator for `Vec<T>`.",N,N],[3,"Splice","","A splicing iterator for `Vec`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",N,N],[14,"vec","nom::lib::std","Creates a [`Vec`] containing the arguments.",N,N],[0,"prelude","","",N,N],[0,"v1","nom::lib::std::prelude","The Rust Prelude.",N,N],[0,"v1","nom::lib::std::prelude::v1","The first version of the prelude of The Rust Standard Library.",N,N],[8,"AsRef","nom::lib::std::prelude::v1::v1","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",36,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",36,N],[10,"into_iter","","Creates an iterator from a value.",36,N],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",N,N],[10,"clone","","Returns a copy of the value.",92,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",92,N],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",N,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",49,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",43,N],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[8,"SliceConcatExt","","An extension trait for concatenating slices",N,N],[16,"Output","","The resulting type after concatenation",84,N],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",84,N],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",84,N],[10,"connect","","",84,N],[4,"Option","","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",82,N],[13,"Some","","Some value `T`",82,N],[5,"drop","","Disposes of a value.",N,N],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",38,N],[10,"next","","Advances the iterator and returns the next value.",38,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",38,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",38,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",38,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",38,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",38,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",38,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",38,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",38,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",38,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",38,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",38,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",38,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",38,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",38,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",38,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",38,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",38,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",38,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",38,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",38,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",38,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",38,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",38,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",38,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",38,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",38,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",38,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",38,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",38,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",38,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",38,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",38,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",38,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",38,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",38,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",38,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",38,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",38,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",38,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",38,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",38,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",38,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",38,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",38,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",38,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",38,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",38,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",38,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",38,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",38,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",38,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",38,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",38,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",38,[[["self"],["i"]],["bool"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",40,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",40,[[["self"]],["bool"]]],[8,"Sync","","Types for which it is safe to share references between threads.",N,N],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",83,N],[13,"Err","","Contains the error value",83,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",44,N],[10,"call_once","","Performs the call operation.",44,N],[8,"Default","","A trait for giving a type a useful default value.",N,N],[10,"default","","Returns the \"default value\" for a type.",93,[[],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,[[["self"],["rhs"]],["bool"]]],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",16,[[["self"]],["t"]]],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[8,"Sized","","Types with a constant size known at compile time.",N,N],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",37,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",37,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",37,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",37,[[["self"],["p"]],["option"]]],[8,"ToString","","A trait for converting a value to a `String`.",N,N],[10,"to_string","","Converts the given value to a `String`.",91,[[["self"]],["string"]]],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",N,N],[16,"Owned","","",94,N],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",94,N],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",94,N],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",56,N],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",6,[[["self"],["rhs"]],["bool"]]],[8,"Send","","Types that can be transferred across thread boundaries.",N,N],[3,"String","","A UTF-8 encoded, growable string.",N,N],[3,"Box","","A pointer type for heap allocation.",N,N],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",65,N],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",18,[[["t"]],["self"]]],[11,"fmt","nom","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"into_error_kind","","Convert Err into an ErrorKind.",1,[[["self"]],["errorkind"]]],[11,"convert","","",1,[[["errorkind"]],["self"]]],[0,"simple_errors","","Error management",N,N],[4,"Context","nom::simple_errors","",N,N],[13,"Code","","",95,N],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["context"]]],[11,"eq","","",95,[[["self"],["context"]],["bool"]]],[11,"ne","","",95,[[["self"],["context"]],["bool"]]],[11,"convert","","",95,[[["context"]],["self"]]],[11,"into_error_kind","","Convert Err into ErrorKind.",95,[[["self"]],["errorkind"]]],[11,"fmt","nom","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["needed"]],["bool"]]],[11,"ne","","",2,[[["self"],["needed"]],["bool"]]],[11,"clone","","",2,[[["self"]],["needed"]]],[11,"is_known","","",2,[[["self"]],["bool"]]],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,[[["self"],["f"]],["needed"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["err"]]],[11,"eq","","",3,[[["self"],["err"]],["bool"]]],[11,"ne","","",3,[[["self"],["err"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"convert","","",3,[[["err"]],["self"]]],[11,"into_error_kind","","",3,[[["self"]],["errorkind"]]],[11,"is_incomplete","","",3,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["compareresult"]],["bool"]]],[0,"methods","","Method macro combinators",N,N],[0,"bits","","Bit level parsers and combinators",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["endianness"]],["bool"]]],[11,"clone","","",4,[[["self"]],["endianness"]]],[0,"whitespace","","Support for whitespace delimited formats",N,N],[5,"sp","nom::whitespace","",N,[[["t"]],["iresult"]]],[0,"types","nom","Custom input types",N,N],[3,"CompleteStr","nom::types","Holds a complete String, for which the `at_eof` method always returns true",N,N],[12,"0","","",96,N],[3,"CompleteByteSlice","","Holds a complete byte array, for which the `at_eof` method always returns true",N,N],[12,"0","","",97,N],[3,"Input","","",N,N],[12,"inner","","",98,N],[12,"at_eof","","",98,N],[11,"clone","","",96,[[["self"]],["completestr"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["completestr"]],["bool"]]],[11,"ne","","",96,[[["self"],["completestr"]],["bool"]]],[11,"hash","","",96,N],[11,"from","","",96,[[["str"]],["self"]]],[11,"from","","",96,[[["str"]],["self"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",96,[[["self"]],["str"]]],[11,"deref","","",96,N],[11,"at_eof","","",96,[[["self"]],["bool"]]],[11,"slice","","",96,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",96,N],[11,"iter_elements","","",96,N],[11,"position","","",96,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",96,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",96,[[["self"],["usize"]],["self"]]],[11,"take_split","","",96,N],[11,"input_len","","",96,[[["self"]],["usize"]]],[11,"compare","","",96,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",96,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",96,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",96,[[["self"],["char"]],["bool"]]],[11,"find_token","","",96,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",96,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",96,[[["self"]],["option"]]],[11,"offset","","",96,[[["self"],["completestr"]],["usize"]]],[11,"as_bytes","","",96,N],[11,"new_builder","","",96,[[["self"]],["string"]]],[11,"extend_into","","",96,[[["self"],["string"]]]],[11,"clone","","",97,[[["self"]],["completebyteslice"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["completebyteslice"]],["bool"]]],[11,"ne","","",97,[[["self"],["completebyteslice"]],["bool"]]],[11,"hash","","",97,N],[11,"from","","",97,N],[11,"from","","",97,N],[11,"deref","","",97,N],[11,"at_eof","","",97,[[["self"]],["bool"]]],[11,"slice","","",97,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",97,N],[11,"iter_elements","","",97,N],[11,"position","","",97,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",97,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",97,[[["self"],["usize"]],["self"]]],[11,"take_split","","",97,N],[11,"input_len","","",97,[[["self"]],["usize"]]],[11,"compare","","",97,N],[11,"compare_no_case","","",97,N],[11,"compare","","",97,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",97,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",97,N],[11,"find_substring","","",97,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",97,[[["self"],["char"]],["bool"]]],[11,"find_token","","",97,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",97,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",97,[[["self"]],["option"]]],[11,"offset","","",97,[[["self"],["completebyteslice"]],["usize"]]],[11,"as_bytes","","",97,N],[11,"to_hex","","",97,[[["self"],["usize"]],["string"]]],[11,"to_hex_from","","",97,[[["self"],["usize"],["usize"]],["string"]]],[11,"clone","","",98,[[["self"]],["input"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["input"]],["bool"]]],[11,"ne","","",98,[[["self"],["input"]],["bool"]]],[11,"hash","","",98,N],[11,"at_eof","","",98,[[["self"]],["bool"]]],[11,"slice","","",98,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",98,N],[11,"iter_elements","","",98,N],[11,"position","","",98,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",98,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",98,[[["self"],["usize"]],["self"]]],[11,"take_split","","",98,N],[11,"input_len","","",98,[[["self"]],["usize"]]],[11,"compare","","",98,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",98,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",98,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",98,[[["self"],["char"]],["bool"]]],[11,"find_token","","",98,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",98,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",98,[[["self"]],["option"]]],[11,"offset","","",98,[[["self"],["input"]],["usize"]]],[11,"as_bytes","","",98,N],[6,"IResult","nom","Holds the result of parsing functions",N,N],[8,"InputLength","","abstract method to calculate the input length",N,N],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",99,[[["self"]],["usize"]]],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",N,N],[10,"offset","","offset between the first byte of self and the first byte of the argument",100,[[["self"],["self"]],["usize"]]],[8,"AsBytes","","casts the input type to a byte slice",N,N],[10,"as_bytes","","",101,N],[8,"AsChar","","transforms common types to a char for basic token parsing",N,N],[10,"as_char","","makes a char from self",102,[[["self"]],["char"]]],[10,"is_alpha","","tests that self is an alphabetic character",102,[[["self"]],["bool"]]],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",102,[[["self"]],["bool"]]],[10,"is_dec_digit","","tests that self is a decimal digit",102,[[["self"]],["bool"]]],[10,"is_hex_digit","","tests that self is an hex digit",102,[[["self"]],["bool"]]],[10,"is_oct_digit","","tests that self is an octal digit",102,[[["self"]],["bool"]]],[10,"len","","gets the len in bytes for self",102,[[["self"]],["usize"]]],[8,"InputIter","","abstracts common iteration operations on the input type",N,N],[16,"Item","","",103,N],[16,"RawItem","","",103,N],[16,"Iter","","",103,N],[16,"IterElem","","",103,N],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",103,N],[10,"iter_elements","","returns an iterator over the elements",103,N],[10,"position","","finds the byte position of the element",103,[[["self"],["p"]],["option",["usize"]]]],[10,"slice_index","","get the byte offset from the element's position in the stream",103,[[["self"],["usize"]],["option",["usize"]]]],[8,"InputTake","","abstracts slicing operations",N,N],[10,"take","","returns a slice of `count` bytes. panics if count > length",104,[[["self"],["usize"]],["self"]]],[10,"take_split","","split the stream at the `count` byte offset. panics if count > length",104,N],[8,"UnspecializedInput","","Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).",N,N],[8,"InputTakeAtPosition","","methods to take as much input as possible until the provided function returns true for the current element",N,N],[16,"Item","","",105,N],[10,"split_at_position","","",105,[[["self"],["p"]],["iresult",["u32"]]]],[10,"split_at_position1","","",105,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[8,"Compare","","abstracts comparison operations",N,N],[10,"compare","","compares self to another value for equality",106,[[["self"],["t"]],["compareresult"]]],[10,"compare_no_case","","compares self to another value for equality independently of the case.",106,[[["self"],["t"]],["compareresult"]]],[8,"FindToken","","look for self in the given input stream",N,N],[10,"find_token","","",107,[[["self"],["t"]],["bool"]]],[8,"FindSubstring","","look for a substring in self",N,N],[10,"find_substring","","",108,[[["self"],["t"]],["option",["usize"]]]],[8,"ParseTo","","used to integrate str's parse() method",N,N],[10,"parse_to","","",109,[[["self"]],["option"]]],[8,"Slice","","slicing operations using ranges",N,N],[10,"slice","","",110,[[["self"],["r"]],["self"]]],[8,"AtEof","","indicates whether more data can come later in input",N,N],[10,"at_eof","","",111,[[["self"]],["bool"]]],[8,"ExtendInto","","abtracts something which can extend an `Extend`",N,N],[16,"Item","","",112,N],[16,"Extender","","",112,N],[10,"new_builder","","create a new `Extend` of the correct type",112,N],[10,"extend_into","","accumulate the input into an accumulator",112,N],[8,"HexDisplay","","",N,N],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",113,[[["self"],["usize"]],["string"]]],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",113,[[["self"],["usize"],["usize"]],["string"]]],[8,"Convert","","",N,N],[10,"convert","","",114,[[["t"]],["self"]]],[14,"dbg","","Prints a message if the parser fails",N,N],[14,"dbg_dmp","","Prints a message and the input if the parser fails",N,N],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",N,N],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",N,N],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"closure","","Wraps a parser in a closure",N,N],[14,"named","","Makes a function from a parser combination",N,N],[14,"named_args","","Makes a function from a parser combination with arguments.",N,N],[14,"named_attr","","Makes a function from a parser combination, with attributes",N,N],[14,"call","","Used to wrap common expressions and function as macros",N,N],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",N,N],[14,"return_error","","Prevents backtracking if the child parser fails",N,N],[14,"add_return_error","","Add an error if the child parser fails",N,N],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",N,N],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Ok`, and will do an early return for the `Err` side.",N,N],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",N,N],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",N,N],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",N,N],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",N,N],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",N,N],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",N,N],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a Ok((I,T)) if Ok",N,N],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a Ok((I,T)) if Some",N,N],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",N,N],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",N,N],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",N,N],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",N,N],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Err(Err::Incomplete) does not consume the input",N,N],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",N,N],[14,"eof","","`eof!()` returns its input if it is at the end of input data",N,N],[14,"exact","","`exact!()` will fail if the child parser does not consume the whole data",N,N],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",N,N],[14,"alt","","Try a list of parsers and return the result of the first successful one",N,N],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",N,N],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",N,N],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",N,N],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",N,N],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",N,N],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",N,N],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",N,N],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",N,N],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",N,N],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",N,N],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec.",N,N],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",N,N],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",N,N],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",N,N],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",N,N],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",N,N],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",N,N],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",N,N],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",N,N],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",N,N],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",N,N],[14,"method","","Makes a method from a parser combination",N,N],[14,"call_m","","Used to called methods then move self back into self",N,N],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",N,N],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",N,N],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",N,N],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",N,N],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",N,N],[14,"escaped","","`escaped!(T -> IResult<T, T>, U, T -> IResult<T, T>) => T -> IResult<T, T> where T: InputIter, U: AsChar` matches a byte string with escaped characters.",N,N],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",N,N],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",N,N],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",N,N],[14,"take_while_m_n","","`take_while_m_n!(m: usize, n: usize, T -> bool) => &[T] -> IResult<&[T], &[T]>` returns a list of bytes or characters for which the provided function returns true. the returned list's size will be at least m, and at most n",N,N],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",N,N],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",N,N],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",N,N],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",N,N],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",N,N],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",N,N],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag.",N,N],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds the specified tag",N,N],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either_and_consume1","","`take_until_either_and_consume1!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters",N,N],[14,"take_until_either1","","`take_until_either1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters",N,N],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",N,N],[14,"bits","","Transforms its byte slice input into a bit stream for the underlying parser. This allows the given bit stream parser to work on a byte slice input.",N,N],[14,"bytes","","Counterpart to bits, bytes! transforms its bit stream input into a byte slice for the underlying parser, allowing byte-slice parsers to work on bit streams.",N,N],[14,"take_bits","","Consumes the specified number of bits and returns them as the specified type.",N,N],[14,"tag_bits","","Matches the given bit pattern.",N,N],[14,"one_of","","matches one of the provided characters",N,N],[14,"none_of","","matches anything but the provided characters",N,N],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",N,N],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",N,N],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",N,N],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",N,N],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",N,N],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",N,N],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",N,N],[14,"wrap_sep","","",N,N],[14,"eat_separator","","helper macros to build a separator parser",N,N],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",N,N],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",N,N],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",N,N],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",N,N],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",N,N],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",N,N],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",N,N],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",N,N],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",N,N],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",N,N],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",N,N],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"new","nom::lib::std::prelude::v1::v1","Allocates memory on the heap and then places `x` into it.",115,[[["t"]],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",115,N],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",115,N],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",115,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Note that the type `T` must outlive the chosen lifetime `'a`. If the type has only static references, or none at all, then this may be chosen to be `'static`.",115,[[["box"]],["t"]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,[[["self"]],["result",["box","box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,[[["self"]],["result",["box","box"]]]],[11,"into_iter","","",115,[[["self"]],["i"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_string","","",115,[[["self"]],["string"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"call_box","","",115,N],[11,"as_ref","","",116,[[["self"]],["path"]]],[11,"as_ref","","",116,[[["self"]],["osstr"]]],[11,"to_socket_addrs","","",116,[[["self"]],["result",["intoiter","error"]]]],[11,"into_iter","nom::lib::std::collections::hash_set","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",117,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::hash_map","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",118,[[["self"]],["intoiter"]]],[11,"len","","",119,[[["self"]],["usize"]]],[11,"len","","",120,[[["self"]],["usize"]]],[11,"len","","",121,[[["self"]],["usize"]]],[11,"len","","",122,[[["self"]],["usize"]]],[11,"len","","",123,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_set","",124,[[["self"]],["usize"]]],[11,"len","","",125,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_map","",126,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_set","",127,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_map","",128,[[["self"]],["usize"]]],[11,"build_hasher","","",129,[[["self"]],["defaulthasher"]]],[11,"next","","",128,[[["self"]],["option"]]],[11,"size_hint","","",128,N],[11,"next","","",126,[[["self"]],["option"]]],[11,"size_hint","","",126,N],[11,"next","nom::lib::std::collections::hash_set","",124,[[["self"]],["option"]]],[11,"size_hint","","",124,N],[11,"next","nom::lib::std::collections::hash_map","",122,[[["self"]],["option"]]],[11,"size_hint","","",122,N],[11,"next","","",123,[[["self"]],["option"]]],[11,"size_hint","","",123,N],[11,"next","nom::lib::std::collections::hash_set","",130,[[["self"]],["option"]]],[11,"size_hint","","",130,N],[11,"next","nom::lib::std::collections::hash_map","",120,[[["self"]],["option"]]],[11,"size_hint","","",120,N],[11,"next","","",121,[[["self"]],["option"]]],[11,"size_hint","","",121,N],[11,"next","nom::lib::std::collections::hash_set","",125,[[["self"]],["option"]]],[11,"size_hint","","",125,N],[11,"next","","",127,[[["self"]],["option"]]],[11,"size_hint","","",127,N],[11,"next","nom::lib::std::collections::hash_map","",119,[[["self"]],["option"]]],[11,"size_hint","","",119,N],[11,"next","nom::lib::std::collections::hash_set","",131,[[["self"]],["option"]]],[11,"size_hint","","",131,N],[11,"next","","",132,[[["self"]],["option"]]],[11,"size_hint","","",132,N],[11,"next","","",133,[[["self"]],["option"]]],[11,"size_hint","","",133,N],[11,"write","nom::lib::std::collections::hash_map","",134,N],[11,"finish","","",134,[[["self"]],["u64"]]],[11,"default","","Creates a new `DefaultHasher` using [`new`][DefaultHasher::new]. See its documentation for more.",134,[[],["defaulthasher"]]],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",118,[[],["hashmap"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["osstr"]]]],[11,"default","nom::lib::std::collections::hash_set","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",117,[[],["hashset"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["cstr"]]]],[11,"default","nom::lib::std::collections::hash_map","Constructs a new `RandomState`.",129,[[],["randomstate"]]],[11,"from_iter","","",118,[[["t"]],["hashmap"]]],[11,"from_iter","nom::lib::std::collections::hash_set","",117,[[["i"]],["hashset"]]],[11,"report","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["i32"]]],[11,"report","","",83,[[["self"]],["i32"]]],[11,"fill_buf","","",115,[[["self"]],["result",["error"]]]],[11,"consume","","",115,N],[11,"read_until","","",115,[[["self"],["u8"],["vec"]],["result",["usize","error"]]]],[11,"read_line","","",115,[[["self"],["string"]],["result",["usize","error"]]]],[11,"from","","",115,[[["pathbuf"]],["box",["path"]]]],[11,"from","","Converts a [`CString`] into a [`Box`]`<CStr>` without copying or allocating.",115,[[["cstring"]],["box",["cstr"]]]],[11,"from","","",115,[[["string"]],["box",["error"]]]],[11,"from","","",115,[[["string"]],["box",["error"]]]],[11,"from","","",115,[[["str"]],["box",["error"]]]],[11,"from","","",115,[[["e"]],["box",["error"]]]],[11,"from","","Converts a [`OsString`] into a [`Box`]`<OsStr>` without copying or allocating.",115,[[["osstring"]],["box",["osstr"]]]],[11,"from","","",115,[[["cow",["str"]]],["box",["error"]]]],[11,"from","","",115,[[["str"]],["box",["error"]]]],[11,"from","","",115,[[["cstr"]],["box",["cstr"]]]],[11,"from","","",115,[[["path"]],["box",["path"]]]],[11,"from","","",115,[[["osstr"]],["box",["osstr"]]]],[11,"from","","",115,[[["cow",["str"]]],["box",["error"]]]],[11,"from","","",115,[[["e"]],["box",["error"]]]],[11,"from","","Converts a [`CString`] into a [`Vec`]`<u8>`.",135,[[["cstring"]],["vec",["u8"]]]],[11,"seek","","",115,[[["self"],["seekfrom"]],["result",["u64","error"]]]],[11,"description","nom::lib::std::string","",136,[[["self"]],["str"]]],[11,"description","nom::lib::std::str","",137,[[["self"]],["str"]]],[11,"description","nom::lib::std::string","",138,[[["self"]],["str"]]],[11,"description","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["str"]]],[11,"cause","","",115,[[["self"]],["option",["error"]]]],[11,"description","nom::lib::std::string","",139,[[["self"]],["str"]]],[11,"description","nom::lib::std::str","",140,[[["self"]],["str"]]],[11,"description","nom::lib::std::fmt","",141,[[["self"]],["str"]]],[11,"fmt","nom::lib::std::collections::hash_set","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"write","nom::lib::std::prelude::v1::v1","",135,N],[11,"write_all","","",135,N],[11,"flush","","",135,[[["self"]],["result",["error"]]]],[11,"write","","",115,N],[11,"flush","","",115,[[["self"]],["result",["error"]]]],[11,"write_all","","",115,N],[11,"write_fmt","","",115,[[["self"],["arguments"]],["result",["error"]]]],[11,"read","","",115,N],[11,"initializer","","",115,[[["self"]],["initializer"]]],[11,"read_to_end","","",115,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","",115,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","",115,N],[11,"clone","nom::lib::std::collections::hash_map","",129,[[["self"]],["randomstate"]]],[11,"clone","nom::lib::std::collections::hash_set","",130,[[["self"]],["union"]]],[11,"clone","nom::lib::std::collections::hash_map","",118,[[["self"]],["hashmap"]]],[11,"clone","nom::lib::std::collections::hash_set","",131,[[["self"]],["difference"]]],[11,"clone","","",117,[[["self"]],["hashset"]]],[11,"clone","nom::lib::std::collections::hash_map","",134,[[["self"]],["defaulthasher"]]],[11,"clone","","",123,[[["self"]],["values"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["cstr"]]]],[11,"clone","nom::lib::std::collections::hash_set","",133,[[["self"]],["symmetricdifference"]]],[11,"clone","","",127,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::hash_map","",122,[[["self"]],["keys"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["osstr"]]]],[11,"clone","","",115,[[["self"]],["box",["path"]]]],[11,"clone","nom::lib::std::collections::hash_set","",132,[[["self"]],["intersection"]]],[11,"clone","nom::lib::std::collections::hash_map","",119,[[["self"]],["iter"]]],[11,"extend","","",118,N],[11,"extend","nom::lib::std::collections::hash_set","",117,N],[11,"extend","","",117,N],[11,"extend","nom::lib::std::collections::hash_map","",118,N],[11,"eq","","",118,[[["self"],["hashmap"]],["bool"]]],[11,"eq","nom::lib::std::collections::hash_set","",117,[[["self"],["hashset"]],["bool"]]],[11,"index","nom::lib::std::collections::hash_map","Returns a reference to the value corresponding to the supplied key.",118,[[["self"],["q"]],["v"]]],[11,"fmt","nom::lib::std::str","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"next_back","nom::lib::std::str::pattern","",145,[[["self"]],["searchstep"]]],[11,"next_match_back","","",145,[[["self"]],["option"]]],[11,"next_back","","",146,[[["self"]],["searchstep"]]],[11,"next_match_back","","",146,[[["self"]],["option"]]],[11,"next_back","","",147,[[["self"]],["searchstep"]]],[11,"next_match_back","","",147,[[["self"]],["option"]]],[11,"next_reject_back","","",147,[[["self"]],["option"]]],[11,"next_back","","",148,[[["self"]],["searchstep"]]],[11,"next_match_back","","",148,[[["self"]],["option"]]],[11,"next_reject_back","","",148,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",149,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",150,[[["self"]],["option"]]],[11,"try_rfold","","",150,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",150,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::option","",151,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",152,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::ops","",153,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",154,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",155,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::result","",156,[[["self"]],["option"]]],[11,"next_back","","",157,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",158,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",159,[[["self"]],["option"]]],[11,"try_rfold","","",159,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","nom::lib::std::str","",160,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",161,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",162,[[["self"]],["option"]]],[11,"next_back","","",163,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",164,[[["self"]],["option"]]],[11,"try_rfold","","",164,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",164,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",165,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",166,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",167,[[["self"]],["option"]]],[11,"try_rfold","","",167,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",167,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",168,[[["self"]],["option"]]],[11,"next_back","","",150,[[["self"]],["option"]]],[11,"try_rfold","","",150,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",150,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",169,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",170,[[["self"]],["option"]]],[11,"try_rfold","","",170,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",170,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",171,[[["self"]],["option"]]],[11,"try_rfold","","",171,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",171,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::option","",172,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",173,[[["self"]],["option",["str"]]]],[11,"next_back","","",174,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",175,[[["self"]],["option"]]],[11,"try_rfold","","",175,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",175,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",176,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",177,[[["self"]],["option",["str"]]]],[11,"next_back","","",178,[[["self"]],["option",["u8"]]]],[11,"rfind","","",178,[[["self"],["p"]],["option"]]],[11,"next_back","nom::lib::std::iter","",179,[[["self"]],["option"]]],[11,"try_rfold","","",179,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",179,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",180,[[["self"]],["option"]]],[11,"try_rfold","","",180,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",180,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::iter","",181,[[["self"]],["option"]]],[11,"try_rfold","","",181,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",181,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",182,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",183,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::ops","",63,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",184,[[["self"]],["option"]]],[11,"try_rfold","","",184,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",184,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",185,[[["self"]],["option"]]],[11,"try_rfold","","",185,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",185,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::iter","",186,[[["self"]],["option"]]],[11,"try_rfold","","",186,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",186,[[["self"],["acc"],["f"]],["acc"]]],[11,"rfind","","",186,[[["self"],["p"]],["option"]]],[11,"next_back","nom::lib::std::slice","",187,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",188,[[["self"]],["option",["char"]]]],[11,"next_back","nom::lib::std::slice","",189,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",190,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::result","",191,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",192,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",193,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::option","",194,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",195,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",196,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",197,[[["self"]],["option"]]],[11,"try_rfold","","",197,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",197,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",198,[[["self"]],["option"]]],[11,"size_hint","","",198,N],[11,"next","","",196,[[["self"]],["option"]]],[11,"size_hint","","",196,N],[11,"count","","",196,[[["self"]],["usize"]]],[11,"nth","","",196,[[["self"],["usize"]],["option"]]],[11,"last","","",196,[[["self"]],["option"]]],[11,"next","nom::lib::std::result","",157,[[["self"]],["option"]]],[11,"size_hint","","",157,N],[11,"next","nom::lib::std::str","",199,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",200,[[["self"]],["option"]]],[11,"size_hint","","",200,N],[11,"next","nom::lib::std::iter","",201,[[["self"]],["option"]]],[11,"size_hint","","",201,N],[11,"next","","",186,[[["self"]],["option"]]],[11,"size_hint","","",186,N],[11,"try_fold","","",186,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",186,[[["self"],["acc"],["f"]],["acc"]]],[11,"find","","",186,[[["self"],["p"]],["option"]]],[11,"rposition","","",186,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::str","",202,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",182,[[["self"]],["option"]]],[11,"size_hint","","",182,N],[11,"next","nom::lib::std::slice","",185,[[["self"]],["option"]]],[11,"size_hint","","",185,N],[11,"count","","",185,[[["self"]],["usize"]]],[11,"nth","","",185,[[["self"],["usize"]],["option"]]],[11,"last","","",185,[[["self"]],["option"]]],[11,"try_fold","","",185,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",185,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",185,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",185,[[["self"],["p"]],["option",["usize"]]]],[11,"next","","",166,[[["self"]],["option"]]],[11,"size_hint","","",166,N],[11,"count","","",166,[[["self"]],["usize"]]],[11,"nth","","",166,[[["self"],["usize"]],["option"]]],[11,"last","","",166,[[["self"]],["option"]]],[11,"next","","",149,[[["self"]],["option"]]],[11,"size_hint","","",149,N],[11,"next","nom::lib::std::iter","",197,[[["self"]],["option"]]],[11,"size_hint","","",197,N],[11,"try_fold","","",197,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",197,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",180,[[["self"]],["option"]]],[11,"size_hint","","",180,N],[11,"count","","",180,[[["self"]],["usize"]]],[11,"nth","","",180,[[["self"],["usize"]],["option"]]],[11,"last","","",180,[[["self"]],["option"]]],[11,"try_fold","","",180,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",180,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",180,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",180,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::str","",155,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",168,[[["self"]],["option"]]],[11,"size_hint","","",168,N],[11,"nth","","",168,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::slice","",154,[[["self"]],["option"]]],[11,"size_hint","","",154,N],[11,"count","","",154,[[["self"]],["usize"]]],[11,"nth","","",154,[[["self"],["usize"]],["option"]]],[11,"last","","",154,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",184,[[["self"]],["option"]]],[11,"size_hint","","",184,N],[11,"try_fold","","",184,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",184,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","","",203,[[["self"]],["option"]]],[11,"size_hint","","",203,N],[11,"try_fold","","",203,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",150,[[["self"]],["option"]]],[11,"nth","","",150,[[["self"],["usize"]],["option"]]],[11,"last","","",150,[[["self"]],["option"]]],[11,"count","","",150,[[["self"]],["usize"]]],[11,"size_hint","","",150,N],[11,"try_fold","","",150,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",150,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",152,[[["self"]],["option"]]],[11,"size_hint","","",152,N],[11,"next","nom::lib::std::ops","",153,[[["self"]],["option"]]],[11,"size_hint","","",153,N],[11,"nth","","",153,[[["self"],["usize"]],["option"]]],[11,"last","","",153,[[["self"]],["option"]]],[11,"min","","",153,[[["self"]],["option"]]],[11,"max","","",153,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",177,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","Overflow Behavior",167,[[["self"]],["option"]]],[11,"size_hint","","",167,N],[11,"nth","","",167,[[["self"],["usize"]],["option"]]],[11,"count","","",167,[[["self"]],["usize"]]],[11,"try_fold","","",167,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",167,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",163,[[["self"]],["option",["str"]]]],[11,"size_hint","","",163,N],[11,"next","nom::lib::std::iter","",171,[[["self"]],["option"]]],[11,"size_hint","","",171,N],[11,"try_fold","","",171,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",171,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",150,[[["self"]],["option"]]],[11,"nth","","",150,[[["self"],["usize"]],["option"]]],[11,"last","","",150,[[["self"]],["option"]]],[11,"count","","",150,[[["self"]],["usize"]]],[11,"size_hint","","",150,N],[11,"try_fold","","",150,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",150,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",169,[[["self"]],["option",["str"]]]],[11,"size_hint","","",169,N],[11,"next","","",190,[[["self"]],["option",["str"]]]],[11,"size_hint","","",190,N],[11,"next","nom::lib::std::slice","",189,[[["self"]],["option"]]],[11,"size_hint","","",189,N],[11,"count","","",189,[[["self"]],["usize"]]],[11,"nth","","",189,[[["self"],["usize"]],["option"]]],[11,"last","","",189,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",204,[[["self"]],["option"]]],[11,"nth","","",204,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",204,N],[11,"try_fold","","",204,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","nom::lib::std::str","",158,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",176,[[["self"]],["option"]]],[11,"size_hint","","",176,N],[11,"next","nom::lib::std::str","",160,[[["self"]],["option",["str"]]]],[11,"size_hint","","",160,N],[11,"next","nom::lib::std::iter","",205,[[["self"]],["option"]]],[11,"size_hint","","",205,N],[11,"next","nom::lib::std::str","",206,[[["self"]],["option",["u16"]]]],[11,"size_hint","","",206,N],[11,"next","","",188,[[["self"]],["option",["char"]]]],[11,"count","","",188,[[["self"]],["usize"]]],[11,"size_hint","","",188,N],[11,"last","","",188,[[["self"]],["option",["char"]]]],[11,"next","nom::lib::std::iter","",207,[[["self"]],["option"]]],[11,"size_hint","","",207,N],[11,"try_fold","","",207,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",175,[[["self"]],["option"]]],[11,"size_hint","","",175,N],[11,"count","","",175,[[["self"]],["usize"]]],[11,"try_fold","","",175,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",175,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::option","",151,[[["self"]],["option"]]],[11,"size_hint","","",151,N],[11,"next","nom::lib::std::iter","",161,[[["self"]],["option"]]],[11,"size_hint","","",161,N],[11,"next","nom::lib::std::option","",194,[[["self"]],["option"]]],[11,"size_hint","","",194,N],[11,"next","nom::lib::std::iter","",179,[[["self"]],["option"]]],[11,"size_hint","","",179,N],[11,"try_fold","","",179,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",179,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::ops","",63,[[["self"]],["option"]]],[11,"size_hint","","",63,N],[11,"nth","","",63,[[["self"],["usize"]],["option"]]],[11,"last","","",63,[[["self"]],["option"]]],[11,"min","","",63,[[["self"]],["option"]]],[11,"max","","",63,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",193,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",192,[[["self"]],["option"]]],[11,"size_hint","","",192,N],[11,"count","","",192,[[["self"]],["usize"]]],[11,"nth","","",192,[[["self"],["usize"]],["option"]]],[11,"last","","",192,[[["self"]],["option"]]],[11,"next","nom::lib::std::option","",172,[[["self"]],["option"]]],[11,"size_hint","","",172,N],[11,"next","nom::lib::std::iter","",208,[[["self"]],["option"]]],[11,"count","","",208,[[["self"]],["usize"]]],[11,"nth","","",208,[[["self"],["usize"]],["option"]]],[11,"last","","",208,[[["self"]],["option"]]],[11,"size_hint","","",208,N],[11,"try_fold","","",208,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",208,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::ops","",60,[[["self"]],["option"]]],[11,"size_hint","","",60,N],[11,"nth","","",60,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::str","",174,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",209,[[["self"]],["option"]]],[11,"size_hint","","",209,N],[11,"nth","","",209,[[["self"],["usize"]],["option"]]],[11,"next","","",164,[[["self"]],["option"]]],[11,"size_hint","","",164,N],[11,"try_fold","","",164,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",164,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",195,[[["self"]],["option"]]],[11,"size_hint","","",195,N],[11,"next","nom::lib::std::slice","",187,[[["self"]],["option"]]],[11,"size_hint","","",187,N],[11,"next","nom::lib::std::str","",165,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",181,[[["self"]],["option"]]],[11,"count","","",181,[[["self"]],["usize"]]],[11,"try_fold","","",181,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",181,[[["self"],["acc"],["f"]],["acc"]]],[11,"nth","","",181,[[["self"],["usize"]],["option"]]],[11,"find","","",181,[[["self"],["p"]],["option"]]],[11,"last","","",181,[[["self"]],["option"]]],[11,"size_hint","","",181,N],[11,"next","nom::lib::std::str","",178,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",178,N],[11,"count","","",178,[[["self"]],["usize"]]],[11,"last","","",178,[[["self"]],["option"]]],[11,"nth","","",178,[[["self"],["usize"]],["option"]]],[11,"all","","",178,[[["self"],["f"]],["bool"]]],[11,"any","","",178,[[["self"],["f"]],["bool"]]],[11,"find","","",178,[[["self"],["p"]],["option"]]],[11,"position","","",178,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",178,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::slice","",210,[[["self"]],["option"]]],[11,"size_hint","","",210,N],[11,"next","nom::lib::std::iter","",170,[[["self"]],["option"]]],[11,"size_hint","","",170,N],[11,"try_fold","","",170,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",170,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","nom::lib::std::slice","",211,[[["self"]],["option"]]],[11,"size_hint","","",211,N],[11,"next","nom::lib::std::result","",156,[[["self"]],["option"]]],[11,"size_hint","","",156,N],[11,"next","nom::lib::std::iter","",212,[[["self"]],["option"]]],[11,"size_hint","","",212,N],[11,"try_fold","","",212,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",212,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",183,[[["self"]],["option",["str"]]]],[11,"next","","",162,[[["self"]],["option"]]],[11,"count","","",162,[[["self"]],["usize"]]],[11,"size_hint","","",162,N],[11,"last","","",162,[[["self"]],["option"]]],[11,"next","nom::lib::std::result","",191,[[["self"]],["option"]]],[11,"size_hint","","",191,N],[11,"next","nom::lib::std::iter","",159,[[["self"]],["option"]]],[11,"nth","","",159,[[["self"],["usize"]],["option"]]],[11,"count","","",159,[[["self"]],["usize"]]],[11,"last","","",159,[[["self"]],["option"]]],[11,"size_hint","","",159,N],[11,"try_fold","","",159,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",159,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",173,[[["self"]],["option",["str"]]]],[11,"into_iter","nom::lib::std::prelude::v1::v1","Returns a consuming iterator over the possibly contained value.",82,[[["self"]],["intoiter"]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",83,[[["self"]],["intoiter"]]],[11,"get","nom::lib::std::ops","",79,[[["self"],["str"]],["option"]]],[11,"get_mut","","",79,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",79,N],[11,"get_unchecked_mut","","",79,N],[11,"index","","",79,N],[11,"index_mut","","",79,N],[11,"get","","",63,N],[11,"get_mut","","",63,N],[11,"get_unchecked","","",63,N],[11,"get_unchecked_mut","","",63,N],[11,"index","","",63,N],[11,"index_mut","","",63,N],[11,"get","","",153,N],[11,"get_mut","","",153,N],[11,"get_unchecked","","",153,N],[11,"get_unchecked_mut","","",153,N],[11,"index","","",153,N],[11,"index_mut","","",153,N],[11,"get","","",213,[[["self"],["str"]],["option"]]],[11,"get_mut","","",213,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",213,N],[11,"get_unchecked_mut","","",213,N],[11,"index","","",213,N],[11,"index_mut","","",213,N],[11,"get","","",153,[[["self"],["str"]],["option"]]],[11,"get_mut","","",153,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",153,N],[11,"get_unchecked_mut","","",153,N],[11,"index","","",153,N],[11,"index_mut","","",153,N],[11,"get","","",72,[[["self"],["str"]],["option"]]],[11,"get_mut","","",72,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",72,N],[11,"get_unchecked_mut","","",72,N],[11,"index","","",72,N],[11,"index_mut","","",72,N],[11,"get","","",60,N],[11,"get_mut","","",60,N],[11,"get_unchecked","","",60,N],[11,"get_unchecked_mut","","",60,N],[11,"index","","",60,N],[11,"index_mut","","",60,N],[11,"get","","",213,N],[11,"get_mut","","",213,N],[11,"get_unchecked","","",213,N],[11,"get_unchecked_mut","","",213,N],[11,"index","","",213,N],[11,"index_mut","","",213,N],[11,"get","","",72,N],[11,"get_mut","","",72,N],[11,"get_unchecked","","",72,N],[11,"get_unchecked_mut","","",72,N],[11,"index","","",72,N],[11,"index_mut","","",72,N],[11,"get","","",60,[[["self"],["str"]],["option"]]],[11,"get_mut","","",60,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",60,N],[11,"get_unchecked_mut","","",60,N],[11,"index","","",60,N],[11,"index_mut","","",60,N],[11,"get","","",63,[[["self"],["str"]],["option"]]],[11,"get_mut","","",63,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",63,N],[11,"get_unchecked_mut","","",63,N],[11,"index","","",63,N],[11,"index_mut","","",63,N],[11,"get","","",79,N],[11,"get_mut","","",79,N],[11,"get_unchecked","","",79,N],[11,"get_unchecked_mut","","",79,N],[11,"index","","",79,N],[11,"index_mut","","",79,N],[11,"write","nom::lib::std::hash","",214,N],[11,"finish","","",214,[[["self"]],["u64"]]],[11,"hash","nom::lib::std::cmp","",8,N],[11,"hash","nom::lib::std::fmt","",141,N],[11,"hash","nom::lib::std::option","",215,N],[11,"hash","nom::lib::std::prelude::v1::v1","",82,N],[11,"hash","nom::lib::std::cmp","",7,N],[11,"hash","nom::lib::std::ops","",72,N],[11,"hash","","",60,N],[11,"hash","","",48,N],[11,"hash","nom::lib::std::mem","",216,N],[11,"hash","nom::lib::std::prelude::v1::v1","",83,N],[11,"hash","nom::lib::std::ops","",63,N],[11,"hash","","",79,N],[11,"hash","","",153,N],[11,"hash","nom::lib::std::mem","",217,N],[11,"hash","nom::lib::std::ops","",14,N],[11,"hash","","",213,N],[11,"clone","nom::lib::std::iter","",184,[[["self"]],["cloned"]]],[11,"clone","nom::lib::std::str","",183,[[["self"]],["splitterminator"]]],[11,"clone","","",169,[[["self"]],["splitwhitespace"]]],[11,"clone","","",199,[[["self"]],["rsplitn"]]],[11,"clone","nom::lib::std::str::pattern","",145,[[["self"]],["strsearcher"]]],[11,"clone","nom::lib::std::result","",191,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::iter","",203,[[["self"]],["scan"]]],[11,"clone","","",197,[[["self"]],["flatten"]]],[11,"clone","nom::lib::std::str","",206,[[["self"]],["encodeutf16"]]],[11,"clone","nom::lib::std::ops","",79,[[["self"]],["rangetoinclusive"]]],[11,"clone","nom::lib::std::iter","",204,[[["self"]],["take"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",82,[[["self"]],["option"]]],[11,"clone","nom::lib::std::str","",174,[[["self"]],["rsplitterminator"]]],[11,"clone","","",163,[[["self"]],["lines"]]],[11,"clone","nom::lib::std::ops","",48,[[["self"]],["generatorstate"]]],[11,"clone","nom::lib::std::iter","",150,[[["self"]],["fuse"]]],[11,"clone","nom::lib::std::str","",155,[[["self"]],["rmatchindices"]]],[11,"clone","nom::lib::std::str::pattern","",88,[[["self"]],["searchstep"]]],[11,"clone","nom::lib::std::iter","",159,[[["self"]],["skip"]]],[11,"clone","nom::lib::std::option","",194,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::cmp","",8,[[["self"]],["reverse"]]],[11,"clone","nom::lib::std::str::pattern","",146,[[["self"]],["charsearcher"]]],[11,"clone","nom::lib::std::iter","",195,[[["self"]],["repeat"]]],[11,"clone","nom::lib::std::str","",188,[[["self"]],["chars"]]],[11,"clone","nom::lib::std::iter","",205,[[["self"]],["repeatwith"]]],[11,"clone","nom::lib::std::str","",190,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","nom::lib::std::slice","",176,[[["self"]],["rsplit"]]],[11,"clone","nom::lib::std::ops","",60,[[["self"]],["rangefrom"]]],[11,"clone","nom::lib::std::str::pattern","",147,[[["self"]],["charpredicatesearcher"]]],[11,"clone","nom::lib::std::iter","",182,[[["self"]],["once"]]],[11,"clone","","",168,[[["self"]],["zip"]]],[11,"clone","nom::lib::std::str","",177,[[["self"]],["matches"]]],[11,"clone","nom::lib::std::iter","",179,[[["self"]],["inspect"]]],[11,"clone","","",209,[[["self"]],["stepby"]]],[11,"clone","","",161,[[["self"]],["empty"]]],[11,"clone","nom::lib::std::str","",162,[[["self"]],["charindices"]]],[11,"clone","nom::lib::std::iter","",207,[[["self"]],["takewhile"]]],[11,"clone","nom::lib::std::str","",165,[[["self"]],["matchindices"]]],[11,"clone","nom::lib::std::slice","",189,[[["self"]],["exactchunks"]]],[11,"clone","nom::lib::std::str","",193,[[["self"]],["rsplit"]]],[11,"clone","nom::lib::std::mem","",217,[[["self"]],["manuallydrop"]]],[11,"clone","nom::lib::std::ops","",14,[[["self"]],["bound"]]],[11,"clone","","",153,[[["self"]],["rangeinclusive"]]],[11,"clone","nom::lib::std::iter","",212,[[["self"]],["skipwhile"]]],[11,"clone","nom::lib::std::str","",158,[[["self"]],["split"]]],[11,"clone","nom::lib::std::iter","",171,[[["self"]],["flatmap"]]],[11,"clone","nom::lib::std::str","",202,[[["self"]],["splitn"]]],[11,"clone","nom::lib::std::ops","",72,[[["self"]],["rangeto"]]],[11,"clone","nom::lib::std::str","",140,[[["self"]],["parseboolerror"]]],[11,"clone","nom::lib::std::option","",215,[[["self"]],["noneerror"]]],[11,"clone","nom::lib::std::fmt","",144,[[["self"]],["arguments"]]],[11,"clone","nom::lib::std::iter","",201,[[["self"]],["cycle"]]],[11,"clone","nom::lib::std::str::pattern","",148,[[["self"]],["charslicesearcher"]]],[11,"clone","nom::lib::std::str","",173,[[["self"]],["rmatches"]]],[11,"clone","nom::lib::std::mem","",216,[[["self"]],["discriminant"]]],[11,"clone","nom::lib::std::hash","",218,[[["self"]],["buildhasherdefault"]]],[11,"clone","nom::lib::std::iter","",208,[[["self"]],["peekable"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["result"]]],[11,"clone","nom::lib::std::slice","",196,[[["self"]],["chunks"]]],[11,"clone","nom::lib::std::fmt","",141,[[["self"]],["error"]]],[11,"clone","nom::lib::std::iter","",164,[[["self"]],["filtermap"]]],[11,"clone","nom::lib::std::hash","",214,[[["self"]],["siphasher"]]],[11,"clone","nom::lib::std::ops","",63,[[["self"]],["range"]]],[11,"clone","","",213,[[["self"]],["rangefull"]]],[11,"clone","nom::lib::std::result","",157,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::iter","",186,[[["self"]],["rev"]]],[11,"clone","","",175,[[["self"]],["filter"]]],[11,"clone","nom::lib::std::str","",178,[[["self"]],["bytes"]]],[11,"clone","nom::lib::std::slice","",180,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::cmp","",7,[[["self"]],["ordering"]]],[11,"clone","nom::lib::std::iter","",170,[[["self"]],["map"]]],[11,"clone","nom::lib::std::str","",137,[[["self"]],["utf8error"]]],[11,"clone","nom::lib::std::slice","",166,[[["self"]],["windows"]]],[11,"clone","nom::lib::std::iter","",167,[[["self"]],["enumerate"]]],[11,"clone","nom::lib::std::slice","",149,[[["self"]],["split"]]],[11,"clone","nom::lib::std::iter","",181,[[["self"]],["chain"]]],[11,"clone","nom::lib::std::str","",160,[[["self"]],["linesany"]]],[11,"clone","nom::lib::std::option","",172,[[["self"]],["intoiter"]]],[11,"partial_cmp","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["reverse"]],["bool"]]],[11,"le","","",8,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",8,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",8,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["option",["ordering"]]]],[11,"lt","","",83,[[["self"],["result"]],["bool"]]],[11,"le","","",83,[[["self"],["result"]],["bool"]]],[11,"gt","","",83,[[["self"],["result"]],["bool"]]],[11,"ge","","",83,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","nom::lib::std::ops","",48,[[["self"],["generatorstate"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",48,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",48,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",48,[[["self"],["generatorstate"]],["bool"]]],[11,"partial_cmp","nom::lib::std::option","",215,[[["self"],["noneerror"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::mem","",217,[[["self"],["manuallydrop"]],["option",["ordering"]]]],[11,"lt","","",217,[[["self"],["manuallydrop"]],["bool"]]],[11,"le","","",217,[[["self"],["manuallydrop"]],["bool"]]],[11,"gt","","",217,[[["self"],["manuallydrop"]],["bool"]]],[11,"ge","","",217,[[["self"],["manuallydrop"]],["bool"]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["option",["ordering"]]]],[11,"lt","","",82,[[["self"],["option"]],["bool"]]],[11,"le","","",82,[[["self"],["option"]],["bool"]]],[11,"gt","","",82,[[["self"],["option"]],["bool"]]],[11,"ge","","",82,[[["self"],["option"]],["bool"]]],[11,"partial_cmp","nom::lib::std::fmt","",141,[[["self"],["error"]],["option",["ordering"]]]],[11,"cmp","nom::lib::std::option","",215,[[["self"],["noneerror"]],["ordering"]]],[11,"cmp","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["ordering"]]],[11,"cmp","nom::lib::std::ops","",48,[[["self"],["generatorstate"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["ordering"]]],[11,"cmp","nom::lib::std::fmt","",141,[[["self"],["error"]],["ordering"]]],[11,"cmp","nom::lib::std::mem","",217,[[["self"],["manuallydrop"]],["ordering"]]],[11,"cmp","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["ordering"]]],[11,"sum","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",83,[[["i"]],["result"]]],[11,"len","nom::lib::std::slice","",185,[[["self"]],["usize"]]],[11,"is_empty","","",185,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",161,[[["self"]],["usize"]]],[11,"len","","",150,[[["self"]],["usize"]]],[11,"is_empty","","",150,[[["self"]],["bool"]]],[11,"len","nom::lib::std::str","",178,[[["self"]],["usize"]]],[11,"is_empty","","",178,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",186,[[["self"]],["usize"]]],[11,"is_empty","","",186,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::slice","",189,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",182,[[["self"]],["usize"]]],[11,"len","","",167,[[["self"]],["usize"]]],[11,"is_empty","","",167,[[["self"]],["bool"]]],[11,"len","","",179,[[["self"]],["usize"]]],[11,"is_empty","","",179,[[["self"]],["bool"]]],[11,"len","nom::lib::std::slice","",180,[[["self"]],["usize"]]],[11,"is_empty","","",180,[[["self"]],["bool"]]],[11,"is_empty","","",192,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",184,[[["self"]],["usize"]]],[11,"is_empty","","",184,[[["self"]],["bool"]]],[11,"len","","",170,[[["self"]],["usize"]]],[11,"is_empty","","",170,[[["self"]],["bool"]]],[11,"eq","nom::lib::std::ops","",14,[[["self"],["bound"]],["bool"]]],[11,"ne","","",14,[[["self"],["bound"]],["bool"]]],[11,"eq","nom::lib::std::fmt","",141,[[["self"],["error"]],["bool"]]],[11,"eq","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["bool"]]],[11,"eq","nom::lib::std::hash","",218,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","nom::lib::std::ops","",48,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",48,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","nom::lib::std::option","",215,[[["self"],["noneerror"]],["bool"]]],[11,"eq","nom::lib::std::str","",140,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",140,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["bool"]]],[11,"ne","","",83,[[["self"],["result"]],["bool"]]],[11,"eq","nom::lib::std::ops","",79,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",79,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","","",60,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",60,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","nom::lib::std::mem","",217,[[["self"],["manuallydrop"]],["bool"]]],[11,"ne","","",217,[[["self"],["manuallydrop"]],["bool"]]],[11,"eq","","",216,[[["self"],["discriminant"]],["bool"]]],[11,"eq","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",8,[[["self"],["reverse"]],["bool"]]],[11,"eq","nom::lib::std::ops","",63,[[["self"],["range"]],["bool"]]],[11,"ne","","",63,[[["self"],["range"]],["bool"]]],[11,"eq","nom::lib::std::str::pattern","",88,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",88,[[["self"],["searchstep"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["bool"]]],[11,"ne","","",82,[[["self"],["option"]],["bool"]]],[11,"eq","nom::lib::std::ops","",153,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","nom::lib::std::str","",137,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",137,[[["self"],["utf8error"]],["bool"]]],[11,"eq","nom::lib::std::ops","",72,[[["self"],["rangeto"]],["bool"]]],[11,"ne","","",72,[[["self"],["rangeto"]],["bool"]]],[11,"eq","","",213,[[["self"],["rangefull"]],["bool"]]],[11,"fmt","nom::lib::std::str","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",215,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",210,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::cmp","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::hash","",214,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",211,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::cmp","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",213,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::hash","",218,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",217,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"haystack","nom::lib::std::str::pattern","",145,[[["self"]],["str"]]],[11,"next","","",145,[[["self"]],["searchstep"]]],[11,"next_match","","",145,[[["self"]],["option"]]],[11,"haystack","","",147,[[["self"]],["str"]]],[11,"next","","",147,[[["self"]],["searchstep"]]],[11,"next_match","","",147,[[["self"]],["option"]]],[11,"next_reject","","",147,[[["self"]],["option"]]],[11,"haystack","","",146,[[["self"]],["str"]]],[11,"next","","",146,[[["self"]],["searchstep"]]],[11,"next_match","","",146,[[["self"]],["option"]]],[11,"haystack","","",148,[[["self"]],["str"]]],[11,"next","","",148,[[["self"]],["searchstep"]]],[11,"next_match","","",148,[[["self"]],["option"]]],[11,"next_reject","","",148,[[["self"]],["option"]]],[11,"from","nom::lib::std::prelude::v1::v1","",82,[[["t"]],["option"]]],[11,"as_ref","nom::lib::std::slice","",180,N],[11,"from_iter","nom::lib::std::prelude::v1::v1","Takes each element in the [`Iterator`]: if it is [`None`][Option::None], no further elements are taken, and the [`None`][Option::None] is returned. Should no [`None`][Option::None] occur, a container with the values of each [`Option`] is returned.",82,[[["i"]],["option"]]],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",83,[[["i"]],["result"]]],[11,"write_str","nom::lib::std::fmt","",219,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",219,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","",219,[[["self"],["arguments"]],["result",["error"]]]],[11,"into_result","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["result"]]],[11,"from_ok","","",83,[[["t"]],["result"]]],[11,"from_error","","",83,[[["e"]],["result"]]],[11,"into_result","","",82,[[["self"]],["result",["noneerror"]]]],[11,"from_ok","","",82,[[["t"]],["option"]]],[11,"from_error","","",82,[[["noneerror"]],["option"]]],[11,"default","nom::lib::std::fmt","",141,[[],["error"]]],[11,"default","nom::lib::std::iter","",161,[[],["empty"]]],[11,"default","nom::lib::std::hash","",214,[[],["siphasher"]]],[11,"default","nom::lib::std::prelude::v1::v1","Returns [`None`][Option::None].",82,[[],["option"]]],[11,"default","nom::lib::std::mem","",217,[[],["manuallydrop"]]],[11,"default","nom::lib::std::hash","",218,[[],["buildhasherdefault"]]],[11,"default","nom::lib::std::cmp","",8,[[],["reverse"]]],[11,"deref_mut","nom::lib::std::mem","",217,N],[11,"deref","","",217,N],[11,"product","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",83,[[["i"]],["result"]]],[11,"start_bound","nom::lib::std::ops","",79,[[["self"]],["bound"]]],[11,"end_bound","","",79,[[["self"]],["bound"]]],[11,"start_bound","","",79,[[["self"]],["bound"]]],[11,"end_bound","","",79,[[["self"]],["bound"]]],[11,"start_bound","","",63,[[["self"]],["bound"]]],[11,"end_bound","","",63,[[["self"]],["bound"]]],[11,"start_bound","","",72,[[["self"]],["bound"]]],[11,"end_bound","","",72,[[["self"]],["bound"]]],[11,"start_bound","","",60,[[["self"]],["bound"]]],[11,"end_bound","","",60,[[["self"]],["bound"]]],[11,"start_bound","","",72,[[["self"]],["bound"]]],[11,"end_bound","","",72,[[["self"]],["bound"]]],[11,"start_bound","","",60,[[["self"]],["bound"]]],[11,"end_bound","","",60,[[["self"]],["bound"]]],[11,"start_bound","","",153,[[["self"]],["bound"]]],[11,"end_bound","","",153,[[["self"]],["bound"]]],[11,"start_bound","","",213,[[["self"]],["bound"]]],[11,"end_bound","","",213,[[["self"]],["bound"]]],[11,"start_bound","","",153,[[["self"]],["bound"]]],[11,"end_bound","","",153,[[["self"]],["bound"]]],[11,"start_bound","","",63,[[["self"]],["bound"]]],[11,"end_bound","","",63,[[["self"]],["bound"]]],[11,"build_hasher","nom::lib::std::hash","",218,[[["self"]],["h"]]],[11,"add","nom::lib::std::prelude::v1::v1","",116,[[["self"],["str"]],["string"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",135,N],[11,"into_raw","","",115,N],[11,"poll","","",115,N],[11,"drop","","",115,N],[11,"partial_cmp","","",135,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",115,[[["self"],["box"]],["option",["ordering"]]]],[11,"lt","","",115,[[["self"],["box"]],["bool"]]],[11,"le","","",115,[[["self"],["box"]],["bool"]]],[11,"ge","","",115,[[["self"],["box"]],["bool"]]],[11,"gt","","",115,[[["self"],["box"]],["bool"]]],[11,"partial_cmp","nom::lib::std::collections","",220,[[["self"],["linkedlist"]],["option",["ordering"]]]],[11,"partial_cmp","","",221,[[["self"],["btreemap"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::collections::btree_set","",222,[[["self"],["btreeset"]],["option",["ordering"]]]],[11,"lt","","",222,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",222,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",222,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",222,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",116,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",116,[[["self"],["string"]],["bool"]]],[11,"le","","",116,[[["self"],["string"]],["bool"]]],[11,"gt","","",116,[[["self"],["string"]],["bool"]]],[11,"ge","","",116,[[["self"],["string"]],["bool"]]],[11,"as_ref","","",135,N],[11,"as_ref","","",135,[[["self"]],["vec"]]],[11,"as_ref","","",116,[[["self"]],["str"]]],[11,"as_ref","","",115,[[["self"]],["t"]]],[11,"as_ref","","",116,N],[11,"drop","nom::lib::std::vec","",224,N],[11,"drop","nom::lib::std::collections::vec_deque","",223,N],[11,"drop","nom::lib::std::collections","",221,N],[11,"drop","nom::lib::std::prelude::v1::v1","",115,N],[11,"drop","nom::lib::std::collections::vec_deque","",225,N],[11,"drop","nom::lib::std::vec","",226,N],[11,"drop","nom::lib::std::collections","",220,N],[11,"drop","nom::lib::std::vec","",227,N],[11,"drop","nom::lib::std::collections::btree_map","",228,N],[11,"drop","nom::lib::std::prelude::v1::v1","",135,N],[11,"drop","nom::lib::std::vec","",229,N],[11,"drop","nom::lib::std::collections::binary_heap","",230,N],[11,"drop","nom::lib::std::collections::linked_list","",231,N],[11,"drop","nom::lib::std::string","",232,N],[11,"as_mut","nom::lib::std::prelude::v1::v1","",135,N],[11,"as_mut","","",135,[[["self"]],["vec"]]],[11,"as_mut","","",115,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::collections","",221,[[["self"]],["intoiter"]]],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",220,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",222,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",223,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",233,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::prelude::v1::v1","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",135,[[["self"]],["intoiter"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",234,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_set","",235,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::btree_map","",236,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::vec","",229,[[["self"]],["bool"]]],[11,"is_empty","","",227,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",237,[[["self"]],["bool"]]],[11,"is_empty","","",238,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",239,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",240,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_set","",241,[[["self"]],["usize"]]],[11,"len","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["usize"]]],[11,"is_empty","","",115,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",242,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",243,[[["self"]],["usize"]]],[11,"len","","",228,[[["self"]],["usize"]]],[11,"len","","",244,[[["self"]],["usize"]]],[11,"len","","",245,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",246,[[["self"]],["bool"]]],[11,"next_back","nom::lib::std::collections::btree_map","",247,[[["self"]],["option"]]],[11,"next_back","","",228,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",234,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",248,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",225,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",239,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",224,[[["self"]],["option"]]],[11,"next_back","","",227,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",242,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",249,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",245,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",240,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",250,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",236,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",237,[[["self"]],["option"]]],[11,"rfold","","",237,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::collections::btree_map","",244,[[["self"]],["option"]]],[11,"next_back","","",243,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_set","",241,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::string","",232,[[["self"]],["option",["char"]]]],[11,"next_back","nom::lib::std::collections::btree_set","",251,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",229,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",252,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",246,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",238,[[["self"]],["option"]]],[11,"rfold","","",238,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::collections::btree_set","",235,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::btree_map","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,N],[11,"next","nom::lib::std::string","",232,[[["self"]],["option",["char"]]]],[11,"size_hint","","",232,N],[11,"next","nom::lib::std::collections::linked_list","",231,[[["self"]],["option"]]],[11,"size_hint","","",231,N],[11,"next","nom::lib::std::collections::btree_set","",253,[[["self"]],["option"]]],[11,"size_hint","","",253,N],[11,"next","nom::lib::std::collections::vec_deque","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,N],[11,"fold","","",238,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","nom::lib::std::collections::btree_map","",247,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::binary_heap","",242,[[["self"]],["option"]]],[11,"size_hint","","",242,N],[11,"next","nom::lib::std::vec","",224,[[["self"]],["option"]]],[11,"size_hint","","",224,N],[11,"next","","",229,[[["self"]],["option"]]],[11,"size_hint","","",229,N],[11,"next","nom::lib::std::collections::binary_heap","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,N],[11,"next","nom::lib::std::vec","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,N],[11,"count","","",227,[[["self"]],["usize"]]],[11,"next","nom::lib::std::collections::binary_heap","",240,[[["self"]],["option"]]],[11,"size_hint","","",240,N],[11,"next","nom::lib::std::collections::btree_set","",241,[[["self"]],["option"]]],[11,"size_hint","","",241,N],[11,"next","nom::lib::std::collections::btree_map","",236,[[["self"]],["option"]]],[11,"size_hint","","",236,N],[11,"next","nom::lib::std::collections::linked_list","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,N],[11,"next","nom::lib::std::collections::btree_set","",254,[[["self"]],["option"]]],[11,"size_hint","","",254,N],[11,"next","nom::lib::std::collections::btree_map","",228,[[["self"]],["option"]]],[11,"size_hint","","",228,N],[11,"next","nom::lib::std::collections::vec_deque","",234,[[["self"]],["option"]]],[11,"size_hint","","",234,N],[11,"next","nom::lib::std::collections::btree_set","",235,[[["self"]],["option"]]],[11,"size_hint","","",235,N],[11,"next","nom::lib::std::collections::linked_list","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,N],[11,"next","nom::lib::std::collections::btree_set","",255,[[["self"]],["option"]]],[11,"size_hint","","",255,N],[11,"next","nom::lib::std::collections::btree_map","",252,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::btree_set","",256,[[["self"]],["option"]]],[11,"size_hint","","",256,N],[11,"next","nom::lib::std::collections::btree_map","",243,[[["self"]],["option"]]],[11,"size_hint","","",243,N],[11,"next","nom::lib::std::collections::linked_list","",250,[[["self"]],["option"]]],[11,"size_hint","","",250,N],[11,"next","nom::lib::std::collections::btree_map","",244,[[["self"]],["option"]]],[11,"size_hint","","",244,N],[11,"next","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["option"]]],[11,"size_hint","","",115,N],[11,"nth","","",115,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::collections::btree_set","",251,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::vec_deque","",225,[[["self"]],["option"]]],[11,"size_hint","","",225,N],[11,"next","","",237,[[["self"]],["option"]]],[11,"size_hint","","",237,N],[11,"fold","","",237,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","nom::lib::std::vec","",226,[[["self"]],["option"]]],[11,"size_hint","","",226,N],[11,"next","nom::lib::std::collections::btree_map","",239,[[["self"]],["option"]]],[11,"size_hint","","",239,N],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"spawn_obj","nom::lib::std::prelude::v1::v1","",115,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","",115,[[["self"]],["result",["spawnerrorkind"]]]],[11,"to_string","","",116,[[["self"]],["string"]]],[11,"index_mut","","",116,[[["self"],["rangefull"]],["str"]]],[11,"index_mut","","",116,[[["self"],["range",["usize"]]],["str"]]],[11,"index_mut","","",116,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index_mut","","",116,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","nom::lib::std::collections::vec_deque","",223,[[["self"],["usize"]],["a"]]],[11,"index_mut","nom::lib::std::prelude::v1::v1","",116,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index_mut","","",135,N],[11,"index_mut","","",116,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"hash","","",115,N],[11,"hash","nom::lib::std::collections","",221,N],[11,"hash","","",220,N],[11,"hash","nom::lib::std::prelude::v1::v1","",135,N],[11,"hash","","",116,N],[11,"hash","nom::lib::std::collections::btree_set","",222,N],[11,"hash","nom::lib::std::collections::vec_deque","",223,N],[11,"finish","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["u64"]]],[11,"write","","",115,N],[11,"write_u8","","",115,N],[11,"write_u16","","",115,N],[11,"write_u32","","",115,N],[11,"write_u64","","",115,N],[11,"write_u128","","",115,N],[11,"write_usize","","",115,N],[11,"write_i8","","",115,N],[11,"write_i16","","",115,N],[11,"write_i32","","",115,N],[11,"write_i64","","",115,N],[11,"write_i128","","",115,N],[11,"write_isize","","",115,N],[11,"deref","","",116,[[["self"]],["str"]]],[11,"deref","","",115,[[["self"]],["t"]]],[11,"deref","","",135,N],[11,"deref","nom::lib::std::collections::binary_heap","",230,[[["self"]],["t"]]],[11,"borrow","nom::lib::std::prelude::v1::v1","",135,N],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow","","",116,[[["self"]],["str"]]],[11,"poll","","",115,[[["pinmut",["box"]],["context"]],["poll"]]],[11,"default","nom::lib::std::collections::binary_heap","Creates an empty `BinaryHeap<T>`.",233,[[],["binaryheap"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["str"]]]],[11,"default","","Creates an empty `Vec<T>`.",135,[[],["vec"]]],[11,"default","nom::lib::std::collections","Creates an empty `LinkedList<T>`.",220,[[],["linkedlist"]]],[11,"default","nom::lib::std::prelude::v1::v1","Creates a `Box<T>`, with the `Default` value for T.",115,[[],["box"]]],[11,"default","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque<T>`.",223,[[],["vecdeque"]]],[11,"default","nom::lib::std::prelude::v1::v1","Creates an empty `String`.",116,[[],["string"]]],[11,"default","","",115,[[],["box"]]],[11,"default","nom::lib::std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",222,[[],["btreeset"]]],[11,"default","nom::lib::std::collections","Creates an empty `BTreeMap<K, V>`.",221,[[],["btreemap"]]],[11,"deref_mut","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["t"]]],[11,"deref_mut","","",135,N],[11,"deref_mut","nom::lib::std::collections::binary_heap","",230,[[["self"]],["t"]]],[11,"deref_mut","nom::lib::std::prelude::v1::v1","",116,[[["self"]],["str"]]],[11,"from_iter","","",116,[[["i"]],["string"]]],[11,"from_iter","","",116,[[["i"]],["string"]]],[11,"from_iter","","",135,[[["i"]],["vec"]]],[11,"from_iter","nom::lib::std::collections","",220,[[["i"]],["linkedlist"]]],[11,"from_iter","nom::lib::std::collections::vec_deque","",223,[[["t"]],["vecdeque"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",116,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections::binary_heap","",233,[[["i"]],["binaryheap"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",116,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections::btree_set","",222,[[["i"]],["btreeset"]]],[11,"from_iter","nom::lib::std::collections","",221,[[["t"]],["btreemap"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",116,[[["i"]],["string"]]],[11,"call_once","","",115,[[["self"],["a"]],["r"]]],[11,"call_once","","",115,[[["self"],["a"]],["r"]]],[11,"from","","",135,N],[11,"from","nom::lib::std::collections","",12,[[["allocerr"]],["collectionallocerr"]]],[11,"from","nom::lib::std::prelude::v1::v1","",135,[[["cow"]],["vec"]]],[11,"from","","",135,[[["string"]],["vec",["u8"]]]],[11,"from","nom::lib::std::collections::binary_heap","",233,[[["vec"]],["binaryheap"]]],[11,"from","nom::lib::std::prelude::v1::v1","",115,[[["box",["str"]]],["box"]]],[11,"from","","",115,[[["vec"]],["box"]]],[11,"from","","",116,[[["cow",["str"]]],["string"]]],[11,"from","","",116,[[["box",["str"]]],["string"]]],[11,"from","","",135,[[["box"]],["vec"]]],[11,"from","","",115,[[["t"]],["box"]]],[11,"from","","",135,[[["binaryheap"]],["vec"]]],[11,"from","","",115,N],[11,"from","","",116,[[["str"]],["string"]]],[11,"from","","",135,N],[11,"from","","",135,[[["str"]],["vec",["u8"]]]],[11,"from","nom::lib::std::collections","",12,[[["layouterr"]],["collectionallocerr"]]],[11,"from","nom::lib::std::prelude::v1::v1","",115,[[["str"]],["box",["str"]]]],[11,"from","","",115,[[["string"]],["box",["str"]]]],[11,"from","","",115,[[["pinbox"]],["box"]]],[11,"from","","",135,[[["vecdeque"]],["vec"]]],[11,"from","nom::lib::std::collections::vec_deque","",223,[[["vec"]],["vecdeque"]]],[11,"fmt","nom::lib::std::collections::binary_heap","",240,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",231,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",228,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",237,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",220,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",222,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",236,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",252,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",226,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",225,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",249,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",230,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",244,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",245,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",223,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",242,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",232,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",227,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",255,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",229,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",248,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",241,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",235,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"write_str","","",116,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",116,[[["self"],["char"]],["result",["error"]]]],[11,"clone","nom::lib::std::collections::btree_set","",256,[[["self"]],["symmetricdifference"]]],[11,"clone","nom::lib::std::collections::btree_map","",245,[[["self"]],["keys"]]],[11,"clone","nom::lib::std::collections::vec_deque","",234,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::btree_set","",241,[[["self"]],["iter"]]],[11,"clone","","",222,[[["self"]],["btreeset"]]],[11,"clone","","",251,[[["self"]],["range"]]],[11,"clone","nom::lib::std::collections::btree_map","",236,[[["self"]],["values"]]],[11,"clone","nom::lib::std::collections::btree_set","",253,[[["self"]],["difference"]]],[11,"clone","nom::lib::std::collections::btree_map","",247,[[["self"]],["range"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",135,[[["self"]],["vec"]]],[11,"clone_from","","",135,N],[11,"clone","","",115,[[["self"]],["box"]]],[11,"clone","nom::lib::std::collections::linked_list","",249,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["str"]]]],[11,"clone","nom::lib::std::collections::binary_heap","",242,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::vec_deque","",223,[[["self"]],["vecdeque"]]],[11,"clone","nom::lib::std::collections::btree_map","",244,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::binary_heap","",233,[[["self"]],["binaryheap"]]],[11,"clone_from","","",233,N],[11,"clone","nom::lib::std::collections","",220,[[["self"]],["linkedlist"]]],[11,"clone","nom::lib::std::collections::btree_set","",254,[[["self"]],["union"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",116,[[["self"]],["string"]]],[11,"clone_from","","",116,N],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",115,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",115,N],[11,"clone","nom::lib::std::vec","",227,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::btree_set","",255,[[["self"]],["intersection"]]],[11,"clone","nom::lib::std::collections::linked_list","",248,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections","",221,[[["self"]],["btreemap"]]],[11,"clone","nom::lib::std::collections::binary_heap","",240,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::string","",136,[[["self"]],["parseerror"]]],[11,"clone","nom::lib::std::collections","",12,[[["self"]],["collectionallocerr"]]],[11,"clone","nom::lib::std::collections::vec_deque","",238,[[["self"]],["iter"]]],[11,"extend","nom::lib::std::collections::binary_heap","",233,N],[11,"extend","nom::lib::std::prelude::v1::v1","",116,N],[11,"extend","nom::lib::std::collections","",220,N],[11,"extend","nom::lib::std::prelude::v1::v1","",116,N],[11,"extend","","",135,N],[11,"extend","nom::lib::std::collections","",221,N],[11,"extend","nom::lib::std::collections::btree_set","",222,N],[11,"extend","nom::lib::std::prelude::v1::v1","",116,N],[11,"extend","nom::lib::std::collections","",221,N],[11,"extend","nom::lib::std::collections::binary_heap","",233,N],[11,"extend","nom::lib::std::prelude::v1::v1","",135,N],[11,"extend","","",116,N],[11,"extend","nom::lib::std::collections::btree_set","",222,N],[11,"extend","nom::lib::std::collections::vec_deque","",223,N],[11,"extend","nom::lib::std::prelude::v1::v1","",116,N],[11,"extend","nom::lib::std::collections::vec_deque","",223,N],[11,"extend","nom::lib::std::collections","",220,N],[11,"add_assign","nom::lib::std::prelude::v1::v1","",116,N],[11,"from_str","","",116,[[["str"]],["result",["string","parseerror"]]]],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,[[["self"],["vec"]],["bool"]]],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,[[["self"],["vecdeque"]],["bool"]]],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,[[["self"],["vec"]],["bool"]]],[11,"ne","","",135,[[["self"],["vec"]],["bool"]]],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",116,[[["self"],["str"]],["bool"]]],[11,"ne","","",116,[[["self"],["str"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::collections","",12,[[["self"],["collectionallocerr"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections","",221,[[["self"],["btreemap"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections","",220,[[["self"],["linkedlist"]],["bool"]]],[11,"ne","","",220,[[["self"],["linkedlist"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",116,[[["self"],["cow"]],["bool"]]],[11,"ne","","",116,[[["self"],["cow"]],["bool"]]],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",116,[[["self"],["string"]],["bool"]]],[11,"ne","","",116,[[["self"],["string"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",116,[[["self"],["str"]],["bool"]]],[11,"ne","","",116,[[["self"],["str"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",115,[[["self"],["box"]],["bool"]]],[11,"ne","","",115,[[["self"],["box"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::collections::btree_set","",222,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",222,[[["self"],["btreeset"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::string","",136,[[["self"],["parseerror"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"eq","","",135,N],[11,"ne","","",135,N],[11,"cmp","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::btree_set","",222,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",135,[[["self"],["vec"]],["ordering"]]],[11,"cmp","","",115,[[["self"],["box"]],["ordering"]]],[11,"cmp","","",116,[[["self"],["string"]],["ordering"]]],[11,"cmp","nom::lib::std::collections","",220,[[["self"],["linkedlist"]],["ordering"]]],[11,"cmp","","",221,[[["self"],["btreemap"]],["ordering"]]],[11,"index","","Returns a reference to the value corresponding to the supplied key.",221,[[["self"],["q"]],["v"]]],[11,"index","nom::lib::std::prelude::v1::v1","",116,[[["self"],["range",["usize"]]],["str"]]],[11,"index","","",116,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","","",116,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",116,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",116,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","","",135,N],[11,"index","nom::lib::std::collections::vec_deque","",223,[[["self"],["usize"]],["a"]]],[11,"index","nom::lib::std::prelude::v1::v1","",116,[[["self"],["rangefull"]],["str"]]],[11,"resume","","",115,[[["self"]],["generatorstate"]]],[11,"reverse","nom::lib::std::cmp","Reverses the `Ordering`.",7,[[["self"]],["ordering"]]],[11,"then","","Chains two orderings.",7,[[["self"],["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",7,[[["self"],["f"]],["ordering"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::collections::hash_map","",128,[[["self"]],["i"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",143,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",143,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",143,[[["self"],["v"]],["v"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"into_iter","","",126,[[["self"]],["i"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"into_iter","","",119,[[["self"]],["i"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",11,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",11,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",11,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",11,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",11,[[["self"]],["v"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into_iter","","",121,[[["self"]],["i"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"into_iter","","",120,[[["self"]],["i"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"key","","Gets a reference to the key in the entry.",142,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",142,N],[11,"get","","Gets a reference to the value in the entry.",142,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",142,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",142,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",142,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",142,[[["self"]],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The new key in the hash map will be the key used to create this entry.",142,N],[11,"replace_key","","Replaces the key in the hash map with the key used to create this entry.",142,[[["self"]],["k"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"into_iter","","",123,[[["self"]],["i"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"into_iter","","",122,[[["self"]],["i"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"new","","Creates a new `DefaultHasher`.",134,[[],["defaulthasher"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"new","","Creates an empty `HashMap`.",118,[[],["hashmap",["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",118,[[["usize"]],["hashmap",["randomstate"]]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",118,[[["s"]],["hashmap"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",118,[[["usize"],["s"]],["hashmap"]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",118,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",118,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",118,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `HashMap<K,V>`. The collection may reserve more space to avoid frequent reallocations.",118,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",118,N],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",118,N],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",118,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",118,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",118,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",118,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",118,[[["self"]],["itermut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",118,[[["self"],["k"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",118,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",118,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",118,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",118,N],[11,"get","","Returns a reference to the value corresponding to the key.",118,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",118,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",118,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",118,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",118,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",118,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",118,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",118,N],[11,"into_iter","","",118,[[["self"]],["i"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",129,[[],["randomstate"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::collections::hash_set","",132,[[["self"]],["i"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"into_iter","","",133,[[["self"]],["i"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"into_iter","","",127,[[["self"]],["i"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"into_iter","","",124,[[["self"]],["i"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"into_iter","","",125,[[["self"]],["i"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"into_iter","","",130,[[["self"]],["i"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"into_iter","","",131,[[["self"]],["i"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"new","","Creates an empty `HashSet`.",117,[[],["hashset",["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",117,[[["usize"]],["hashset",["randomstate"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",117,[[["s"]],["hashset"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",117,[[["usize"],["s"]],["hashset"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",117,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",117,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",117,N],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",117,N],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",117,N],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",117,[[["self"]],["iter"]]],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",117,[[["self"],["hashset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",117,[[["self"],["hashset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",117,[[["self"],["hashset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",117,[[["self"],["hashset"]],["union"]]],[11,"len","","Returns the number of elements in the set.",117,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",117,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",117,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",117,N],[11,"contains","","Returns `true` if the set contains a value.",117,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",117,[[["self"],["q"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",117,[[["self"],["hashset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",117,[[["self"],["hashset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",117,[[["self"],["hashset"]],["bool"]]],[11,"insert","","Adds a value to the set.",117,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",117,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",117,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",117,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",117,N],[11,"into_iter","","",117,[[["self"]],["i"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"new","nom::lib::std::collections","Makes a new empty BTreeMap with a reasonable choice for B.",221,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all values.",221,N],[11,"get","","Returns a reference to the value corresponding to the key.",221,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",221,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",221,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",221,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",221,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",221,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",221,N],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",221,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",221,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",221,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",221,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",221,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",221,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",221,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by key.",221,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",221,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",221,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",221,[[["self"]],["bool"]]],[11,"into_iter","","",221,[[["self"]],["i"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::collections::btree_set","",241,[[["self"]],["i"]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"into_iter","","",256,[[["self"]],["i"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"into_iter","","",235,[[["self"]],["i"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"into_iter","","",254,[[["self"]],["i"]]],[11,"into","","",254,[[["self"]],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,N],[11,"from","","",254,[[["t"]],["t"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"try_into","","",254,[[["self"]],["result"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"into_iter","","",251,[[["self"]],["i"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"into_iter","","",253,[[["self"]],["i"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,N],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"into_iter","","",255,[[["self"]],["i"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,N],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"new","","Makes a new `BTreeSet` with a reasonable choice of B.",222,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",222,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",222,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",222,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",222,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",222,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",222,N],[11,"contains","","Returns `true` if the set contains a value.",222,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",222,[[["self"],["q"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",222,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",222,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",222,[[["self"],["btreeset"]],["bool"]]],[11,"insert","","Adds a value to the set.",222,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",222,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",222,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",222,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",222,N],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",222,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",222,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",222,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",222,[[["self"]],["bool"]]],[11,"into_iter","","",222,[[["self"]],["i"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"new","nom::lib::std::collections::binary_heap","Creates an empty `BinaryHeap` as a max-heap.",233,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",233,[[["usize"]],["binaryheap"]]],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",233,[[["self"]],["iter"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",233,[[["self"]],["option"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",233,[[["self"]],["option",["peekmut"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",233,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",233,N],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",233,N],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",233,N],[11,"shrink_to","","Discards capacity with a lower bound.",233,N],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",233,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",233,N],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",233,[[["self"]],["vec"]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",233,[[["self"]],["vec"]]],[11,"len","","Returns the length of the binary heap.",233,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",233,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",233,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",233,N],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",233,N],[11,"into_iter","","",233,[[["self"]],["i"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"pop","","Removes the peeked value from the heap and returns it.",230,[[["peekmut"]],["t"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"into_iter","","",242,[[["self"]],["i"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,N],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"into_iter","","",240,[[["self"]],["i"]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,N],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"into_iter","","",246,[[["self"]],["i"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"new","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque`.",223,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",223,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",223,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",223,[[["self"],["usize"]],["option"]]],[11,"swap","","Swaps elements at indices `i` and `j`.",223,N],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",223,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",223,N],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",223,N],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",223,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `VecDeque<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",223,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",223,N],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",223,N],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",223,N],[11,"iter","","Returns a front-to-back iterator.",223,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",223,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",223,N],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",223,N],[11,"len","","Returns the number of elements in the `VecDeque`.",223,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",223,[[["self"]],["bool"]]],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",223,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",223,N],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",223,[[["self"],["t"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",223,N],[11,"push_back","","Appends an element to the back of the `VecDeque`.",223,N],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",223,[[["self"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",223,[[["self"],["usize"]],["option"]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",223,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",223,N],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",223,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",223,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",223,N],[11,"retain","","Retains only the elements specified by the predicate.",223,N],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",223,N],[11,"into_iter","","",223,[[["self"]],["i"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"into_iter","","",238,[[["self"]],["i"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,N],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"into_iter","","",237,[[["self"]],["i"]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"into_iter","","",234,[[["self"]],["i"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,N],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"into_iter","","",225,[[["self"]],["i"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"into","nom::lib::std::collections","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::collections::btree_map","",244,[[["self"]],["i"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,N],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"key","","Gets a reference to the key in the entry.",258,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",258,N],[11,"get","","Gets a reference to the value in the entry.",258,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",258,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",258,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",258,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",258,[[["self"]],["v"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"into_iter","","",239,[[["self"]],["i"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"into_iter","","",228,[[["self"]],["i"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"into_iter","","",252,[[["self"]],["i"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"into_iter","","",247,[[["self"]],["i"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,N],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",257,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",257,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",257,[[["self"],["v"]],["v"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",13,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",13,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",13,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",13,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",13,[[["self"]],["v"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into_iter","","",243,[[["self"]],["i"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"into_iter","","",236,[[["self"]],["i"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"into_iter","","",245,[[["self"]],["i"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"new","nom::lib::std::collections","Creates an empty `LinkedList`.",220,[[],["linkedlist"]]],[11,"append","","Moves all elements from `other` to the end of the list.",220,N],[11,"iter","","Provides a forward iterator.",220,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",220,[[["self"]],["itermut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",220,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",220,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",220,N],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",220,[[["self"],["t"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",220,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",220,[[["self"]],["option"]]],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",220,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",220,[[["self"]],["option"]]],[11,"push_front","","Adds an element first in the list.",220,N],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",220,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list",220,N],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",220,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",220,[[["self"],["usize"]],["linkedlist"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",220,[[["self"],["f"]],["drainfilter"]]],[11,"into_iter","","",220,[[["self"]],["i"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::collections::linked_list","",249,[[["self"]],["i"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,N],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"insert_next","","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",250,N],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",250,[[["self"]],["option"]]],[11,"into_iter","","",250,[[["self"]],["i"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"into_iter","","",248,[[["self"]],["i"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"into_iter","","",231,[[["self"]],["i"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"into","nom::lib::std::ops","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"entry","nom::lib::std::fmt","Adds a new entry to the set output.",259,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set output.",259,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",259,[[["self"]],["result",["error"]]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_string","","",141,[[["self"]],["string"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"pad_integral","","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",219,[[["self"],["bool"],["str"],["str"]],["result",["error"]]]],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",219,[[["self"],["str"]],["result",["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",219,[[["self"],["str"]],["result",["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",219,[[["self"],["arguments"]],["result",["error"]]]],[11,"flags","","Flags for formatting",219,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",219,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",219,[[["self"]],["option",["alignment"]]]],[11,"width","","Optionally specified integer width that the output should be.",219,[[["self"]],["option",["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",219,[[["self"]],["option",["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",219,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",219,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",219,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",219,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",219,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",219,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",219,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",219,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",219,[[["self"]],["debugmap"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"entry","","Adds a new entry to the map output.",260,[[["self"],["debug"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map output.",260,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",260,[[["self"]],["result",["error"]]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"entry","","Adds a new entry to the list output.",261,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list output.",261,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",261,[[["self"]],["result",["error"]]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"field","","Adds a new field to the generated tuple struct output.",262,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",262,[[["self"]],["result",["error"]]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_string","","",144,[[["self"]],["string"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"field","","Adds a new field to the generated struct output.",263,[[["self"],["str"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",263,[[["self"]],["result",["error"]]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"into","nom::lib::std::hash","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",214,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",214,[[["u64"],["u64"]],["siphasher"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::iter","",186,[[["self"]],["i"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"into_iter","","",184,[[["self"]],["i"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"into_iter","","",201,[[["self"]],["i"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"into_iter","","",209,[[["self"]],["i"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"into_iter","","",181,[[["self"]],["i"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"into_iter","","",168,[[["self"]],["i"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"into_iter","","",170,[[["self"]],["i"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"into_iter","","",175,[[["self"]],["i"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"into_iter","","",164,[[["self"]],["i"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"into_iter","","",167,[[["self"]],["i"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",208,[[["self"]],["option"]]],[11,"into_iter","","",208,[[["self"]],["i"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"into_iter","","",212,[[["self"]],["i"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"into_iter","","",207,[[["self"]],["i"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"into_iter","","",159,[[["self"]],["i"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"into_iter","","",204,[[["self"]],["i"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"into_iter","","",203,[[["self"]],["i"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"into_iter","","",171,[[["self"]],["i"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"into_iter","","",197,[[["self"]],["i"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"into_iter","","",150,[[["self"]],["i"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"into_iter","","",179,[[["self"]],["i"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"into_iter","","",161,[[["self"]],["i"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"into_iter","","",182,[[["self"]],["i"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"into_iter","","",205,[[["self"]],["i"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"into_iter","","",195,[[["self"]],["i"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"into","nom::lib::std::mem","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"new","","Wrap a value to be manually dropped.",217,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extract the value from the `ManuallyDrop` container.",217,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",217,N],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"into","nom::lib::std::ops","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",60,[[["self"],["u"]],["bool"]]],[11,"into_iter","","",60,[[["self"]],["i"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",63,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",63,[[["self"]],["bool"]]],[11,"into_iter","","",63,[[["self"]],["i"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",72,[[["self"],["u"]],["bool"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",79,[[["self"],["u"]],["bool"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing `start..=end`.",153,[[["idx"],["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",153,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",153,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).",153,N],[11,"contains","","Returns `true` if `item` is contained in the range.",153,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",153,[[["self"]],["bool"]]],[11,"into_iter","","",153,[[["self"]],["i"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"is_some","nom::lib::std::prelude::v1::v1","Returns `true` if the option is a [`Some`] value.",82,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",82,[[["self"]],["bool"]]],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",82,[[["self"]],["option"]]],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",82,[[["self"]],["option"]]],[11,"as_pin_mut","","Converts from `Option<T>` to `Option<PinMut<'_, T>>`",82,[[["pinmut",["option"]]],["option",["pinmut"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",82,[[["self"],["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",82,[[["self"]],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",82,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",82,[[["self"],["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",82,[[["self"],["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",82,[[["self"],["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",82,[[["self"],["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",82,[[["self"],["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",82,[[["self"],["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",82,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",82,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",82,[[["self"],["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",82,[[["self"],["f"]],["option"]]],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",82,[[["self"],["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",82,[[["self"],["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",82,[[["self"],["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",82,[[["self"],["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",82,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",82,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",82,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a [`Some`] in its place without deinitializing either one.",82,[[["self"],["t"]],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",82,[[["self"]],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",82,[[["self"]],["option"]]],[11,"unwrap_or_default","","Returns the contained value or a default",82,[[["self"]],["t"]]],[11,"deref","","Converts from `&Option<T>` to `Option<&T::Target>`.",82,[[["self"]],["option"]]],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",82,[[["self"]],["result",["option"]]]],[11,"into_iter","","",82,[[["self"]],["i"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::option","",194,[[["self"]],["i"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"into_iter","","",151,[[["self"]],["i"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"into_iter","","",172,[[["self"]],["i"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"is_ok","nom::lib::std::prelude::v1::v1","Returns `true` if the result is [`Ok`].",83,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",83,[[["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",83,[[["self"]],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",83,[[["self"]],["option"]]],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",83,[[["self"]],["result"]]],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",83,[[["self"]],["result"]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",83,[[["self"],["f"]],["result"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a contained [`Ok`] value, or a fallback function to a contained [`Err`] value.",83,[[["self"],["f"],["m"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",83,[[["self"],["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",83,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",83,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",83,[[["self"],["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",83,[[["self"],["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",83,[[["self"],["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",83,[[["self"],["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",83,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",83,[[["self"],["f"]],["t"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",83,[[["self"]],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",83,[[["self"],["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",83,[[["self"]],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",83,[[["self"],["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",83,[[["self"]],["t"]]],[11,"deref_ok","","Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.",83,[[["self"]],["result"]]],[11,"deref_err","","Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.",83,[[["self"]],["result"]]],[11,"deref","","Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.",83,[[["self"]],["result"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",83,[[["self"]],["option",["result"]]]],[11,"into_iter","","",83,[[["self"]],["i"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::result","",191,[[["self"]],["i"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"into_iter","","",156,[[["self"]],["i"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"into_iter","","",157,[[["self"]],["i"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::slice","",187,[[["self"]],["i"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"into_iter","","",211,[[["self"]],["i"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"into_iter","","",176,[[["self"]],["i"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"into_remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",192,N],[11,"into_iter","","",192,[[["self"]],["i"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"into_iter","","",198,[[["self"]],["i"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"into_iter","","",166,[[["self"]],["i"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"as_slice","","View the underlying data as a subslice of the original data.",180,N],[11,"into_iter","","",180,[[["self"]],["i"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",189,N],[11,"into_iter","","",189,[[["self"]],["i"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"into_iter","","",210,[[["self"]],["i"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"into_iter","","",154,[[["self"]],["i"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"into_iter","","",196,[[["self"]],["i"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"into_iter","","",149,[[["self"]],["i"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"into_slice","","View the underlying data as a subslice of the original data.",185,N],[11,"into_iter","","",185,[[["self"]],["i"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"into_iter","","",200,[[["self"]],["i"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"into_iter","","",152,[[["self"]],["i"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::str","",193,[[["self"]],["i"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"into_iter","","",177,[[["self"]],["i"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"into_iter","","",163,[[["self"]],["i"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"into_iter","","",169,[[["self"]],["i"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"into_iter","","",174,[[["self"]],["i"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_string","","",140,[[["self"]],["string"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"into_iter","","",183,[[["self"]],["i"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"into_iter","","",206,[[["self"]],["i"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"into_iter","","",165,[[["self"]],["i"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"into","nom::lib::std::str::pattern","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"into_iter","nom::lib::std::str","",173,[[["self"]],["i"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"into_iter","","",160,[[["self"]],["i"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"into_iter","","",199,[[["self"]],["i"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"into_iter","","",178,[[["self"]],["i"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"into_iter","","",155,[[["self"]],["i"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",162,[[["self"]],["str"]]],[11,"into_iter","","",162,[[["self"]],["i"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"into_iter","","",202,[[["self"]],["i"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was verified.",137,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",137,[[["self"]],["option",["usize"]]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_string","","",137,[[["self"]],["string"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"into_iter","","",158,[[["self"]],["i"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",188,[[["self"]],["str"]]],[11,"into_iter","","",188,[[["self"]],["i"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"into_iter","","",190,[[["self"]],["i"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"new","nom::lib::std::prelude::v1::v1","Creates a new empty `String`.",116,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",116,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",116,[[["vec",["u8"]]],["result",["string","fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",116,N],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",116,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with [the replacement character (`U+FFFD`)][U+FFFD].",116,N],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",116,N],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",116,[[["vec",["u8"]]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",116,[[["self"]],["vec",["u8"]]]],[11,"as_str","","Extracts a string slice containing the entire `String`.",116,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",116,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",116,N],[11,"capacity","","Returns this `String`'s capacity, in bytes.",116,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",116,N],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",116,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `String`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",116,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `String`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",116,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",116,N],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",116,N],[11,"push","","Appends the given [`char`] to the end of this `String`.",116,N],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",116,N],[11,"truncate","","Shortens this `String` to the specified length.",116,N],[11,"pop","","Removes the last character from the string buffer and returns it.",116,[[["self"]],["option",["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",116,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",116,N],[11,"insert","","Inserts a character into this `String` at a byte position.",116,N],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",116,N],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",116,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes.",116,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",116,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",116,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",116,N],[11,"drain","","Creates a draining iterator that removes the specified range in the `String` and yields the removed `chars`.",116,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",116,N],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",116,[[["self"]],["box",["str"]]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_string","","",116,[[["self"]],["string"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"as_bytes","nom::lib::std::string","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",138,N],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",138,[[["self"]],["vec",["u8"]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",138,[[["self"]],["utf8error"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_string","","",138,[[["self"]],["string"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_string","","",139,[[["self"]],["string"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_string","","",136,[[["self"]],["string"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"into_iter","","",232,[[["self"]],["i"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"new","nom::lib::std::prelude::v1::v1","Constructs a new, empty `Vec<T>`.",135,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",135,[[["usize"]],["vec"]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",135,N],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",135,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",135,N],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",135,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",135,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",135,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",135,N],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",135,N],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",135,[[["self"]],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",135,N],[11,"as_slice","","Extracts a slice containing the entire vector.",135,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",135,N],[11,"set_len","","Sets the length of a vector.",135,N],[11,"swap_remove","","Removes an element from the vector and returns it.",135,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",135,N],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",135,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",135,N],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",135,N],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",135,N],[11,"push","","Appends an element to the back of a collection.",135,N],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",135,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",135,N],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",135,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",135,N],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",135,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",135,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",135,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",135,N],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",135,N],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",135,N],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",135,N],[11,"dedup","","Removes consecutive repeated elements in the vector.",135,N],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",135,[[["self"],["t"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",135,[[["self"],["r"],["i"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",135,[[["self"],["f"]],["drainfilter"]]],[11,"into_iter","","",135,[[["self"]],["i"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"as_slice","nom::lib::std::vec","Returns the remaining items of this iterator as a slice.",227,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",227,N],[11,"into_iter","","",227,[[["self"]],["i"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"into_iter","","",229,[[["self"]],["i"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"into_iter","","",224,[[["self"]],["i"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"into_iter","","",226,[[["self"]],["i"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"into","nom::simple_errors","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"split_at_position","nom::types","",97,[[["self"],["p"]],["iresult",["u32"]]]],[11,"split_at_position1","","",97,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[11,"split_at_position","","",96,[[["self"],["p"]],["iresult",["u32"]]]],[11,"split_at_position1","","",96,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_string","","",96,[[["self"]],["string"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]]],"paths":[[4,"CompareResult"],[4,"ErrorKind"],[4,"Needed"],[4,"Err"],[4,"Endianness"],[8,"FnBox"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[4,"Entry"],[4,"CollectionAllocErr"],[4,"Entry"],[4,"Bound"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Display"],[8,"UpperHex"],[8,"Debug"],[4,"Alignment"],[8,"LowerHex"],[8,"Write"],[8,"Pointer"],[8,"Octal"],[8,"UpperExp"],[8,"LowerExp"],[8,"Binary"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Sum"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Iterator"],[8,"Product"],[8,"ExactSizeIterator"],[8,"FromIterator"],[8,"Step"],[8,"Extend"],[8,"FnOnce"],[8,"Rem"],[8,"Shr"],[8,"SubAssign"],[4,"GeneratorState"],[8,"Drop"],[8,"Deref"],[8,"Not"],[8,"BitOrAssign"],[8,"Index"],[8,"RangeBounds"],[8,"ShrAssign"],[8,"FnMut"],[8,"Generator"],[8,"BitXorAssign"],[8,"Add"],[3,"RangeFrom"],[8,"RemAssign"],[8,"DerefMut"],[3,"Range"],[8,"BitAnd"],[8,"Fn"],[8,"BitXor"],[8,"Neg"],[8,"BitOr"],[8,"IndexMut"],[8,"Sub"],[8,"ShlAssign"],[3,"RangeTo"],[8,"MulAssign"],[8,"Div"],[8,"BitAndAssign"],[8,"Try"],[8,"Shl"],[8,"Mul"],[3,"RangeToInclusive"],[8,"DivAssign"],[8,"AddAssign"],[4,"Option"],[4,"Result"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"FromStr"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"ToString"],[8,"Clone"],[8,"Default"],[8,"ToOwned"],[4,"Context"],[3,"CompleteStr"],[3,"CompleteByteSlice"],[3,"Input"],[8,"InputLength"],[8,"Offset"],[8,"AsBytes"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"InputTakeAtPosition"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"AtEof"],[8,"ExtendInto"],[8,"HexDisplay"],[8,"Convert"],[3,"Box"],[3,"String"],[3,"HashSet"],[3,"HashMap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[3,"IterMut"],[3,"Iter"],[3,"ValuesMut"],[3,"RandomState"],[3,"Union"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"DefaultHasher"],[3,"Vec"],[4,"ParseError"],[3,"Utf8Error"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"ParseBoolError"],[3,"Error"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Arguments"],[3,"StrSearcher"],[3,"CharSearcher"],[3,"CharPredicateSearcher"],[3,"CharSliceSearcher"],[3,"Split"],[3,"Fuse"],[3,"IterMut"],[3,"RSplitMut"],[3,"RangeInclusive"],[3,"ChunksMut"],[3,"RMatchIndices"],[3,"IterMut"],[3,"IntoIter"],[3,"Split"],[3,"Skip"],[3,"LinesAny"],[3,"Empty"],[3,"CharIndices"],[3,"Lines"],[3,"FilterMap"],[3,"MatchIndices"],[3,"Windows"],[3,"Enumerate"],[3,"Zip"],[3,"SplitWhitespace"],[3,"Map"],[3,"FlatMap"],[3,"IntoIter"],[3,"RMatches"],[3,"RSplitTerminator"],[3,"Filter"],[3,"RSplit"],[3,"Matches"],[3,"Bytes"],[3,"Inspect"],[3,"Iter"],[3,"Chain"],[3,"Once"],[3,"SplitTerminator"],[3,"Cloned"],[3,"IterMut"],[3,"Rev"],[3,"SplitMut"],[3,"Chars"],[3,"ExactChunks"],[3,"SplitAsciiWhitespace"],[3,"Iter"],[3,"ExactChunksMut"],[3,"RSplit"],[3,"Iter"],[3,"Repeat"],[3,"Chunks"],[3,"Flatten"],[3,"RSplitN"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"Cycle"],[3,"SplitN"],[3,"Scan"],[3,"Take"],[3,"RepeatWith"],[3,"EncodeUtf16"],[3,"TakeWhile"],[3,"Peekable"],[3,"StepBy"],[3,"SplitN"],[3,"SplitNMut"],[3,"SkipWhile"],[3,"RangeFull"],[3,"SipHasher"],[3,"NoneError"],[3,"Discriminant"],[3,"ManuallyDrop"],[3,"BuildHasherDefault"],[3,"Formatter"],[3,"LinkedList"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"VecDeque"],[3,"Splice"],[3,"Drain"],[3,"DrainFilter"],[3,"IntoIter"],[3,"IntoIter"],[3,"Drain"],[3,"PeekMut"],[3,"DrainFilter"],[3,"Drain"],[3,"BinaryHeap"],[3,"IntoIter"],[3,"IntoIter"],[3,"Values"],[3,"IterMut"],[3,"Iter"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Iter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Keys"],[3,"Drain"],[3,"Range"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Range"],[3,"RangeMut"],[3,"Difference"],[3,"Union"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"DebugSet"],[3,"DebugMap"],[3,"DebugList"],[3,"DebugTuple"],[3,"DebugStruct"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"fmt","num_traits","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordered_float"]={"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[12,"0","","",0,N],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",N,N],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"partial_cmp","","",0,[[["self"],["orderedfloat"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"le","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"gt","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"ge","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["orderedfloat"]]],[11,"clone","","",0,[[["self"]],["orderedfloat"]]],[11,"into_inner","","Get the value out.",0,[[["self"]],["t"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"cmp","","",0,[[["self"],["orderedfloat"]],["ordering"]]],[11,"eq","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["f32"]]],[11,"into","","",0,[[["self"]],["f64"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"partial_cmp","","",1,[[["self"],["notnan"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"le","","",1,[[["self"],["notnan"]],["bool"]]],[11,"gt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ge","","",1,[[["self"],["notnan"]],["bool"]]],[11,"eq","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ne","","",1,[[["self"],["notnan"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["notnan"]]],[11,"clone","","",1,[[["self"]],["notnan"]]],[11,"new","","Create a NotNaN value.",1,[[["t"]],["result",["floatisnan"]]]],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,[[["t"]],["self"]]],[11,"into_inner","","Get the value out.",1,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"cmp","","",1,[[["self"],["notnan"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into","","",1,[[["self"]],["f32"]]],[11,"into","","",1,[[["self"]],["f64"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"deref","","",1,N],[11,"add","","",1,[[["self"],["self"]],["self"]]],[11,"add","","",1,[[["self"],["t"]],["self"]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["f64"]]]],[11,"add_assign","","",1,[[["self"],["f32"]]]],[11,"sub","","",1,[[["self"],["self"]],["self"]]],[11,"sub","","",1,[[["self"],["t"]],["self"]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["f64"]]]],[11,"sub_assign","","",1,[[["self"],["f32"]]]],[11,"mul","","",1,[[["self"],["self"]],["self"]]],[11,"mul","","",1,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["f64"]]]],[11,"mul_assign","","",1,[[["self"],["f32"]]]],[11,"div","","",1,[[["self"],["self"]],["self"]]],[11,"div","","",1,[[["self"],["t"]],["self"]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["f64"]]]],[11,"div_assign","","",1,[[["self"],["f32"]]]],[11,"rem","","",1,[[["self"],["self"]],["self"]]],[11,"rem","","",1,[[["self"],["t"]],["self"]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["f64"]]]],[11,"rem_assign","","",1,[[["self"],["f32"]]]],[11,"neg","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["floatisnan"]]],[11,"eq","","",2,[[["self"],["floatisnan"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into","","",2,[[["self"]],["error"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into_iter","proc_macro2::token_stream","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quick_error"]={"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[8,"ResultExt","","Result extension trait adding a `context` method",N,N],[10,"context","","The method is use to add context information to current operation",1,[[["self"],["x"]],["result",["context"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"quick_error","","Main macro that does all the work",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",N,N],[3,"Match","","Match represents a single match of a regex in a haystack.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Split","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw offsets of each submatch.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",N,N],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",N,N],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","regex","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,[[["self"]],["result",["regexset","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"clone","","",8,[[["self"]],["match"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["match"]],["bool"]]],[11,"ne","","",8,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,N],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",9,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,N],[11,"shortest_match","","Returns the end location of a match in the text given.",9,N],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",9,N],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",9,N],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",9,N],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",9,N],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search at the given offset and populates the capture locations given.",9,N],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",9,[[["self"]],["capturelocations"]]],[11,"next","","",10,[[["self"]],["option",["match"]]]],[11,"next","","",11,[[["self"]],["option",["captures"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"size_hint","","",14,N],[11,"clone","","",15,[[["self"]],["capturelocations"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",15,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",15,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",16,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",16,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",16,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",16,N],[11,"len","","Returns the number of captured groups.",16,[[["self"]],["usize"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"index","","",16,N],[11,"index","","",16,N],[11,"next","","",17,[[["self"]],["option",["option"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",18,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",18,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",19,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",19,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",19,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",19,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",19,[[["self"]],["usize"]]],[11,"clone","","",20,[[["self"]],["setmatches"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",20,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",20,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",20,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",20,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",20,N],[11,"next","","",21,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",21,N],[11,"next_back","","",21,[[["self"]],["option",["usize"]]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",22,N],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",23,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",23,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",23,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",23,N],[11,"len","","Returns the total number of regular expressions in this set.",23,[[["self"]],["usize"]]],[11,"clone","","",24,[[["self"]],["setmatches"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",24,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",24,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",24,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",24,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",24,N],[11,"next","","",25,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",25,N],[11,"next_back","","",25,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["setmatchesiter"]]],[11,"next","","",26,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",26,N],[11,"next_back","","",26,[[["self"]],["option",["usize"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",27,[[["self"]],["match"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["match"]],["bool"]]],[11,"ne","","",27,[[["self"],["match"]],["bool"]]],[11,"start","","Returns the starting byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",27,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",27,[[["self"]],["str"]]],[11,"clone","","",28,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",28,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",28,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",28,[[["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",28,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",28,[[["self"],["str"]],["option",["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",28,[[["self"],["str"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",28,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",28,[[["self"],["str"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",28,[[["self"],["str"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",28,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",28,[[["self"],["str"],["r"]],["cow",["str"]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",28,[[["self"],["str"],["usize"],["r"]],["cow",["str"]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",28,[[["self"],["str"]],["option",["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the given offset.",28,[[["self"],["str"],["usize"]],["option",["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations` instead of `Captures` in order to amortize allocations.",28,[[["self"],["capturelocations"],["str"]],["option",["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the given offset and populates the capture locations given.",28,[[["self"],["capturelocations"],["str"],["usize"]],["option",["match"]]]],[11,"as_str","","Returns the original string of this regex.",28,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",28,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",28,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be reused in multiple calls to `captures_read` or `captures_read_at`.",28,[[["self"]],["capturelocations"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"size_hint","","",29,N],[11,"next","","",30,[[["self"]],["option",["str"]]]],[11,"next","","",31,[[["self"]],["option",["str"]]]],[11,"clone","","",32,[[["self"]],["capturelocations"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"get","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",32,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",32,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",33,[[["self"],["usize"]],["option",["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",33,[[["self"],["str"]],["option",["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",33,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",33,[[["self"],["str"],["string"]]]],[11,"len","","Returns the number of captured groups.",33,[[["self"]],["usize"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"index","","",33,[[["self"],["usize"]],["str"]]],[11,"index","","",33,[[["self"],["str"]],["str"]]],[11,"next","","",34,[[["self"]],["option",["option"]]]],[11,"next","","",35,[[["self"]],["option",["captures"]]]],[11,"next","","",36,[[["self"]],["option",["match"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"replace_append","","",37,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",37,[[["self"]],["option",["cow"]]]],[11,"replace_append","","",0,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],["option",["cow"]]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",38,[[["self"],["captures"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into_iter","","",29,[[["self"]],["i"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_iter","","",30,[[["self"]],["i"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","regex::bytes","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into_iter","","",24,[[["self"]],["i"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into_iter","","",25,[[["self"]],["i"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into_iter","","",26,[[["self"]],["i"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"no_expansion","regex","Return a fixed unchanging replacement string.",38,[[["self"]],["option",["cow"]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",38,[[["self"]],["replacerref"]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","regex_syntax::ast","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into","regex_syntax::ast::parse","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into","regex_syntax::ast::print","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"into","regex_syntax::hir","",64,[[["self"]],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"into_iter","","",67,[[["self"]],["i"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"into_iter","","",70,[[["self"]],["i"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"into","regex_syntax::hir::literal","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"into","regex_syntax::hir::print","",60,[[["self"]],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"into","regex_syntax::hir::translate","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["trydemangleerror"]]],[11,"as_str","","Returns the underlying string that's being demangled.",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[11,"default","","",0,[[],["self"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"Buffer"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N],[11,"fmt","serde::de","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","serde::de::value","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","serde::ser","",40,[[["self"]],["u"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N],[11,"into","serde_json::de","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","serde_json::error","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","serde_json::ser","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into_iter","serde_json::map","",7,[[["self"]],["i"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","serde_json","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","serde_json::value","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","serde_json::de","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","serde_json::error","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","serde_json::map","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","serde_json::ser","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_yaml"]={"doc":"This crate is a Rust library for using the [Serde] serialization framework with data in [YAML] file format.","items":[[3,"Error","serde_yaml","This type represents all possible errors that can occur when serializing or deserializing YAML data.",N,N],[3,"Location","","This type represents the location that an error occured.",N,N],[3,"Mapping","","A YAML mapping in which the keys and values are both `serde_yaml::Value`.",N,N],[3,"Number","","Represents a YAML number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid YAML value.",N,N],[13,"Null","","Represents a YAML null value.",0,N],[13,"Bool","","Represents a YAML boolean.",0,N],[13,"Number","","Represents a YAML numerical value, whether integer or floating point.",0,N],[13,"String","","Represents a YAML string.",0,N],[13,"Sequence","","Represents a YAML sequence in which the elements are `serde_yaml::Value`.",0,N],[13,"Mapping","","Represents a YAML mapping in which the keys and values are both `serde_yaml::Value`.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of YAML.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of YAML text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of YAML text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of YAML.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a YAML byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as YAML into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_yaml::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.",N,[[["t"]],["result",["value","error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"index","","The byte index of the error",1,[[["self"]],["usize"]]],[11,"line","","The line of the error",1,[[["self"]],["usize"]]],[11,"column","","The column of the error",1,[[["self"]],["usize"]]],[11,"location","","Returns the Location from the error if one exists.",2,[[["self"]],["option",["location"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"clone","","",3,[[["self"]],["mapping"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["mapping"]]],[11,"hash","","",3,N],[11,"eq","","",3,[[["self"],["mapping"]],["bool"]]],[11,"ne","","",3,[[["self"],["mapping"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["mapping"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["mapping"]],["bool"]]],[11,"le","","",3,[[["self"],["mapping"]],["bool"]]],[11,"gt","","",3,[[["self"],["mapping"]],["bool"]]],[11,"ge","","",3,[[["self"],["mapping"]],["bool"]]],[11,"new","","Creates an empty YAML map.",3,[[],["self"]]],[11,"with_capacity","","Creates an empty YAML map with the given initial capacity.",3,[[["usize"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",3,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",3,[[["self"]]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",3,[[["self"],["value"],["value"]],["option",["value"]]]],[11,"contains_key","","Checks if the map contains the given key.",3,[[["self"],["value"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",3,[[["self"],["value"]],["option",["value"]]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",3,[[["self"],["value"]],["option",["value"]]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",3,[[["self"],["value"]],["option",["value"]]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",3,[[["self"]],["usize"]]],[11,"len","","Returns the number of key-value pairs in the map.",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",3,[[["self"]],["bool"]]],[11,"clear","","Clears the map of all key-value pairs.",3,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a Value, &'a Value)`.",3,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a Value, &'a mut ValuE)`.",3,[[["self"]],["itermut"]]],[11,"index","","",3,[[["self"],["value"]],["value"]]],[11,"index_mut","","",3,[[["self"],["value"]],["value"]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"from_iter","","",3,[[["i"]],["self"]]],[11,"into_iter","","",3,N],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"clone","","",4,[[["self"]],["number"]]],[11,"eq","","",4,[[["self"],["number"]],["bool"]]],[11,"ne","","",4,[[["self"],["number"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["number"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["number"]],["bool"]]],[11,"le","","",4,[[["self"],["number"]],["bool"]]],[11,"gt","","",4,[[["self"],["number"]],["bool"]]],[11,"ge","","",4,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",4,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",4,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",4,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",4,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",4,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",4,[[["self"]],["option",["f64"]]]],[11,"is_nan","","Returns true if this value is NaN and false otherwise.",4,[[["self"]],["bool"]]],[11,"is_infinite","","Returns true if this value is positive infinity or negative infinity and false otherwise.",4,[[["self"]],["bool"]]],[11,"is_finite","","Returns true if this number is neither infinite nor NaN.",4,[[["self"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",4,[[["self"],["s"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"from","","",4,[[["i8"]],["self"]]],[11,"from","","",4,[[["i16"]],["self"]]],[11,"from","","",4,[[["i32"]],["self"]]],[11,"from","","",4,[[["i64"]],["self"]]],[11,"from","","",4,[[["isize"]],["self"]]],[11,"from","","",4,[[["u8"]],["self"]]],[11,"from","","",4,[[["u16"]],["self"]]],[11,"from","","",4,[[["u32"]],["self"]]],[11,"from","","",4,[[["u64"]],["self"]]],[11,"from","","",4,[[["usize"]],["self"]]],[11,"from","","",4,[[["f32"]],["self"]]],[11,"from","","",4,[[["f64"]],["self"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","",0,[[["f32"]],["self"]]],[11,"from","","",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["mapping"]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a YAML sequence",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_yaml::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_yaml::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"eq","","Compare `str` with YAML value",0,[[["self"],["str"]],["bool"]]],[11,"eq","","Compare `&str` with YAML value",0,[[["self"],["str"]],["bool"]]],[11,"eq","","Compare YAML value with String",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_enum","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"partial_cmp","","",0,[[["self"],["value"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["value"]],["bool"]]],[11,"le","","",0,[[["self"],["value"]],["bool"]]],[11,"gt","","",0,[[["self"],["value"]],["bool"]]],[11,"ge","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a YAML sequence or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an sequence.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"is_bool","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"is_u64","","Returns true if the `Value` is an integer between `u64::MIN` and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"as_u64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_sequence","","Returns true if the `Value` is a sequence. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_sequence","","If the `Value` is a sequence, return a reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["sequence"]]]],[11,"as_sequence_mut","","If the `Value` is a sequence, return a mutable reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["sequence"]]]],[11,"is_mapping","","Returns true if the `Value` is a mapping. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_mapping","","If the `Value` is a mapping, return a reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["mapping"]]]],[11,"as_mapping_mut","","If the `Value` is a mapping, return a reference to it if possible. Returns None otherwise.",0,[[["self"]],["option",["mapping"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[6,"Result","","Alias for a `Result` with the error type `serde_yaml::Error`.",N,N],[6,"Sequence","","A YAML sequence in which the elements are `serde_yaml::Value`.",N,N],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[4,"Value"],[3,"Location"],[3,"Error"],[3,"Mapping"],[3,"Number"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[12,"attrs","","",10,N],[12,"bracket_token","","",10,N],[12,"elems","","",10,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[12,"attrs","","",11,N],[12,"left","","",11,N],[12,"eq_token","","",11,N],[12,"right","","",11,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[12,"attrs","","",12,N],[12,"left","","",12,N],[12,"op","","",12,N],[12,"right","","",12,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",13,N],[12,"left","","",13,N],[12,"op","","",13,N],[12,"right","","",13,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[12,"attrs","","",14,N],[12,"block","","",14,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[12,"attrs","","",15,N],[12,"box_token","","",15,N],[12,"expr","","",15,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[12,"attrs","","",16,N],[12,"break_token","","",16,N],[12,"label","","",16,N],[12,"expr","","",16,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",17,N],[12,"func","","",17,N],[12,"paren_token","","",17,N],[12,"args","","",17,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",18,N],[12,"expr","","",18,N],[12,"as_token","","",18,N],[12,"ty","","",18,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[12,"attrs","","",19,N],[12,"do_token","","",19,N],[12,"catch_token","","",19,N],[12,"block","","",19,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[12,"attrs","","",20,N],[12,"movability","","",20,N],[12,"capture","","",20,N],[12,"or1_token","","",20,N],[12,"inputs","","",20,N],[12,"or2_token","","",20,N],[12,"output","","",20,N],[12,"body","","",20,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[12,"attrs","","",21,N],[12,"continue_token","","",21,N],[12,"label","","",21,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",22,N],[12,"base","","",22,N],[12,"dot_token","","",22,N],[12,"member","","",22,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[12,"attrs","","",23,N],[12,"label","","",23,N],[12,"for_token","","",23,N],[12,"pat","","",23,N],[12,"in_token","","",23,N],[12,"expr","","",23,N],[12,"body","","",23,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[12,"attrs","","",24,N],[12,"group_token","","",24,N],[12,"expr","","",24,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[12,"attrs","","",25,N],[12,"if_token","","",25,N],[12,"cond","","",25,N],[12,"then_branch","","",25,N],[12,"else_branch","","",25,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[12,"attrs","","",26,N],[12,"if_token","","",26,N],[12,"let_token","","",26,N],[12,"pats","","",26,N],[12,"eq_token","","",26,N],[12,"expr","","",26,N],[12,"then_branch","","",26,N],[12,"else_branch","","",26,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[12,"attrs","","",27,N],[12,"place","","",27,N],[12,"arrow_token","","",27,N],[12,"value","","",27,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",28,N],[12,"expr","","",28,N],[12,"bracket_token","","",28,N],[12,"index","","",28,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",29,N],[12,"lit","","",29,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[12,"attrs","","",30,N],[12,"label","","",30,N],[12,"loop_token","","",30,N],[12,"body","","",30,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[12,"attrs","","",31,N],[12,"mac","","",31,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[12,"attrs","","",32,N],[12,"match_token","","",32,N],[12,"expr","","",32,N],[12,"brace_token","","",32,N],[12,"arms","","",32,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[12,"attrs","","",33,N],[12,"receiver","","",33,N],[12,"dot_token","","",33,N],[12,"method","","",33,N],[12,"turbofish","","",33,N],[12,"paren_token","","",33,N],[12,"args","","",33,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",34,N],[12,"paren_token","","",34,N],[12,"expr","","",34,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",35,N],[12,"qself","","",35,N],[12,"path","","",35,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[12,"attrs","","",36,N],[12,"from","","",36,N],[12,"limits","","",36,N],[12,"to","","",36,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[12,"attrs","","",37,N],[12,"and_token","","",37,N],[12,"mutability","","",37,N],[12,"expr","","",37,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[12,"attrs","","",38,N],[12,"bracket_token","","",38,N],[12,"expr","","",38,N],[12,"semi_token","","",38,N],[12,"len","","",38,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[12,"attrs","","",39,N],[12,"return_token","","",39,N],[12,"expr","","",39,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[12,"attrs","","",40,N],[12,"path","","",40,N],[12,"brace_token","","",40,N],[12,"fields","","",40,N],[12,"dot2_token","","",40,N],[12,"rest","","",40,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[12,"attrs","","",41,N],[12,"expr","","",41,N],[12,"question_token","","",41,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[12,"attrs","","",42,N],[12,"paren_token","","",42,N],[12,"elems","","",42,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[12,"attrs","","",43,N],[12,"expr","","",43,N],[12,"colon_token","","",43,N],[12,"ty","","",43,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",44,N],[12,"op","","",44,N],[12,"expr","","",44,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[12,"attrs","","",45,N],[12,"unsafe_token","","",45,N],[12,"block","","",45,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",46,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[12,"attrs","","",47,N],[12,"label","","",47,N],[12,"while_token","","",47,N],[12,"cond","","",47,N],[12,"body","","",47,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[12,"attrs","","",48,N],[12,"label","","",48,N],[12,"while_token","","",48,N],[12,"let_token","","",48,N],[12,"pats","","",48,N],[12,"eq_token","","",48,N],[12,"expr","","",48,N],[12,"body","","",48,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[12,"attrs","","",49,N],[12,"yield_token","","",49,N],[12,"expr","","",49,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",50,N],[12,"span","","",50,N],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true; }`.",N,N],[12,"attrs","","",51,N],[12,"leading_vert","","",51,N],[12,"pats","","",51,N],[12,"guard","","",51,N],[12,"fat_arrow_token","","",51,N],[12,"body","","",51,N],[12,"comma","","",51,N],[3,"Block","","A braced block containing Rust statements.",N,N],[12,"brace_token","","",52,N],[12,"stmts","","Statements in a block",52,N],[3,"FieldPat","","A single field in a struct pattern.",N,N],[12,"attrs","","",53,N],[12,"member","","",53,N],[12,"colon_token","","",53,N],[12,"pat","","",53,N],[3,"FieldValue","","A field-value pair in a struct literal.",N,N],[12,"attrs","","Attributes tagged on the field.",54,N],[12,"member","","Name or index of the field.",54,N],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand like `Struct { x }`, there is no colon.",54,N],[12,"expr","","Value of the field.",54,N],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",N,N],[12,"name","","",55,N],[12,"colon_token","","",55,N],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",N,N],[12,"attrs","","",56,N],[12,"let_token","","",56,N],[12,"pats","","",56,N],[12,"ty","","",56,N],[12,"init","","",56,N],[12,"semi_token","","",56,N],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method call: `parse::<u64>()`.",N,N],[12,"colon2_token","","",57,N],[12,"lt_token","","",57,N],[12,"args","","",57,N],[12,"gt_token","","",57,N],[3,"PatBox","","A box pattern: `box v`.",N,N],[12,"box_token","","",58,N],[12,"pat","","",58,N],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",N,N],[12,"by_ref","","",59,N],[12,"mutability","","",59,N],[12,"ident","","",59,N],[12,"subpat","","",59,N],[3,"PatLit","","A literal pattern: `0`.",N,N],[12,"expr","","",60,N],[3,"PatMacro","","A macro in expression position.",N,N],[12,"mac","","",61,N],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified with a self-type.",N,N],[12,"qself","","",62,N],[12,"path","","",62,N],[3,"PatRange","","A range pattern: `1..=2`.",N,N],[12,"lo","","",63,N],[12,"limits","","",63,N],[12,"hi","","",63,N],[3,"PatRef","","A reference pattern: `&mut (first, second)`.",N,N],[12,"and_token","","",64,N],[12,"mutability","","",64,N],[12,"pat","","",64,N],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",N,N],[12,"bracket_token","","",65,N],[12,"front","","",65,N],[12,"middle","","",65,N],[12,"dot2_token","","",65,N],[12,"comma_token","","",65,N],[12,"back","","",65,N],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",N,N],[12,"path","","",66,N],[12,"brace_token","","",66,N],[12,"fields","","",66,N],[12,"dot2_token","","",66,N],[3,"PatTuple","","A tuple pattern: `(a, b)`.",N,N],[12,"paren_token","","",67,N],[12,"front","","",67,N],[12,"dot2_token","","",67,N],[12,"comma_token","","",67,N],[12,"back","","",67,N],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",N,N],[12,"path","","",68,N],[12,"pat","","",68,N],[3,"PatVerbatim","","Tokens in pattern position not interpreted by Syn.",N,N],[12,"tts","","",69,N],[3,"PatWild","","A pattern that matches any value: `_`.",N,N],[12,"underscore_token","","",70,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",71,N],[12,"lt_token","","",71,N],[12,"lifetimes","","",71,N],[12,"gt_token","","",71,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",72,N],[12,"const_token","","",72,N],[12,"ident","","",72,N],[12,"colon_token","","",72,N],[12,"ty","","",72,N],[12,"eq_token","","",72,N],[12,"default","","",72,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",73,N],[12,"params","","",73,N],[12,"gt_token","","",73,N],[12,"where_clause","","",73,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",74,N],[12,"lifetime","","",74,N],[12,"colon_token","","",74,N],[12,"bounds","","",74,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",75,N],[12,"eq_token","","",75,N],[12,"rhs_ty","","",75,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",76,N],[12,"colon_token","","",76,N],[12,"bounds","","",76,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",77,N],[12,"bounded_ty","","The type being bounded",77,N],[12,"colon_token","","",77,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",77,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",78,N],[12,"modifier","","",78,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",78,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",78,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",79,N],[12,"ident","","",79,N],[12,"colon_token","","",79,N],[12,"bounds","","",79,N],[12,"eq_token","","",79,N],[12,"default","","",79,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",80,N],[12,"predicates","","",80,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"ArgCaptured","","An explicitly typed pattern captured by a function signature.",N,N],[12,"pat","","",81,N],[12,"colon_token","","",81,N],[12,"ty","","",81,N],[3,"ArgSelf","","Self captured by value in a function signature: `self` or `mut self`.",N,N],[12,"mutability","","",82,N],[12,"self_token","","",82,N],[3,"ArgSelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",N,N],[12,"and_token","","",83,N],[12,"lifetime","","",83,N],[12,"mutability","","",83,N],[12,"self_token","","",83,N],[3,"FnDecl","","Header of a function declaration, without including the body.",N,N],[12,"fn_token","","",84,N],[12,"generics","","",84,N],[12,"paren_token","","",84,N],[12,"inputs","","",84,N],[12,"variadic","","",84,N],[12,"output","","",84,N],[3,"ForeignItemFn","","A foreign function in an `extern` block.",N,N],[12,"attrs","","",85,N],[12,"vis","","",85,N],[12,"ident","","",85,N],[12,"decl","","",85,N],[12,"semi_token","","",85,N],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext: u8`.",N,N],[12,"attrs","","",86,N],[12,"vis","","",86,N],[12,"static_token","","",86,N],[12,"mutability","","",86,N],[12,"ident","","",86,N],[12,"colon_token","","",86,N],[12,"ty","","",86,N],[12,"semi_token","","",86,N],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",N,N],[12,"attrs","","",87,N],[12,"vis","","",87,N],[12,"type_token","","",87,N],[12,"ident","","",87,N],[12,"semi_token","","",87,N],[3,"ForeignItemVerbatim","","Tokens in an `extern` block not interpreted by Syn.",N,N],[12,"tts","","",88,N],[3,"ImplItemConst","","An associated constant within an impl block.",N,N],[12,"attrs","","",89,N],[12,"vis","","",89,N],[12,"defaultness","","",89,N],[12,"const_token","","",89,N],[12,"ident","","",89,N],[12,"colon_token","","",89,N],[12,"ty","","",89,N],[12,"eq_token","","",89,N],[12,"expr","","",89,N],[12,"semi_token","","",89,N],[3,"ImplItemMacro","","A macro invocation within an impl block.",N,N],[12,"attrs","","",90,N],[12,"mac","","",90,N],[12,"semi_token","","",90,N],[3,"ImplItemMethod","","A method within an impl block.",N,N],[12,"attrs","","",91,N],[12,"vis","","",91,N],[12,"defaultness","","",91,N],[12,"sig","","",91,N],[12,"block","","",91,N],[3,"ImplItemType","","An associated type within an impl block.",N,N],[12,"attrs","","",92,N],[12,"vis","","",92,N],[12,"defaultness","","",92,N],[12,"type_token","","",92,N],[12,"ident","","",92,N],[12,"generics","","",92,N],[12,"eq_token","","",92,N],[12,"ty","","",92,N],[12,"semi_token","","",92,N],[3,"ImplItemVerbatim","","Tokens within an impl block not interpreted by Syn.",N,N],[12,"tts","","",93,N],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",N,N],[12,"attrs","","",94,N],[12,"vis","","",94,N],[12,"const_token","","",94,N],[12,"ident","","",94,N],[12,"colon_token","","",94,N],[12,"ty","","",94,N],[12,"eq_token","","",94,N],[12,"expr","","",94,N],[12,"semi_token","","",94,N],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",N,N],[12,"attrs","","",95,N],[12,"vis","","",95,N],[12,"enum_token","","",95,N],[12,"ident","","",95,N],[12,"generics","","",95,N],[12,"brace_token","","",95,N],[12,"variants","","",95,N],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",N,N],[12,"attrs","","",96,N],[12,"vis","","",96,N],[12,"extern_token","","",96,N],[12,"crate_token","","",96,N],[12,"ident","","",96,N],[12,"rename","","",96,N],[12,"semi_token","","",96,N],[3,"ItemFn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",N,N],[12,"attrs","","",97,N],[12,"vis","","",97,N],[12,"constness","","",97,N],[12,"unsafety","","",97,N],[12,"abi","","",97,N],[12,"ident","","",97,N],[12,"decl","","",97,N],[12,"block","","",97,N],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",N,N],[12,"attrs","","",98,N],[12,"abi","","",98,N],[12,"brace_token","","",98,N],[12,"items","","",98,N],[3,"ItemImpl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",N,N],[12,"attrs","","",99,N],[12,"defaultness","","",99,N],[12,"unsafety","","",99,N],[12,"impl_token","","",99,N],[12,"generics","","",99,N],[12,"trait_","","Trait this impl implements.",99,N],[12,"self_ty","","The Self type of the impl.",99,N],[12,"brace_token","","",99,N],[12,"items","","",99,N],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!` definitions.",N,N],[12,"attrs","","",100,N],[12,"ident","","The `example` in `macro_rules! example { ... }`.",100,N],[12,"mac","","",100,N],[12,"semi_token","","",100,N],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",N,N],[12,"attrs","","",101,N],[12,"vis","","",101,N],[12,"macro_token","","",101,N],[12,"ident","","",101,N],[12,"paren_token","","",101,N],[12,"args","","",101,N],[12,"brace_token","","",101,N],[12,"body","","",101,N],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",N,N],[12,"attrs","","",102,N],[12,"vis","","",102,N],[12,"mod_token","","",102,N],[12,"ident","","",102,N],[12,"content","","",102,N],[12,"semi","","",102,N],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",N,N],[12,"attrs","","",103,N],[12,"vis","","",103,N],[12,"static_token","","",103,N],[12,"mutability","","",103,N],[12,"ident","","",103,N],[12,"colon_token","","",103,N],[12,"ty","","",103,N],[12,"eq_token","","",103,N],[12,"expr","","",103,N],[12,"semi_token","","",103,N],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",N,N],[12,"attrs","","",104,N],[12,"vis","","",104,N],[12,"struct_token","","",104,N],[12,"ident","","",104,N],[12,"generics","","",104,N],[12,"fields","","",104,N],[12,"semi_token","","",104,N],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",N,N],[12,"attrs","","",105,N],[12,"vis","","",105,N],[12,"unsafety","","",105,N],[12,"auto_token","","",105,N],[12,"trait_token","","",105,N],[12,"ident","","",105,N],[12,"generics","","",105,N],[12,"colon_token","","",105,N],[12,"supertraits","","",105,N],[12,"brace_token","","",105,N],[12,"items","","",105,N],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",N,N],[12,"attrs","","",106,N],[12,"vis","","",106,N],[12,"type_token","","",106,N],[12,"ident","","",106,N],[12,"generics","","",106,N],[12,"eq_token","","",106,N],[12,"ty","","",106,N],[12,"semi_token","","",106,N],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",N,N],[12,"attrs","","",107,N],[12,"vis","","",107,N],[12,"union_token","","",107,N],[12,"ident","","",107,N],[12,"generics","","",107,N],[12,"fields","","",107,N],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",N,N],[12,"attrs","","",108,N],[12,"vis","","",108,N],[12,"use_token","","",108,N],[12,"leading_colon","","",108,N],[12,"tree","","",108,N],[12,"semi_token","","",108,N],[3,"ItemVerbatim","","Tokens forming an item not interpreted by Syn.",N,N],[12,"tts","","",109,N],[3,"MethodSig","","A method's signature in a trait or implementation: `unsafe fn initialize(&self)`.",N,N],[12,"constness","","",110,N],[12,"unsafety","","",110,N],[12,"abi","","",110,N],[12,"ident","","",110,N],[12,"decl","","",110,N],[3,"TraitItemConst","","An associated constant within the definition of a trait.",N,N],[12,"attrs","","",111,N],[12,"const_token","","",111,N],[12,"ident","","",111,N],[12,"colon_token","","",111,N],[12,"ty","","",111,N],[12,"default","","",111,N],[12,"semi_token","","",111,N],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",N,N],[12,"attrs","","",112,N],[12,"mac","","",112,N],[12,"semi_token","","",112,N],[3,"TraitItemMethod","","A trait method within the definition of a trait.",N,N],[12,"attrs","","",113,N],[12,"sig","","",113,N],[12,"default","","",113,N],[12,"semi_token","","",113,N],[3,"TraitItemType","","An associated type within the definition of a trait.",N,N],[12,"attrs","","",114,N],[12,"type_token","","",114,N],[12,"ident","","",114,N],[12,"generics","","",114,N],[12,"colon_token","","",114,N],[12,"bounds","","",114,N],[12,"default","","",114,N],[12,"semi_token","","",114,N],[3,"TraitItemVerbatim","","Tokens within the definition of a trait not interpreted by Syn.",N,N],[12,"tts","","",115,N],[3,"UseGlob","","A glob import in a `use` item: `*`.",N,N],[12,"star_token","","",116,N],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",N,N],[12,"brace_token","","",117,N],[12,"items","","",117,N],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",N,N],[12,"ident","","",118,N],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",N,N],[12,"ident","","",119,N],[12,"colon2_token","","",119,N],[12,"tree","","",119,N],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",N,N],[12,"ident","","",120,N],[12,"as_token","","",120,N],[12,"rename","","",120,N],[3,"File","","A complete file of Rust source code.",N,N],[12,"shebang","","",121,N],[12,"attrs","","",121,N],[12,"items","","",121,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",122,N],[12,"ident","","",122,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",123,N],[12,"span","","",123,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",124,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",125,N],[12,"bang_token","","",125,N],[12,"delimiter","","",125,N],[12,"tts","","",125,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",126,N],[12,"brace_token","","",126,N],[12,"variants","","",126,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",127,N],[12,"fields","","",127,N],[12,"semi_token","","",127,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",128,N],[12,"fields","","",128,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",129,N],[12,"vis","","Visibility of the struct or enum.",129,N],[12,"ident","","Name of the struct or enum.",129,N],[12,"generics","","Generics required to complete the definition.",129,N],[12,"data","","Data within the struct or enum.",129,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",130,N],[12,"name","","",130,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",131,N],[12,"ty","","",131,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",132,N],[12,"elem","","",132,N],[12,"semi_token","","",132,N],[12,"len","","",132,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",133,N],[12,"abi","","",133,N],[12,"fn_token","","",133,N],[12,"lifetimes","","",133,N],[12,"paren_token","","",133,N],[12,"inputs","","",133,N],[12,"variadic","","",133,N],[12,"output","","",133,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",134,N],[12,"elem","","",134,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",135,N],[12,"bounds","","",135,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",136,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",137,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",138,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",139,N],[12,"elem","","",139,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",140,N],[12,"path","","",140,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",141,N],[12,"const_token","","",141,N],[12,"mutability","","",141,N],[12,"elem","","",141,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",142,N],[12,"lifetime","","",142,N],[12,"mutability","","",142,N],[12,"elem","","",142,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",143,N],[12,"elem","","",143,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",144,N],[12,"bounds","","",144,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",145,N],[12,"elems","","",145,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",146,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",147,N],[12,"1","","",147,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",148,N],[12,"lt_token","","",148,N],[12,"args","","",148,N],[12,"gt_token","","",148,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",149,N],[12,"eq_token","","",149,N],[12,"ty","","",149,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",150,N],[12,"inputs","","`(A, B)`",150,N],[12,"output","","`C`",150,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",151,N],[12,"segments","","",151,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",152,N],[12,"arguments","","",152,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",153,N],[12,"ty","","",153,N],[12,"position","","",153,N],[12,"as_token","","",153,N],[12,"gt_token","","",153,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",154,N],[13,"Inner","","",154,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",155,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",155,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",155,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",156,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",156,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",157,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",157,N],[13,"Unit","","Unit struct or unit variant such as `None`.",157,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",158,N],[13,"Crate","","A crate-level visibility: `crate`.",158,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",158,N],[13,"Inherited","","An inherited visibility, which usually means private.",158,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",159,N],[13,"InPlace","","A placement expression: `place <- value`.",159,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",159,N],[13,"Call","","A function call expression: `invoke(a, b)`.",159,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",159,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",159,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",159,N],[13,"Unary","","A unary operation: `!x`, `*x`.",159,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",159,N],[13,"Cast","","A cast expression: `foo as f64`.",159,N],[13,"Type","","A type ascription expression: `foo: f64`.",159,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",159,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",159,N],[13,"While","","A while loop: `while expr { ... }`.",159,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",159,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",159,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",159,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",159,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",159,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",159,N],[13,"Block","","A blocked scope: `{ ... }`.",159,N],[13,"Assign","","An assignment expression: `a = compute()`.",159,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",159,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",159,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",159,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",159,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",159,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",159,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",159,N],[13,"Continue","","A `continue`, with an optional label.",159,N],[13,"Return","","A `return`, with an optional value to be returned.",159,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",159,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",159,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",159,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",159,N],[13,"Group","","An expression contained within invisible delimiters.",159,N],[13,"Try","","A try-expression: `expr?`.",159,N],[13,"Catch","","A catch expression: `do catch { ... }`.",159,N],[13,"Yield","","A yield expression: `yield expr`.",159,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",159,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",160,N],[13,"Unnamed","","An unnamed field like `self.0`.",160,N],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",N,N],[13,"Type","","A type argument.",161,N],[13,"Const","","A const expression. Must be inside of a block.",161,N],[4,"Pat","","A pattern in a local binding, function signature, match expression, or various other places.",N,N],[13,"Wild","","A pattern that matches any value: `_`.",162,N],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @ SUBPATTERN`.",162,N],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",162,N],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y, .., z)`.",162,N],[13,"Path","","A path pattern like `Color::Red`, optionally qualified with a self-type.",162,N],[13,"Tuple","","A tuple pattern: `(a, b)`.",162,N],[13,"Box","","A box pattern: `box v`.",162,N],[13,"Ref","","A reference pattern: `&mut (first, second)`.",162,N],[13,"Lit","","A literal pattern: `0`.",162,N],[13,"Range","","A range pattern: `1..=2`.",162,N],[13,"Slice","","A dynamically sized slice pattern: `[a, b, i.., y, z]`.",162,N],[13,"Macro","","A macro in expression position.",162,N],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",162,N],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",N,N],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",163,N],[13,"Closed","","Inclusive at the beginning and end.",163,N],[4,"Stmt","","A statement, usually ending in a semicolon.",N,N],[13,"Local","","A local (let) binding.",164,N],[13,"Item","","An item definition.",164,N],[13,"Expr","","Expr without trailing semicolon.",164,N],[13,"Semi","","Expression with trailing semicolon.",164,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",165,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",165,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",165,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",166,N],[13,"Maybe","","",166,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",167,N],[13,"Lifetime","","",167,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",168,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",168,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",168,N],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn f(n: usize)`.",N,N],[13,"SelfRef","","Self captured by reference in a function signature: `&self` or `&mut self`.",169,N],[13,"SelfValue","","Self captured by value in a function signature: `self` or `mut self`.",169,N],[13,"Captured","","An explicitly typed pattern captured by a function signature.",169,N],[13,"Inferred","","A pattern whose type is inferred captured by a function signature.",169,N],[13,"Ignored","","A type not bound to any pattern in a function signature.",169,N],[4,"ForeignItem","","An item within an `extern` block.",N,N],[13,"Fn","","A foreign function in an `extern` block.",170,N],[13,"Static","","A foreign static item in an `extern` block: `static ext: u8`.",170,N],[13,"Type","","A foreign type in an `extern` block: `type void`.",170,N],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",170,N],[4,"ImplItem","","An item within an impl block.",N,N],[13,"Const","","An associated constant within an impl block.",171,N],[13,"Method","","A method within an impl block.",171,N],[13,"Type","","An associated type within an impl block.",171,N],[13,"Macro","","A macro invocation within an impl block.",171,N],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",171,N],[4,"Item","","Things that can appear directly inside of a module or scope.",N,N],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",172,N],[13,"Use","","A use declaration: `use std::collections::HashMap`.",172,N],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",172,N],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",172,N],[13,"Fn","","A free-standing function: `fn process(n: usize) -> Result<()> { ... }`.",172,N],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",172,N],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",172,N],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T, MyError>`.",172,N],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",172,N],[13,"Enum","","An enum definition: `enum Foo<A, B> { C<A>, D<B> }`.",172,N],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",172,N],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",172,N],[13,"Impl","","An impl block providing trait or associated items: `impl<A> Trait for Data<A> { ... }`.",172,N],[13,"Macro","","A macro invocation, which includes `macro_rules!` definitions.",172,N],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro` keyword.",172,N],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",172,N],[4,"TraitItem","","An item declaration within the definition of a trait.",N,N],[13,"Const","","An associated constant within the definition of a trait.",173,N],[13,"Method","","A trait method within the definition of a trait.",173,N],[13,"Type","","An associated type within the definition of a trait.",173,N],[13,"Macro","","A macro invocation within the definition of a trait.",173,N],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by Syn.",173,N],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.",N,N],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",174,N],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",174,N],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap as Map`.",174,N],[13,"Glob","","A glob import in a `use` item: `*`.",174,N],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",174,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",175,N],[13,"F64","","",175,N],[13,"None","","",175,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",176,N],[13,"I16","","",176,N],[13,"I32","","",176,N],[13,"I64","","",176,N],[13,"I128","","",176,N],[13,"Isize","","",176,N],[13,"U8","","",176,N],[13,"U16","","",176,N],[13,"U32","","",176,N],[13,"U64","","",176,N],[13,"U128","","",176,N],[13,"Usize","","",176,N],[13,"None","","",176,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",177,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",177,N],[13,"Byte","","A byte literal: `b'f'`.",177,N],[13,"Char","","A character literal: `'a'`.",177,N],[13,"Int","","An integer literal: `1` or `1u16`.",177,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",177,N],[13,"Bool","","A boolean literal: `true` or `false`.",177,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",177,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",178,N],[13,"Raw","","A raw string like `r##\"data\"##`.",178,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",179,N],[13,"Brace","","",179,N],[13,"Bracket","","",179,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",180,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",180,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",180,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",181,N],[13,"Sub","","The `-` operator (subtraction)",181,N],[13,"Mul","","The `*` operator (multiplication)",181,N],[13,"Div","","The `/` operator (division)",181,N],[13,"Rem","","The `%` operator (modulus)",181,N],[13,"And","","The `&&` operator (logical and)",181,N],[13,"Or","","The `||` operator (logical or)",181,N],[13,"BitXor","","The `^` operator (bitwise xor)",181,N],[13,"BitAnd","","The `&` operator (bitwise and)",181,N],[13,"BitOr","","The `|` operator (bitwise or)",181,N],[13,"Shl","","The `<<` operator (shift left)",181,N],[13,"Shr","","The `>>` operator (shift right)",181,N],[13,"Eq","","The `==` operator (equality)",181,N],[13,"Lt","","The `<` operator (less than)",181,N],[13,"Le","","The `<=` operator (less than or equal to)",181,N],[13,"Ne","","The `!=` operator (not equal to)",181,N],[13,"Ge","","The `>=` operator (greater than or equal to)",181,N],[13,"Gt","","The `>` operator (greater than)",181,N],[13,"AddEq","","The `+=` operator",181,N],[13,"SubEq","","The `-=` operator",181,N],[13,"MulEq","","The `*=` operator",181,N],[13,"DivEq","","The `/=` operator",181,N],[13,"RemEq","","The `%=` operator",181,N],[13,"BitXorEq","","The `^=` operator",181,N],[13,"BitAndEq","","The `&=` operator",181,N],[13,"BitOrEq","","The `|=` operator",181,N],[13,"ShlEq","","The `<<=` operator",181,N],[13,"ShrEq","","The `>>=` operator",181,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",182,N],[13,"Not","","The `!` operator for logical inversion",182,N],[13,"Neg","","The `-` operator for negation",182,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",183,N],[13,"Wild","","Argument not given a name, matched with `_`.",183,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",184,N],[13,"Type","","A particular type is returned.",184,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",185,N],[13,"Array","","A fixed size array type: `[T; n]`.",185,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",185,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",185,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",185,N],[13,"Never","","The never type: `!`.",185,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",185,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",185,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",185,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",185,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",185,N],[13,"Group","","A type contained within invisible delimiters.",185,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",185,N],[13,"Macro","","A macro in the type position.",185,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",185,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",186,N],[13,"Type","","A type argument.",186,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",186,N],[13,"Const","","A const expression. Must be inside of a block.",186,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",187,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",187,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",187,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",N,[[["str"]],["result",["file","parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"0","","",188,N],[3,"Apostrophe","","`'`",N,N],[12,"0","","",189,N],[3,"Add","","`+`",N,N],[12,"0","","",190,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",191,N],[3,"And","","`&`",N,N],[12,"0","","",192,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",193,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",194,N],[3,"At","","`@`",N,N],[12,"0","","",195,N],[3,"Bang","","`!`",N,N],[12,"0","","",196,N],[3,"Caret","","`^`",N,N],[12,"0","","",197,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",198,N],[3,"Colon","","`:`",N,N],[12,"0","","",199,N],[3,"Colon2","","`::`",N,N],[12,"0","","",200,N],[3,"Comma","","`,`",N,N],[12,"0","","",201,N],[3,"Div","","`/`",N,N],[12,"0","","",202,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",203,N],[3,"Dollar","","`$`",N,N],[12,"0","","",204,N],[3,"Dot","","`.`",N,N],[12,"0","","",205,N],[3,"Dot2","","`..`",N,N],[12,"0","","",206,N],[3,"Dot3","","`...`",N,N],[12,"0","","",207,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",208,N],[3,"Eq","","`=`",N,N],[12,"0","","",209,N],[3,"EqEq","","`==`",N,N],[12,"0","","",210,N],[3,"Ge","","`>=`",N,N],[12,"0","","",211,N],[3,"Gt","","`>`",N,N],[12,"0","","",212,N],[3,"Le","","`<=`",N,N],[12,"0","","",213,N],[3,"Lt","","`<`",N,N],[12,"0","","",214,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",215,N],[3,"Ne","","`!=`",N,N],[12,"0","","",216,N],[3,"Or","","`|`",N,N],[12,"0","","",217,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",218,N],[3,"OrOr","","`||`",N,N],[12,"0","","",219,N],[3,"Pound","","`#`",N,N],[12,"0","","",220,N],[3,"Question","","`?`",N,N],[12,"0","","",221,N],[3,"RArrow","","`->`",N,N],[12,"0","","",222,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",223,N],[3,"Rem","","`%`",N,N],[12,"0","","",224,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",225,N],[3,"FatArrow","","`=>`",N,N],[12,"0","","",226,N],[3,"Semi","","`;`",N,N],[12,"0","","",227,N],[3,"Shl","","`<<`",N,N],[12,"0","","",228,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",229,N],[3,"Shr","","`>>`",N,N],[12,"0","","",230,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",231,N],[3,"Star","","`*`",N,N],[12,"0","","",232,N],[3,"Sub","","`-`",N,N],[12,"0","","",233,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",234,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",235,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",236,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",237,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",238,N],[3,"As","","`as`",N,N],[12,"0","","",239,N],[3,"Async","","`async`",N,N],[12,"0","","",240,N],[3,"Auto","","`auto`",N,N],[12,"0","","",241,N],[3,"Box","","`box`",N,N],[12,"0","","",242,N],[3,"Break","","`break`",N,N],[12,"0","","",243,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",244,N],[3,"Catch","","`catch`",N,N],[12,"0","","",245,N],[3,"Const","","`const`",N,N],[12,"0","","",246,N],[3,"Continue","","`continue`",N,N],[12,"0","","",247,N],[3,"Crate","","`crate`",N,N],[12,"0","","",248,N],[3,"Default","","`default`",N,N],[12,"0","","",249,N],[3,"Do","","`do`",N,N],[12,"0","","",250,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",251,N],[3,"Else","","`else`",N,N],[12,"0","","",252,N],[3,"Enum","","`enum`",N,N],[12,"0","","",253,N],[3,"Extern","","`extern`",N,N],[12,"0","","",254,N],[3,"Fn","","`fn`",N,N],[12,"0","","",255,N],[3,"For","","`for`",N,N],[12,"0","","",256,N],[3,"If","","`if`",N,N],[12,"0","","",257,N],[3,"Impl","","`impl`",N,N],[12,"0","","",258,N],[3,"In","","`in`",N,N],[12,"0","","",259,N],[3,"Let","","`let`",N,N],[12,"0","","",260,N],[3,"Loop","","`loop`",N,N],[12,"0","","",261,N],[3,"Macro","","`macro`",N,N],[12,"0","","",262,N],[3,"Match","","`match`",N,N],[12,"0","","",263,N],[3,"Mod","","`mod`",N,N],[12,"0","","",264,N],[3,"Move","","`move`",N,N],[12,"0","","",265,N],[3,"Mut","","`mut`",N,N],[12,"0","","",266,N],[3,"Pub","","`pub`",N,N],[12,"0","","",267,N],[3,"Ref","","`ref`",N,N],[12,"0","","",268,N],[3,"Return","","`return`",N,N],[12,"0","","",269,N],[3,"Self_","","`self`",N,N],[12,"0","","",270,N],[3,"Static","","`static`",N,N],[12,"0","","",271,N],[3,"Struct","","`struct`",N,N],[12,"0","","",272,N],[3,"Super","","`super`",N,N],[12,"0","","",273,N],[3,"Trait","","`trait`",N,N],[12,"0","","",274,N],[3,"Type","","`type`",N,N],[12,"0","","",275,N],[3,"Union","","`union`",N,N],[12,"0","","",276,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",277,N],[3,"Use","","`use`",N,N],[12,"0","","",278,N],[3,"Where","","`where`",N,N],[12,"0","","",279,N],[3,"While","","`while`",N,N],[12,"0","","",280,N],[3,"Yield","","`yield`",N,N],[12,"0","","",281,N],[11,"clone","","",188,[[["self"]],["underscore"]]],[11,"new","","",188,[[["span"]],["self"]]],[11,"default","","",188,[[],["self"]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"eq","","",188,[[["self"],["underscore"]],["bool"]]],[11,"hash","","",188,[[["self"],["h"]]]],[11,"from","","",188,[[["span"]],["self"]]],[11,"to_tokens","","",188,[[["self"],["tokenstream"]]]],[11,"parse","","",188,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",188,[[],["option",["str"]]]],[11,"clone","","",189,[[["self"]],["apostrophe"]]],[11,"new","","",189,[[["span"]],["self"]]],[11,"default","","",189,[[],["self"]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"eq","","",189,[[["self"],["apostrophe"]],["bool"]]],[11,"hash","","",189,[[["self"],["h"]]]],[11,"from","","",189,[[["span"]],["self"]]],[11,"to_tokens","","",189,[[["self"],["tokenstream"]]]],[11,"parse","","",189,[[["cursor"]],["presult",["apostrophe"]]]],[11,"description","","",189,[[],["option",["str"]]]],[11,"clone","","",190,[[["self"]],["add"]]],[11,"new","","",190,[[["span"]],["self"]]],[11,"default","","",190,[[],["self"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"eq","","",190,[[["self"],["add"]],["bool"]]],[11,"hash","","",190,[[["self"],["h"]]]],[11,"from","","",190,[[["span"]],["self"]]],[11,"clone","","",191,[[["self"]],["addeq"]]],[11,"new","","",191,[[["span"]],["self"]]],[11,"default","","",191,[[],["self"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"eq","","",191,[[["self"],["addeq"]],["bool"]]],[11,"hash","","",191,[[["self"],["h"]]]],[11,"from","","",191,[[["span"]],["self"]]],[11,"clone","","",192,[[["self"]],["and"]]],[11,"new","","",192,[[["span"]],["self"]]],[11,"default","","",192,[[],["self"]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"eq","","",192,[[["self"],["and"]],["bool"]]],[11,"hash","","",192,[[["self"],["h"]]]],[11,"from","","",192,[[["span"]],["self"]]],[11,"clone","","",193,[[["self"]],["andand"]]],[11,"new","","",193,[[["span"]],["self"]]],[11,"default","","",193,[[],["self"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"eq","","",193,[[["self"],["andand"]],["bool"]]],[11,"hash","","",193,[[["self"],["h"]]]],[11,"from","","",193,[[["span"]],["self"]]],[11,"clone","","",194,[[["self"]],["andeq"]]],[11,"new","","",194,[[["span"]],["self"]]],[11,"default","","",194,[[],["self"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"eq","","",194,[[["self"],["andeq"]],["bool"]]],[11,"hash","","",194,[[["self"],["h"]]]],[11,"from","","",194,[[["span"]],["self"]]],[11,"clone","","",195,[[["self"]],["at"]]],[11,"new","","",195,[[["span"]],["self"]]],[11,"default","","",195,[[],["self"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"eq","","",195,[[["self"],["at"]],["bool"]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"from","","",195,[[["span"]],["self"]]],[11,"clone","","",196,[[["self"]],["bang"]]],[11,"new","","",196,[[["span"]],["self"]]],[11,"default","","",196,[[],["self"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"eq","","",196,[[["self"],["bang"]],["bool"]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"from","","",196,[[["span"]],["self"]]],[11,"clone","","",197,[[["self"]],["caret"]]],[11,"new","","",197,[[["span"]],["self"]]],[11,"default","","",197,[[],["self"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"eq","","",197,[[["self"],["caret"]],["bool"]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"from","","",197,[[["span"]],["self"]]],[11,"clone","","",198,[[["self"]],["careteq"]]],[11,"new","","",198,[[["span"]],["self"]]],[11,"default","","",198,[[],["self"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"eq","","",198,[[["self"],["careteq"]],["bool"]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"from","","",198,[[["span"]],["self"]]],[11,"clone","","",199,[[["self"]],["colon"]]],[11,"new","","",199,[[["span"]],["self"]]],[11,"default","","",199,[[],["self"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"eq","","",199,[[["self"],["colon"]],["bool"]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"from","","",199,[[["span"]],["self"]]],[11,"clone","","",200,[[["self"]],["colon2"]]],[11,"new","","",200,[[["span"]],["self"]]],[11,"default","","",200,[[],["self"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"eq","","",200,[[["self"],["colon2"]],["bool"]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"from","","",200,[[["span"]],["self"]]],[11,"clone","","",201,[[["self"]],["comma"]]],[11,"new","","",201,[[["span"]],["self"]]],[11,"default","","",201,[[],["self"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"eq","","",201,[[["self"],["comma"]],["bool"]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"from","","",201,[[["span"]],["self"]]],[11,"clone","","",202,[[["self"]],["div"]]],[11,"new","","",202,[[["span"]],["self"]]],[11,"default","","",202,[[],["self"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"eq","","",202,[[["self"],["div"]],["bool"]]],[11,"hash","","",202,[[["self"],["h"]]]],[11,"from","","",202,[[["span"]],["self"]]],[11,"clone","","",203,[[["self"]],["diveq"]]],[11,"new","","",203,[[["span"]],["self"]]],[11,"default","","",203,[[],["self"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"eq","","",203,[[["self"],["diveq"]],["bool"]]],[11,"hash","","",203,[[["self"],["h"]]]],[11,"from","","",203,[[["span"]],["self"]]],[11,"clone","","",204,[[["self"]],["dollar"]]],[11,"new","","",204,[[["span"]],["self"]]],[11,"default","","",204,[[],["self"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"eq","","",204,[[["self"],["dollar"]],["bool"]]],[11,"hash","","",204,[[["self"],["h"]]]],[11,"from","","",204,[[["span"]],["self"]]],[11,"clone","","",205,[[["self"]],["dot"]]],[11,"new","","",205,[[["span"]],["self"]]],[11,"default","","",205,[[],["self"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"eq","","",205,[[["self"],["dot"]],["bool"]]],[11,"hash","","",205,[[["self"],["h"]]]],[11,"from","","",205,[[["span"]],["self"]]],[11,"clone","","",206,[[["self"]],["dot2"]]],[11,"new","","",206,[[["span"]],["self"]]],[11,"default","","",206,[[],["self"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"eq","","",206,[[["self"],["dot2"]],["bool"]]],[11,"hash","","",206,[[["self"],["h"]]]],[11,"from","","",206,[[["span"]],["self"]]],[11,"clone","","",207,[[["self"]],["dot3"]]],[11,"new","","",207,[[["span"]],["self"]]],[11,"default","","",207,[[],["self"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"eq","","",207,[[["self"],["dot3"]],["bool"]]],[11,"hash","","",207,[[["self"],["h"]]]],[11,"from","","",207,[[["span"]],["self"]]],[11,"clone","","",208,[[["self"]],["dotdoteq"]]],[11,"new","","",208,[[["span"]],["self"]]],[11,"default","","",208,[[],["self"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"eq","","",208,[[["self"],["dotdoteq"]],["bool"]]],[11,"hash","","",208,[[["self"],["h"]]]],[11,"from","","",208,[[["span"]],["self"]]],[11,"clone","","",209,[[["self"]],["eq"]]],[11,"new","","",209,[[["span"]],["self"]]],[11,"default","","",209,[[],["self"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"eq","","",209,[[["self"],["eq"]],["bool"]]],[11,"hash","","",209,[[["self"],["h"]]]],[11,"from","","",209,[[["span"]],["self"]]],[11,"clone","","",210,[[["self"]],["eqeq"]]],[11,"new","","",210,[[["span"]],["self"]]],[11,"default","","",210,[[],["self"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"eq","","",210,[[["self"],["eqeq"]],["bool"]]],[11,"hash","","",210,[[["self"],["h"]]]],[11,"from","","",210,[[["span"]],["self"]]],[11,"clone","","",211,[[["self"]],["ge"]]],[11,"new","","",211,[[["span"]],["self"]]],[11,"default","","",211,[[],["self"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"eq","","",211,[[["self"],["ge"]],["bool"]]],[11,"hash","","",211,[[["self"],["h"]]]],[11,"from","","",211,[[["span"]],["self"]]],[11,"clone","","",212,[[["self"]],["gt"]]],[11,"new","","",212,[[["span"]],["self"]]],[11,"default","","",212,[[],["self"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"eq","","",212,[[["self"],["gt"]],["bool"]]],[11,"hash","","",212,[[["self"],["h"]]]],[11,"from","","",212,[[["span"]],["self"]]],[11,"clone","","",213,[[["self"]],["le"]]],[11,"new","","",213,[[["span"]],["self"]]],[11,"default","","",213,[[],["self"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"eq","","",213,[[["self"],["le"]],["bool"]]],[11,"hash","","",213,[[["self"],["h"]]]],[11,"from","","",213,[[["span"]],["self"]]],[11,"clone","","",214,[[["self"]],["lt"]]],[11,"new","","",214,[[["span"]],["self"]]],[11,"default","","",214,[[],["self"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"eq","","",214,[[["self"],["lt"]],["bool"]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"from","","",214,[[["span"]],["self"]]],[11,"clone","","",215,[[["self"]],["muleq"]]],[11,"new","","",215,[[["span"]],["self"]]],[11,"default","","",215,[[],["self"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"eq","","",215,[[["self"],["muleq"]],["bool"]]],[11,"hash","","",215,[[["self"],["h"]]]],[11,"from","","",215,[[["span"]],["self"]]],[11,"clone","","",216,[[["self"]],["ne"]]],[11,"new","","",216,[[["span"]],["self"]]],[11,"default","","",216,[[],["self"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"eq","","",216,[[["self"],["ne"]],["bool"]]],[11,"hash","","",216,[[["self"],["h"]]]],[11,"from","","",216,[[["span"]],["self"]]],[11,"clone","","",217,[[["self"]],["or"]]],[11,"new","","",217,[[["span"]],["self"]]],[11,"default","","",217,[[],["self"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"eq","","",217,[[["self"],["or"]],["bool"]]],[11,"hash","","",217,[[["self"],["h"]]]],[11,"from","","",217,[[["span"]],["self"]]],[11,"clone","","",218,[[["self"]],["oreq"]]],[11,"new","","",218,[[["span"]],["self"]]],[11,"default","","",218,[[],["self"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"eq","","",218,[[["self"],["oreq"]],["bool"]]],[11,"hash","","",218,[[["self"],["h"]]]],[11,"from","","",218,[[["span"]],["self"]]],[11,"clone","","",219,[[["self"]],["oror"]]],[11,"new","","",219,[[["span"]],["self"]]],[11,"default","","",219,[[],["self"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"eq","","",219,[[["self"],["oror"]],["bool"]]],[11,"hash","","",219,[[["self"],["h"]]]],[11,"from","","",219,[[["span"]],["self"]]],[11,"clone","","",220,[[["self"]],["pound"]]],[11,"new","","",220,[[["span"]],["self"]]],[11,"default","","",220,[[],["self"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"eq","","",220,[[["self"],["pound"]],["bool"]]],[11,"hash","","",220,[[["self"],["h"]]]],[11,"from","","",220,[[["span"]],["self"]]],[11,"clone","","",221,[[["self"]],["question"]]],[11,"new","","",221,[[["span"]],["self"]]],[11,"default","","",221,[[],["self"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"eq","","",221,[[["self"],["question"]],["bool"]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"from","","",221,[[["span"]],["self"]]],[11,"clone","","",222,[[["self"]],["rarrow"]]],[11,"new","","",222,[[["span"]],["self"]]],[11,"default","","",222,[[],["self"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"eq","","",222,[[["self"],["rarrow"]],["bool"]]],[11,"hash","","",222,[[["self"],["h"]]]],[11,"from","","",222,[[["span"]],["self"]]],[11,"clone","","",223,[[["self"]],["larrow"]]],[11,"new","","",223,[[["span"]],["self"]]],[11,"default","","",223,[[],["self"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"eq","","",223,[[["self"],["larrow"]],["bool"]]],[11,"hash","","",223,[[["self"],["h"]]]],[11,"from","","",223,[[["span"]],["self"]]],[11,"clone","","",224,[[["self"]],["rem"]]],[11,"new","","",224,[[["span"]],["self"]]],[11,"default","","",224,[[],["self"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"eq","","",224,[[["self"],["rem"]],["bool"]]],[11,"hash","","",224,[[["self"],["h"]]]],[11,"from","","",224,[[["span"]],["self"]]],[11,"clone","","",225,[[["self"]],["remeq"]]],[11,"new","","",225,[[["span"]],["self"]]],[11,"default","","",225,[[],["self"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"eq","","",225,[[["self"],["remeq"]],["bool"]]],[11,"hash","","",225,[[["self"],["h"]]]],[11,"from","","",225,[[["span"]],["self"]]],[11,"clone","","",226,[[["self"]],["fatarrow"]]],[11,"new","","",226,[[["span"]],["self"]]],[11,"default","","",226,[[],["self"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"eq","","",226,[[["self"],["fatarrow"]],["bool"]]],[11,"hash","","",226,[[["self"],["h"]]]],[11,"from","","",226,[[["span"]],["self"]]],[11,"clone","","",227,[[["self"]],["semi"]]],[11,"new","","",227,[[["span"]],["self"]]],[11,"default","","",227,[[],["self"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"eq","","",227,[[["self"],["semi"]],["bool"]]],[11,"hash","","",227,[[["self"],["h"]]]],[11,"from","","",227,[[["span"]],["self"]]],[11,"clone","","",228,[[["self"]],["shl"]]],[11,"new","","",228,[[["span"]],["self"]]],[11,"default","","",228,[[],["self"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"eq","","",228,[[["self"],["shl"]],["bool"]]],[11,"hash","","",228,[[["self"],["h"]]]],[11,"from","","",228,[[["span"]],["self"]]],[11,"clone","","",229,[[["self"]],["shleq"]]],[11,"new","","",229,[[["span"]],["self"]]],[11,"default","","",229,[[],["self"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"eq","","",229,[[["self"],["shleq"]],["bool"]]],[11,"hash","","",229,[[["self"],["h"]]]],[11,"from","","",229,[[["span"]],["self"]]],[11,"clone","","",230,[[["self"]],["shr"]]],[11,"new","","",230,[[["span"]],["self"]]],[11,"default","","",230,[[],["self"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"eq","","",230,[[["self"],["shr"]],["bool"]]],[11,"hash","","",230,[[["self"],["h"]]]],[11,"from","","",230,[[["span"]],["self"]]],[11,"clone","","",231,[[["self"]],["shreq"]]],[11,"new","","",231,[[["span"]],["self"]]],[11,"default","","",231,[[],["self"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"eq","","",231,[[["self"],["shreq"]],["bool"]]],[11,"hash","","",231,[[["self"],["h"]]]],[11,"from","","",231,[[["span"]],["self"]]],[11,"clone","","",232,[[["self"]],["star"]]],[11,"new","","",232,[[["span"]],["self"]]],[11,"default","","",232,[[],["self"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"eq","","",232,[[["self"],["star"]],["bool"]]],[11,"hash","","",232,[[["self"],["h"]]]],[11,"from","","",232,[[["span"]],["self"]]],[11,"clone","","",233,[[["self"]],["sub"]]],[11,"new","","",233,[[["span"]],["self"]]],[11,"default","","",233,[[],["self"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"eq","","",233,[[["self"],["sub"]],["bool"]]],[11,"hash","","",233,[[["self"],["h"]]]],[11,"from","","",233,[[["span"]],["self"]]],[11,"clone","","",234,[[["self"]],["subeq"]]],[11,"new","","",234,[[["span"]],["self"]]],[11,"default","","",234,[[],["self"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"eq","","",234,[[["self"],["subeq"]],["bool"]]],[11,"hash","","",234,[[["self"],["h"]]]],[11,"from","","",234,[[["span"]],["self"]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"parse","","",190,[[["cursor"]],["presult",["add"]]]],[11,"description","","",190,[[],["option",["str"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"parse","","",191,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",191,[[],["option",["str"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"parse","","",192,[[["cursor"]],["presult",["and"]]]],[11,"description","","",192,[[],["option",["str"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"parse","","",193,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",193,[[],["option",["str"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"parse","","",194,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",194,[[],["option",["str"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"parse","","",195,[[["cursor"]],["presult",["at"]]]],[11,"description","","",195,[[],["option",["str"]]]],[11,"to_tokens","","",196,[[["self"],["tokenstream"]]]],[11,"parse","","",196,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",196,[[],["option",["str"]]]],[11,"to_tokens","","",197,[[["self"],["tokenstream"]]]],[11,"parse","","",197,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",197,[[],["option",["str"]]]],[11,"to_tokens","","",198,[[["self"],["tokenstream"]]]],[11,"parse","","",198,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",198,[[],["option",["str"]]]],[11,"to_tokens","","",199,[[["self"],["tokenstream"]]]],[11,"parse","","",199,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",199,[[],["option",["str"]]]],[11,"to_tokens","","",200,[[["self"],["tokenstream"]]]],[11,"parse","","",200,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",200,[[],["option",["str"]]]],[11,"to_tokens","","",201,[[["self"],["tokenstream"]]]],[11,"parse","","",201,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",201,[[],["option",["str"]]]],[11,"to_tokens","","",202,[[["self"],["tokenstream"]]]],[11,"parse","","",202,[[["cursor"]],["presult",["div"]]]],[11,"description","","",202,[[],["option",["str"]]]],[11,"to_tokens","","",203,[[["self"],["tokenstream"]]]],[11,"parse","","",203,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",203,[[],["option",["str"]]]],[11,"to_tokens","","",204,[[["self"],["tokenstream"]]]],[11,"parse","","",204,[[["cursor"]],["presult",["dollar"]]]],[11,"description","","",204,[[],["option",["str"]]]],[11,"to_tokens","","",205,[[["self"],["tokenstream"]]]],[11,"parse","","",205,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",205,[[],["option",["str"]]]],[11,"to_tokens","","",206,[[["self"],["tokenstream"]]]],[11,"parse","","",206,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",206,[[],["option",["str"]]]],[11,"to_tokens","","",207,[[["self"],["tokenstream"]]]],[11,"parse","","",207,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",207,[[],["option",["str"]]]],[11,"to_tokens","","",208,[[["self"],["tokenstream"]]]],[11,"parse","","",208,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",208,[[],["option",["str"]]]],[11,"to_tokens","","",209,[[["self"],["tokenstream"]]]],[11,"parse","","",209,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",209,[[],["option",["str"]]]],[11,"to_tokens","","",210,[[["self"],["tokenstream"]]]],[11,"parse","","",210,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",210,[[],["option",["str"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"parse","","",211,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",211,[[],["option",["str"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"parse","","",212,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",212,[[],["option",["str"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"parse","","",213,[[["cursor"]],["presult",["le"]]]],[11,"description","","",213,[[],["option",["str"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"parse","","",214,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",214,[[],["option",["str"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"parse","","",215,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",215,[[],["option",["str"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"parse","","",216,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",216,[[],["option",["str"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"parse","","",217,[[["cursor"]],["presult",["or"]]]],[11,"description","","",217,[[],["option",["str"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"parse","","",218,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",218,[[],["option",["str"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"parse","","",219,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",219,[[],["option",["str"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"parse","","",220,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",220,[[],["option",["str"]]]],[11,"to_tokens","","",221,[[["self"],["tokenstream"]]]],[11,"parse","","",221,[[["cursor"]],["presult",["question"]]]],[11,"description","","",221,[[],["option",["str"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"parse","","",222,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",222,[[],["option",["str"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"parse","","",223,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",223,[[],["option",["str"]]]],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"parse","","",224,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",224,[[],["option",["str"]]]],[11,"to_tokens","","",225,[[["self"],["tokenstream"]]]],[11,"parse","","",225,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",225,[[],["option",["str"]]]],[11,"to_tokens","","",226,[[["self"],["tokenstream"]]]],[11,"parse","","",226,[[["cursor"]],["presult",["fatarrow"]]]],[11,"description","","",226,[[],["option",["str"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"parse","","",227,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",227,[[],["option",["str"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"parse","","",228,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",228,[[],["option",["str"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"parse","","",229,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",229,[[],["option",["str"]]]],[11,"to_tokens","","",230,[[["self"],["tokenstream"]]]],[11,"parse","","",230,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",230,[[],["option",["str"]]]],[11,"to_tokens","","",231,[[["self"],["tokenstream"]]]],[11,"parse","","",231,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",231,[[],["option",["str"]]]],[11,"to_tokens","","",232,[[["self"],["tokenstream"]]]],[11,"parse","","",232,[[["cursor"]],["presult",["star"]]]],[11,"description","","",232,[[],["option",["str"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"parse","","",233,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",233,[[],["option",["str"]]]],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"parse","","",234,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",234,[[],["option",["str"]]]],[11,"clone","","",235,[[["self"]],["brace"]]],[11,"default","","",235,[[],["self"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"eq","","",235,[[["self"],["brace"]],["bool"]]],[11,"hash","","",235,[[["self"],["h"]]]],[11,"surround","","",235,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",235,[[["cursor"],["f"]],["presult"]]],[11,"from","","",235,[[["span"]],["self"]]],[11,"clone","","",236,[[["self"]],["bracket"]]],[11,"default","","",236,[[],["self"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"eq","","",236,[[["self"],["bracket"]],["bool"]]],[11,"hash","","",236,[[["self"],["h"]]]],[11,"surround","","",236,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",236,[[["cursor"],["f"]],["presult"]]],[11,"from","","",236,[[["span"]],["self"]]],[11,"clone","","",237,[[["self"]],["paren"]]],[11,"default","","",237,[[],["self"]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result"]]],[11,"eq","","",237,[[["self"],["paren"]],["bool"]]],[11,"hash","","",237,[[["self"],["h"]]]],[11,"surround","","",237,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",237,[[["cursor"],["f"]],["presult"]]],[11,"from","","",237,[[["span"]],["self"]]],[11,"clone","","",238,[[["self"]],["group"]]],[11,"default","","",238,[[],["self"]]],[11,"fmt","","",238,[[["self"],["formatter"]],["result"]]],[11,"eq","","",238,[[["self"],["group"]],["bool"]]],[11,"hash","","",238,[[["self"],["h"]]]],[11,"surround","","",238,[[["self"],["tokenstream"],["f"]]]],[11,"parse","","",238,[[["cursor"],["f"]],["presult"]]],[11,"from","","",238,[[["span"]],["self"]]],[11,"clone","","",239,[[["self"]],["as"]]],[11,"default","","",239,[[],["self"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"eq","","",239,[[["self"],["as"]],["bool"]]],[11,"hash","","",239,[[["self"],["h"]]]],[11,"to_tokens","","",239,[[["self"],["tokenstream"]]]],[11,"parse","","",239,[[["cursor"]],["presult",["as"]]]],[11,"description","","",239,[[],["option",["str"]]]],[11,"from","","",239,[[["span"]],["self"]]],[11,"clone","","",240,[[["self"]],["async"]]],[11,"default","","",240,[[],["self"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"eq","","",240,[[["self"],["async"]],["bool"]]],[11,"hash","","",240,[[["self"],["h"]]]],[11,"to_tokens","","",240,[[["self"],["tokenstream"]]]],[11,"parse","","",240,[[["cursor"]],["presult",["async"]]]],[11,"description","","",240,[[],["option",["str"]]]],[11,"from","","",240,[[["span"]],["self"]]],[11,"clone","","",241,[[["self"]],["auto"]]],[11,"default","","",241,[[],["self"]]],[11,"fmt","","",241,[[["self"],["formatter"]],["result"]]],[11,"eq","","",241,[[["self"],["auto"]],["bool"]]],[11,"hash","","",241,[[["self"],["h"]]]],[11,"to_tokens","","",241,[[["self"],["tokenstream"]]]],[11,"parse","","",241,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",241,[[],["option",["str"]]]],[11,"from","","",241,[[["span"]],["self"]]],[11,"clone","","",242,[[["self"]],["box"]]],[11,"default","","",242,[[],["self"]]],[11,"fmt","","",242,[[["self"],["formatter"]],["result"]]],[11,"eq","","",242,[[["self"],["box"]],["bool"]]],[11,"hash","","",242,[[["self"],["h"]]]],[11,"to_tokens","","",242,[[["self"],["tokenstream"]]]],[11,"parse","","",242,[[["cursor"]],["presult",["box"]]]],[11,"description","","",242,[[],["option",["str"]]]],[11,"from","","",242,[[["span"]],["self"]]],[11,"clone","","",243,[[["self"]],["break"]]],[11,"default","","",243,[[],["self"]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result"]]],[11,"eq","","",243,[[["self"],["break"]],["bool"]]],[11,"hash","","",243,[[["self"],["h"]]]],[11,"to_tokens","","",243,[[["self"],["tokenstream"]]]],[11,"parse","","",243,[[["cursor"]],["presult",["break"]]]],[11,"description","","",243,[[],["option",["str"]]]],[11,"from","","",243,[[["span"]],["self"]]],[11,"clone","","",244,[[["self"]],["capself"]]],[11,"default","","",244,[[],["self"]]],[11,"fmt","","",244,[[["self"],["formatter"]],["result"]]],[11,"eq","","",244,[[["self"],["capself"]],["bool"]]],[11,"hash","","",244,[[["self"],["h"]]]],[11,"to_tokens","","",244,[[["self"],["tokenstream"]]]],[11,"parse","","",244,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",244,[[],["option",["str"]]]],[11,"from","","",244,[[["span"]],["self"]]],[11,"clone","","",245,[[["self"]],["catch"]]],[11,"default","","",245,[[],["self"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"eq","","",245,[[["self"],["catch"]],["bool"]]],[11,"hash","","",245,[[["self"],["h"]]]],[11,"to_tokens","","",245,[[["self"],["tokenstream"]]]],[11,"parse","","",245,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",245,[[],["option",["str"]]]],[11,"from","","",245,[[["span"]],["self"]]],[11,"clone","","",246,[[["self"]],["const"]]],[11,"default","","",246,[[],["self"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"eq","","",246,[[["self"],["const"]],["bool"]]],[11,"hash","","",246,[[["self"],["h"]]]],[11,"to_tokens","","",246,[[["self"],["tokenstream"]]]],[11,"parse","","",246,[[["cursor"]],["presult",["const"]]]],[11,"description","","",246,[[],["option",["str"]]]],[11,"from","","",246,[[["span"]],["self"]]],[11,"clone","","",247,[[["self"]],["continue"]]],[11,"default","","",247,[[],["self"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"eq","","",247,[[["self"],["continue"]],["bool"]]],[11,"hash","","",247,[[["self"],["h"]]]],[11,"to_tokens","","",247,[[["self"],["tokenstream"]]]],[11,"parse","","",247,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",247,[[],["option",["str"]]]],[11,"from","","",247,[[["span"]],["self"]]],[11,"clone","","",248,[[["self"]],["crate"]]],[11,"default","","",248,[[],["self"]]],[11,"fmt","","",248,[[["self"],["formatter"]],["result"]]],[11,"eq","","",248,[[["self"],["crate"]],["bool"]]],[11,"hash","","",248,[[["self"],["h"]]]],[11,"to_tokens","","",248,[[["self"],["tokenstream"]]]],[11,"parse","","",248,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",248,[[],["option",["str"]]]],[11,"from","","",248,[[["span"]],["self"]]],[11,"clone","","",249,[[["self"]],["default"]]],[11,"default","","",249,[[],["self"]]],[11,"fmt","","",249,[[["self"],["formatter"]],["result"]]],[11,"eq","","",249,[[["self"],["default"]],["bool"]]],[11,"hash","","",249,[[["self"],["h"]]]],[11,"to_tokens","","",249,[[["self"],["tokenstream"]]]],[11,"parse","","",249,[[["cursor"]],["presult",["default"]]]],[11,"description","","",249,[[],["option",["str"]]]],[11,"from","","",249,[[["span"]],["self"]]],[11,"clone","","",250,[[["self"]],["do"]]],[11,"default","","",250,[[],["self"]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result"]]],[11,"eq","","",250,[[["self"],["do"]],["bool"]]],[11,"hash","","",250,[[["self"],["h"]]]],[11,"to_tokens","","",250,[[["self"],["tokenstream"]]]],[11,"parse","","",250,[[["cursor"]],["presult",["do"]]]],[11,"description","","",250,[[],["option",["str"]]]],[11,"from","","",250,[[["span"]],["self"]]],[11,"clone","","",251,[[["self"]],["dyn"]]],[11,"default","","",251,[[],["self"]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result"]]],[11,"eq","","",251,[[["self"],["dyn"]],["bool"]]],[11,"hash","","",251,[[["self"],["h"]]]],[11,"to_tokens","","",251,[[["self"],["tokenstream"]]]],[11,"parse","","",251,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",251,[[],["option",["str"]]]],[11,"from","","",251,[[["span"]],["self"]]],[11,"clone","","",252,[[["self"]],["else"]]],[11,"default","","",252,[[],["self"]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result"]]],[11,"eq","","",252,[[["self"],["else"]],["bool"]]],[11,"hash","","",252,[[["self"],["h"]]]],[11,"to_tokens","","",252,[[["self"],["tokenstream"]]]],[11,"parse","","",252,[[["cursor"]],["presult",["else"]]]],[11,"description","","",252,[[],["option",["str"]]]],[11,"from","","",252,[[["span"]],["self"]]],[11,"clone","","",253,[[["self"]],["enum"]]],[11,"default","","",253,[[],["self"]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result"]]],[11,"eq","","",253,[[["self"],["enum"]],["bool"]]],[11,"hash","","",253,[[["self"],["h"]]]],[11,"to_tokens","","",253,[[["self"],["tokenstream"]]]],[11,"parse","","",253,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",253,[[],["option",["str"]]]],[11,"from","","",253,[[["span"]],["self"]]],[11,"clone","","",254,[[["self"]],["extern"]]],[11,"default","","",254,[[],["self"]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result"]]],[11,"eq","","",254,[[["self"],["extern"]],["bool"]]],[11,"hash","","",254,[[["self"],["h"]]]],[11,"to_tokens","","",254,[[["self"],["tokenstream"]]]],[11,"parse","","",254,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",254,[[],["option",["str"]]]],[11,"from","","",254,[[["span"]],["self"]]],[11,"clone","","",255,[[["self"]],["fn"]]],[11,"default","","",255,[[],["self"]]],[11,"fmt","","",255,[[["self"],["formatter"]],["result"]]],[11,"eq","","",255,[[["self"],["fn"]],["bool"]]],[11,"hash","","",255,[[["self"],["h"]]]],[11,"to_tokens","","",255,[[["self"],["tokenstream"]]]],[11,"parse","","",255,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",255,[[],["option",["str"]]]],[11,"from","","",255,[[["span"]],["self"]]],[11,"clone","","",256,[[["self"]],["for"]]],[11,"default","","",256,[[],["self"]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result"]]],[11,"eq","","",256,[[["self"],["for"]],["bool"]]],[11,"hash","","",256,[[["self"],["h"]]]],[11,"to_tokens","","",256,[[["self"],["tokenstream"]]]],[11,"parse","","",256,[[["cursor"]],["presult",["for"]]]],[11,"description","","",256,[[],["option",["str"]]]],[11,"from","","",256,[[["span"]],["self"]]],[11,"clone","","",257,[[["self"]],["if"]]],[11,"default","","",257,[[],["self"]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result"]]],[11,"eq","","",257,[[["self"],["if"]],["bool"]]],[11,"hash","","",257,[[["self"],["h"]]]],[11,"to_tokens","","",257,[[["self"],["tokenstream"]]]],[11,"parse","","",257,[[["cursor"]],["presult",["if"]]]],[11,"description","","",257,[[],["option",["str"]]]],[11,"from","","",257,[[["span"]],["self"]]],[11,"clone","","",258,[[["self"]],["impl"]]],[11,"default","","",258,[[],["self"]]],[11,"fmt","","",258,[[["self"],["formatter"]],["result"]]],[11,"eq","","",258,[[["self"],["impl"]],["bool"]]],[11,"hash","","",258,[[["self"],["h"]]]],[11,"to_tokens","","",258,[[["self"],["tokenstream"]]]],[11,"parse","","",258,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",258,[[],["option",["str"]]]],[11,"from","","",258,[[["span"]],["self"]]],[11,"clone","","",259,[[["self"]],["in"]]],[11,"default","","",259,[[],["self"]]],[11,"fmt","","",259,[[["self"],["formatter"]],["result"]]],[11,"eq","","",259,[[["self"],["in"]],["bool"]]],[11,"hash","","",259,[[["self"],["h"]]]],[11,"to_tokens","","",259,[[["self"],["tokenstream"]]]],[11,"parse","","",259,[[["cursor"]],["presult",["in"]]]],[11,"description","","",259,[[],["option",["str"]]]],[11,"from","","",259,[[["span"]],["self"]]],[11,"clone","","",260,[[["self"]],["let"]]],[11,"default","","",260,[[],["self"]]],[11,"fmt","","",260,[[["self"],["formatter"]],["result"]]],[11,"eq","","",260,[[["self"],["let"]],["bool"]]],[11,"hash","","",260,[[["self"],["h"]]]],[11,"to_tokens","","",260,[[["self"],["tokenstream"]]]],[11,"parse","","",260,[[["cursor"]],["presult",["let"]]]],[11,"description","","",260,[[],["option",["str"]]]],[11,"from","","",260,[[["span"]],["self"]]],[11,"clone","","",261,[[["self"]],["loop"]]],[11,"default","","",261,[[],["self"]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result"]]],[11,"eq","","",261,[[["self"],["loop"]],["bool"]]],[11,"hash","","",261,[[["self"],["h"]]]],[11,"to_tokens","","",261,[[["self"],["tokenstream"]]]],[11,"parse","","",261,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",261,[[],["option",["str"]]]],[11,"from","","",261,[[["span"]],["self"]]],[11,"clone","","",262,[[["self"]],["macro"]]],[11,"default","","",262,[[],["self"]]],[11,"fmt","","",262,[[["self"],["formatter"]],["result"]]],[11,"eq","","",262,[[["self"],["macro"]],["bool"]]],[11,"hash","","",262,[[["self"],["h"]]]],[11,"to_tokens","","",262,[[["self"],["tokenstream"]]]],[11,"parse","","",262,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",262,[[],["option",["str"]]]],[11,"from","","",262,[[["span"]],["self"]]],[11,"clone","","",263,[[["self"]],["match"]]],[11,"default","","",263,[[],["self"]]],[11,"fmt","","",263,[[["self"],["formatter"]],["result"]]],[11,"eq","","",263,[[["self"],["match"]],["bool"]]],[11,"hash","","",263,[[["self"],["h"]]]],[11,"to_tokens","","",263,[[["self"],["tokenstream"]]]],[11,"parse","","",263,[[["cursor"]],["presult",["match"]]]],[11,"description","","",263,[[],["option",["str"]]]],[11,"from","","",263,[[["span"]],["self"]]],[11,"clone","","",264,[[["self"]],["mod"]]],[11,"default","","",264,[[],["self"]]],[11,"fmt","","",264,[[["self"],["formatter"]],["result"]]],[11,"eq","","",264,[[["self"],["mod"]],["bool"]]],[11,"hash","","",264,[[["self"],["h"]]]],[11,"to_tokens","","",264,[[["self"],["tokenstream"]]]],[11,"parse","","",264,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",264,[[],["option",["str"]]]],[11,"from","","",264,[[["span"]],["self"]]],[11,"clone","","",265,[[["self"]],["move"]]],[11,"default","","",265,[[],["self"]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result"]]],[11,"eq","","",265,[[["self"],["move"]],["bool"]]],[11,"hash","","",265,[[["self"],["h"]]]],[11,"to_tokens","","",265,[[["self"],["tokenstream"]]]],[11,"parse","","",265,[[["cursor"]],["presult",["move"]]]],[11,"description","","",265,[[],["option",["str"]]]],[11,"from","","",265,[[["span"]],["self"]]],[11,"clone","","",266,[[["self"]],["mut"]]],[11,"default","","",266,[[],["self"]]],[11,"fmt","","",266,[[["self"],["formatter"]],["result"]]],[11,"eq","","",266,[[["self"],["mut"]],["bool"]]],[11,"hash","","",266,[[["self"],["h"]]]],[11,"to_tokens","","",266,[[["self"],["tokenstream"]]]],[11,"parse","","",266,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",266,[[],["option",["str"]]]],[11,"from","","",266,[[["span"]],["self"]]],[11,"clone","","",267,[[["self"]],["pub"]]],[11,"default","","",267,[[],["self"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"eq","","",267,[[["self"],["pub"]],["bool"]]],[11,"hash","","",267,[[["self"],["h"]]]],[11,"to_tokens","","",267,[[["self"],["tokenstream"]]]],[11,"parse","","",267,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",267,[[],["option",["str"]]]],[11,"from","","",267,[[["span"]],["self"]]],[11,"clone","","",268,[[["self"]],["ref"]]],[11,"default","","",268,[[],["self"]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result"]]],[11,"eq","","",268,[[["self"],["ref"]],["bool"]]],[11,"hash","","",268,[[["self"],["h"]]]],[11,"to_tokens","","",268,[[["self"],["tokenstream"]]]],[11,"parse","","",268,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",268,[[],["option",["str"]]]],[11,"from","","",268,[[["span"]],["self"]]],[11,"clone","","",269,[[["self"]],["return"]]],[11,"default","","",269,[[],["self"]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result"]]],[11,"eq","","",269,[[["self"],["return"]],["bool"]]],[11,"hash","","",269,[[["self"],["h"]]]],[11,"to_tokens","","",269,[[["self"],["tokenstream"]]]],[11,"parse","","",269,[[["cursor"]],["presult",["return"]]]],[11,"description","","",269,[[],["option",["str"]]]],[11,"from","","",269,[[["span"]],["self"]]],[11,"clone","","",270,[[["self"]],["self_"]]],[11,"default","","",270,[[],["self"]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result"]]],[11,"eq","","",270,[[["self"],["self_"]],["bool"]]],[11,"hash","","",270,[[["self"],["h"]]]],[11,"to_tokens","","",270,[[["self"],["tokenstream"]]]],[11,"parse","","",270,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",270,[[],["option",["str"]]]],[11,"from","","",270,[[["span"]],["self"]]],[11,"clone","","",271,[[["self"]],["static"]]],[11,"default","","",271,[[],["self"]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result"]]],[11,"eq","","",271,[[["self"],["static"]],["bool"]]],[11,"hash","","",271,[[["self"],["h"]]]],[11,"to_tokens","","",271,[[["self"],["tokenstream"]]]],[11,"parse","","",271,[[["cursor"]],["presult",["static"]]]],[11,"description","","",271,[[],["option",["str"]]]],[11,"from","","",271,[[["span"]],["self"]]],[11,"clone","","",272,[[["self"]],["struct"]]],[11,"default","","",272,[[],["self"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"eq","","",272,[[["self"],["struct"]],["bool"]]],[11,"hash","","",272,[[["self"],["h"]]]],[11,"to_tokens","","",272,[[["self"],["tokenstream"]]]],[11,"parse","","",272,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",272,[[],["option",["str"]]]],[11,"from","","",272,[[["span"]],["self"]]],[11,"clone","","",273,[[["self"]],["super"]]],[11,"default","","",273,[[],["self"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"eq","","",273,[[["self"],["super"]],["bool"]]],[11,"hash","","",273,[[["self"],["h"]]]],[11,"to_tokens","","",273,[[["self"],["tokenstream"]]]],[11,"parse","","",273,[[["cursor"]],["presult",["super"]]]],[11,"description","","",273,[[],["option",["str"]]]],[11,"from","","",273,[[["span"]],["self"]]],[11,"clone","","",274,[[["self"]],["trait"]]],[11,"default","","",274,[[],["self"]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result"]]],[11,"eq","","",274,[[["self"],["trait"]],["bool"]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"to_tokens","","",274,[[["self"],["tokenstream"]]]],[11,"parse","","",274,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",274,[[],["option",["str"]]]],[11,"from","","",274,[[["span"]],["self"]]],[11,"clone","","",275,[[["self"]],["type"]]],[11,"default","","",275,[[],["self"]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result"]]],[11,"eq","","",275,[[["self"],["type"]],["bool"]]],[11,"hash","","",275,[[["self"],["h"]]]],[11,"to_tokens","","",275,[[["self"],["tokenstream"]]]],[11,"parse","","",275,[[["cursor"]],["presult",["type"]]]],[11,"description","","",275,[[],["option",["str"]]]],[11,"from","","",275,[[["span"]],["self"]]],[11,"clone","","",276,[[["self"]],["union"]]],[11,"default","","",276,[[],["self"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"eq","","",276,[[["self"],["union"]],["bool"]]],[11,"hash","","",276,[[["self"],["h"]]]],[11,"to_tokens","","",276,[[["self"],["tokenstream"]]]],[11,"parse","","",276,[[["cursor"]],["presult",["union"]]]],[11,"description","","",276,[[],["option",["str"]]]],[11,"from","","",276,[[["span"]],["self"]]],[11,"clone","","",277,[[["self"]],["unsafe"]]],[11,"default","","",277,[[],["self"]]],[11,"fmt","","",277,[[["self"],["formatter"]],["result"]]],[11,"eq","","",277,[[["self"],["unsafe"]],["bool"]]],[11,"hash","","",277,[[["self"],["h"]]]],[11,"to_tokens","","",277,[[["self"],["tokenstream"]]]],[11,"parse","","",277,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",277,[[],["option",["str"]]]],[11,"from","","",277,[[["span"]],["self"]]],[11,"clone","","",278,[[["self"]],["use"]]],[11,"default","","",278,[[],["self"]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result"]]],[11,"eq","","",278,[[["self"],["use"]],["bool"]]],[11,"hash","","",278,[[["self"],["h"]]]],[11,"to_tokens","","",278,[[["self"],["tokenstream"]]]],[11,"parse","","",278,[[["cursor"]],["presult",["use"]]]],[11,"description","","",278,[[],["option",["str"]]]],[11,"from","","",278,[[["span"]],["self"]]],[11,"clone","","",279,[[["self"]],["where"]]],[11,"default","","",279,[[],["self"]]],[11,"fmt","","",279,[[["self"],["formatter"]],["result"]]],[11,"eq","","",279,[[["self"],["where"]],["bool"]]],[11,"hash","","",279,[[["self"],["h"]]]],[11,"to_tokens","","",279,[[["self"],["tokenstream"]]]],[11,"parse","","",279,[[["cursor"]],["presult",["where"]]]],[11,"description","","",279,[[],["option",["str"]]]],[11,"from","","",279,[[["span"]],["self"]]],[11,"clone","","",280,[[["self"]],["while"]]],[11,"default","","",280,[[],["self"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"eq","","",280,[[["self"],["while"]],["bool"]]],[11,"hash","","",280,[[["self"],["h"]]]],[11,"to_tokens","","",280,[[["self"],["tokenstream"]]]],[11,"parse","","",280,[[["cursor"]],["presult",["while"]]]],[11,"description","","",280,[[],["option",["str"]]]],[11,"from","","",280,[[["span"]],["self"]]],[11,"clone","","",281,[[["self"]],["yield"]]],[11,"default","","",281,[[],["self"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"eq","","",281,[[["self"],["yield"]],["bool"]]],[11,"hash","","",281,[[["self"],["h"]]]],[11,"to_tokens","","",281,[[["self"],["tokenstream"]]]],[11,"parse","","",281,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",281,[[],["option",["str"]]]],[11,"from","","",281,[[["span"]],["self"]]],[11,"from","syn","",282,[[["self_"]],["ident"]]],[11,"from","","",282,[[["capself"]],["ident"]]],[11,"from","","",282,[[["super"]],["ident"]]],[11,"from","","",282,[[["crate"]],["ident"]]],[11,"from","","",282,[[["extern"]],["ident"]]],[11,"parse_inner","","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"eq","","",154,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",154,[[["self"],["attrstyle"]],["bool"]]],[11,"hash","","",154,N],[11,"clone","","",154,[[["self"]],["attrstyle"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"eq","","",155,[[["self"],["meta"]],["bool"]]],[11,"ne","","",155,[[["self"],["meta"]],["bool"]]],[11,"hash","","",155,N],[11,"clone","","",155,[[["self"]],["meta"]]],[11,"from","","",155,[[["ident"]],["meta"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",155,[[["metalist"]],["meta"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"hash","","",2,N],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",155,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",155,[[["self"]],["ident"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"eq","","",156,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",156,[[["self"],["nestedmeta"]],["bool"]]],[11,"hash","","",156,N],[11,"clone","","",156,[[["self"]],["nestedmeta"]]],[11,"from","","",156,[[["meta"]],["nestedmeta"]]],[11,"from","","",156,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"parse","","",158,[[["cursor"]],["presult"]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"hash","","",6,N],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"eq","","",157,[[["self"],["fields"]],["bool"]]],[11,"ne","","",157,[[["self"],["fields"]],["bool"]]],[11,"hash","","",157,N],[11,"clone","","",157,[[["self"]],["fields"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",157,[[["fieldsnamed"]],["fields"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"hash","","",5,N],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",157,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",157,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",157,[[["self"]],["itermut",["field"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["field"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"eq","","",158,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",158,[[["self"],["visibility"]],["bool"]]],[11,"hash","","",158,N],[11,"clone","","",158,[[["self"]],["visibility"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"hash","","",8,N],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",158,[[["vispublic"]],["visibility"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",158,[[["viscrate"]],["visibility"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"hash","","",9,N],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",158,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["cursor"]],["presult"]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"parse","","",24,[[["cursor"]],["presult"]]],[11,"description","","",24,[[],["option",["str"]]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"parse","","",10,[[["cursor"]],["presult"]]],[11,"description","","",10,[[],["option",["str"]]]],[11,"parse","","",161,[[["cursor"]],["presult"]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"parse","","",42,[[["cursor"]],["presult"]]],[11,"description","","",42,[[],["option",["str"]]]],[11,"parse","","",26,[[["cursor"]],["presult"]]],[11,"description","","",26,[[],["option",["str"]]]],[11,"parse","","",25,[[["cursor"]],["presult"]]],[11,"description","","",25,[[],["option",["str"]]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"parse","","",19,[[["cursor"]],["presult"]]],[11,"description","","",19,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",55,[[["cursor"]],["presult"]]],[11,"description","","",55,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",14,[[["cursor"]],["presult"]]],[11,"description","","",14,[[],["option",["str"]]]],[11,"parse","","",163,[[["cursor"]],["presult"]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"parse","","",35,[[["cursor"]],["presult"]]],[11,"description","","",35,[[],["option",["str"]]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse_within","","",52,[[["cursor"]],["presult",["vec"]]]],[11,"parse","","",164,[[["cursor"]],["presult"]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"parse","","",162,[[["cursor"]],["presult"]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"parse","","",70,[[["cursor"]],["presult"]]],[11,"description","","",70,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",68,[[["cursor"]],["presult"]]],[11,"description","","",68,[[],["option",["str"]]]],[11,"parse","","",66,[[["cursor"]],["presult"]]],[11,"description","","",66,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"parse","","",160,[[["cursor"]],["presult"]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",62,[[["cursor"]],["presult"]]],[11,"description","","",62,[[],["option",["str"]]]],[11,"parse","","",67,[[["cursor"]],["presult"]]],[11,"description","","",67,[[],["option",["str"]]]],[11,"parse","","",64,[[["cursor"]],["presult"]]],[11,"description","","",64,[[],["option",["str"]]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",63,[[["cursor"]],["presult"]]],[11,"description","","",63,[[],["option",["str"]]]],[11,"parse","","",65,[[["cursor"]],["presult"]]],[11,"description","","",65,[[],["option",["str"]]]],[11,"parse","","",61,[[["cursor"]],["presult"]]],[11,"description","","",61,[[],["option",["str"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",36,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",35,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",37,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",62,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",63,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"eq","","",159,[[["self"],["expr"]],["bool"]]],[11,"ne","","",159,[[["self"],["expr"]],["bool"]]],[11,"hash","","",159,N],[11,"clone","","",159,[[["self"]],["expr"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprbox"]],["bool"]]],[11,"hash","","",15,N],[11,"clone","","",15,[[["self"]],["exprbox"]]],[11,"from","","",159,[[["exprbox"]],["expr"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",27,[[["self"],["exprinplace"]],["bool"]]],[11,"hash","","",27,N],[11,"clone","","",27,[[["self"]],["exprinplace"]]],[11,"from","","",159,[[["exprinplace"]],["expr"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",10,[[["self"],["exprarray"]],["bool"]]],[11,"hash","","",10,N],[11,"clone","","",10,[[["self"]],["exprarray"]]],[11,"from","","",159,[[["exprarray"]],["expr"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",17,[[["self"],["exprcall"]],["bool"]]],[11,"hash","","",17,N],[11,"clone","","",17,[[["self"]],["exprcall"]]],[11,"from","","",159,[[["exprcall"]],["expr"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",33,[[["self"],["exprmethodcall"]],["bool"]]],[11,"hash","","",33,N],[11,"clone","","",33,[[["self"]],["exprmethodcall"]]],[11,"from","","",159,[[["exprmethodcall"]],["expr"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"eq","","",42,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",42,[[["self"],["exprtuple"]],["bool"]]],[11,"hash","","",42,N],[11,"clone","","",42,[[["self"]],["exprtuple"]]],[11,"from","","",159,[[["exprtuple"]],["expr"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",13,[[["self"],["exprbinary"]],["bool"]]],[11,"hash","","",13,N],[11,"clone","","",13,[[["self"]],["exprbinary"]]],[11,"from","","",159,[[["exprbinary"]],["expr"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"eq","","",44,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",44,[[["self"],["exprunary"]],["bool"]]],[11,"hash","","",44,N],[11,"clone","","",44,[[["self"]],["exprunary"]]],[11,"from","","",159,[[["exprunary"]],["expr"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",29,[[["self"],["exprlit"]],["bool"]]],[11,"hash","","",29,N],[11,"clone","","",29,[[["self"]],["exprlit"]]],[11,"from","","",159,[[["exprlit"]],["expr"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",18,[[["self"],["exprcast"]],["bool"]]],[11,"hash","","",18,N],[11,"clone","","",18,[[["self"]],["exprcast"]]],[11,"from","","",159,[[["exprcast"]],["expr"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"eq","","",43,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",43,[[["self"],["exprtype"]],["bool"]]],[11,"hash","","",43,N],[11,"clone","","",43,[[["self"]],["exprtype"]]],[11,"from","","",159,[[["exprtype"]],["expr"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",25,[[["self"],["exprif"]],["bool"]]],[11,"hash","","",25,N],[11,"clone","","",25,[[["self"]],["exprif"]]],[11,"from","","",159,[[["exprif"]],["expr"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["expriflet"]],["bool"]]],[11,"ne","","",26,[[["self"],["expriflet"]],["bool"]]],[11,"hash","","",26,N],[11,"clone","","",26,[[["self"]],["expriflet"]]],[11,"from","","",159,[[["expriflet"]],["expr"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",47,[[["self"],["exprwhile"]],["bool"]]],[11,"hash","","",47,N],[11,"clone","","",47,[[["self"]],["exprwhile"]]],[11,"from","","",159,[[["exprwhile"]],["expr"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["exprwhilelet"]],["bool"]]],[11,"ne","","",48,[[["self"],["exprwhilelet"]],["bool"]]],[11,"hash","","",48,N],[11,"clone","","",48,[[["self"]],["exprwhilelet"]]],[11,"from","","",159,[[["exprwhilelet"]],["expr"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",23,[[["self"],["exprforloop"]],["bool"]]],[11,"hash","","",23,N],[11,"clone","","",23,[[["self"]],["exprforloop"]]],[11,"from","","",159,[[["exprforloop"]],["expr"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",30,[[["self"],["exprloop"]],["bool"]]],[11,"hash","","",30,N],[11,"clone","","",30,[[["self"]],["exprloop"]]],[11,"from","","",159,[[["exprloop"]],["expr"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",32,[[["self"],["exprmatch"]],["bool"]]],[11,"hash","","",32,N],[11,"clone","","",32,[[["self"]],["exprmatch"]]],[11,"from","","",159,[[["exprmatch"]],["expr"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",20,[[["self"],["exprclosure"]],["bool"]]],[11,"hash","","",20,N],[11,"clone","","",20,[[["self"]],["exprclosure"]]],[11,"from","","",159,[[["exprclosure"]],["expr"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"eq","","",45,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",45,[[["self"],["exprunsafe"]],["bool"]]],[11,"hash","","",45,N],[11,"clone","","",45,[[["self"]],["exprunsafe"]]],[11,"from","","",159,[[["exprunsafe"]],["expr"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprblock"]],["bool"]]],[11,"hash","","",14,N],[11,"clone","","",14,[[["self"]],["exprblock"]]],[11,"from","","",159,[[["exprblock"]],["expr"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",11,[[["self"],["exprassign"]],["bool"]]],[11,"hash","","",11,N],[11,"clone","","",11,[[["self"]],["exprassign"]]],[11,"from","","",159,[[["exprassign"]],["expr"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",12,[[["self"],["exprassignop"]],["bool"]]],[11,"hash","","",12,N],[11,"clone","","",12,[[["self"]],["exprassignop"]]],[11,"from","","",159,[[["exprassignop"]],["expr"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",22,[[["self"],["exprfield"]],["bool"]]],[11,"hash","","",22,N],[11,"clone","","",22,[[["self"]],["exprfield"]]],[11,"from","","",159,[[["exprfield"]],["expr"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",28,[[["self"],["exprindex"]],["bool"]]],[11,"hash","","",28,N],[11,"clone","","",28,[[["self"]],["exprindex"]]],[11,"from","","",159,[[["exprindex"]],["expr"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",36,[[["self"],["exprrange"]],["bool"]]],[11,"hash","","",36,N],[11,"clone","","",36,[[["self"]],["exprrange"]]],[11,"from","","",159,[[["exprrange"]],["expr"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",35,[[["self"],["exprpath"]],["bool"]]],[11,"hash","","",35,N],[11,"clone","","",35,[[["self"]],["exprpath"]]],[11,"from","","",159,[[["exprpath"]],["expr"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"ne","","",37,[[["self"],["exprreference"]],["bool"]]],[11,"hash","","",37,N],[11,"clone","","",37,[[["self"]],["exprreference"]]],[11,"from","","",159,[[["exprreference"]],["expr"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprbreak"]],["bool"]]],[11,"hash","","",16,N],[11,"clone","","",16,[[["self"]],["exprbreak"]]],[11,"from","","",159,[[["exprbreak"]],["expr"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",21,[[["self"],["exprcontinue"]],["bool"]]],[11,"hash","","",21,N],[11,"clone","","",21,[[["self"]],["exprcontinue"]]],[11,"from","","",159,[[["exprcontinue"]],["expr"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",39,[[["self"],["exprreturn"]],["bool"]]],[11,"hash","","",39,N],[11,"clone","","",39,[[["self"]],["exprreturn"]]],[11,"from","","",159,[[["exprreturn"]],["expr"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",31,[[["self"],["exprmacro"]],["bool"]]],[11,"hash","","",31,N],[11,"clone","","",31,[[["self"]],["exprmacro"]]],[11,"from","","",159,[[["exprmacro"]],["expr"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",40,[[["self"],["exprstruct"]],["bool"]]],[11,"hash","","",40,N],[11,"clone","","",40,[[["self"]],["exprstruct"]]],[11,"from","","",159,[[["exprstruct"]],["expr"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",38,[[["self"],["exprrepeat"]],["bool"]]],[11,"hash","","",38,N],[11,"clone","","",38,[[["self"]],["exprrepeat"]]],[11,"from","","",159,[[["exprrepeat"]],["expr"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",34,[[["self"],["exprparen"]],["bool"]]],[11,"hash","","",34,N],[11,"clone","","",34,[[["self"]],["exprparen"]]],[11,"from","","",159,[[["exprparen"]],["expr"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",24,[[["self"],["exprgroup"]],["bool"]]],[11,"hash","","",24,N],[11,"clone","","",24,[[["self"]],["exprgroup"]]],[11,"from","","",159,[[["exprgroup"]],["expr"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",41,[[["self"],["exprtry"]],["bool"]]],[11,"hash","","",41,N],[11,"clone","","",41,[[["self"]],["exprtry"]]],[11,"from","","",159,[[["exprtry"]],["expr"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["exprcatch"]],["bool"]]],[11,"ne","","",19,[[["self"],["exprcatch"]],["bool"]]],[11,"hash","","",19,N],[11,"clone","","",19,[[["self"]],["exprcatch"]]],[11,"from","","",159,[[["exprcatch"]],["expr"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",49,[[["self"],["expryield"]],["bool"]]],[11,"hash","","",49,N],[11,"clone","","",49,[[["self"]],["expryield"]]],[11,"from","","",159,[[["expryield"]],["expr"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["exprverbatim"]]],[11,"from","","",159,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"eq","","",46,[[["self"],["self"]],["bool"]]],[11,"hash","","",46,[[["self"],["h"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"eq","","",160,[[["self"],["member"]],["bool"]]],[11,"ne","","",160,[[["self"],["member"]],["bool"]]],[11,"hash","","",160,N],[11,"clone","","",160,[[["self"]],["member"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["index"]]],[11,"from","","",50,[[["usize"]],["index"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"hash","","",50,[[["self"],["h"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",57,[[["self"],["methodturbofish"]],["bool"]]],[11,"hash","","",57,N],[11,"clone","","",57,[[["self"]],["methodturbofish"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"eq","","",161,[[["self"],["genericmethodargument"]],["bool"]]],[11,"ne","","",161,[[["self"],["genericmethodargument"]],["bool"]]],[11,"hash","","",161,N],[11,"clone","","",161,[[["self"]],["genericmethodargument"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"ne","","",54,[[["self"],["fieldvalue"]],["bool"]]],[11,"hash","","",54,N],[11,"clone","","",54,[[["self"]],["fieldvalue"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["label"]],["bool"]]],[11,"ne","","",55,[[["self"],["label"]],["bool"]]],[11,"hash","","",55,N],[11,"clone","","",55,[[["self"]],["label"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["block"]],["bool"]]],[11,"ne","","",52,[[["self"],["block"]],["bool"]]],[11,"hash","","",52,N],[11,"clone","","",52,[[["self"]],["block"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"eq","","",164,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",164,[[["self"],["stmt"]],["bool"]]],[11,"hash","","",164,N],[11,"clone","","",164,[[["self"]],["stmt"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["local"]],["bool"]]],[11,"ne","","",56,[[["self"],["local"]],["bool"]]],[11,"hash","","",56,N],[11,"clone","","",56,[[["self"]],["local"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"eq","","",162,[[["self"],["pat"]],["bool"]]],[11,"ne","","",162,[[["self"],["pat"]],["bool"]]],[11,"hash","","",162,N],[11,"clone","","",162,[[["self"]],["pat"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"eq","","",70,[[["self"],["patwild"]],["bool"]]],[11,"ne","","",70,[[["self"],["patwild"]],["bool"]]],[11,"hash","","",70,N],[11,"clone","","",70,[[["self"]],["patwild"]]],[11,"from","","",162,[[["patwild"]],["pat"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"eq","","",59,[[["self"],["patident"]],["bool"]]],[11,"ne","","",59,[[["self"],["patident"]],["bool"]]],[11,"hash","","",59,N],[11,"clone","","",59,[[["self"]],["patident"]]],[11,"from","","",162,[[["patident"]],["pat"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",66,[[["self"],["patstruct"]],["bool"]]],[11,"hash","","",66,N],[11,"clone","","",66,[[["self"]],["patstruct"]]],[11,"from","","",162,[[["patstruct"]],["pat"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"eq","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",68,[[["self"],["pattuplestruct"]],["bool"]]],[11,"hash","","",68,N],[11,"clone","","",68,[[["self"]],["pattuplestruct"]]],[11,"from","","",162,[[["pattuplestruct"]],["pat"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"eq","","",62,[[["self"],["patpath"]],["bool"]]],[11,"ne","","",62,[[["self"],["patpath"]],["bool"]]],[11,"hash","","",62,N],[11,"clone","","",62,[[["self"]],["patpath"]]],[11,"from","","",162,[[["patpath"]],["pat"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"eq","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"ne","","",67,[[["self"],["pattuple"]],["bool"]]],[11,"hash","","",67,N],[11,"clone","","",67,[[["self"]],["pattuple"]]],[11,"from","","",162,[[["pattuple"]],["pat"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"eq","","",58,[[["self"],["patbox"]],["bool"]]],[11,"ne","","",58,[[["self"],["patbox"]],["bool"]]],[11,"hash","","",58,N],[11,"clone","","",58,[[["self"]],["patbox"]]],[11,"from","","",162,[[["patbox"]],["pat"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["patref"]],["bool"]]],[11,"ne","","",64,[[["self"],["patref"]],["bool"]]],[11,"hash","","",64,N],[11,"clone","","",64,[[["self"]],["patref"]]],[11,"from","","",162,[[["patref"]],["pat"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"eq","","",60,[[["self"],["patlit"]],["bool"]]],[11,"ne","","",60,[[["self"],["patlit"]],["bool"]]],[11,"hash","","",60,N],[11,"clone","","",60,[[["self"]],["patlit"]]],[11,"from","","",162,[[["patlit"]],["pat"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"eq","","",63,[[["self"],["patrange"]],["bool"]]],[11,"ne","","",63,[[["self"],["patrange"]],["bool"]]],[11,"hash","","",63,N],[11,"clone","","",63,[[["self"]],["patrange"]]],[11,"from","","",162,[[["patrange"]],["pat"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",65,[[["self"],["patslice"]],["bool"]]],[11,"hash","","",65,N],[11,"clone","","",65,[[["self"]],["patslice"]]],[11,"from","","",162,[[["patslice"]],["pat"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"eq","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"ne","","",61,[[["self"],["patmacro"]],["bool"]]],[11,"hash","","",61,N],[11,"clone","","",61,[[["self"]],["patmacro"]]],[11,"from","","",162,[[["patmacro"]],["pat"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"clone","","",69,[[["self"]],["patverbatim"]]],[11,"from","","",162,[[["patverbatim"]],["pat"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"eq","","",69,[[["self"],["self"]],["bool"]]],[11,"hash","","",69,[[["self"],["h"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["arm"]],["bool"]]],[11,"ne","","",51,[[["self"],["arm"]],["bool"]]],[11,"hash","","",51,N],[11,"clone","","",51,[[["self"]],["arm"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"eq","","",163,[[["self"],["rangelimits"]],["bool"]]],[11,"ne","","",163,[[["self"],["rangelimits"]],["bool"]]],[11,"hash","","",163,N],[11,"clone","","",163,[[["self"]],["rangelimits"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"ne","","",53,[[["self"],["fieldpat"]],["bool"]]],[11,"hash","","",53,N],[11,"clone","","",53,[[["self"]],["fieldpat"]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"parse","","",165,[[["cursor"]],["presult"]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"parse","","",74,[[["cursor"]],["presult"]]],[11,"description","","",74,[[],["option",["str"]]]],[11,"parse","","",71,[[["cursor"]],["presult"]]],[11,"description","","",71,[[],["option",["str"]]]],[11,"parse","","",79,[[["cursor"]],["presult"]]],[11,"description","","",79,[[],["option",["str"]]]],[11,"parse","","",167,[[["cursor"]],["presult"]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"parse","","",78,[[["cursor"]],["presult"]]],[11,"description","","",78,[[],["option",["str"]]]],[11,"parse","","",166,[[["cursor"]],["presult"]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"parse","","",72,[[["cursor"]],["presult"]]],[11,"description","","",72,[[],["option",["str"]]]],[11,"parse","","",80,[[["cursor"]],["presult"]]],[11,"description","","",80,[[],["option",["str"]]]],[11,"parse","","",168,[[["cursor"]],["presult"]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",283,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",284,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",285,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",74,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",79,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",78,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",77,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",75,[[["self"],["tokenstream"]]]],[11,"default","","",73,[[],["generics"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"eq","","",73,[[["self"],["generics"]],["bool"]]],[11,"ne","","",73,[[["self"],["generics"]],["bool"]]],[11,"hash","","",73,N],[11,"clone","","",73,[[["self"]],["generics"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"eq","","",165,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",165,[[["self"],["genericparam"]],["bool"]]],[11,"hash","","",165,N],[11,"clone","","",165,[[["self"]],["genericparam"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"eq","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",79,[[["self"],["typeparam"]],["bool"]]],[11,"hash","","",79,N],[11,"clone","","",79,[[["self"]],["typeparam"]]],[11,"from","","",165,[[["typeparam"]],["genericparam"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"eq","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",74,[[["self"],["lifetimedef"]],["bool"]]],[11,"hash","","",74,N],[11,"clone","","",74,[[["self"]],["lifetimedef"]]],[11,"from","","",165,[[["lifetimedef"]],["genericparam"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"eq","","",72,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",72,[[["self"],["constparam"]],["bool"]]],[11,"hash","","",72,N],[11,"clone","","",72,[[["self"]],["constparam"]]],[11,"from","","",165,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",73,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",73,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",73,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",73,[[["self"]],["whereclause"]]],[11,"fmt","","",283,[[["self"],["formatter"]],["result"]]],[11,"eq","","",283,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",283,[[["self"],["implgenerics"]],["bool"]]],[11,"hash","","",283,N],[11,"clone","","",283,[[["self"]],["implgenerics"]]],[11,"fmt","","",284,[[["self"],["formatter"]],["result"]]],[11,"eq","","",284,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",284,[[["self"],["typegenerics"]],["bool"]]],[11,"hash","","",284,N],[11,"clone","","",284,[[["self"]],["typegenerics"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"eq","","",285,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",285,[[["self"],["turbofish"]],["bool"]]],[11,"hash","","",285,N],[11,"clone","","",285,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",73,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",284,[[["self"]],["turbofish"]]],[11,"default","","",71,[[],["boundlifetimes"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"eq","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",71,[[["self"],["boundlifetimes"]],["bool"]]],[11,"hash","","",71,N],[11,"clone","","",71,[[["self"]],["boundlifetimes"]]],[11,"new","","",74,[[["lifetime"]],["self"]]],[11,"from","","",79,[[["ident"]],["self"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"eq","","",167,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",167,[[["self"],["typeparambound"]],["bool"]]],[11,"hash","","",167,N],[11,"clone","","",167,[[["self"]],["typeparambound"]]],[11,"from","","",167,[[["traitbound"]],["typeparambound"]]],[11,"from","","",167,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"eq","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",78,[[["self"],["traitbound"]],["bool"]]],[11,"hash","","",78,N],[11,"clone","","",78,[[["self"]],["traitbound"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"eq","","",166,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",166,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"hash","","",166,N],[11,"clone","","",166,[[["self"]],["traitboundmodifier"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"eq","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",80,[[["self"],["whereclause"]],["bool"]]],[11,"hash","","",80,N],[11,"clone","","",80,[[["self"]],["whereclause"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"eq","","",168,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",168,[[["self"],["wherepredicate"]],["bool"]]],[11,"hash","","",168,N],[11,"clone","","",168,[[["self"]],["wherepredicate"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"eq","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",77,[[["self"],["predicatetype"]],["bool"]]],[11,"hash","","",77,N],[11,"clone","","",77,[[["self"]],["predicatetype"]]],[11,"from","","",168,[[["predicatetype"]],["wherepredicate"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"eq","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",76,[[["self"],["predicatelifetime"]],["bool"]]],[11,"hash","","",76,N],[11,"clone","","",76,[[["self"]],["predicatelifetime"]]],[11,"from","","",168,[[["predicatelifetime"]],["wherepredicate"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"eq","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",75,[[["self"],["predicateeq"]],["bool"]]],[11,"hash","","",75,N],[11,"clone","","",75,[[["self"]],["predicateeq"]]],[11,"from","","",168,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["cursor"]],["presult"]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"parse","","",100,[[["cursor"]],["presult"]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"parse","","",101,[[["cursor"]],["presult"]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"parse","","",96,[[["cursor"]],["presult"]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"parse","","",108,[[["cursor"]],["presult"]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"parse","","",174,[[["cursor"]],["presult"]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"parse","","",119,[[["cursor"]],["presult"]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"parse","","",118,[[["cursor"]],["presult"]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"parse","","",120,[[["cursor"]],["presult"]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"parse","","",116,[[["cursor"]],["presult"]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"parse","","",117,[[["cursor"]],["presult"]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"parse","","",103,[[["cursor"]],["presult"]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"parse","","",94,[[["cursor"]],["presult"]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"parse","","",97,[[["cursor"]],["presult"]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"parse","","",169,[[["cursor"]],["presult"]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"parse","","",102,[[["cursor"]],["presult"]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"parse","","",98,[[["cursor"]],["presult"]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"parse","","",170,[[["cursor"]],["presult"]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"parse","","",85,[[["cursor"]],["presult"]]],[11,"description","","",85,[[],["option",["str"]]]],[11,"parse","","",86,[[["cursor"]],["presult"]]],[11,"description","","",86,[[],["option",["str"]]]],[11,"parse","","",87,[[["cursor"]],["presult"]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"parse","","",106,[[["cursor"]],["presult"]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"parse","","",104,[[["cursor"]],["presult"]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"parse","","",95,[[["cursor"]],["presult"]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"parse","","",107,[[["cursor"]],["presult"]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"parse","","",105,[[["cursor"]],["presult"]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"parse","","",173,[[["cursor"]],["presult"]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"parse","","",111,[[["cursor"]],["presult"]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"parse","","",113,[[["cursor"]],["presult"]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"parse","","",114,[[["cursor"]],["presult"]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"parse","","",112,[[["cursor"]],["presult"]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"parse","","",99,[[["cursor"]],["presult"]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"parse","","",171,[[["cursor"]],["presult"]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"parse","","",89,[[["cursor"]],["presult"]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"parse","","",91,[[["cursor"]],["presult"]]],[11,"description","","",91,[[],["option",["str"]]]],[11,"parse","","",92,[[["cursor"]],["presult"]]],[11,"description","","",92,[[],["option",["str"]]]],[11,"parse","","",90,[[["cursor"]],["presult"]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"eq","","",172,[[["self"],["item"]],["bool"]]],[11,"ne","","",172,[[["self"],["item"]],["bool"]]],[11,"hash","","",172,N],[11,"clone","","",172,[[["self"]],["item"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",96,[[["self"],["itemexterncrate"]],["bool"]]],[11,"hash","","",96,N],[11,"clone","","",96,[[["self"]],["itemexterncrate"]]],[11,"from","","",172,[[["itemexterncrate"]],["item"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"eq","","",108,[[["self"],["itemuse"]],["bool"]]],[11,"ne","","",108,[[["self"],["itemuse"]],["bool"]]],[11,"hash","","",108,N],[11,"clone","","",108,[[["self"]],["itemuse"]]],[11,"from","","",172,[[["itemuse"]],["item"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"eq","","",103,[[["self"],["itemstatic"]],["bool"]]],[11,"ne","","",103,[[["self"],["itemstatic"]],["bool"]]],[11,"hash","","",103,N],[11,"clone","","",103,[[["self"]],["itemstatic"]]],[11,"from","","",172,[[["itemstatic"]],["item"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"eq","","",94,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",94,[[["self"],["itemconst"]],["bool"]]],[11,"hash","","",94,N],[11,"clone","","",94,[[["self"]],["itemconst"]]],[11,"from","","",172,[[["itemconst"]],["item"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",97,[[["self"],["itemfn"]],["bool"]]],[11,"hash","","",97,N],[11,"clone","","",97,[[["self"]],["itemfn"]]],[11,"from","","",172,[[["itemfn"]],["item"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"eq","","",102,[[["self"],["itemmod"]],["bool"]]],[11,"ne","","",102,[[["self"],["itemmod"]],["bool"]]],[11,"hash","","",102,N],[11,"clone","","",102,[[["self"]],["itemmod"]]],[11,"from","","",172,[[["itemmod"]],["item"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",98,[[["self"],["itemforeignmod"]],["bool"]]],[11,"hash","","",98,N],[11,"clone","","",98,[[["self"]],["itemforeignmod"]]],[11,"from","","",172,[[["itemforeignmod"]],["item"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"eq","","",106,[[["self"],["itemtype"]],["bool"]]],[11,"ne","","",106,[[["self"],["itemtype"]],["bool"]]],[11,"hash","","",106,N],[11,"clone","","",106,[[["self"]],["itemtype"]]],[11,"from","","",172,[[["itemtype"]],["item"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"eq","","",104,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",104,[[["self"],["itemstruct"]],["bool"]]],[11,"hash","","",104,N],[11,"clone","","",104,[[["self"]],["itemstruct"]]],[11,"from","","",172,[[["itemstruct"]],["item"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"eq","","",95,[[["self"],["itemenum"]],["bool"]]],[11,"ne","","",95,[[["self"],["itemenum"]],["bool"]]],[11,"hash","","",95,N],[11,"clone","","",95,[[["self"]],["itemenum"]]],[11,"from","","",172,[[["itemenum"]],["item"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"eq","","",107,[[["self"],["itemunion"]],["bool"]]],[11,"ne","","",107,[[["self"],["itemunion"]],["bool"]]],[11,"hash","","",107,N],[11,"clone","","",107,[[["self"]],["itemunion"]]],[11,"from","","",172,[[["itemunion"]],["item"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"eq","","",105,[[["self"],["itemtrait"]],["bool"]]],[11,"ne","","",105,[[["self"],["itemtrait"]],["bool"]]],[11,"hash","","",105,N],[11,"clone","","",105,[[["self"]],["itemtrait"]]],[11,"from","","",172,[[["itemtrait"]],["item"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"eq","","",99,[[["self"],["itemimpl"]],["bool"]]],[11,"ne","","",99,[[["self"],["itemimpl"]],["bool"]]],[11,"hash","","",99,N],[11,"clone","","",99,[[["self"]],["itemimpl"]]],[11,"from","","",172,[[["itemimpl"]],["item"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"eq","","",100,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",100,[[["self"],["itemmacro"]],["bool"]]],[11,"hash","","",100,N],[11,"clone","","",100,[[["self"]],["itemmacro"]]],[11,"from","","",172,[[["itemmacro"]],["item"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"clone","","",101,[[["self"]],["itemmacro2"]]],[11,"from","","",172,[[["itemmacro2"]],["item"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"clone","","",109,[[["self"]],["itemverbatim"]]],[11,"from","","",172,[[["itemverbatim"]],["item"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"eq","","",101,[[["self"],["self"]],["bool"]]],[11,"hash","","",101,[[["self"],["h"]]]],[11,"eq","","",109,[[["self"],["self"]],["bool"]]],[11,"hash","","",109,[[["self"],["h"]]]],[11,"from","","",172,[[["deriveinput"]],["item"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"eq","","",174,[[["self"],["usetree"]],["bool"]]],[11,"ne","","",174,[[["self"],["usetree"]],["bool"]]],[11,"hash","","",174,N],[11,"clone","","",174,[[["self"]],["usetree"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"eq","","",119,[[["self"],["usepath"]],["bool"]]],[11,"ne","","",119,[[["self"],["usepath"]],["bool"]]],[11,"hash","","",119,N],[11,"clone","","",119,[[["self"]],["usepath"]]],[11,"from","","",174,[[["usepath"]],["usetree"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"eq","","",118,[[["self"],["usename"]],["bool"]]],[11,"ne","","",118,[[["self"],["usename"]],["bool"]]],[11,"hash","","",118,N],[11,"clone","","",118,[[["self"]],["usename"]]],[11,"from","","",174,[[["usename"]],["usetree"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"eq","","",120,[[["self"],["userename"]],["bool"]]],[11,"ne","","",120,[[["self"],["userename"]],["bool"]]],[11,"hash","","",120,N],[11,"clone","","",120,[[["self"]],["userename"]]],[11,"from","","",174,[[["userename"]],["usetree"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"eq","","",116,[[["self"],["useglob"]],["bool"]]],[11,"ne","","",116,[[["self"],["useglob"]],["bool"]]],[11,"hash","","",116,N],[11,"clone","","",116,[[["self"]],["useglob"]]],[11,"from","","",174,[[["useglob"]],["usetree"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"eq","","",117,[[["self"],["usegroup"]],["bool"]]],[11,"ne","","",117,[[["self"],["usegroup"]],["bool"]]],[11,"hash","","",117,N],[11,"clone","","",117,[[["self"]],["usegroup"]]],[11,"from","","",174,[[["usegroup"]],["usetree"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"eq","","",170,[[["self"],["foreignitem"]],["bool"]]],[11,"ne","","",170,[[["self"],["foreignitem"]],["bool"]]],[11,"hash","","",170,N],[11,"clone","","",170,[[["self"]],["foreignitem"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"eq","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",85,[[["self"],["foreignitemfn"]],["bool"]]],[11,"hash","","",85,N],[11,"clone","","",85,[[["self"]],["foreignitemfn"]]],[11,"from","","",170,[[["foreignitemfn"]],["foreignitem"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"eq","","",86,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"ne","","",86,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"hash","","",86,N],[11,"clone","","",86,[[["self"]],["foreignitemstatic"]]],[11,"from","","",170,[[["foreignitemstatic"]],["foreignitem"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"eq","","",87,[[["self"],["foreignitemtype"]],["bool"]]],[11,"ne","","",87,[[["self"],["foreignitemtype"]],["bool"]]],[11,"hash","","",87,N],[11,"clone","","",87,[[["self"]],["foreignitemtype"]]],[11,"from","","",170,[[["foreignitemtype"]],["foreignitem"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"clone","","",88,[[["self"]],["foreignitemverbatim"]]],[11,"from","","",170,[[["foreignitemverbatim"]],["foreignitem"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"eq","","",88,[[["self"],["self"]],["bool"]]],[11,"hash","","",88,[[["self"],["h"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"eq","","",173,[[["self"],["traititem"]],["bool"]]],[11,"ne","","",173,[[["self"],["traititem"]],["bool"]]],[11,"hash","","",173,N],[11,"clone","","",173,[[["self"]],["traititem"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"eq","","",111,[[["self"],["traititemconst"]],["bool"]]],[11,"ne","","",111,[[["self"],["traititemconst"]],["bool"]]],[11,"hash","","",111,N],[11,"clone","","",111,[[["self"]],["traititemconst"]]],[11,"from","","",173,[[["traititemconst"]],["traititem"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"eq","","",113,[[["self"],["traititemmethod"]],["bool"]]],[11,"ne","","",113,[[["self"],["traititemmethod"]],["bool"]]],[11,"hash","","",113,N],[11,"clone","","",113,[[["self"]],["traititemmethod"]]],[11,"from","","",173,[[["traititemmethod"]],["traititem"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"eq","","",114,[[["self"],["traititemtype"]],["bool"]]],[11,"ne","","",114,[[["self"],["traititemtype"]],["bool"]]],[11,"hash","","",114,N],[11,"clone","","",114,[[["self"]],["traititemtype"]]],[11,"from","","",173,[[["traititemtype"]],["traititem"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"eq","","",112,[[["self"],["traititemmacro"]],["bool"]]],[11,"ne","","",112,[[["self"],["traititemmacro"]],["bool"]]],[11,"hash","","",112,N],[11,"clone","","",112,[[["self"]],["traititemmacro"]]],[11,"from","","",173,[[["traititemmacro"]],["traititem"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"clone","","",115,[[["self"]],["traititemverbatim"]]],[11,"from","","",173,[[["traititemverbatim"]],["traititem"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"eq","","",115,[[["self"],["self"]],["bool"]]],[11,"hash","","",115,[[["self"],["h"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"eq","","",171,[[["self"],["implitem"]],["bool"]]],[11,"ne","","",171,[[["self"],["implitem"]],["bool"]]],[11,"hash","","",171,N],[11,"clone","","",171,[[["self"]],["implitem"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"eq","","",89,[[["self"],["implitemconst"]],["bool"]]],[11,"ne","","",89,[[["self"],["implitemconst"]],["bool"]]],[11,"hash","","",89,N],[11,"clone","","",89,[[["self"]],["implitemconst"]]],[11,"from","","",171,[[["implitemconst"]],["implitem"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"eq","","",91,[[["self"],["implitemmethod"]],["bool"]]],[11,"ne","","",91,[[["self"],["implitemmethod"]],["bool"]]],[11,"hash","","",91,N],[11,"clone","","",91,[[["self"]],["implitemmethod"]]],[11,"from","","",171,[[["implitemmethod"]],["implitem"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"eq","","",92,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",92,[[["self"],["implitemtype"]],["bool"]]],[11,"hash","","",92,N],[11,"clone","","",92,[[["self"]],["implitemtype"]]],[11,"from","","",171,[[["implitemtype"]],["implitem"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"eq","","",90,[[["self"],["implitemmacro"]],["bool"]]],[11,"ne","","",90,[[["self"],["implitemmacro"]],["bool"]]],[11,"hash","","",90,N],[11,"clone","","",90,[[["self"]],["implitemmacro"]]],[11,"from","","",171,[[["implitemmacro"]],["implitem"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"clone","","",93,[[["self"]],["implitemverbatim"]]],[11,"from","","",171,[[["implitemverbatim"]],["implitem"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"eq","","",93,[[["self"],["self"]],["bool"]]],[11,"hash","","",93,[[["self"],["h"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"eq","","",110,[[["self"],["methodsig"]],["bool"]]],[11,"ne","","",110,[[["self"],["methodsig"]],["bool"]]],[11,"hash","","",110,N],[11,"clone","","",110,[[["self"]],["methodsig"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"eq","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"ne","","",84,[[["self"],["fndecl"]],["bool"]]],[11,"hash","","",84,N],[11,"clone","","",84,[[["self"]],["fndecl"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"eq","","",169,[[["self"],["fnarg"]],["bool"]]],[11,"ne","","",169,[[["self"],["fnarg"]],["bool"]]],[11,"hash","","",169,N],[11,"clone","","",169,[[["self"]],["fnarg"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"eq","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"ne","","",83,[[["self"],["argselfref"]],["bool"]]],[11,"hash","","",83,N],[11,"clone","","",83,[[["self"]],["argselfref"]]],[11,"from","","",169,[[["argselfref"]],["fnarg"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"eq","","",82,[[["self"],["argself"]],["bool"]]],[11,"ne","","",82,[[["self"],["argself"]],["bool"]]],[11,"hash","","",82,N],[11,"clone","","",82,[[["self"]],["argself"]]],[11,"from","","",169,[[["argself"]],["fnarg"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"eq","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"ne","","",81,[[["self"],["argcaptured"]],["bool"]]],[11,"hash","","",81,N],[11,"clone","","",81,[[["self"]],["argcaptured"]]],[11,"from","","",169,[[["argcaptured"]],["fnarg"]]],[11,"from","","",169,[[["pat"]],["fnarg"]]],[11,"from","","",169,[[["type"]],["fnarg"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["cursor"]],["presult"]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"eq","","",121,[[["self"],["file"]],["bool"]]],[11,"ne","","",121,[[["self"],["file"]],["bool"]]],[11,"hash","","",121,N],[11,"clone","","",121,[[["self"]],["file"]]],[11,"parse","","",122,[[["cursor"]],["presult"]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["lifetime"]]],[11,"new","","",122,[[["str"],["span"]],["self"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"eq","","",122,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",122,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",122,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",122,[[["self"],["h"]]]],[11,"parse","","",177,[[["cursor"]],["presult"]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"parse","","",286,[[["cursor"]],["presult"]]],[11,"description","","",286,[[],["option",["str"]]]],[11,"parse","","",287,[[["cursor"]],["presult"]]],[11,"description","","",287,[[],["option",["str"]]]],[11,"parse","","",288,[[["cursor"]],["presult"]]],[11,"description","","",288,[[],["option",["str"]]]],[11,"parse","","",289,[[["cursor"]],["presult"]]],[11,"description","","",289,[[],["option",["str"]]]],[11,"parse","","",290,[[["cursor"]],["presult"]]],[11,"description","","",290,[[],["option",["str"]]]],[11,"parse","","",291,[[["cursor"]],["presult"]]],[11,"description","","",291,[[],["option",["str"]]]],[11,"parse","","",123,[[["cursor"]],["presult"]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"to_tokens","","",286,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",287,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",288,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",289,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",290,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",291,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",177,[[["literal"]],["self"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"eq","","",177,[[["self"],["lit"]],["bool"]]],[11,"ne","","",177,[[["self"],["lit"]],["bool"]]],[11,"hash","","",177,N],[11,"clone","","",177,[[["self"]],["lit"]]],[11,"fmt","","",286,[[["self"],["formatter"]],["result"]]],[11,"clone","","",286,[[["self"]],["litstr"]]],[11,"from","","",177,[[["litstr"]],["lit"]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result"]]],[11,"clone","","",287,[[["self"]],["litbytestr"]]],[11,"from","","",177,[[["litbytestr"]],["lit"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"clone","","",288,[[["self"]],["litbyte"]]],[11,"from","","",177,[[["litbyte"]],["lit"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"clone","","",289,[[["self"]],["litchar"]]],[11,"from","","",177,[[["litchar"]],["lit"]]],[11,"fmt","","",290,[[["self"],["formatter"]],["result"]]],[11,"clone","","",290,[[["self"]],["litint"]]],[11,"from","","",177,[[["litint"]],["lit"]]],[11,"fmt","","",291,[[["self"],["formatter"]],["result"]]],[11,"clone","","",291,[[["self"]],["litfloat"]]],[11,"from","","",177,[[["litfloat"]],["lit"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"clone","","",123,[[["self"]],["litbool"]]],[11,"from","","",177,[[["litbool"]],["lit"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"clone","","",124,[[["self"]],["litverbatim"]]],[11,"from","","",177,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"new","","",286,[[["str"],["span"]],["self"]]],[11,"value","","",286,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",286,[[["self"]],["result",["parseerror"]]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"set_span","","",286,[[["self"],["span"]]]],[11,"new","","",287,N],[11,"value","","",287,[[["self"]],["vec",["u8"]]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"set_span","","",287,[[["self"],["span"]]]],[11,"new","","",288,[[["u8"],["span"]],["self"]]],[11,"value","","",288,[[["self"]],["u8"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"set_span","","",288,[[["self"],["span"]]]],[11,"new","","",289,[[["char"],["span"]],["self"]]],[11,"value","","",289,[[["self"]],["char"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"set_span","","",289,[[["self"],["span"]]]],[11,"new","","",290,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",290,[[["self"]],["u64"]]],[11,"suffix","","",290,[[["self"]],["intsuffix"]]],[11,"span","","",290,[[["self"]],["span"]]],[11,"set_span","","",290,[[["self"],["span"]]]],[11,"new","","",291,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",291,[[["self"]],["f64"]]],[11,"suffix","","",291,[[["self"]],["floatsuffix"]]],[11,"span","","",291,[[["self"]],["span"]]],[11,"set_span","","",291,[[["self"],["span"]]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"set_span","","",124,[[["self"],["span"]]]],[11,"eq","","",286,[[["self"],["self"]],["bool"]]],[11,"hash","","",286,[[["self"],["h"]]]],[11,"eq","","",287,[[["self"],["self"]],["bool"]]],[11,"hash","","",287,[[["self"],["h"]]]],[11,"eq","","",288,[[["self"],["self"]],["bool"]]],[11,"hash","","",288,[[["self"],["h"]]]],[11,"eq","","",289,[[["self"],["self"]],["bool"]]],[11,"hash","","",289,[[["self"],["h"]]]],[11,"eq","","",290,[[["self"],["self"]],["bool"]]],[11,"hash","","",290,[[["self"],["h"]]]],[11,"eq","","",291,[[["self"],["self"]],["bool"]]],[11,"hash","","",291,[[["self"],["h"]]]],[11,"eq","","",123,[[["self"],["self"]],["bool"]]],[11,"hash","","",123,[[["self"],["h"]]]],[11,"eq","","",124,[[["self"],["self"]],["bool"]]],[11,"hash","","",124,[[["self"],["h"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"eq","","",178,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",178,[[["self"],["strstyle"]],["bool"]]],[11,"hash","","",178,N],[11,"clone","","",178,[[["self"]],["strstyle"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"eq","","",176,[[["self"],["intsuffix"]],["bool"]]],[11,"hash","","",176,N],[11,"clone","","",176,[[["self"]],["intsuffix"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"eq","","",175,[[["self"],["floatsuffix"]],["bool"]]],[11,"hash","","",175,N],[11,"clone","","",175,[[["self"]],["floatsuffix"]]],[11,"parse","","",125,[[["cursor"]],["presult"]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"clone","","",125,[[["self"]],["macro"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"eq","","",179,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",179,[[["self"],["macrodelimiter"]],["bool"]]],[11,"hash","","",179,N],[11,"clone","","",179,[[["self"]],["macrodelimiter"]]],[11,"eq","","",125,[[["self"],["self"]],["bool"]]],[11,"hash","","",125,[[["self"],["h"]]]],[11,"parse","","",129,[[["cursor"]],["presult"]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"eq","","",129,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",129,[[["self"],["deriveinput"]],["bool"]]],[11,"hash","","",129,N],[11,"clone","","",129,[[["self"]],["deriveinput"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"eq","","",180,[[["self"],["data"]],["bool"]]],[11,"ne","","",180,[[["self"],["data"]],["bool"]]],[11,"hash","","",180,N],[11,"clone","","",180,[[["self"]],["data"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"eq","","",127,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",127,[[["self"],["datastruct"]],["bool"]]],[11,"hash","","",127,N],[11,"clone","","",127,[[["self"]],["datastruct"]]],[11,"from","","",180,[[["datastruct"]],["data"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"eq","","",126,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",126,[[["self"],["dataenum"]],["bool"]]],[11,"hash","","",126,N],[11,"clone","","",126,[[["self"]],["dataenum"]]],[11,"from","","",180,[[["dataenum"]],["data"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"eq","","",128,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",128,[[["self"],["dataunion"]],["bool"]]],[11,"hash","","",128,N],[11,"clone","","",128,[[["self"]],["dataunion"]]],[11,"from","","",180,[[["dataunion"]],["data"]]],[11,"parse_binop","","",181,[[["cursor"]],["presult"]]],[11,"parse_assign_op","","",181,[[["cursor"]],["presult"]]],[11,"parse","","",182,[[["cursor"]],["presult"]]],[11,"description","","",182,[[],["option",["str"]]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"eq","","",181,[[["self"],["binop"]],["bool"]]],[11,"ne","","",181,[[["self"],["binop"]],["bool"]]],[11,"hash","","",181,N],[11,"clone","","",181,[[["self"]],["binop"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"eq","","",182,[[["self"],["unop"]],["bool"]]],[11,"ne","","",182,[[["self"],["unop"]],["bool"]]],[11,"hash","","",182,N],[11,"clone","","",182,[[["self"]],["unop"]]],[11,"parse","","",185,[[["cursor"]],["presult"]]],[11,"description","","",185,[[],["option",["str"]]]],[11,"without_plus","","",185,[[["cursor"]],["presult"]]],[11,"parse","","",143,[[["cursor"]],["presult"]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"parse","","",132,[[["cursor"]],["presult"]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"parse","","",141,[[["cursor"]],["presult"]]],[11,"description","","",141,[[],["option",["str"]]]],[11,"parse","","",142,[[["cursor"]],["presult"]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"parse","","",133,[[["cursor"]],["presult"]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"parse","","",138,[[["cursor"]],["presult"]]],[11,"description","","",138,[[],["option",["str"]]]],[11,"parse","","",136,[[["cursor"]],["presult"]]],[11,"description","","",136,[[],["option",["str"]]]],[11,"parse","","",145,[[["cursor"]],["presult"]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"parse","","",137,[[["cursor"]],["presult"]]],[11,"description","","",137,[[],["option",["str"]]]],[11,"parse","","",140,[[["cursor"]],["presult"]]],[11,"description","","",140,[[],["option",["str"]]]],[11,"without_plus","","",184,[[["cursor"]],["presult"]]],[11,"parse","","",184,[[["cursor"]],["presult"]]],[11,"description","","",184,[[],["option",["str"]]]],[11,"parse","","",144,[[["cursor"]],["presult"]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"without_plus","","",144,[[["cursor"]],["presult"]]],[11,"parse","","",135,[[["cursor"]],["presult"]]],[11,"description","","",135,[[],["option",["str"]]]],[11,"parse","","",134,[[["cursor"]],["presult"]]],[11,"description","","",134,[[],["option",["str"]]]],[11,"parse","","",139,[[["cursor"]],["presult"]]],[11,"description","","",139,[[],["option",["str"]]]],[11,"parse","","",131,[[["cursor"]],["presult"]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"parse","","",183,[[["cursor"]],["presult"]]],[11,"description","","",183,[[],["option",["str"]]]],[11,"parse","","",130,[[["cursor"]],["presult"]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"eq","","",185,[[["self"],["type"]],["bool"]]],[11,"ne","","",185,[[["self"],["type"]],["bool"]]],[11,"hash","","",185,N],[11,"clone","","",185,[[["self"]],["type"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"eq","","",143,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",143,[[["self"],["typeslice"]],["bool"]]],[11,"hash","","",143,N],[11,"clone","","",143,[[["self"]],["typeslice"]]],[11,"from","","",185,[[["typeslice"]],["type"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"eq","","",132,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",132,[[["self"],["typearray"]],["bool"]]],[11,"hash","","",132,N],[11,"clone","","",132,[[["self"]],["typearray"]]],[11,"from","","",185,[[["typearray"]],["type"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"eq","","",141,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",141,[[["self"],["typeptr"]],["bool"]]],[11,"hash","","",141,N],[11,"clone","","",141,[[["self"]],["typeptr"]]],[11,"from","","",185,[[["typeptr"]],["type"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"eq","","",142,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",142,[[["self"],["typereference"]],["bool"]]],[11,"hash","","",142,N],[11,"clone","","",142,[[["self"]],["typereference"]]],[11,"from","","",185,[[["typereference"]],["type"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"eq","","",133,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",133,[[["self"],["typebarefn"]],["bool"]]],[11,"hash","","",133,N],[11,"clone","","",133,[[["self"]],["typebarefn"]]],[11,"from","","",185,[[["typebarefn"]],["type"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"eq","","",138,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",138,[[["self"],["typenever"]],["bool"]]],[11,"hash","","",138,N],[11,"clone","","",138,[[["self"]],["typenever"]]],[11,"from","","",185,[[["typenever"]],["type"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"eq","","",145,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",145,[[["self"],["typetuple"]],["bool"]]],[11,"hash","","",145,N],[11,"clone","","",145,[[["self"]],["typetuple"]]],[11,"from","","",185,[[["typetuple"]],["type"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"eq","","",140,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",140,[[["self"],["typepath"]],["bool"]]],[11,"hash","","",140,N],[11,"clone","","",140,[[["self"]],["typepath"]]],[11,"from","","",185,[[["typepath"]],["type"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"eq","","",144,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",144,[[["self"],["typetraitobject"]],["bool"]]],[11,"hash","","",144,N],[11,"clone","","",144,[[["self"]],["typetraitobject"]]],[11,"from","","",185,[[["typetraitobject"]],["type"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"eq","","",135,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",135,[[["self"],["typeimpltrait"]],["bool"]]],[11,"hash","","",135,N],[11,"clone","","",135,[[["self"]],["typeimpltrait"]]],[11,"from","","",185,[[["typeimpltrait"]],["type"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"eq","","",139,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",139,[[["self"],["typeparen"]],["bool"]]],[11,"hash","","",139,N],[11,"clone","","",139,[[["self"]],["typeparen"]]],[11,"from","","",185,[[["typeparen"]],["type"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"eq","","",134,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",134,[[["self"],["typegroup"]],["bool"]]],[11,"hash","","",134,N],[11,"clone","","",134,[[["self"]],["typegroup"]]],[11,"from","","",185,[[["typegroup"]],["type"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"eq","","",136,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",136,[[["self"],["typeinfer"]],["bool"]]],[11,"hash","","",136,N],[11,"clone","","",136,[[["self"]],["typeinfer"]]],[11,"from","","",185,[[["typeinfer"]],["type"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"eq","","",137,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",137,[[["self"],["typemacro"]],["bool"]]],[11,"hash","","",137,N],[11,"clone","","",137,[[["self"]],["typemacro"]]],[11,"from","","",185,[[["typemacro"]],["type"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"clone","","",146,[[["self"]],["typeverbatim"]]],[11,"from","","",185,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"eq","","",146,[[["self"],["self"]],["bool"]]],[11,"hash","","",146,[[["self"],["h"]]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"eq","","",130,[[["self"],["abi"]],["bool"]]],[11,"ne","","",130,[[["self"],["abi"]],["bool"]]],[11,"hash","","",130,N],[11,"clone","","",130,[[["self"]],["abi"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"eq","","",131,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",131,[[["self"],["barefnarg"]],["bool"]]],[11,"hash","","",131,N],[11,"clone","","",131,[[["self"]],["barefnarg"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"eq","","",183,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",183,[[["self"],["barefnargname"]],["bool"]]],[11,"hash","","",183,N],[11,"clone","","",183,[[["self"]],["barefnargname"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"eq","","",184,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",184,[[["self"],["returntype"]],["bool"]]],[11,"hash","","",184,N],[11,"clone","","",184,[[["self"]],["returntype"]]],[11,"parse","","",151,[[["cursor"]],["presult"]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"parse","","",186,[[["cursor"]],["presult"]]],[11,"description","","",186,[[],["option",["str"]]]],[11,"parse","","",148,[[["cursor"]],["presult"]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"parse","","",150,[[["cursor"]],["presult"]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"parse","","",152,[[["cursor"]],["presult"]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"parse","","",149,[[["cursor"]],["presult"]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"parse_mod_style","","",151,[[["cursor"]],["presult"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",187,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",186,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"eq","","",151,[[["self"],["path"]],["bool"]]],[11,"ne","","",151,[[["self"],["path"]],["bool"]]],[11,"hash","","",151,N],[11,"clone","","",151,[[["self"]],["path"]]],[11,"global","","",151,[[["self"]],["bool"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"eq","","",147,[[["self"],["pathtokens"]],["bool"]]],[11,"ne","","",147,[[["self"],["pathtokens"]],["bool"]]],[11,"hash","","",147,N],[11,"clone","","",147,[[["self"]],["pathtokens"]]],[11,"from","","",151,[[["t"]],["self"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"eq","","",152,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",152,[[["self"],["pathsegment"]],["bool"]]],[11,"hash","","",152,N],[11,"clone","","",152,[[["self"]],["pathsegment"]]],[11,"from","","",152,[[["t"]],["self"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"eq","","",187,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",187,[[["self"],["patharguments"]],["bool"]]],[11,"hash","","",187,N],[11,"clone","","",187,[[["self"]],["patharguments"]]],[11,"default","","",187,[[],["self"]]],[11,"is_empty","","",187,[[["self"]],["bool"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"eq","","",186,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",186,[[["self"],["genericargument"]],["bool"]]],[11,"hash","","",186,N],[11,"clone","","",186,[[["self"]],["genericargument"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"eq","","",148,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",148,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"hash","","",148,N],[11,"clone","","",148,[[["self"]],["anglebracketedgenericarguments"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"eq","","",149,[[["self"],["binding"]],["bool"]]],[11,"ne","","",149,[[["self"],["binding"]],["bool"]]],[11,"hash","","",149,N],[11,"clone","","",149,[[["self"]],["binding"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"eq","","",150,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",150,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"hash","","",150,N],[11,"clone","","",150,[[["self"]],["parenthesizedgenericarguments"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"eq","","",153,[[["self"],["qself"]],["bool"]]],[11,"ne","","",153,[[["self"],["qself"]],["bool"]]],[11,"hash","","",153,N],[11,"clone","","",153,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",292,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",292,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",292,[[["self"]],["cursor"]]],[11,"clone","","",293,[[["self"]],["cursor"]]],[11,"eq","","",293,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",293,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",293,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",293,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",293,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",293,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",293,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",293,[[["self"]],["span"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",294,N],[13,"End","","",294,N],[11,"to_tokens","","",295,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",294,[[["self"],["tokenstream"]]]],[11,"eq","","",295,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",295,[[["self"],["punctuated"]],["bool"]]],[11,"hash","","",295,N],[11,"clone","","",295,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",295,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",295,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",295,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",295,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",295,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",295,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",295,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",295,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",295,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",295,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",295,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",295,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",295,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",295,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",295,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",295,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",295,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",295,[[["self"],["usize"],["t"]]]],[11,"fmt","","",295,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",295,[[["i"]],["self"]]],[11,"extend","","",295,[[["self"],["i"]]]],[11,"from_iter","","",295,[[["i"]],["self"]]],[11,"extend","","",295,[[["self"],["i"]]]],[11,"into_iter","","",295,N],[11,"default","","",295,[[],["self"]]],[11,"next","","",296,[[["self"]],["option"]]],[11,"len","","",296,[[["self"]],["usize"]]],[11,"next","","",297,[[["self"]],["option"]]],[11,"len","","",297,[[["self"]],["usize"]]],[11,"next","","",298,[[["self"]],["option"]]],[11,"len","","",298,[[["self"]],["usize"]]],[11,"next","","",299,[[["self"]],["option"]]],[11,"len","","",299,[[["self"]],["usize"]]],[11,"next","","",300,[[["self"]],["option"]]],[11,"len","","",300,[[["self"]],["usize"]]],[11,"next","","",301,[[["self"]],["option"]]],[11,"len","","",301,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",294,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",294,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",294,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",294,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",294,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",294,N],[11,"index","","",295,N],[11,"index_mut","","",295,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",295,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",295,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",295,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",295,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",295,N],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[0,"ext","","Extension traits that are made available within the `call!` parser.",N,N],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",302,[[["cursor"]],["presult"]]],[11,"parse_any","syn","",282,[[["cursor"]],["presult"]]],[6,"PResult","syn::synom","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",303,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",303,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",304,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",304,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",304,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",304,[[["self"],["str"]],["result",["parseerror"]]]],[11,"parse","syn","",282,[[["cursor"]],["presult"]]],[11,"description","","",282,[[],["option",["str"]]]],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",305,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_arg_captured","","",N,[[["v"],["argcaptured"]]]],[5,"visit_arg_self","","",N,[[["v"],["argself"]]]],[5,"visit_arg_self_ref","","",N,[[["v"],["argselfref"]]]],[5,"visit_arm","","",N,[[["v"],["arm"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_block","","",N,[[["v"],["block"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_array","","",N,[[["v"],["exprarray"]]]],[5,"visit_expr_assign","","",N,[[["v"],["exprassign"]]]],[5,"visit_expr_assign_op","","",N,[[["v"],["exprassignop"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_block","","",N,[[["v"],["exprblock"]]]],[5,"visit_expr_box","","",N,[[["v"],["exprbox"]]]],[5,"visit_expr_break","","",N,[[["v"],["exprbreak"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_catch","","",N,[[["v"],["exprcatch"]]]],[5,"visit_expr_closure","","",N,[[["v"],["exprclosure"]]]],[5,"visit_expr_continue","","",N,[[["v"],["exprcontinue"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_for_loop","","",N,[[["v"],["exprforloop"]]]],[5,"visit_expr_group","","",N,[[["v"],["exprgroup"]]]],[5,"visit_expr_if","","",N,[[["v"],["exprif"]]]],[5,"visit_expr_if_let","","",N,[[["v"],["expriflet"]]]],[5,"visit_expr_in_place","","",N,[[["v"],["exprinplace"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_loop","","",N,[[["v"],["exprloop"]]]],[5,"visit_expr_macro","","",N,[[["v"],["exprmacro"]]]],[5,"visit_expr_match","","",N,[[["v"],["exprmatch"]]]],[5,"visit_expr_method_call","","",N,[[["v"],["exprmethodcall"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_range","","",N,[[["v"],["exprrange"]]]],[5,"visit_expr_reference","","",N,[[["v"],["exprreference"]]]],[5,"visit_expr_repeat","","",N,[[["v"],["exprrepeat"]]]],[5,"visit_expr_return","","",N,[[["v"],["exprreturn"]]]],[5,"visit_expr_struct","","",N,[[["v"],["exprstruct"]]]],[5,"visit_expr_try","","",N,[[["v"],["exprtry"]]]],[5,"visit_expr_tuple","","",N,[[["v"],["exprtuple"]]]],[5,"visit_expr_type","","",N,[[["v"],["exprtype"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe","","",N,[[["v"],["exprunsafe"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_expr_while","","",N,[[["v"],["exprwhile"]]]],[5,"visit_expr_while_let","","",N,[[["v"],["exprwhilelet"]]]],[5,"visit_expr_yield","","",N,[[["v"],["expryield"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_field_pat","","",N,[[["v"],["fieldpat"]]]],[5,"visit_field_value","","",N,[[["v"],["fieldvalue"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_file","","",N,[[["v"],["file"]]]],[5,"visit_fn_arg","","",N,[[["v"],["fnarg"]]]],[5,"visit_fn_decl","","",N,[[["v"],["fndecl"]]]],[5,"visit_foreign_item","","",N,[[["v"],["foreignitem"]]]],[5,"visit_foreign_item_fn","","",N,[[["v"],["foreignitemfn"]]]],[5,"visit_foreign_item_static","","",N,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type","","",N,[[["v"],["foreignitemtype"]]]],[5,"visit_foreign_item_verbatim","","",N,[[["v"],["foreignitemverbatim"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_method_argument","","",N,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_impl_item","","",N,[[["v"],["implitem"]]]],[5,"visit_impl_item_const","","",N,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_macro","","",N,[[["v"],["implitemmacro"]]]],[5,"visit_impl_item_method","","",N,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type","","",N,[[["v"],["implitemtype"]]]],[5,"visit_impl_item_verbatim","","",N,[[["v"],["implitemverbatim"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_item","","",N,[[["v"],["item"]]]],[5,"visit_item_const","","",N,[[["v"],["itemconst"]]]],[5,"visit_item_enum","","",N,[[["v"],["itemenum"]]]],[5,"visit_item_extern_crate","","",N,[[["v"],["itemexterncrate"]]]],[5,"visit_item_fn","","",N,[[["v"],["itemfn"]]]],[5,"visit_item_foreign_mod","","",N,[[["v"],["itemforeignmod"]]]],[5,"visit_item_impl","","",N,[[["v"],["itemimpl"]]]],[5,"visit_item_macro","","",N,[[["v"],["itemmacro"]]]],[5,"visit_item_macro2","","",N,[[["v"],["itemmacro2"]]]],[5,"visit_item_mod","","",N,[[["v"],["itemmod"]]]],[5,"visit_item_static","","",N,[[["v"],["itemstatic"]]]],[5,"visit_item_struct","","",N,[[["v"],["itemstruct"]]]],[5,"visit_item_trait","","",N,[[["v"],["itemtrait"]]]],[5,"visit_item_type","","",N,[[["v"],["itemtype"]]]],[5,"visit_item_union","","",N,[[["v"],["itemunion"]]]],[5,"visit_item_use","","",N,[[["v"],["itemuse"]]]],[5,"visit_item_verbatim","","",N,[[["v"],["itemverbatim"]]]],[5,"visit_label","","",N,[[["v"],["label"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_local","","",N,[[["v"],["local"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_method_sig","","",N,[[["v"],["methodsig"]]]],[5,"visit_method_turbofish","","",N,[[["v"],["methodturbofish"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_pat","","",N,[[["v"],["pat"]]]],[5,"visit_pat_box","","",N,[[["v"],["patbox"]]]],[5,"visit_pat_ident","","",N,[[["v"],["patident"]]]],[5,"visit_pat_lit","","",N,[[["v"],["patlit"]]]],[5,"visit_pat_macro","","",N,[[["v"],["patmacro"]]]],[5,"visit_pat_path","","",N,[[["v"],["patpath"]]]],[5,"visit_pat_range","","",N,[[["v"],["patrange"]]]],[5,"visit_pat_ref","","",N,[[["v"],["patref"]]]],[5,"visit_pat_slice","","",N,[[["v"],["patslice"]]]],[5,"visit_pat_struct","","",N,[[["v"],["patstruct"]]]],[5,"visit_pat_tuple","","",N,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct","","",N,[[["v"],["pattuplestruct"]]]],[5,"visit_pat_verbatim","","",N,[[["v"],["patverbatim"]]]],[5,"visit_pat_wild","","",N,[[["v"],["patwild"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_range_limits","","",N,[[["v"],["rangelimits"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_stmt","","",N,[[["v"],["stmt"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_trait_item","","",N,[[["v"],["traititem"]]]],[5,"visit_trait_item_const","","",N,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro","","",N,[[["v"],["traititemmacro"]]]],[5,"visit_trait_item_method","","",N,[[["v"],["traititemmethod"]]]],[5,"visit_trait_item_type","","",N,[[["v"],["traititemtype"]]]],[5,"visit_trait_item_verbatim","","",N,[[["v"],["traititemverbatim"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_use_glob","","",N,[[["v"],["useglob"]]]],[5,"visit_use_group","","",N,[[["v"],["usegroup"]]]],[5,"visit_use_name","","",N,[[["v"],["usename"]]]],[5,"visit_use_path","","",N,[[["v"],["usepath"]]]],[5,"visit_use_rename","","",N,[[["v"],["userename"]]]],[5,"visit_use_tree","","",N,[[["v"],["usetree"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",306,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",306,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured","","",306,[[["self"],["argcaptured"]]]],[11,"visit_arg_self","","",306,[[["self"],["argself"]]]],[11,"visit_arg_self_ref","","",306,[[["self"],["argselfref"]]]],[11,"visit_arm","","",306,[[["self"],["arm"]]]],[11,"visit_attr_style","","",306,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",306,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",306,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",306,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",306,[[["self"],["binop"]]]],[11,"visit_binding","","",306,[[["self"],["binding"]]]],[11,"visit_block","","",306,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",306,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",306,[[["self"],["constparam"]]]],[11,"visit_data","","",306,[[["self"],["data"]]]],[11,"visit_data_enum","","",306,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",306,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",306,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",306,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",306,[[["self"],["expr"]]]],[11,"visit_expr_array","","",306,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",306,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",306,[[["self"],["exprassignop"]]]],[11,"visit_expr_binary","","",306,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",306,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",306,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",306,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",306,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",306,[[["self"],["exprcast"]]]],[11,"visit_expr_catch","","",306,[[["self"],["exprcatch"]]]],[11,"visit_expr_closure","","",306,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",306,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",306,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",306,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",306,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",306,[[["self"],["exprif"]]]],[11,"visit_expr_if_let","","",306,[[["self"],["expriflet"]]]],[11,"visit_expr_in_place","","",306,[[["self"],["exprinplace"]]]],[11,"visit_expr_index","","",306,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",306,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",306,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",306,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",306,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",306,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",306,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",306,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",306,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",306,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",306,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",306,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",306,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",306,[[["self"],["exprtry"]]]],[11,"visit_expr_tuple","","",306,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",306,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",306,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",306,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim","","",306,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while","","",306,[[["self"],["exprwhile"]]]],[11,"visit_expr_while_let","","",306,[[["self"],["exprwhilelet"]]]],[11,"visit_expr_yield","","",306,[[["self"],["expryield"]]]],[11,"visit_field","","",306,[[["self"],["field"]]]],[11,"visit_field_pat","","",306,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",306,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",306,[[["self"],["fields"]]]],[11,"visit_fields_named","","",306,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",306,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",306,[[["self"],["file"]]]],[11,"visit_fn_arg","","",306,[[["self"],["fnarg"]]]],[11,"visit_fn_decl","","",306,[[["self"],["fndecl"]]]],[11,"visit_foreign_item","","",306,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",306,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_static","","",306,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",306,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim","","",306,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument","","",306,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",306,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",306,[[["self"],["genericparam"]]]],[11,"visit_generics","","",306,[[["self"],["generics"]]]],[11,"visit_ident","","",306,[[["self"],["ident"]]]],[11,"visit_impl_item","","",306,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",306,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",306,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",306,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",306,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim","","",306,[[["self"],["implitemverbatim"]]]],[11,"visit_index","","",306,[[["self"],["index"]]]],[11,"visit_item","","",306,[[["self"],["item"]]]],[11,"visit_item_const","","",306,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",306,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate","","",306,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",306,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",306,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",306,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",306,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",306,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",306,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",306,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",306,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",306,[[["self"],["itemtrait"]]]],[11,"visit_item_type","","",306,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",306,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",306,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim","","",306,[[["self"],["itemverbatim"]]]],[11,"visit_label","","",306,[[["self"],["label"]]]],[11,"visit_lifetime","","",306,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",306,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",306,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",306,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",306,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",306,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",306,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",306,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",306,[[["self"],["litint"]]]],[11,"visit_lit_str","","",306,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",306,[[["self"],["litverbatim"]]]],[11,"visit_local","","",306,[[["self"],["local"]]]],[11,"visit_macro","","",306,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",306,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",306,[[["self"],["member"]]]],[11,"visit_meta","","",306,[[["self"],["meta"]]]],[11,"visit_meta_list","","",306,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",306,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig","","",306,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish","","",306,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",306,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",306,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",306,[[["self"],["pat"]]]],[11,"visit_pat_box","","",306,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",306,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",306,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",306,[[["self"],["patmacro"]]]],[11,"visit_pat_path","","",306,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",306,[[["self"],["patrange"]]]],[11,"visit_pat_ref","","",306,[[["self"],["patref"]]]],[11,"visit_pat_slice","","",306,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",306,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",306,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",306,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim","","",306,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild","","",306,[[["self"],["patwild"]]]],[11,"visit_path","","",306,[[["self"],["path"]]]],[11,"visit_path_arguments","","",306,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",306,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",306,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",306,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",306,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",306,[[["self"],["qself"]]]],[11,"visit_range_limits","","",306,[[["self"],["rangelimits"]]]],[11,"visit_return_type","","",306,[[["self"],["returntype"]]]],[11,"visit_span","","",306,[[["self"],["span"]]]],[11,"visit_stmt","","",306,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",306,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",306,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",306,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",306,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",306,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",306,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",306,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim","","",306,[[["self"],["traititemverbatim"]]]],[11,"visit_type","","",306,[[["self"],["type"]]]],[11,"visit_type_array","","",306,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",306,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",306,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",306,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",306,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",306,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",306,[[["self"],["typenever"]]]],[11,"visit_type_param","","",306,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",306,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",306,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",306,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",306,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",306,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",306,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",306,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",306,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",306,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",306,[[["self"],["unop"]]]],[11,"visit_use_glob","","",306,[[["self"],["useglob"]]]],[11,"visit_use_group","","",306,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",306,[[["self"],["usename"]]]],[11,"visit_use_path","","",306,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",306,[[["self"],["userename"]]]],[11,"visit_use_tree","","",306,[[["self"],["usetree"]]]],[11,"visit_variant","","",306,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",306,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",306,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",306,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",306,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",306,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",306,[[["self"],["wherepredicate"]]]],[11,"fmt","syn::synom","",307,[[["self"],["formatter"]],["result"]]],[11,"description","","",307,[[["self"]],["str"]]],[11,"fmt","","",307,[[["self"],["formatter"]],["result"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"custom_keyword","","Parse the given word as a keyword.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",282,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",282,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",282,N],[11,"span","","",282,[[["self"]],["span"]]],[11,"into","","",282,[[["self"]],["u"]]],[11,"to_string","","",282,[[["self"]],["string"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,N],[11,"from","","",282,[[["t"]],["t"]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"get_type_id","","",282,[[["self"]],["typeid"]]],[11,"try_into","","",282,[[["self"]],["result"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"not_found","","",282,[[["str"],["str"]],["e"]]],[11,"eq","","",282,[[["self"],["t"]],["bool"]]],[11,"eq","","",282,[[["self"],["ident"]],["bool"]]],[11,"hash","","",282,N],[11,"fmt","","",282,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",282,[[["self"],["ident"]],["option",["ordering"]]]],[11,"clone","","",282,[[["self"]],["ident"]]],[11,"fmt","","",282,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",282,[[["self"],["ident"]],["ordering"]]],[11,"to_tokens","","",282,N],[11,"span","","",0,[[["self"]],["span"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"not_found","","",11,[[["str"],["str"]],["e"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"not_found","","",12,[[["str"],["str"]],["e"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"not_found","","",13,[[["str"],["str"]],["e"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"not_found","","",14,[[["str"],["str"]],["e"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"not_found","","",15,[[["str"],["str"]],["e"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"not_found","","",16,[[["str"],["str"]],["e"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"not_found","","",17,[[["str"],["str"]],["e"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"not_found","","",18,[[["str"],["str"]],["e"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"not_found","","",19,[[["str"],["str"]],["e"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"not_found","","",20,[[["str"],["str"]],["e"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"not_found","","",21,[[["str"],["str"]],["e"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"not_found","","",22,[[["str"],["str"]],["e"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"not_found","","",23,[[["str"],["str"]],["e"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"not_found","","",24,[[["str"],["str"]],["e"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"not_found","","",25,[[["str"],["str"]],["e"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"not_found","","",26,[[["str"],["str"]],["e"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"not_found","","",27,[[["str"],["str"]],["e"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"not_found","","",28,[[["str"],["str"]],["e"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"not_found","","",29,[[["str"],["str"]],["e"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"not_found","","",30,[[["str"],["str"]],["e"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"not_found","","",31,[[["str"],["str"]],["e"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"not_found","","",32,[[["str"],["str"]],["e"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"not_found","","",33,[[["str"],["str"]],["e"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"not_found","","",34,[[["str"],["str"]],["e"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"not_found","","",35,[[["str"],["str"]],["e"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"not_found","","",36,[[["str"],["str"]],["e"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"not_found","","",37,[[["str"],["str"]],["e"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"not_found","","",38,[[["str"],["str"]],["e"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"not_found","","",39,[[["str"],["str"]],["e"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"not_found","","",40,[[["str"],["str"]],["e"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"not_found","","",41,[[["str"],["str"]],["e"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"not_found","","",42,[[["str"],["str"]],["e"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"not_found","","",43,[[["str"],["str"]],["e"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"not_found","","",44,[[["str"],["str"]],["e"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"not_found","","",45,[[["str"],["str"]],["e"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"not_found","","",46,[[["str"],["str"]],["e"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"not_found","","",47,[[["str"],["str"]],["e"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"not_found","","",48,[[["str"],["str"]],["e"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"not_found","","",49,[[["str"],["str"]],["e"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"not_found","","",50,[[["str"],["str"]],["e"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"not_found","","",51,[[["str"],["str"]],["e"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"not_found","","",52,[[["str"],["str"]],["e"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"not_found","","",53,[[["str"],["str"]],["e"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"not_found","","",54,[[["str"],["str"]],["e"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"not_found","","",55,[[["str"],["str"]],["e"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"not_found","","",56,[[["str"],["str"]],["e"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"not_found","","",57,[[["str"],["str"]],["e"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"not_found","","",58,[[["str"],["str"]],["e"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"not_found","","",59,[[["str"],["str"]],["e"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"not_found","","",60,[[["str"],["str"]],["e"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"not_found","","",61,[[["str"],["str"]],["e"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"not_found","","",62,[[["str"],["str"]],["e"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"not_found","","",63,[[["str"],["str"]],["e"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"not_found","","",64,[[["str"],["str"]],["e"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"not_found","","",65,[[["str"],["str"]],["e"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"not_found","","",66,[[["str"],["str"]],["e"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"not_found","","",67,[[["str"],["str"]],["e"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"not_found","","",68,[[["str"],["str"]],["e"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"not_found","","",69,[[["str"],["str"]],["e"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"not_found","","",70,[[["str"],["str"]],["e"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"not_found","","",71,[[["str"],["str"]],["e"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"not_found","","",72,[[["str"],["str"]],["e"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"not_found","","",73,[[["str"],["str"]],["e"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"not_found","","",74,[[["str"],["str"]],["e"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"not_found","","",75,[[["str"],["str"]],["e"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"not_found","","",76,[[["str"],["str"]],["e"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"not_found","","",77,[[["str"],["str"]],["e"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"not_found","","",78,[[["str"],["str"]],["e"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"not_found","","",79,[[["str"],["str"]],["e"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"not_found","","",80,[[["str"],["str"]],["e"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"into","","",283,[[["self"]],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,N],[11,"from","","",283,[[["t"]],["t"]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"get_type_id","","",283,[[["self"]],["typeid"]]],[11,"try_into","","",283,[[["self"]],["result"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"not_found","","",283,[[["str"],["str"]],["e"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"into","","",285,[[["self"]],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,N],[11,"from","","",285,[[["t"]],["t"]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"get_type_id","","",285,[[["self"]],["typeid"]]],[11,"try_into","","",285,[[["self"]],["result"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"not_found","","",285,[[["str"],["str"]],["e"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"into","","",284,[[["self"]],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,N],[11,"from","","",284,[[["t"]],["t"]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"get_type_id","","",284,[[["self"]],["typeid"]]],[11,"try_into","","",284,[[["self"]],["result"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"not_found","","",284,[[["str"],["str"]],["e"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"not_found","","",81,[[["str"],["str"]],["e"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"not_found","","",82,[[["str"],["str"]],["e"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"not_found","","",83,[[["str"],["str"]],["e"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"not_found","","",84,[[["str"],["str"]],["e"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"not_found","","",85,[[["str"],["str"]],["e"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"not_found","","",86,[[["str"],["str"]],["e"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"not_found","","",87,[[["str"],["str"]],["e"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"not_found","","",88,[[["str"],["str"]],["e"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"not_found","","",89,[[["str"],["str"]],["e"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"not_found","","",90,[[["str"],["str"]],["e"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"not_found","","",91,[[["str"],["str"]],["e"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"not_found","","",92,[[["str"],["str"]],["e"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"not_found","","",93,[[["str"],["str"]],["e"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"not_found","","",94,[[["str"],["str"]],["e"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"not_found","","",95,[[["str"],["str"]],["e"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"not_found","","",96,[[["str"],["str"]],["e"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"not_found","","",97,[[["str"],["str"]],["e"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"not_found","","",98,[[["str"],["str"]],["e"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"not_found","","",99,[[["str"],["str"]],["e"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"not_found","","",100,[[["str"],["str"]],["e"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"not_found","","",101,[[["str"],["str"]],["e"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"not_found","","",102,[[["str"],["str"]],["e"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"not_found","","",103,[[["str"],["str"]],["e"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"not_found","","",104,[[["str"],["str"]],["e"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"not_found","","",105,[[["str"],["str"]],["e"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"not_found","","",106,[[["str"],["str"]],["e"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"not_found","","",107,[[["str"],["str"]],["e"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"not_found","","",108,[[["str"],["str"]],["e"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"not_found","","",109,[[["str"],["str"]],["e"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"not_found","","",110,[[["str"],["str"]],["e"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"not_found","","",111,[[["str"],["str"]],["e"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"not_found","","",112,[[["str"],["str"]],["e"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"not_found","","",113,[[["str"],["str"]],["e"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"not_found","","",114,[[["str"],["str"]],["e"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"not_found","","",115,[[["str"],["str"]],["e"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"not_found","","",116,[[["str"],["str"]],["e"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"not_found","","",117,[[["str"],["str"]],["e"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"not_found","","",118,[[["str"],["str"]],["e"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"not_found","","",119,[[["str"],["str"]],["e"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"not_found","","",120,[[["str"],["str"]],["e"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"not_found","","",121,[[["str"],["str"]],["e"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"not_found","","",122,[[["str"],["str"]],["e"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"not_found","","",123,[[["str"],["str"]],["e"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"into","","",288,[[["self"]],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,N],[11,"from","","",288,[[["t"]],["t"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"get_type_id","","",288,[[["self"]],["typeid"]]],[11,"try_into","","",288,[[["self"]],["result"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"not_found","","",288,[[["str"],["str"]],["e"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"into","","",287,[[["self"]],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,N],[11,"from","","",287,[[["t"]],["t"]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"get_type_id","","",287,[[["self"]],["typeid"]]],[11,"try_into","","",287,[[["self"]],["result"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"not_found","","",287,[[["str"],["str"]],["e"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"into","","",289,[[["self"]],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,N],[11,"from","","",289,[[["t"]],["t"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"get_type_id","","",289,[[["self"]],["typeid"]]],[11,"try_into","","",289,[[["self"]],["result"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"not_found","","",289,[[["str"],["str"]],["e"]]],[11,"span","","",291,[[["self"]],["span"]]],[11,"into","","",291,[[["self"]],["u"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,N],[11,"from","","",291,[[["t"]],["t"]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"get_type_id","","",291,[[["self"]],["typeid"]]],[11,"try_into","","",291,[[["self"]],["result"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"not_found","","",291,[[["str"],["str"]],["e"]]],[11,"span","","",290,[[["self"]],["span"]]],[11,"into","","",290,[[["self"]],["u"]]],[11,"to_owned","","",290,[[["self"]],["t"]]],[11,"clone_into","","",290,N],[11,"from","","",290,[[["t"]],["t"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"get_type_id","","",290,[[["self"]],["typeid"]]],[11,"try_into","","",290,[[["self"]],["result"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"not_found","","",290,[[["str"],["str"]],["e"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"into","","",286,[[["self"]],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,N],[11,"from","","",286,[[["t"]],["t"]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"get_type_id","","",286,[[["self"]],["typeid"]]],[11,"try_into","","",286,[[["self"]],["result"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"not_found","","",286,[[["str"],["str"]],["e"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"not_found","","",124,[[["str"],["str"]],["e"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"not_found","","",125,[[["str"],["str"]],["e"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"not_found","","",126,[[["str"],["str"]],["e"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"not_found","","",127,[[["str"],["str"]],["e"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"not_found","","",128,[[["str"],["str"]],["e"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"not_found","","",129,[[["str"],["str"]],["e"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"not_found","","",130,[[["str"],["str"]],["e"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"not_found","","",131,[[["str"],["str"]],["e"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"not_found","","",132,[[["str"],["str"]],["e"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"not_found","","",133,[[["str"],["str"]],["e"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"not_found","","",134,[[["str"],["str"]],["e"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"not_found","","",135,[[["str"],["str"]],["e"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"not_found","","",136,[[["str"],["str"]],["e"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"not_found","","",137,[[["str"],["str"]],["e"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"not_found","","",138,[[["str"],["str"]],["e"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"not_found","","",139,[[["str"],["str"]],["e"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"not_found","","",140,[[["str"],["str"]],["e"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"not_found","","",141,[[["str"],["str"]],["e"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"not_found","","",142,[[["str"],["str"]],["e"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"not_found","","",143,[[["str"],["str"]],["e"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"not_found","","",144,[[["str"],["str"]],["e"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"not_found","","",145,[[["str"],["str"]],["e"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"not_found","","",146,[[["str"],["str"]],["e"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"not_found","","",147,[[["str"],["str"]],["e"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"not_found","","",148,[[["str"],["str"]],["e"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"not_found","","",149,[[["str"],["str"]],["e"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"not_found","","",150,[[["str"],["str"]],["e"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"not_found","","",151,[[["str"],["str"]],["e"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"not_found","","",152,[[["str"],["str"]],["e"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"not_found","","",153,[[["str"],["str"]],["e"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"not_found","","",154,[[["str"],["str"]],["e"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"not_found","","",155,[[["str"],["str"]],["e"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"from","","",156,[[["t"]],["t"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"not_found","","",156,[[["str"],["str"]],["e"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"not_found","","",157,[[["str"],["str"]],["e"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"not_found","","",158,[[["str"],["str"]],["e"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"from","","",159,[[["t"]],["t"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"not_found","","",159,[[["str"],["str"]],["e"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"not_found","","",160,[[["str"],["str"]],["e"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"not_found","","",161,[[["str"],["str"]],["e"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"not_found","","",162,[[["str"],["str"]],["e"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"from","","",163,[[["t"]],["t"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"not_found","","",163,[[["str"],["str"]],["e"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"not_found","","",164,[[["str"],["str"]],["e"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"from","","",165,[[["t"]],["t"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"not_found","","",165,[[["str"],["str"]],["e"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"not_found","","",166,[[["str"],["str"]],["e"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"from","","",167,[[["t"]],["t"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"not_found","","",167,[[["str"],["str"]],["e"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"not_found","","",168,[[["str"],["str"]],["e"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"not_found","","",169,[[["str"],["str"]],["e"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"from","","",170,[[["t"]],["t"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"not_found","","",170,[[["str"],["str"]],["e"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"not_found","","",171,[[["str"],["str"]],["e"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"from","","",172,[[["t"]],["t"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"not_found","","",172,[[["str"],["str"]],["e"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"not_found","","",173,[[["str"],["str"]],["e"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"from","","",174,[[["t"]],["t"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"not_found","","",174,[[["str"],["str"]],["e"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"from","","",175,[[["t"]],["t"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"not_found","","",175,[[["str"],["str"]],["e"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"from","","",176,[[["t"]],["t"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"not_found","","",176,[[["str"],["str"]],["e"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"from","","",177,[[["t"]],["t"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"not_found","","",177,[[["str"],["str"]],["e"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"from","","",178,[[["t"]],["t"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"not_found","","",178,[[["str"],["str"]],["e"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"from","","",179,[[["t"]],["t"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"not_found","","",179,[[["str"],["str"]],["e"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"from","","",180,[[["t"]],["t"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"not_found","","",180,[[["str"],["str"]],["e"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"from","","",181,[[["t"]],["t"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"not_found","","",181,[[["str"],["str"]],["e"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"not_found","","",182,[[["str"],["str"]],["e"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"from","","",183,[[["t"]],["t"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"not_found","","",183,[[["str"],["str"]],["e"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"from","","",184,[[["t"]],["t"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"not_found","","",184,[[["str"],["str"]],["e"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,N],[11,"from","","",185,[[["t"]],["t"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"not_found","","",185,[[["str"],["str"]],["e"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"from","","",186,[[["t"]],["t"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"not_found","","",186,[[["str"],["str"]],["e"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,N],[11,"from","","",187,[[["t"]],["t"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"not_found","","",187,[[["str"],["str"]],["e"]]],[11,"span","syn::token","",188,[[["self"]],["span"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,N],[11,"from","","",188,[[["t"]],["t"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"not_found","","",188,[[["str"],["str"]],["e"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,N],[11,"from","","",189,[[["t"]],["t"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"from","","",190,[[["t"]],["t"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,N],[11,"from","","",191,[[["t"]],["t"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"not_found","","",191,[[["str"],["str"]],["e"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"from","","",192,[[["t"]],["t"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"not_found","","",192,[[["str"],["str"]],["e"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"from","","",193,[[["t"]],["t"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"not_found","","",193,[[["str"],["str"]],["e"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"from","","",194,[[["t"]],["t"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"not_found","","",194,[[["str"],["str"]],["e"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"from","","",195,[[["t"]],["t"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"not_found","","",195,[[["str"],["str"]],["e"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"from","","",196,[[["t"]],["t"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"not_found","","",196,[[["str"],["str"]],["e"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"from","","",197,[[["t"]],["t"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"from","","",198,[[["t"]],["t"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"from","","",199,[[["t"]],["t"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"from","","",200,[[["t"]],["t"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"from","","",201,[[["t"]],["t"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"from","","",202,[[["t"]],["t"]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"span","","",203,[[["self"]],["span"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"from","","",203,[[["t"]],["t"]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"from","","",204,[[["t"]],["t"]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"from","","",205,[[["t"]],["t"]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"from","","",206,[[["t"]],["t"]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"from","","",207,[[["t"]],["t"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"from","","",208,[[["t"]],["t"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"from","","",209,[[["t"]],["t"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"from","","",210,[[["t"]],["t"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"from","","",211,[[["t"]],["t"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"from","","",212,[[["t"]],["t"]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"from","","",213,[[["t"]],["t"]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"from","","",214,[[["t"]],["t"]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"from","","",215,[[["t"]],["t"]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"from","","",216,[[["t"]],["t"]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"from","","",217,[[["t"]],["t"]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"from","","",218,[[["t"]],["t"]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"from","","",219,[[["t"]],["t"]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"from","","",220,[[["t"]],["t"]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"from","","",221,[[["t"]],["t"]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"from","","",222,[[["t"]],["t"]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"from","","",223,[[["t"]],["t"]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"from","","",224,[[["t"]],["t"]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,N],[11,"from","","",225,[[["t"]],["t"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,N],[11,"from","","",226,[[["t"]],["t"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,N],[11,"from","","",227,[[["t"]],["t"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,N],[11,"from","","",228,[[["t"]],["t"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,N],[11,"from","","",229,[[["t"]],["t"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,N],[11,"from","","",230,[[["t"]],["t"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,N],[11,"from","","",231,[[["t"]],["t"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"not_found","","",231,[[["str"],["str"]],["e"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"into","","",232,[[["self"]],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,N],[11,"from","","",232,[[["t"]],["t"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"get_type_id","","",232,[[["self"]],["typeid"]]],[11,"try_into","","",232,[[["self"]],["result"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"not_found","","",232,[[["str"],["str"]],["e"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"into","","",233,[[["self"]],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,N],[11,"from","","",233,[[["t"]],["t"]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"get_type_id","","",233,[[["self"]],["typeid"]]],[11,"try_into","","",233,[[["self"]],["result"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"not_found","","",233,[[["str"],["str"]],["e"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"into","","",234,[[["self"]],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,N],[11,"from","","",234,[[["t"]],["t"]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"get_type_id","","",234,[[["self"]],["typeid"]]],[11,"try_into","","",234,[[["self"]],["result"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"not_found","","",234,[[["str"],["str"]],["e"]]],[11,"into","","",235,[[["self"]],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,N],[11,"from","","",235,[[["t"]],["t"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"get_type_id","","",235,[[["self"]],["typeid"]]],[11,"try_into","","",235,[[["self"]],["result"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"not_found","","",235,[[["str"],["str"]],["e"]]],[11,"into","","",236,[[["self"]],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,N],[11,"from","","",236,[[["t"]],["t"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"get_type_id","","",236,[[["self"]],["typeid"]]],[11,"try_into","","",236,[[["self"]],["result"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"not_found","","",236,[[["str"],["str"]],["e"]]],[11,"into","","",237,[[["self"]],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,N],[11,"from","","",237,[[["t"]],["t"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"get_type_id","","",237,[[["self"]],["typeid"]]],[11,"try_into","","",237,[[["self"]],["result"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"not_found","","",237,[[["str"],["str"]],["e"]]],[11,"into","","",238,[[["self"]],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,N],[11,"from","","",238,[[["t"]],["t"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"get_type_id","","",238,[[["self"]],["typeid"]]],[11,"try_into","","",238,[[["self"]],["result"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"not_found","","",238,[[["str"],["str"]],["e"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"into","","",239,[[["self"]],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,N],[11,"from","","",239,[[["t"]],["t"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"get_type_id","","",239,[[["self"]],["typeid"]]],[11,"try_into","","",239,[[["self"]],["result"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"not_found","","",239,[[["str"],["str"]],["e"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"into","","",240,[[["self"]],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,N],[11,"from","","",240,[[["t"]],["t"]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"get_type_id","","",240,[[["self"]],["typeid"]]],[11,"try_into","","",240,[[["self"]],["result"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"not_found","","",240,[[["str"],["str"]],["e"]]],[11,"span","","",241,[[["self"]],["span"]]],[11,"into","","",241,[[["self"]],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,N],[11,"from","","",241,[[["t"]],["t"]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"get_type_id","","",241,[[["self"]],["typeid"]]],[11,"try_into","","",241,[[["self"]],["result"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"not_found","","",241,[[["str"],["str"]],["e"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"into","","",242,[[["self"]],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,N],[11,"from","","",242,[[["t"]],["t"]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"get_type_id","","",242,[[["self"]],["typeid"]]],[11,"try_into","","",242,[[["self"]],["result"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"not_found","","",242,[[["str"],["str"]],["e"]]],[11,"span","","",243,[[["self"]],["span"]]],[11,"into","","",243,[[["self"]],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,N],[11,"from","","",243,[[["t"]],["t"]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"get_type_id","","",243,[[["self"]],["typeid"]]],[11,"try_into","","",243,[[["self"]],["result"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"not_found","","",243,[[["str"],["str"]],["e"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"into","","",244,[[["self"]],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,N],[11,"from","","",244,[[["t"]],["t"]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"get_type_id","","",244,[[["self"]],["typeid"]]],[11,"try_into","","",244,[[["self"]],["result"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"not_found","","",244,[[["str"],["str"]],["e"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"into","","",245,[[["self"]],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,N],[11,"from","","",245,[[["t"]],["t"]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"get_type_id","","",245,[[["self"]],["typeid"]]],[11,"try_into","","",245,[[["self"]],["result"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"not_found","","",245,[[["str"],["str"]],["e"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"into","","",246,[[["self"]],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,N],[11,"from","","",246,[[["t"]],["t"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"get_type_id","","",246,[[["self"]],["typeid"]]],[11,"try_into","","",246,[[["self"]],["result"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"not_found","","",246,[[["str"],["str"]],["e"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"into","","",247,[[["self"]],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,N],[11,"from","","",247,[[["t"]],["t"]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"get_type_id","","",247,[[["self"]],["typeid"]]],[11,"try_into","","",247,[[["self"]],["result"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"not_found","","",247,[[["str"],["str"]],["e"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"into","","",248,[[["self"]],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,N],[11,"from","","",248,[[["t"]],["t"]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"get_type_id","","",248,[[["self"]],["typeid"]]],[11,"try_into","","",248,[[["self"]],["result"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"not_found","","",248,[[["str"],["str"]],["e"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"into","","",249,[[["self"]],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,N],[11,"from","","",249,[[["t"]],["t"]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"get_type_id","","",249,[[["self"]],["typeid"]]],[11,"try_into","","",249,[[["self"]],["result"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"not_found","","",249,[[["str"],["str"]],["e"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"into","","",250,[[["self"]],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,N],[11,"from","","",250,[[["t"]],["t"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"get_type_id","","",250,[[["self"]],["typeid"]]],[11,"try_into","","",250,[[["self"]],["result"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"not_found","","",250,[[["str"],["str"]],["e"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"into","","",251,[[["self"]],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,N],[11,"from","","",251,[[["t"]],["t"]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"get_type_id","","",251,[[["self"]],["typeid"]]],[11,"try_into","","",251,[[["self"]],["result"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"not_found","","",251,[[["str"],["str"]],["e"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"into","","",252,[[["self"]],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,N],[11,"from","","",252,[[["t"]],["t"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"get_type_id","","",252,[[["self"]],["typeid"]]],[11,"try_into","","",252,[[["self"]],["result"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"not_found","","",252,[[["str"],["str"]],["e"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"into","","",253,[[["self"]],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,N],[11,"from","","",253,[[["t"]],["t"]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"get_type_id","","",253,[[["self"]],["typeid"]]],[11,"try_into","","",253,[[["self"]],["result"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"not_found","","",253,[[["str"],["str"]],["e"]]],[11,"span","","",254,[[["self"]],["span"]]],[11,"into","","",254,[[["self"]],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,N],[11,"from","","",254,[[["t"]],["t"]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"get_type_id","","",254,[[["self"]],["typeid"]]],[11,"try_into","","",254,[[["self"]],["result"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"not_found","","",254,[[["str"],["str"]],["e"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"into","","",255,[[["self"]],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,N],[11,"from","","",255,[[["t"]],["t"]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"get_type_id","","",255,[[["self"]],["typeid"]]],[11,"try_into","","",255,[[["self"]],["result"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"not_found","","",255,[[["str"],["str"]],["e"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"into","","",256,[[["self"]],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,N],[11,"from","","",256,[[["t"]],["t"]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"get_type_id","","",256,[[["self"]],["typeid"]]],[11,"try_into","","",256,[[["self"]],["result"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"not_found","","",256,[[["str"],["str"]],["e"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"into","","",257,[[["self"]],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,N],[11,"from","","",257,[[["t"]],["t"]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"get_type_id","","",257,[[["self"]],["typeid"]]],[11,"try_into","","",257,[[["self"]],["result"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"not_found","","",257,[[["str"],["str"]],["e"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"into","","",258,[[["self"]],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,N],[11,"from","","",258,[[["t"]],["t"]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"get_type_id","","",258,[[["self"]],["typeid"]]],[11,"try_into","","",258,[[["self"]],["result"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"not_found","","",258,[[["str"],["str"]],["e"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"into","","",259,[[["self"]],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,N],[11,"from","","",259,[[["t"]],["t"]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"get_type_id","","",259,[[["self"]],["typeid"]]],[11,"try_into","","",259,[[["self"]],["result"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"not_found","","",259,[[["str"],["str"]],["e"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"into","","",260,[[["self"]],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,N],[11,"from","","",260,[[["t"]],["t"]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"get_type_id","","",260,[[["self"]],["typeid"]]],[11,"try_into","","",260,[[["self"]],["result"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"not_found","","",260,[[["str"],["str"]],["e"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"into","","",261,[[["self"]],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,N],[11,"from","","",261,[[["t"]],["t"]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"get_type_id","","",261,[[["self"]],["typeid"]]],[11,"try_into","","",261,[[["self"]],["result"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"not_found","","",261,[[["str"],["str"]],["e"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"into","","",262,[[["self"]],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,N],[11,"from","","",262,[[["t"]],["t"]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"get_type_id","","",262,[[["self"]],["typeid"]]],[11,"try_into","","",262,[[["self"]],["result"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"not_found","","",262,[[["str"],["str"]],["e"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"into","","",263,[[["self"]],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,N],[11,"from","","",263,[[["t"]],["t"]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"get_type_id","","",263,[[["self"]],["typeid"]]],[11,"try_into","","",263,[[["self"]],["result"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"not_found","","",263,[[["str"],["str"]],["e"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"into","","",264,[[["self"]],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,N],[11,"from","","",264,[[["t"]],["t"]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"get_type_id","","",264,[[["self"]],["typeid"]]],[11,"try_into","","",264,[[["self"]],["result"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"not_found","","",264,[[["str"],["str"]],["e"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"into","","",265,[[["self"]],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,N],[11,"from","","",265,[[["t"]],["t"]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"get_type_id","","",265,[[["self"]],["typeid"]]],[11,"try_into","","",265,[[["self"]],["result"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"not_found","","",265,[[["str"],["str"]],["e"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"into","","",266,[[["self"]],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,N],[11,"from","","",266,[[["t"]],["t"]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"get_type_id","","",266,[[["self"]],["typeid"]]],[11,"try_into","","",266,[[["self"]],["result"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"not_found","","",266,[[["str"],["str"]],["e"]]],[11,"span","","",267,[[["self"]],["span"]]],[11,"into","","",267,[[["self"]],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,N],[11,"from","","",267,[[["t"]],["t"]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"get_type_id","","",267,[[["self"]],["typeid"]]],[11,"try_into","","",267,[[["self"]],["result"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"not_found","","",267,[[["str"],["str"]],["e"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"into","","",268,[[["self"]],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,N],[11,"from","","",268,[[["t"]],["t"]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"get_type_id","","",268,[[["self"]],["typeid"]]],[11,"try_into","","",268,[[["self"]],["result"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"not_found","","",268,[[["str"],["str"]],["e"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"into","","",269,[[["self"]],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,N],[11,"from","","",269,[[["t"]],["t"]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"get_type_id","","",269,[[["self"]],["typeid"]]],[11,"try_into","","",269,[[["self"]],["result"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"not_found","","",269,[[["str"],["str"]],["e"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"into","","",270,[[["self"]],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,N],[11,"from","","",270,[[["t"]],["t"]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"get_type_id","","",270,[[["self"]],["typeid"]]],[11,"try_into","","",270,[[["self"]],["result"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"not_found","","",270,[[["str"],["str"]],["e"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"into","","",271,[[["self"]],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,N],[11,"from","","",271,[[["t"]],["t"]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"get_type_id","","",271,[[["self"]],["typeid"]]],[11,"try_into","","",271,[[["self"]],["result"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"not_found","","",271,[[["str"],["str"]],["e"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"into","","",272,[[["self"]],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,N],[11,"from","","",272,[[["t"]],["t"]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"get_type_id","","",272,[[["self"]],["typeid"]]],[11,"try_into","","",272,[[["self"]],["result"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"not_found","","",272,[[["str"],["str"]],["e"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"into","","",273,[[["self"]],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,N],[11,"from","","",273,[[["t"]],["t"]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"get_type_id","","",273,[[["self"]],["typeid"]]],[11,"try_into","","",273,[[["self"]],["result"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"not_found","","",273,[[["str"],["str"]],["e"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"into","","",274,[[["self"]],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,N],[11,"from","","",274,[[["t"]],["t"]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"get_type_id","","",274,[[["self"]],["typeid"]]],[11,"try_into","","",274,[[["self"]],["result"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"not_found","","",274,[[["str"],["str"]],["e"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"into","","",275,[[["self"]],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,N],[11,"from","","",275,[[["t"]],["t"]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"get_type_id","","",275,[[["self"]],["typeid"]]],[11,"try_into","","",275,[[["self"]],["result"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"not_found","","",275,[[["str"],["str"]],["e"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"into","","",276,[[["self"]],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,N],[11,"from","","",276,[[["t"]],["t"]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"get_type_id","","",276,[[["self"]],["typeid"]]],[11,"try_into","","",276,[[["self"]],["result"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"not_found","","",276,[[["str"],["str"]],["e"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"into","","",277,[[["self"]],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,N],[11,"from","","",277,[[["t"]],["t"]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"get_type_id","","",277,[[["self"]],["typeid"]]],[11,"try_into","","",277,[[["self"]],["result"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"not_found","","",277,[[["str"],["str"]],["e"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"into","","",278,[[["self"]],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,N],[11,"from","","",278,[[["t"]],["t"]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"get_type_id","","",278,[[["self"]],["typeid"]]],[11,"try_into","","",278,[[["self"]],["result"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"not_found","","",278,[[["str"],["str"]],["e"]]],[11,"span","","",279,[[["self"]],["span"]]],[11,"into","","",279,[[["self"]],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,N],[11,"from","","",279,[[["t"]],["t"]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"get_type_id","","",279,[[["self"]],["typeid"]]],[11,"try_into","","",279,[[["self"]],["result"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"not_found","","",279,[[["str"],["str"]],["e"]]],[11,"span","","",280,[[["self"]],["span"]]],[11,"into","","",280,[[["self"]],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,N],[11,"from","","",280,[[["t"]],["t"]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"get_type_id","","",280,[[["self"]],["typeid"]]],[11,"try_into","","",280,[[["self"]],["result"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"not_found","","",280,[[["str"],["str"]],["e"]]],[11,"span","","",281,[[["self"]],["span"]]],[11,"into","","",281,[[["self"]],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,N],[11,"from","","",281,[[["t"]],["t"]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"get_type_id","","",281,[[["self"]],["typeid"]]],[11,"try_into","","",281,[[["self"]],["result"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"not_found","","",281,[[["str"],["str"]],["e"]]],[11,"into","syn::buffer","",292,[[["self"]],["u"]]],[11,"from","","",292,[[["t"]],["t"]]],[11,"try_from","","",292,[[["u"]],["result"]]],[11,"borrow","","",292,[[["self"]],["t"]]],[11,"get_type_id","","",292,[[["self"]],["typeid"]]],[11,"try_into","","",292,[[["self"]],["result"]]],[11,"borrow_mut","","",292,[[["self"]],["t"]]],[11,"not_found","","",292,[[["str"],["str"]],["e"]]],[11,"into","","",293,[[["self"]],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,N],[11,"from","","",293,[[["t"]],["t"]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"get_type_id","","",293,[[["self"]],["typeid"]]],[11,"try_into","","",293,[[["self"]],["result"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"not_found","","",293,[[["str"],["str"]],["e"]]],[11,"span","syn::punctuated","",295,[[["self"]],["span"]]],[11,"into_iter","","",295,[[["self"]],["i"]]],[11,"into","","",295,[[["self"]],["u"]]],[11,"to_owned","","",295,[[["self"]],["t"]]],[11,"clone_into","","",295,N],[11,"from","","",295,[[["t"]],["t"]]],[11,"try_from","","",295,[[["u"]],["result"]]],[11,"borrow","","",295,[[["self"]],["t"]]],[11,"get_type_id","","",295,[[["self"]],["typeid"]]],[11,"try_into","","",295,[[["self"]],["result"]]],[11,"borrow_mut","","",295,[[["self"]],["t"]]],[11,"not_found","","",295,[[["str"],["str"]],["e"]]],[11,"into_iter","","",296,[[["self"]],["i"]]],[11,"into","","",296,[[["self"]],["u"]]],[11,"from","","",296,[[["t"]],["t"]]],[11,"try_from","","",296,[[["u"]],["result"]]],[11,"borrow","","",296,[[["self"]],["t"]]],[11,"get_type_id","","",296,[[["self"]],["typeid"]]],[11,"try_into","","",296,[[["self"]],["result"]]],[11,"borrow_mut","","",296,[[["self"]],["t"]]],[11,"not_found","","",296,[[["str"],["str"]],["e"]]],[11,"into_iter","","",297,[[["self"]],["i"]]],[11,"into","","",297,[[["self"]],["u"]]],[11,"from","","",297,[[["t"]],["t"]]],[11,"try_from","","",297,[[["u"]],["result"]]],[11,"borrow","","",297,[[["self"]],["t"]]],[11,"get_type_id","","",297,[[["self"]],["typeid"]]],[11,"try_into","","",297,[[["self"]],["result"]]],[11,"borrow_mut","","",297,[[["self"]],["t"]]],[11,"not_found","","",297,[[["str"],["str"]],["e"]]],[11,"into_iter","","",298,[[["self"]],["i"]]],[11,"into","","",298,[[["self"]],["u"]]],[11,"from","","",298,[[["t"]],["t"]]],[11,"try_from","","",298,[[["u"]],["result"]]],[11,"borrow","","",298,[[["self"]],["t"]]],[11,"get_type_id","","",298,[[["self"]],["typeid"]]],[11,"try_into","","",298,[[["self"]],["result"]]],[11,"borrow_mut","","",298,[[["self"]],["t"]]],[11,"not_found","","",298,[[["str"],["str"]],["e"]]],[11,"into_iter","","",299,[[["self"]],["i"]]],[11,"into","","",299,[[["self"]],["u"]]],[11,"from","","",299,[[["t"]],["t"]]],[11,"try_from","","",299,[[["u"]],["result"]]],[11,"borrow","","",299,[[["self"]],["t"]]],[11,"get_type_id","","",299,[[["self"]],["typeid"]]],[11,"try_into","","",299,[[["self"]],["result"]]],[11,"borrow_mut","","",299,[[["self"]],["t"]]],[11,"not_found","","",299,[[["str"],["str"]],["e"]]],[11,"into_iter","","",300,[[["self"]],["i"]]],[11,"into","","",300,[[["self"]],["u"]]],[11,"from","","",300,[[["t"]],["t"]]],[11,"try_from","","",300,[[["u"]],["result"]]],[11,"borrow","","",300,[[["self"]],["t"]]],[11,"get_type_id","","",300,[[["self"]],["typeid"]]],[11,"try_into","","",300,[[["self"]],["result"]]],[11,"borrow_mut","","",300,[[["self"]],["t"]]],[11,"not_found","","",300,[[["str"],["str"]],["e"]]],[11,"into_iter","","",301,[[["self"]],["i"]]],[11,"into","","",301,[[["self"]],["u"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"get_type_id","","",301,[[["self"]],["typeid"]]],[11,"try_into","","",301,[[["self"]],["result"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"not_found","","",301,[[["str"],["str"]],["e"]]],[11,"span","","",294,[[["self"]],["span"]]],[11,"into","","",294,[[["self"]],["u"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"get_type_id","","",294,[[["self"]],["typeid"]]],[11,"try_into","","",294,[[["self"]],["result"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"not_found","","",294,[[["str"],["str"]],["e"]]],[11,"into","syn::synom","",307,[[["self"]],["u"]]],[11,"to_string","","",307,[[["self"]],["string"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"get_type_id","","",307,[[["self"]],["typeid"]]],[11,"try_into","","",307,[[["self"]],["result"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"not_found","","",307,[[["str"],["str"]],["e"]]],[11,"visit_abi","syn::visit","",306,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",306,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arg_captured","","",306,[[["self"],["argcaptured"]]]],[11,"visit_arg_self","","",306,[[["self"],["argself"]]]],[11,"visit_arg_self_ref","","",306,[[["self"],["argselfref"]]]],[11,"visit_arm","","",306,[[["self"],["arm"]]]],[11,"visit_attr_style","","",306,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",306,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",306,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",306,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",306,[[["self"],["binop"]]]],[11,"visit_binding","","",306,[[["self"],["binding"]]]],[11,"visit_block","","",306,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",306,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",306,[[["self"],["constparam"]]]],[11,"visit_data","","",306,[[["self"],["data"]]]],[11,"visit_data_enum","","",306,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",306,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",306,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",306,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",306,[[["self"],["expr"]]]],[11,"visit_expr_array","","",306,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",306,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",306,[[["self"],["exprassignop"]]]],[11,"visit_expr_binary","","",306,[[["self"],["exprbinary"]]]],[11,"visit_expr_block","","",306,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",306,[[["self"],["exprbox"]]]],[11,"visit_expr_break","","",306,[[["self"],["exprbreak"]]]],[11,"visit_expr_call","","",306,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",306,[[["self"],["exprcast"]]]],[11,"visit_expr_catch","","",306,[[["self"],["exprcatch"]]]],[11,"visit_expr_closure","","",306,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",306,[[["self"],["exprcontinue"]]]],[11,"visit_expr_field","","",306,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",306,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",306,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",306,[[["self"],["exprif"]]]],[11,"visit_expr_if_let","","",306,[[["self"],["expriflet"]]]],[11,"visit_expr_in_place","","",306,[[["self"],["exprinplace"]]]],[11,"visit_expr_index","","",306,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",306,[[["self"],["exprlit"]]]],[11,"visit_expr_loop","","",306,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",306,[[["self"],["exprmacro"]]]],[11,"visit_expr_match","","",306,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",306,[[["self"],["exprmethodcall"]]]],[11,"visit_expr_paren","","",306,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",306,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",306,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",306,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",306,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",306,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",306,[[["self"],["exprstruct"]]]],[11,"visit_expr_try","","",306,[[["self"],["exprtry"]]]],[11,"visit_expr_tuple","","",306,[[["self"],["exprtuple"]]]],[11,"visit_expr_type","","",306,[[["self"],["exprtype"]]]],[11,"visit_expr_unary","","",306,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",306,[[["self"],["exprunsafe"]]]],[11,"visit_expr_verbatim","","",306,[[["self"],["exprverbatim"]]]],[11,"visit_expr_while","","",306,[[["self"],["exprwhile"]]]],[11,"visit_expr_while_let","","",306,[[["self"],["exprwhilelet"]]]],[11,"visit_expr_yield","","",306,[[["self"],["expryield"]]]],[11,"visit_field","","",306,[[["self"],["field"]]]],[11,"visit_field_pat","","",306,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",306,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",306,[[["self"],["fields"]]]],[11,"visit_fields_named","","",306,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",306,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",306,[[["self"],["file"]]]],[11,"visit_fn_arg","","",306,[[["self"],["fnarg"]]]],[11,"visit_fn_decl","","",306,[[["self"],["fndecl"]]]],[11,"visit_foreign_item","","",306,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",306,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_static","","",306,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",306,[[["self"],["foreignitemtype"]]]],[11,"visit_foreign_item_verbatim","","",306,[[["self"],["foreignitemverbatim"]]]],[11,"visit_generic_argument","","",306,[[["self"],["genericargument"]]]],[11,"visit_generic_method_argument","","",306,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",306,[[["self"],["genericparam"]]]],[11,"visit_generics","","",306,[[["self"],["generics"]]]],[11,"visit_ident","","",306,[[["self"],["ident"]]]],[11,"visit_impl_item","","",306,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",306,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",306,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",306,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",306,[[["self"],["implitemtype"]]]],[11,"visit_impl_item_verbatim","","",306,[[["self"],["implitemverbatim"]]]],[11,"visit_index","","",306,[[["self"],["index"]]]],[11,"visit_item","","",306,[[["self"],["item"]]]],[11,"visit_item_const","","",306,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",306,[[["self"],["itemenum"]]]],[11,"visit_item_extern_crate","","",306,[[["self"],["itemexterncrate"]]]],[11,"visit_item_fn","","",306,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",306,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",306,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",306,[[["self"],["itemmacro"]]]],[11,"visit_item_macro2","","",306,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",306,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",306,[[["self"],["itemstatic"]]]],[11,"visit_item_struct","","",306,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",306,[[["self"],["itemtrait"]]]],[11,"visit_item_type","","",306,[[["self"],["itemtype"]]]],[11,"visit_item_union","","",306,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",306,[[["self"],["itemuse"]]]],[11,"visit_item_verbatim","","",306,[[["self"],["itemverbatim"]]]],[11,"visit_label","","",306,[[["self"],["label"]]]],[11,"visit_lifetime","","",306,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",306,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",306,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",306,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",306,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",306,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",306,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",306,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",306,[[["self"],["litint"]]]],[11,"visit_lit_str","","",306,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",306,[[["self"],["litverbatim"]]]],[11,"visit_local","","",306,[[["self"],["local"]]]],[11,"visit_macro","","",306,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",306,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",306,[[["self"],["member"]]]],[11,"visit_meta","","",306,[[["self"],["meta"]]]],[11,"visit_meta_list","","",306,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",306,[[["self"],["metanamevalue"]]]],[11,"visit_method_sig","","",306,[[["self"],["methodsig"]]]],[11,"visit_method_turbofish","","",306,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",306,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",306,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",306,[[["self"],["pat"]]]],[11,"visit_pat_box","","",306,[[["self"],["patbox"]]]],[11,"visit_pat_ident","","",306,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",306,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",306,[[["self"],["patmacro"]]]],[11,"visit_pat_path","","",306,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",306,[[["self"],["patrange"]]]],[11,"visit_pat_ref","","",306,[[["self"],["patref"]]]],[11,"visit_pat_slice","","",306,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",306,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",306,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",306,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_verbatim","","",306,[[["self"],["patverbatim"]]]],[11,"visit_pat_wild","","",306,[[["self"],["patwild"]]]],[11,"visit_path","","",306,[[["self"],["path"]]]],[11,"visit_path_arguments","","",306,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",306,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",306,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",306,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",306,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",306,[[["self"],["qself"]]]],[11,"visit_range_limits","","",306,[[["self"],["rangelimits"]]]],[11,"visit_return_type","","",306,[[["self"],["returntype"]]]],[11,"visit_span","","",306,[[["self"],["span"]]]],[11,"visit_stmt","","",306,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",306,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",306,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",306,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",306,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",306,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",306,[[["self"],["traititemmethod"]]]],[11,"visit_trait_item_type","","",306,[[["self"],["traititemtype"]]]],[11,"visit_trait_item_verbatim","","",306,[[["self"],["traititemverbatim"]]]],[11,"visit_type","","",306,[[["self"],["type"]]]],[11,"visit_type_array","","",306,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",306,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",306,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",306,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",306,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",306,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",306,[[["self"],["typenever"]]]],[11,"visit_type_param","","",306,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",306,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",306,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",306,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",306,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",306,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",306,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",306,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",306,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",306,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",306,[[["self"],["unop"]]]],[11,"visit_use_glob","","",306,[[["self"],["useglob"]]]],[11,"visit_use_group","","",306,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",306,[[["self"],["usename"]]]],[11,"visit_use_path","","",306,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",306,[[["self"],["userename"]]]],[11,"visit_use_tree","","",306,[[["self"],["usetree"]]]],[11,"visit_variant","","",306,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",306,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",306,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",306,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",306,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",306,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",306,[[["self"],["wherepredicate"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprVerbatim"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"Index"],[3,"Arm"],[3,"Block"],[3,"FieldPat"],[3,"FieldValue"],[3,"Label"],[3,"Local"],[3,"MethodTurbofish"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatPath"],[3,"PatRange"],[3,"PatRef"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatVerbatim"],[3,"PatWild"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ArgCaptured"],[3,"ArgSelf"],[3,"ArgSelfRef"],[3,"FnDecl"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemVerbatim"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemVerbatim"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ItemVerbatim"],[3,"MethodSig"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemVerbatim"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericMethodArgument"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["synstructure"]={"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",N,N],[12,"binding","","The name which this BindingInfo will bind to.",0,N],[12,"style","","The type of binding which this BindingInfo will create.",0,N],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn::Variant`, however this type may also be used as the sole variant for a struct.",N,N],[12,"attrs","","",1,N],[12,"ident","","",1,N],[12,"fields","","",1,N],[12,"discriminant","","",1,N],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",N,N],[12,"prefix","","",2,N],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides utilities for creating custom derive trait implementations.",N,N],[4,"BindStyle","","The type of binding to use when generating a pattern.",N,N],[13,"Move","","`x`",3,N],[13,"MoveMut","","`mut x`",3,N],[13,"Ref","","`ref x`",3,N],[13,"RefMut","","`ref mut x`",3,N],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type which implements `Display`.",N,[[["t"]],["string"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["bindstyle"]]],[11,"eq","","",3,[[["self"],["bindstyle"]],["bool"]]],[11,"hash","","",3,N],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["bindinginfo"]]],[11,"eq","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"hash","","",0,N],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,[[["self"]],["field"]]],[11,"pat","","Generates the pattern fragment for this field binding.",0,[[["self"]],["tokenstream"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,[[["self"]],["vec",["ident"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["variantast"]]],[11,"eq","","",1,[[["self"],["variantast"]],["bool"]]],[11,"ne","","",1,[[["self"],["variantast"]],["bool"]]],[11,"hash","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["variantinfo"]]],[11,"eq","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"hash","","",2,N],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,N],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,N],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,[[["self"]],["variantast"]]],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,[[["self"]],["bool"]]],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,[[["self"]],["tokenstream"]]],[11,"construct","","Generates the token stream required to construct the current variant.",2,[[["self"],["f"]],["tokenstream"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,[[["self"],["f"]],["self"]]],[11,"remove_binding","","Remove the binding at the given index.",2,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,[[["self"]],["vec",["ident"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["structure"]]],[11,"eq","","",4,[[["self"],["structure"]],["bool"]]],[11,"ne","","",4,[[["self"],["structure"]],["bool"]]],[11,"hash","","",4,N],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,[[["deriveinput"]],["self"]]],[11,"variants","","Returns a slice of the variants in this Structure.",4,N],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,N],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,[[["self"]],["deriveinput"]]],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,[[["self"]],["bool"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"remove_variant","","Remove the variant at the given index.",4,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,[[["self"]],["vec",["ident"]]]],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when the trait to be derived needs some extra generic parameters.",4,[[["self"],["genericparam"]],["self"]]],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,[[["self"],["traitbound"],["option"]]]],[11,"bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"gen_impl","","Generate an impl block for the given struct. This impl block will automatically use hygiene tricks to avoid polluting the caller's namespace, and will automatically add trait bounds for generic type parameters.",4,[[["self"],["tokenstream"]],["tokenstream"]]],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming `TokenStream` into a `synstructure::Structure` object, and pass it into the inner function.",N,N],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["yaml_rust"]={"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",N,N],[3,"YamlLoader","yaml_rust::yaml","",N,N],[3,"YamlIter","","",N,N],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",N,N],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,N],[13,"Integer","","YAML int is stored as i64.",0,N],[13,"String","","YAML scalar.",0,N],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,N],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,N],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",0,N],[13,"Alias","","Alias, not fully supported yet.",0,N],[13,"Null","","YAML null, e.g. `null` or `~`.",0,N],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,N],[6,"Array","","",N,N],[6,"Hash","","",N,N],[11,"clone","","",0,[[["self"]],["yaml"]]],[11,"eq","","",0,[[["self"],["yaml"]],["bool"]]],[11,"ne","","",0,[[["self"],["yaml"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["yaml"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["yaml"]],["bool"]]],[11,"le","","",0,[[["self"],["yaml"]],["bool"]]],[11,"gt","","",0,[[["self"],["yaml"]],["bool"]]],[11,"ge","","",0,[[["self"],["yaml"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",0,[[["self"],["yaml"]],["ordering"]]],[11,"hash","","",0,N],[11,"on_event","","",1,[[["self"],["event"],["marker"]]]],[11,"load_from_str","","",1,[[["str"]],["result",["vec","scanerror"]]]],[11,"as_bool","","",0,[[["self"]],["option",["bool"]]]],[11,"as_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"as_str","","",0,[[["self"]],["option",["str"]]]],[11,"as_hash","","",0,[[["self"]],["option",["hash"]]]],[11,"as_vec","","",0,[[["self"]],["option",["array"]]]],[11,"into_bool","","",0,[[["self"]],["option",["bool"]]]],[11,"into_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"into_string","","",0,[[["self"]],["option",["string"]]]],[11,"into_hash","","",0,[[["self"]],["option",["hash"]]]],[11,"into_vec","","",0,[[["self"]],["option",["array"]]]],[11,"is_null","","",0,[[["self"]],["bool"]]],[11,"is_badvalue","","",0,[[["self"]],["bool"]]],[11,"is_array","","",0,[[["self"]],["bool"]]],[11,"as_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"into_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"from_str","","",0,[[["str"]],["yaml"]]],[11,"index","","",0,[[["self"],["str"]],["yaml"]]],[11,"index","","",0,[[["self"],["usize"]],["yaml"]]],[11,"into_iter","","",0,N],[11,"next","","",2,[[["self"]],["option",["yaml"]]]],[0,"scanner","yaml_rust","",N,N],[3,"Marker","yaml_rust::scanner","",N,N],[3,"ScanError","","",N,N],[3,"Token","","",N,N],[12,"0","","",3,N],[12,"1","","",3,N],[3,"Scanner","","",N,N],[4,"TEncoding","","",N,N],[13,"Utf8","","",4,N],[4,"TScalarStyle","","",N,N],[13,"Any","","",5,N],[13,"Plain","","",5,N],[13,"SingleQuoted","","",5,N],[13,"DoubleQuoted","","",5,N],[13,"Literal","","",5,N],[13,"Foled","","",5,N],[4,"TokenType","","",N,N],[13,"NoToken","","",6,N],[13,"StreamStart","","",6,N],[13,"StreamEnd","","",6,N],[13,"VersionDirective","","major, minor",6,N],[13,"TagDirective","","handle, prefix",6,N],[13,"DocumentStart","","",6,N],[13,"DocumentEnd","","",6,N],[13,"BlockSequenceStart","","",6,N],[13,"BlockMappingStart","","",6,N],[13,"BlockEnd","","",6,N],[13,"FlowSequenceStart","","",6,N],[13,"FlowSequenceEnd","","",6,N],[13,"FlowMappingStart","","",6,N],[13,"FlowMappingEnd","","",6,N],[13,"BlockEntry","","",6,N],[13,"FlowEntry","","",6,N],[13,"Key","","",6,N],[13,"Value","","",6,N],[13,"Alias","","",6,N],[13,"Anchor","","",6,N],[13,"Tag","","handle, suffix",6,N],[13,"Scalar","","",6,N],[6,"ScanResult","","",N,N],[11,"clone","","",4,[[["self"]],["tencoding"]]],[11,"eq","","",4,[[["self"],["tencoding"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["tscalarstyle"]]],[11,"eq","","",5,[[["self"],["tscalarstyle"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["marker"]]],[11,"eq","","",7,[[["self"],["marker"]],["bool"]]],[11,"ne","","",7,[[["self"],["marker"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"index","","",7,[[["self"]],["usize"]]],[11,"line","","",7,[[["self"]],["usize"]]],[11,"col","","",7,[[["self"]],["usize"]]],[11,"clone","","",8,[[["self"]],["scanerror"]]],[11,"eq","","",8,[[["self"],["scanerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["scanerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,[[["marker"],["str"]],["scanerror"]]],[11,"marker","","",8,[[["self"]],["marker"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"cause","","",8,[[["self"]],["option",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["tokentype"]]],[11,"eq","","",6,[[["self"],["tokentype"]],["bool"]]],[11,"ne","","",6,[[["self"],["tokentype"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["token"]]],[11,"eq","","",3,[[["self"],["token"]],["bool"]]],[11,"ne","","",3,[[["self"],["token"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"next","","",9,[[["self"]],["option",["token"]]]],[11,"new","","Creates the YAML tokenizer.",9,[[["t"]],["scanner"]]],[11,"get_error","","",9,[[["self"]],["option",["scanerror"]]]],[11,"stream_started","","",9,[[["self"]],["bool"]]],[11,"stream_ended","","",9,[[["self"]],["bool"]]],[11,"mark","","",9,[[["self"]],["marker"]]],[11,"fetch_next_token","","",9,[[["self"]],["scanresult"]]],[11,"next_token","","",9,[[["self"]],["result",["option","scanerror"]]]],[11,"fetch_more_tokens","","",9,[[["self"]],["scanresult"]]],[0,"parser","yaml_rust","",N,N],[3,"Parser","yaml_rust::parser","",N,N],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",N,N],[13,"Nothing","","Reserved for internal use",10,N],[13,"StreamStart","","",10,N],[13,"StreamEnd","","",10,N],[13,"DocumentStart","","",10,N],[13,"DocumentEnd","","",10,N],[13,"Alias","","Refer to an anchor ID",10,N],[13,"Scalar","","Value, style, anchor_id, tag",10,N],[13,"SequenceStart","","Anchor ID",10,N],[13,"SequenceEnd","","",10,N],[13,"MappingStart","","Anchor ID",10,N],[13,"MappingEnd","","",10,N],[6,"ParseResult","","",N,N],[8,"EventReceiver","","",N,N],[10,"on_event","","",11,[[["self"],["event"]]]],[8,"MarkedEventReceiver","","",N,N],[10,"on_event","","",12,[[["self"],["event"],["marker"]]]],[11,"clone","","",10,[[["self"]],["event"]]],[11,"eq","","",10,[[["self"],["event"]],["bool"]]],[11,"ne","","",10,[[["self"],["event"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","",13,[[["t"]],["parser"]]],[11,"peek","","",13,[[["self"]],["result",["scanerror"]]]],[11,"next","","",13,[[["self"]],["parseresult"]]],[11,"load","","",13,[[["self"],["r"],["bool"]],["result",["scanerror"]]]],[0,"emitter","yaml_rust","",N,N],[3,"YamlEmitter","yaml_rust::emitter","",N,N],[4,"EmitError","","",N,N],[13,"FmtError","","",14,N],[13,"BadHashmapKey","","",14,N],[6,"EmitResult","","",N,N],[11,"clone","","",14,[[["self"]],["emiterror"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"description","","",14,[[["self"]],["str"]]],[11,"cause","","",14,[[["self"]],["option",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from","","",14,[[["error"]],["self"]]],[11,"new","","",15,[[["write"]],["yamlemitter"]]],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",15,[[["self"],["bool"]]]],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",15,[[["self"]],["bool"]]],[11,"dump","","",15,[[["self"],["yaml"]],["emitresult"]]],[11,"on_event","yaml_rust::yaml","",1,N],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","yaml_rust::scanner","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","yaml_rust::parser","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","yaml_rust::emitter","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
searchIndex["yoga"]={"doc":"","items":[[3,"Node","yoga","",N,N],[0,"prelude","","",N,N],[0,"types","","",N,N],[3,"Size","yoga::types","",N,N],[12,"width","","",0,N],[12,"height","","",0,N],[3,"Layout","","",N,N],[3,"Context","","",N,N],[4,"Align","","",N,N],[13,"Auto","","",1,N],[13,"FlexStart","","",1,N],[13,"Center","","",1,N],[13,"FlexEnd","","",1,N],[13,"Stretch","","",1,N],[13,"Baseline","","",1,N],[13,"SpaceBetween","","",1,N],[13,"SpaceAround","","",1,N],[4,"Dimension","","",N,N],[13,"Width","","",2,N],[13,"Height","","",2,N],[4,"Direction","","",N,N],[13,"Inherit","","",3,N],[13,"LTR","","",3,N],[13,"RTL","","",3,N],[4,"Display","","",N,N],[13,"Flex","","",4,N],[13,"None","","",4,N],[4,"Edge","","",N,N],[13,"Left","","",5,N],[13,"Top","","",5,N],[13,"Right","","",5,N],[13,"Bottom","","",5,N],[13,"Start","","",5,N],[13,"End","","",5,N],[13,"Horizontal","","",5,N],[13,"Vertical","","",5,N],[13,"All","","",5,N],[4,"FlexDirection","","",N,N],[13,"Column","","",6,N],[13,"ColumnReverse","","",6,N],[13,"Row","","",6,N],[13,"RowReverse","","",6,N],[4,"Justify","","",N,N],[13,"FlexStart","","",7,N],[13,"Center","","",7,N],[13,"FlexEnd","","",7,N],[13,"SpaceBetween","","",7,N],[13,"SpaceAround","","",7,N],[13,"SpaceEvenly","","",7,N],[4,"LogLevel","","",N,N],[13,"Error","","",8,N],[13,"Warn","","",8,N],[13,"Info","","",8,N],[13,"Debug","","",8,N],[13,"Verbose","","",8,N],[13,"Fatal","","",8,N],[4,"MeasureMode","","",N,N],[13,"Undefined","","",9,N],[13,"Exactly","","",9,N],[13,"AtMost","","",9,N],[4,"NodeType","","",N,N],[13,"Default","","",10,N],[13,"Text","","",10,N],[4,"Overflow","","",N,N],[13,"Visible","","",11,N],[13,"Hidden","","",11,N],[13,"Scroll","","",11,N],[4,"PositionType","","",N,N],[13,"Relative","","",12,N],[13,"Absolute","","",12,N],[4,"PrintOptions","","",N,N],[13,"Layout","","",13,N],[13,"Style","","",13,N],[13,"Children","","",13,N],[4,"StyleUnit","","",N,N],[13,"UndefinedValue","","",14,N],[13,"Point","","",14,N],[13,"Percent","","",14,N],[13,"Auto","","",14,N],[4,"Wrap","","",N,N],[13,"NoWrap","","",15,N],[13,"Wrap","","",15,N],[13,"WrapReverse","","",15,N],[4,"FlexStyle","","",N,N],[13,"AlignContent","","",16,N],[13,"AlignItems","","",16,N],[13,"AlignSelf","","",16,N],[13,"AspectRatio","","",16,N],[13,"BorderBottom","","",16,N],[13,"BorderEnd","","",16,N],[13,"BorderLeft","","",16,N],[13,"BorderRight","","",16,N],[13,"BorderStart","","",16,N],[13,"BorderTop","","",16,N],[13,"Border","","",16,N],[13,"Bottom","","",16,N],[13,"Display","","",16,N],[13,"End","","",16,N],[13,"Flex","","",16,N],[13,"FlexBasis","","",16,N],[13,"FlexDirection","","",16,N],[13,"FlexGrow","","",16,N],[13,"FlexShrink","","",16,N],[13,"FlexWrap","","",16,N],[13,"Height","","",16,N],[13,"JustifyContent","","",16,N],[13,"Left","","",16,N],[13,"Margin","","",16,N],[13,"MarginBottom","","",16,N],[13,"MarginEnd","","",16,N],[13,"MarginHorizontal","","",16,N],[13,"MarginLeft","","",16,N],[13,"MarginRight","","",16,N],[13,"MarginStart","","",16,N],[13,"MarginTop","","",16,N],[13,"MarginVertical","","",16,N],[13,"MaxHeight","","",16,N],[13,"MaxWidth","","",16,N],[13,"MinHeight","","",16,N],[13,"MinWidth","","",16,N],[13,"Overflow","","",16,N],[13,"Padding","","",16,N],[13,"PaddingBottom","","",16,N],[13,"PaddingEnd","","",16,N],[13,"PaddingHorizontal","","",16,N],[13,"PaddingLeft","","",16,N],[13,"PaddingRight","","",16,N],[13,"PaddingStart","","",16,N],[13,"PaddingTop","","",16,N],[13,"PaddingVertical","","",16,N],[13,"Position","","",16,N],[13,"Right","","",16,N],[13,"Start","","",16,N],[13,"Top","","",16,N],[13,"Width","","",16,N],[6,"NodeRef","","",N,N],[6,"BaselineFunc","","",N,N],[6,"MeasureFunc","","",N,N],[17,"Undefined","","",N,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"ne","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["flexstyle"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"le","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"gt","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"ge","","",16,[[["self"],["flexstyle"]],["bool"]]],[11,"cmp","","",16,[[["self"],["flexstyle"]],["ordering"]]],[11,"hash","","",16,N],[11,"clone","","",16,[[["self"]],["flexstyle"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["layout"]],["bool"]]],[11,"ne","","",17,[[["self"],["layout"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["layout"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["layout"]],["bool"]]],[11,"le","","",17,[[["self"],["layout"]],["bool"]]],[11,"gt","","",17,[[["self"],["layout"]],["bool"]]],[11,"ge","","",17,[[["self"],["layout"]],["bool"]]],[11,"cmp","","",17,[[["self"],["layout"]],["ordering"]]],[11,"hash","","",17,N],[11,"clone","","",17,[[["self"]],["layout"]]],[11,"new","","",17,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["layout"]]],[11,"left","","",17,[[["self"]],["f32"]]],[11,"right","","",17,[[["self"]],["f32"]]],[11,"top","","",17,[[["self"]],["f32"]]],[11,"bottom","","",17,[[["self"]],["f32"]]],[11,"width","","",17,[[["self"]],["f32"]]],[11,"height","","",17,[[["self"]],["f32"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"new","","",18,[[["t"]],["self"]]],[11,"deref","","",18,[[["self"]],["box"]]],[0,"traits","yoga","",N,N],[8,"Percent","yoga::traits","",N,N],[10,"percent","","",19,[[["self"]],["styleunit"]]],[8,"Point","","",N,N],[10,"point","","",20,[[["self"]],["styleunit"]]],[11,"fmt","yoga","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["node"]],["bool"]]],[11,"ne","","",21,[[["self"],["node"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["node"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["node"]],["bool"]]],[11,"le","","",21,[[["self"],["node"]],["bool"]]],[11,"gt","","",21,[[["self"],["node"]],["bool"]]],[11,"ge","","",21,[[["self"],["node"]],["bool"]]],[11,"cmp","","",21,[[["self"],["node"]],["ordering"]]],[11,"hash","","",21,N],[11,"new","","",21,[[],["node"]]],[11,"reset","","",21,[[["self"]]]],[11,"apply_styles","","",21,[[["self"],["i"]]]],[11,"apply_style","","",21,[[["self"],["flexstyle"]]]],[11,"insert_child","","",21,[[["self"],["node"],["u32"]]]],[11,"remove_child","","",21,[[["self"],["node"]]]],[11,"child_count","","",21,[[["self"]],["u32"]]],[11,"set_direction","","",21,[[["self"],["direction"]]]],[11,"set_flex_direction","","",21,[[["self"],["flexdirection"]]]],[11,"set_justify_content","","",21,[[["self"],["justify"]]]],[11,"set_align_content","","",21,[[["self"],["align"]]]],[11,"set_align_items","","",21,[[["self"],["align"]]]],[11,"set_align_self","","",21,[[["self"],["align"]]]],[11,"set_position_type","","",21,[[["self"],["positiontype"]]]],[11,"set_position","","",21,[[["self"],["edge"],["styleunit"]]]],[11,"set_flex_wrap","","",21,[[["self"],["wrap"]]]],[11,"set_overflow","","",21,[[["self"],["overflow"]]]],[11,"set_flex","","",21,[[["self"],["f32"]]]],[11,"set_flex_grow","","",21,[[["self"],["f32"]]]],[11,"set_flex_shrink","","",21,[[["self"],["f32"]]]],[11,"set_flex_basis","","",21,[[["self"],["styleunit"]]]],[11,"set_edge_position","","",21,[[["self"],["edge"],["f32"]]]],[11,"set_margin","","",21,[[["self"],["edge"],["styleunit"]]]],[11,"set_padding","","",21,[[["self"],["edge"],["styleunit"]]]],[11,"set_border","","",21,[[["self"],["edge"],["f32"]]]],[11,"set_width","","",21,[[["self"],["styleunit"]]]],[11,"set_height","","",21,[[["self"],["styleunit"]]]],[11,"set_min_width","","",21,[[["self"],["styleunit"]]]],[11,"set_min_height","","",21,[[["self"],["styleunit"]]]],[11,"set_max_width","","",21,[[["self"],["styleunit"]]]],[11,"set_max_height","","",21,[[["self"],["styleunit"]]]],[11,"set_aspect_ratio","","",21,[[["self"],["f32"]]]],[11,"calculate_layout","","",21,[[["self"],["f32"],["f32"],["direction"]]]],[11,"get_layout","","",21,[[["self"]],["layout"]]],[11,"get_child_count","","",21,[[["self"]],["u32"]]],[11,"get_child","","",21,[[["self"],["u32"]],["noderef"]]],[11,"get_style_direction","","",21,[[["self"]],["direction"]]],[11,"get_flex_direction","","",21,[[["self"]],["flexdirection"]]],[11,"get_justify_content","","",21,[[["self"]],["justify"]]],[11,"get_align_content","","",21,[[["self"]],["align"]]],[11,"get_align_items","","",21,[[["self"]],["align"]]],[11,"get_align_self","","",21,[[["self"]],["align"]]],[11,"get_position_type","","",21,[[["self"]],["positiontype"]]],[11,"get_flex_wrap","","",21,[[["self"]],["wrap"]]],[11,"get_overflow","","",21,[[["self"]],["overflow"]]],[11,"get_flex_grow","","",21,[[["self"]],["f32"]]],[11,"get_flex_shrink","","",21,[[["self"]],["f32"]]],[11,"get_flex_basis","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_left","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_right","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_top","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_bottom","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_start","","",21,[[["self"]],["styleunit"]]],[11,"get_style_position_end","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_left","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_right","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_top","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_bottom","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_start","","",21,[[["self"]],["styleunit"]]],[11,"get_style_margin_end","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_left","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_right","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_top","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_bottom","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_start","","",21,[[["self"]],["styleunit"]]],[11,"get_style_padding_end","","",21,[[["self"]],["styleunit"]]],[11,"get_style_border_left","","",21,[[["self"]],["f32"]]],[11,"get_style_border_right","","",21,[[["self"]],["f32"]]],[11,"get_style_border_top","","",21,[[["self"]],["f32"]]],[11,"get_style_border_bottom","","",21,[[["self"]],["f32"]]],[11,"get_style_border_start","","",21,[[["self"]],["f32"]]],[11,"get_style_border_end","","",21,[[["self"]],["f32"]]],[11,"get_style_width","","",21,[[["self"]],["styleunit"]]],[11,"get_style_height","","",21,[[["self"]],["styleunit"]]],[11,"get_style_min_width","","",21,[[["self"]],["styleunit"]]],[11,"get_style_min_height","","",21,[[["self"]],["styleunit"]]],[11,"get_style_max_width","","",21,[[["self"]],["styleunit"]]],[11,"get_style_max_height","","",21,[[["self"]],["styleunit"]]],[11,"get_layout_margin_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_start","","",21,[[["self"]],["f32"]]],[11,"get_layout_margin_end","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_start","","",21,[[["self"]],["f32"]]],[11,"get_layout_padding_end","","",21,[[["self"]],["f32"]]],[11,"get_layout_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_left","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_right","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_top","","",21,[[["self"]],["f32"]]],[11,"get_layout_border_bottom","","",21,[[["self"]],["f32"]]],[11,"get_layout_width","","",21,[[["self"]],["f32"]]],[11,"get_layout_height","","",21,[[["self"]],["f32"]]],[11,"get_layout_direction","","",21,[[["self"]],["direction"]]],[11,"is_dirty","","",21,[[["self"]],["bool"]]],[11,"copy_style","","",21,[[["self"],["node"]]]],[11,"set_display","","",21,[[["self"],["display"]]]],[11,"set_measure_func","","",21,[[["self"],["measurefunc"]]]],[11,"set_baseline_func","","",21,[[["self"],["baselinefunc"]]]],[11,"set_context","","",21,[[["self"],["option",["context"]]]]],[11,"get_context","","",21,[[["noderef"]],["option",["box"]]]],[11,"get_context_mut","","",21,[[["noderef"]],["option",["box"]]]],[11,"get_own_context","","",21,[[["self"]],["option",["box"]]]],[11,"get_own_context_mut","","",21,[[["self"]],["option",["box"]]]],[11,"drop_context","","",21,[[["self"]]]],[11,"drop","","",21,[[["self"]]]],[14,"unit","","",N,N],[14,"flex_style","","",N,N],[14,"style","","",N,N],[14,"make_styles","","",N,N],[11,"into","","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","yoga::types","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["align"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["align"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["align"]],["ordering"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["align"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["dimension"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["dimension"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["dimension"]],["ordering"]]],[11,"hash","","",2,N],[11,"clone","","",2,[[["self"]],["dimension"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["direction"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["direction"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["direction"]],["ordering"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["direction"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["display"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["display"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["display"]],["ordering"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["display"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["edge"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["edge"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["edge"]],["ordering"]]],[11,"hash","","",5,N],[11,"clone","","",5,[[["self"]],["edge"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["flexdirection"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["flexdirection"]],["option",["ordering"]]]],[11,"cmp","","",6,[[["self"],["flexdirection"]],["ordering"]]],[11,"hash","","",6,N],[11,"clone","","",6,[[["self"]],["flexdirection"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["justify"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["justify"]],["option",["ordering"]]]],[11,"cmp","","",7,[[["self"],["justify"]],["ordering"]]],[11,"hash","","",7,N],[11,"clone","","",7,[[["self"]],["justify"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["loglevel"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["loglevel"]],["option",["ordering"]]]],[11,"cmp","","",8,[[["self"],["loglevel"]],["ordering"]]],[11,"hash","","",8,N],[11,"clone","","",8,[[["self"]],["loglevel"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["measuremode"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["measuremode"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["measuremode"]],["ordering"]]],[11,"hash","","",9,N],[11,"clone","","",9,[[["self"]],["measuremode"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["nodetype"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["nodetype"]],["option",["ordering"]]]],[11,"cmp","","",10,[[["self"],["nodetype"]],["ordering"]]],[11,"hash","","",10,N],[11,"clone","","",10,[[["self"]],["nodetype"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["overflow"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["overflow"]],["option",["ordering"]]]],[11,"cmp","","",11,[[["self"],["overflow"]],["ordering"]]],[11,"hash","","",11,N],[11,"clone","","",11,[[["self"]],["overflow"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["positiontype"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["positiontype"]],["option",["ordering"]]]],[11,"cmp","","",12,[[["self"],["positiontype"]],["ordering"]]],[11,"hash","","",12,N],[11,"clone","","",12,[[["self"]],["positiontype"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["printoptions"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["printoptions"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["printoptions"]],["ordering"]]],[11,"hash","","",13,N],[11,"clone","","",13,[[["self"]],["printoptions"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["size"]],["bool"]]],[11,"ne","","",0,[[["self"],["size"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["size"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["size"]],["bool"]]],[11,"le","","",0,[[["self"],["size"]],["bool"]]],[11,"gt","","",0,[[["self"],["size"]],["bool"]]],[11,"ge","","",0,[[["self"],["size"]],["bool"]]],[11,"clone","","",0,[[["self"]],["size"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"ne","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["styleunit"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"le","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"gt","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"ge","","",14,[[["self"],["styleunit"]],["bool"]]],[11,"cmp","","",14,[[["self"],["styleunit"]],["ordering"]]],[11,"hash","","",14,N],[11,"clone","","",14,[[["self"]],["styleunit"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["wrap"]],["bool"]]],[11,"partial_cmp","","",15,[[["self"],["wrap"]],["option",["ordering"]]]],[11,"cmp","","",15,[[["self"],["wrap"]],["ordering"]]],[11,"hash","","",15,N],[11,"clone","","",15,[[["self"]],["wrap"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]]],"paths":[[3,"Size"],[4,"Align"],[4,"Dimension"],[4,"Direction"],[4,"Display"],[4,"Edge"],[4,"FlexDirection"],[4,"Justify"],[4,"LogLevel"],[4,"MeasureMode"],[4,"NodeType"],[4,"Overflow"],[4,"PositionType"],[4,"PrintOptions"],[4,"StyleUnit"],[4,"Wrap"],[4,"FlexStyle"],[3,"Layout"],[3,"Context"],[8,"Percent"],[8,"Point"],[3,"Node"]]};
initSearch(searchIndex);
