initSidebarItems({"enum":[["Appearance","Values for appearance styles properties"],["Case","What format of properties keys to use and check when parsing Current allowed: snake_case, camelCase, kebab-case or ignore case Default: camelCase"],["Layout","Values for layout styles properties"],["ParseError",""],["ProcessingError",""],["PropertyError",""],["PropertyParseType",""],["PropertyValue","Values for union of appearance and layout"],["SharedUnit",""],["SourceFormat","From what data format to parse, currently available: JSON, YAML Default: JSON"],["Variable",""]],"fn":[["pair_to_flex","Convertor: create FlexStyle by property key and unit value"]],"mod":[["property_types",""],["style_properties_repr",""]],"struct":[["CollectedStyle",""],["Context","Context with other needed info - for parse and prepares, aka dimensions screen, element measures, variables, and other."],["DefaultParseMiddleware","Default context representation for Parsing Trait Trait `TParseMiddleware` implemented in jss_derive as proc-macro"],["ParseOptions","Options for parse style from uniform functions"],["Properties",""],["PropertiesStore",""],["PropertyKeyInfo","Expanded info about property key - needed middleware, case, etc.."],["Style","Style element, with all element status, and context`s, with implementations of traits for parse unions of one element"],["StyleBuilder",""],["Stylesheet",""]],"type":[["PropertiesApperance","Link type for appearance `PropertiesStore`"],["PropertiesExpressions","Link type for calc expressions `PropertiesStore`"],["PropertiesLayout","Link type for layout `PropertiesStore`"]]});